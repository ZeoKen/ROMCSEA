CommonFun = {}
CommonFun.RoleData = {
  EATTRTYPE_STR = 100,
  EATTRTYPE_INT = 101,
  EATTRTYPE_AGI = 102,
  EATTRTYPE_DEX = 103,
  EATTRTYPE_VIT = 104,
  EATTRTYPE_LUK = 105,
  EATTRTYPE_ATK = 200,
  EATTRTYPE_ATKPER = 201,
  EATTRTYPE_DEF = 202,
  EATTRTYPE_DEFPER = 203,
  EATTRTYPE_MATK = 204,
  EATTRTYPE_MATKPER = 205,
  EATTRTYPE_MDEF = 206,
  EATTRTYPE_MDEFPER = 207,
  EATTRTYPE_MAXHP = 208,
  EATTRTYPE_MAXHPPER = 209,
  EATTRTYPE_MAXSP = 210,
  EATTRTYPE_MAXSPPER = 211,
  EATTRTYPE_HP = 212,
  EATTRTYPE_SP = 213,
  EATTRTYPE_HIT = 214,
  EATTRTYPE_FLEE = 215,
  EATTRTYPE_CRI = 216,
  EATTRTYPE_CRIRES = 217,
  EATTRTYPE_CRIDAMPER = 218,
  EATTRTYPE_CRIDEFPER = 219,
  EATTRTYPE_ATKSPD = 220,
  EATTRTYPE_MOVESPD = 221,
  EATTRTYPE_CASTSPD = 222,
  EATTRTYPE_RESTORESPD = 223,
  EATTRTYPE_SPRESTORESPD = 224,
  EATTRTYPE_RESTORESPDPER = 227,
  EATTRTYPE_SPRESTORESPDPER = 228,
  EATTRTYPE_CRIPER = 229,
  EATTRTYPE_MONMAXHPPER = 230,
  EATTRTYPE_MONCRIRES = 231,
  EATTRTYPE_BASEHP = 232,
  EATTRTYPE_REFINE = 300,
  EATTRTYPE_MREFINE = 301,
  EATTRTYPE_MOVESPDPER = 302,
  EATTRTYPE_EQUIPASPD = 303,
  EATTRTYPE_SKILLASPD = 304,
  EATTRTYPE_HITPER = 305,
  EATTRTYPE_FLEEPER = 306,
  EATTRTYPE_STRPER = 307,
  EATTRTYPE_INTPER = 308,
  EATTRTYPE_AGIPER = 309,
  EATTRTYPE_DEXPER = 310,
  EATTRTYPE_VITPER = 311,
  EATTRTYPE_LUKPER = 312,
  EATTRTYPE_SHOWATK = 400,
  EATTRTYPE_SHOWDEF = 401,
  EATTRTYPE_SHOWMATK = 402,
  EATTRTYPE_SHOWMDEF = 403,
  EATTRTYPE_SHOWMAXHP = 404,
  EATTRTYPE_SHOWMAXSP = 405,
  EATTRTYPE_SHOWHIT = 406,
  EATTRTYPE_SHOWFLEE = 407,
  EATTRTYPE_SHOWCRI = 408,
  EATTRTYPE_SHOWCRIRES = 409,
  EATTRTYPE_SHOWATKSPD = 410,
  EATTRTYPE_SHOWMOVESPD = 411,
  EATTRTYPE_SHOWCASTSPD = 412,
  EATTRTYPE_SHOWRESTORESPD = 413,
  EATTRTYPE_DAMREDUC = 414,
  EATTRTYPE_MDAMREDUC = 415,
  EATTRTYPE_IgnoreDef = 416,
  EATTRTYPE_IGNOREMDEF = 417,
  EATTRTYPE_DAMINCREASE = 420,
  EATTRTYPE_MDAMINCREASE = 421,
  EATTRTYPE_SHORTRANGEDAMREDUC = 427,
  EATTRTYPE_LONGRANGEDAMREDUC = 428,
  EATTRTYPE_LONGRANGEMDAMREDUC = 429,
  EATTRTYPE_IGNOREEQUIPDEF = 430,
  EATTRTYPE_SHAPEATKPER = 431,
  EATTRTYPE_DAMSPIKE = 432,
  EATTRTYPE_MDAMSPIKE = 433,
  EATTRTYPE_REFINEDAMREDUC = 434,
  EATTRTYPE_REFINEMDAMREDUC = 435,
  EATTRTYPE_NORMALATKDAM = 450,
  EATTRTYPE_NORMALATKRES = 451,
  EATTRTYPE_SKILLDAM = 452,
  EATTRTYPE_SKILLRES = 453,
  EATTRTYPE_BEWINDDAMPER = 712,
  EATTRTYPE_BEEARTHDAMPER = 713,
  EATTRTYPE_BEWATERDAMPER = 714,
  EATTRTYPE_BEFIREDAMPER = 715,
  EATTRTYPE_BENEUTRALDAMPER = 716,
  EATTRTYPE_BEHOLYDAMPER = 717,
  EATTRTYPE_BESHADOWDAMPER = 718,
  EATTRTYPE_BEGHOSTDAMPER = 719,
  EATTRTYPE_BEUNDEADDAMPER = 720,
  EATTRTYPE_BEPOISONDAMPER = 721,
  EATTRTYPE_WINDATK = 722,
  EATTRTYPE_EARTHATK = 723,
  EATTRTYPE_FIREATK = 724,
  EATTRTYPE_WATERATK = 725,
  EATTRTYPE_NEUTRALATK = 726,
  EATTRTYPE_HOLYATK = 727,
  EATTRTYPE_DARKATK = 728,
  EATTRTYPE_GHOSTATK = 736,
  EATTRTYPE_UNDEADATK = 737,
  EATTRTYPE_POISONINGATK = 738,
  EATTRTYPE_DEMIHUMANDAMPER = 801,
  EATTRTYPE_MIDDAMPER = 902,
  EATTRTYPE_STATEDEF = 1019,
  EATTRTYPE_HEALENCPER = 1111,
  EATTRTYPE_MOVESPD_LIMIT = 1217
}
CommonFun.data32 = {}
for i = 1, 32 do
  CommonFun.data32[i] = 2 ^ (32 - i)
end
local BaseLvAtkRate1 = {
  [1] = 0,
  [11] = 0,
  [12] = 0,
  [13] = 0,
  [14] = 0,
  [72] = 0,
  [73] = 0,
  [74] = 0,
  [21] = 0,
  [22] = 0,
  [23] = 0,
  [24] = 0,
  [82] = 0,
  [83] = 0,
  [84] = 0,
  [31] = 2,
  [32] = 3,
  [33] = 4,
  [34] = 4,
  [92] = 3,
  [93] = 4,
  [94] = 4,
  [41] = 0,
  [42] = 0,
  [43] = 0,
  [44] = 0,
  [102] = 0,
  [103] = 0,
  [104] = 0,
  [112] = 0,
  [113] = 0,
  [114] = 0,
  [51] = 0,
  [52] = 0,
  [53] = 0,
  [54] = 0,
  [122] = 3,
  [123] = 4,
  [124] = 4,
  [61] = 0,
  [62] = 0,
  [63] = 0,
  [64] = 0,
  [132] = 0,
  [133] = 0,
  [134] = 0
}
local BaseLvAtkRate2 = {
  [1] = 0,
  [11] = 0,
  [12] = 0,
  [13] = 0,
  [14] = 0,
  [72] = 0,
  [73] = 0,
  [74] = 0,
  [21] = 0,
  [22] = 0,
  [23] = 0,
  [24] = 0,
  [82] = 0,
  [83] = 0,
  [84] = 0,
  [31] = 0,
  [32] = 0,
  [33] = 0,
  [34] = 0,
  [92] = 0,
  [93] = 0,
  [94] = 0,
  [41] = 0,
  [42] = 0,
  [43] = 0,
  [44] = 0,
  [102] = 0,
  [103] = 0,
  [104] = 0,
  [112] = 0,
  [113] = 0,
  [114] = 0,
  [51] = 0,
  [52] = 0,
  [53] = 0,
  [54] = 0,
  [122] = 0,
  [123] = 0,
  [124] = 0,
  [61] = 0,
  [62] = 0,
  [63] = 0,
  [64] = 0,
  [132] = 0,
  [133] = 0,
  [134] = 0
}
local BaseLvDefRate = {
  [1] = 0,
  [11] = 0,
  [12] = 0,
  [13] = 0,
  [14] = 0,
  [72] = 1,
  [73] = 1,
  [74] = 1,
  [21] = 0,
  [22] = 0,
  [23] = 0,
  [24] = 0,
  [82] = 0,
  [83] = 0,
  [84] = 0,
  [31] = 0,
  [32] = 0,
  [33] = 0,
  [34] = 0,
  [92] = 0,
  [93] = 0,
  [94] = 0,
  [41] = 0,
  [42] = 0,
  [43] = 0,
  [44] = 0,
  [102] = 0,
  [103] = 0,
  [104] = 0,
  [112] = 0,
  [113] = 0,
  [114] = 0,
  [51] = 0,
  [52] = 0,
  [53] = 0,
  [54] = 0,
  [122] = 0,
  [123] = 0,
  [124] = 0,
  [61] = 0,
  [62] = 0,
  [63] = 0,
  [64] = 0,
  [132] = 0,
  [133] = 0,
  [134] = 0
}
local BaseLvMDefRate = {
  [1] = 0,
  [11] = 0,
  [12] = 0,
  [13] = 0,
  [14] = 0,
  [72] = 0,
  [73] = 0,
  [74] = 0,
  [21] = 0,
  [22] = 0,
  [23] = 0,
  [24] = 0,
  [82] = 0,
  [83] = 0,
  [84] = 0,
  [31] = 0,
  [32] = 0,
  [33] = 0,
  [34] = 0,
  [92] = 0,
  [93] = 0,
  [94] = 0,
  [41] = 0,
  [42] = 0,
  [43] = 0,
  [44] = 0,
  [102] = 0,
  [103] = 0,
  [104] = 0,
  [112] = 0,
  [113] = 0,
  [114] = 0,
  [51] = 0,
  [52] = 0,
  [53] = 0,
  [54] = 0,
  [122] = 0,
  [123] = 0,
  [124] = 0,
  [61] = 0,
  [62] = 0,
  [63] = 0,
  [64] = 0,
  [132] = 0,
  [133] = 0,
  [134] = 0
}
local BaseLvRate = {
  [1] = 5,
  [11] = 20,
  [12] = 20,
  [13] = 20,
  [14] = 20,
  [72] = 20,
  [73] = 20,
  [74] = 20,
  [21] = 10,
  [22] = 10,
  [23] = 10,
  [24] = 12,
  [82] = 10,
  [83] = 10,
  [84] = 12,
  [31] = 12,
  [32] = 12,
  [33] = 12,
  [34] = 14,
  [92] = 12,
  [93] = 12,
  [94] = 14,
  [41] = 12,
  [42] = 12,
  [43] = 12,
  [44] = 16,
  [102] = 12,
  [103] = 12,
  [104] = 16,
  [112] = 12,
  [113] = 12,
  [114] = 16,
  [51] = 5,
  [52] = 5,
  [53] = 5,
  [54] = 14,
  [122] = 5,
  [123] = 5,
  [124] = 16,
  [61] = 12,
  [62] = 12,
  [63] = 12,
  [64] = 14,
  [132] = 12,
  [133] = 12,
  [134] = 16
}
local HpRate = {
  [1] = 0,
  [11] = 1.5,
  [12] = 1.75,
  [13] = 2,
  [14] = 3,
  [72] = 4,
  [73] = 5,
  [74] = 5,
  [21] = 0.9,
  [22] = 1.1,
  [23] = 1.2,
  [24] = 2.1,
  [82] = 1.1,
  [83] = 1.2,
  [84] = 2.1,
  [31] = 1.1,
  [32] = 1.3,
  [33] = 1.5,
  [34] = 2.3,
  [92] = 1.3,
  [93] = 1.5,
  [94] = 2.4,
  [41] = 1,
  [42] = 1.2,
  [43] = 1.3,
  [44] = 2.1,
  [102] = 1.2,
  [103] = 1.3,
  [104] = 2.1,
  [112] = 1.2,
  [113] = 1.3,
  [114] = 2.1,
  [51] = 0.9,
  [52] = 1.1,
  [53] = 1.2,
  [54] = 2.2,
  [122] = 1.2,
  [123] = 1.4,
  [124] = 2.1,
  [61] = 1,
  [62] = 1.4,
  [63] = 1.6,
  [64] = 2.5,
  [132] = 1.4,
  [133] = 1.6,
  [134] = 2.2
}
local BaseHp = {
  [1] = 0,
  [11] = 400,
  [12] = 400,
  [13] = 400,
  [14] = 1000,
  [72] = 1000,
  [73] = 1500,
  [74] = 1500,
  [21] = 0,
  [22] = 0,
  [23] = 0,
  [24] = 1000,
  [82] = 0,
  [83] = 0,
  [84] = 1000,
  [31] = 0,
  [32] = 0,
  [33] = 0,
  [34] = 1000,
  [92] = 0,
  [93] = 0,
  [94] = 1000,
  [41] = 0,
  [42] = 0,
  [43] = 0,
  [44] = 1000,
  [102] = 0,
  [103] = 0,
  [104] = 1000,
  [112] = 0,
  [113] = 0,
  [114] = 1000,
  [51] = 0,
  [52] = 0,
  [53] = 0,
  [54] = 1500,
  [122] = 300,
  [123] = 300,
  [124] = 1000,
  [61] = 0,
  [62] = 0,
  [63] = 0,
  [64] = 1000,
  [132] = 0,
  [133] = 0,
  [134] = 1000
}
local BaseJobAtkSpd = {
  [1] = 156,
  [11] = 153,
  [12] = 156,
  [13] = 156,
  [14] = 156,
  [72] = 156,
  [73] = 156,
  [74] = 156,
  [21] = 146,
  [22] = 146,
  [23] = 151,
  [24] = 151,
  [82] = 156,
  [83] = 156,
  [84] = 156,
  [31] = 156,
  [32] = 156,
  [33] = 156,
  [34] = 156,
  [92] = 156,
  [93] = 156,
  [94] = 156,
  [41] = 156,
  [42] = 156,
  [43] = 156,
  [44] = 156,
  [102] = 156,
  [103] = 156,
  [104] = 156,
  [112] = 156,
  [113] = 156,
  [114] = 156,
  [51] = 156,
  [52] = 156,
  [53] = 151,
  [54] = 151,
  [122] = 156,
  [123] = 156,
  [124] = 156,
  [61] = 156,
  [62] = 156,
  [63] = 156,
  [64] = 156,
  [132] = 156,
  [133] = 156,
  [134] = 156
}
local SpearAtkSpd = {
  [1] = 0,
  [11] = -17,
  [12] = -15,
  [13] = -8,
  [14] = -8,
  [72] = -13,
  [73] = -10,
  [74] = -10,
  [21] = 0,
  [22] = 0,
  [23] = 0,
  [24] = 0,
  [82] = 0,
  [83] = 0,
  [84] = 0,
  [31] = 0,
  [32] = 0,
  [33] = 0,
  [34] = 0,
  [92] = 0,
  [93] = 0,
  [94] = 0,
  [41] = 0,
  [42] = 0,
  [43] = 0,
  [44] = 0,
  [102] = 0,
  [103] = 0,
  [104] = 0,
  [112] = 0,
  [113] = 0,
  [114] = 0,
  [51] = 0,
  [52] = 0,
  [53] = 0,
  [54] = 0,
  [122] = 0,
  [123] = 0,
  [124] = 0,
  [61] = 0,
  [62] = 0,
  [63] = 0,
  [64] = 0,
  [132] = 0,
  [133] = 0,
  [134] = 0
}
local SwordAtkSpd = {
  [1] = -17,
  [11] = -7,
  [12] = -5,
  [13] = -12,
  [14] = -12,
  [72] = -3,
  [73] = -5,
  [74] = -5,
  [21] = 0,
  [22] = 0,
  [23] = 0,
  [24] = 0,
  [82] = 0,
  [83] = 0,
  [84] = 0,
  [31] = -10,
  [32] = -10,
  [33] = -25,
  [34] = -25,
  [92] = -10,
  [93] = -25,
  [94] = -25,
  [41] = 0,
  [42] = 0,
  [43] = 0,
  [44] = 0,
  [102] = 0,
  [103] = 0,
  [104] = 0,
  [112] = 0,
  [113] = 0,
  [114] = 0,
  [51] = 0,
  [52] = 0,
  [53] = 0,
  [54] = 0,
  [122] = 0,
  [123] = 0,
  [124] = 0,
  [61] = -12,
  [62] = -10,
  [63] = -25,
  [64] = -25,
  [132] = -10,
  [133] = -25,
  [134] = -25
}
local MaceAtkSpd = {
  [1] = -10,
  [11] = -10,
  [12] = -5,
  [13] = -5,
  [14] = -5,
  [72] = -5,
  [73] = -4,
  [74] = -4,
  [21] = 0,
  [22] = 0,
  [23] = 0,
  [24] = 0,
  [82] = 0,
  [83] = 0,
  [84] = 0,
  [31] = 0,
  [32] = 0,
  [33] = 0,
  [34] = 0,
  [92] = 0,
  [93] = 0,
  [94] = 0,
  [41] = 0,
  [42] = 0,
  [43] = 0,
  [44] = 0,
  [102] = 0,
  [103] = 0,
  [104] = 0,
  [112] = 0,
  [113] = 0,
  [114] = 0,
  [51] = -5,
  [52] = -3,
  [53] = 0,
  [54] = 0,
  [122] = -3,
  [123] = -5,
  [124] = -5,
  [61] = -10,
  [62] = -8,
  [63] = -8,
  [64] = -8,
  [132] = -8,
  [133] = -8,
  [134] = -8
}
local KatarAtkSpd = {
  [1] = 0,
  [11] = 0,
  [12] = 0,
  [13] = 0,
  [14] = 0,
  [72] = 0,
  [73] = 0,
  [74] = 0,
  [21] = 0,
  [22] = 0,
  [23] = 0,
  [24] = 0,
  [82] = 0,
  [83] = 0,
  [84] = 0,
  [31] = 0,
  [32] = -2,
  [33] = -2,
  [34] = -2,
  [92] = 0,
  [93] = 0,
  [94] = 0,
  [41] = 0,
  [42] = 0,
  [43] = 0,
  [44] = 0,
  [102] = 0,
  [103] = 0,
  [104] = 0,
  [112] = 0,
  [113] = 0,
  [114] = 0,
  [51] = 0,
  [52] = 0,
  [53] = 0,
  [54] = 0,
  [122] = 0,
  [123] = 0,
  [124] = 0,
  [61] = 0,
  [62] = 0,
  [63] = 0,
  [64] = 0,
  [132] = 0,
  [133] = 0,
  [134] = 0
}
local BowAtkSpd = {
  [1] = 0,
  [11] = 0,
  [12] = 0,
  [13] = 0,
  [14] = 0,
  [72] = 0,
  [73] = 0,
  [74] = 0,
  [21] = 0,
  [22] = 0,
  [23] = 0,
  [24] = 0,
  [82] = 0,
  [83] = 0,
  [84] = 0,
  [31] = 0,
  [32] = 0,
  [33] = 0,
  [34] = 0,
  [92] = -10,
  [93] = -10,
  [94] = -10,
  [41] = -10,
  [42] = -8,
  [43] = -9,
  [44] = -9,
  [102] = 0,
  [103] = 0,
  [104] = 0,
  [112] = 0,
  [113] = 0,
  [114] = 0,
  [51] = 0,
  [52] = 0,
  [53] = 0,
  [54] = 0,
  [122] = 0,
  [123] = 0,
  [124] = 0,
  [61] = 0,
  [62] = 0,
  [63] = 0,
  [64] = 0,
  [132] = 0,
  [133] = 0,
  [134] = 0
}
local StaffAtkSpd = {
  [1] = -25,
  [11] = 0,
  [12] = 0,
  [13] = 0,
  [14] = 0,
  [72] = 0,
  [73] = 0,
  [74] = 0,
  [21] = -5,
  [22] = -3,
  [23] = -5,
  [24] = -5,
  [82] = 0,
  [83] = 0,
  [84] = 0,
  [31] = 0,
  [32] = 0,
  [33] = 0,
  [34] = 0,
  [92] = 0,
  [93] = 0,
  [94] = 0,
  [41] = 0,
  [42] = 0,
  [43] = 0,
  [44] = 0,
  [102] = 0,
  [103] = 0,
  [104] = 0,
  [112] = 0,
  [113] = 0,
  [114] = 0,
  [51] = -20,
  [52] = -20,
  [53] = -15,
  [54] = -15,
  [122] = -20,
  [123] = -10,
  [124] = -10,
  [61] = -10,
  [62] = -8,
  [63] = -8,
  [64] = -8,
  [132] = 0,
  [133] = 0,
  [134] = 0
}
local KnifeAtkSpd = {
  [1] = -15,
  [11] = -7,
  [12] = -9,
  [13] = -10,
  [14] = -10,
  [72] = -8,
  [73] = -7,
  [74] = -7,
  [21] = 0,
  [22] = -4,
  [23] = -7,
  [24] = -7,
  [82] = 0,
  [83] = 0,
  [84] = 0,
  [31] = -8,
  [32] = -2,
  [33] = -2,
  [34] = -2,
  [92] = -2,
  [93] = -2,
  [94] = -2,
  [41] = -15,
  [42] = -13,
  [43] = -10,
  [44] = -10,
  [102] = 0,
  [103] = 0,
  [104] = 0,
  [112] = 0,
  [113] = 0,
  [114] = 0,
  [51] = 0,
  [52] = 0,
  [53] = 0,
  [54] = 0,
  [122] = 0,
  [123] = 0,
  [124] = 0,
  [61] = -12,
  [62] = -10,
  [63] = -20,
  [64] = -20,
  [132] = -10,
  [133] = -20,
  [134] = -20
}
local AxeAtkSpd = {
  [1] = -15,
  [11] = -20,
  [12] = -15,
  [13] = -12,
  [14] = -12,
  [72] = -20,
  [73] = -15,
  [74] = -15,
  [21] = 0,
  [22] = 0,
  [23] = 0,
  [24] = 0,
  [82] = 0,
  [83] = 0,
  [84] = 0,
  [31] = 0,
  [32] = 0,
  [33] = 0,
  [34] = 0,
  [92] = 0,
  [93] = 0,
  [94] = 0,
  [41] = 0,
  [42] = 0,
  [43] = 0,
  [44] = 0,
  [102] = 0,
  [103] = 0,
  [104] = 0,
  [112] = 0,
  [113] = 0,
  [114] = 0,
  [51] = 0,
  [52] = 0,
  [53] = 0,
  [54] = 0,
  [122] = 0,
  [123] = 0,
  [124] = 0,
  [61] = -15,
  [62] = -13,
  [63] = -10,
  [64] = -10,
  [132] = -13,
  [133] = -10,
  [134] = -10
}
local FistAtkSpd = {
  [1] = 0,
  [11] = 0,
  [12] = 0,
  [13] = 0,
  [14] = 0,
  [72] = 0,
  [73] = 0,
  [74] = 0,
  [21] = 0,
  [22] = 0,
  [23] = 0,
  [24] = 0,
  [82] = 0,
  [83] = 0,
  [84] = 0,
  [31] = 0,
  [32] = 0,
  [33] = 0,
  [34] = 0,
  [92] = 0,
  [93] = 0,
  [94] = 0,
  [41] = 0,
  [42] = 0,
  [43] = 0,
  [44] = 0,
  [102] = 0,
  [103] = 0,
  [104] = 0,
  [112] = 0,
  [113] = 0,
  [114] = 0,
  [51] = 0,
  [52] = -20,
  [53] = -5,
  [54] = -5,
  [122] = 0,
  [123] = -1,
  [124] = -1,
  [61] = 0,
  [62] = 0,
  [63] = 0,
  [64] = 0,
  [132] = 0,
  [133] = 0,
  [134] = 0
}
local ShieldAtkSpd = {
  [1] = 0,
  [11] = 0,
  [12] = 0,
  [13] = 0,
  [14] = 0,
  [72] = 0,
  [73] = 0,
  [74] = 0,
  [21] = 0,
  [22] = 0,
  [23] = 0,
  [24] = 0,
  [82] = 0,
  [83] = 0,
  [84] = 0,
  [31] = 0,
  [32] = 0,
  [33] = 0,
  [34] = 0,
  [92] = 0,
  [93] = 0,
  [94] = 0,
  [41] = 0,
  [42] = 0,
  [43] = 0,
  [44] = 0,
  [102] = 0,
  [103] = 0,
  [104] = 0,
  [112] = 0,
  [113] = 0,
  [114] = 0,
  [51] = 0,
  [52] = 0,
  [53] = 0,
  [54] = 0,
  [122] = 0,
  [123] = 0,
  [124] = 0,
  [61] = 0,
  [62] = 0,
  [63] = 0,
  [64] = 0,
  [132] = 0,
  [133] = 0,
  [134] = 0
}
local WeaponShapeCorrection = {
  [0] = {
    [1] = 1,
    [2] = 1,
    [3] = 1
  },
  [170] = {
    [1] = 0.75,
    [2] = 0.75,
    [3] = 1
  },
  [180] = {
    [1] = 0.75,
    [2] = 1,
    [3] = 0.75
  },
  [190] = {
    [1] = 1,
    [2] = 1,
    [3] = 1
  },
  [200] = {
    [1] = 0.75,
    [2] = 1,
    [3] = 0.75
  },
  [210] = {
    [1] = 1,
    [2] = 1,
    [3] = 0.75
  },
  [220] = {
    [1] = 0.75,
    [2] = 1,
    [3] = 1
  },
  [230] = {
    [1] = 0.5,
    [2] = 0.75,
    [3] = 1
  },
  [240] = {
    [1] = 1,
    [2] = 1,
    [3] = 1
  },
  [250] = {
    [1] = 1,
    [2] = 0.75,
    [3] = 0.5
  },
  [260] = {
    [1] = 0.75,
    [2] = 1,
    [3] = 0.75
  },
  [270] = {
    [1] = 0.75,
    [2] = 1,
    [3] = 0.75
  },
  [280] = {
    [1] = 1,
    [2] = 0.75,
    [3] = 0.5
  },
  [290] = {
    [1] = 1,
    [2] = 0.75,
    [3] = 0.5
  },
  [300] = {
    [1] = 1,
    [2] = 1,
    [3] = 1
  },
  [310] = {
    [1] = 1,
    [2] = 1,
    [3] = 1
  },
  [320] = {
    [1] = 1,
    [2] = 1,
    [3] = 1
  }
}
CommonFun.LaunchType = {CloseAttack = 1, LongAttack = 2}
CommonFun.RollType = {Attack = 1, Magic = 2}
CommonFun.Race = {
  Brute = 1,
  DemiHuman = 2,
  Demon = 3,
  Plant = 4,
  DeadLess = 5,
  Formless = 6,
  Fish = 7,
  Angel = 8,
  Insect = 9,
  Dragon = 10
}
CommonFun.BossType = {Normal = 0, MVPMini = 1}
CommonFun.RaceProps = {
  [CommonFun.Race.Brute] = {
    "BruteDamPer",
    "BruteResPer"
  },
  [CommonFun.Race.DemiHuman] = {
    "DemiHumanDamPer",
    "DemiHumanResPer"
  },
  [CommonFun.Race.Demon] = {
    "DemonDamPer",
    "DemonResPer"
  },
  [CommonFun.Race.Plant] = {
    "PlantDamPer",
    "PlantResPer"
  },
  [CommonFun.Race.DeadLess] = {
    "DeadLessDamPer",
    "DeadLessResPer"
  },
  [CommonFun.Race.Formless] = {
    "FormlessDamPer",
    "FormlessResPer"
  },
  [CommonFun.Race.Fish] = {"FishDamPer", "FishResPer"},
  [CommonFun.Race.Angel] = {
    "AngelDamPer",
    "AngelResPer"
  },
  [CommonFun.Race.Insect] = {
    "InsectDamPer",
    "InsectResPer"
  },
  [CommonFun.Race.Dragon] = {
    "DragonDamPer",
    "DragonResPer"
  }
}
CommonFun.Nature = {
  Wind = 1,
  Earth = 2,
  Water = 3,
  Fire = 4,
  Neutral = 5,
  Holy = 6,
  Shadow = 7,
  Ghost = 8,
  Undead = 9,
  Poison = 10
}
CommonFun.NatureProps = {
  [CommonFun.Nature.Wind] = {
    "WindDamPer",
    "BeWindDamPer",
    "WindAtk"
  },
  [CommonFun.Nature.Earth] = {
    "EarthDamPer",
    "BeEarthDamPer",
    "EarthAtk"
  },
  [CommonFun.Nature.Water] = {
    "WaterDamPer",
    "BeWaterDamPer",
    "WaterAtk"
  },
  [CommonFun.Nature.Fire] = {
    "FireDamPer",
    "BeFireDamPer",
    "FireAtk"
  },
  [CommonFun.Nature.Neutral] = {
    "NeutralDamPer",
    "BeNeutralDamPer",
    "NeutralAtk"
  },
  [CommonFun.Nature.Holy] = {
    "HolyDamPer",
    "BeHolyDamPer",
    "HolyAtk"
  },
  [CommonFun.Nature.Shadow] = {
    "ShadowDamPer",
    "BeShadowDamPer",
    "DarkAtk"
  },
  [CommonFun.Nature.Ghost] = {
    "GhostDamPer",
    "BeGhostDamPer",
    "GhostAtk"
  },
  [CommonFun.Nature.Undead] = {
    "UndeadDamPer",
    "BeUndeadDamPer",
    "UndeadAtk"
  },
  [CommonFun.Nature.Poison] = {
    "PoisonDamPer",
    "BePoisonDamPer",
    "PoisoningAtk"
  }
}
CommonFun.Shape = {
  S = "S",
  M = "M",
  L = "L"
}
CommonFun.ShapeProps = {
  [CommonFun.Shape.S] = {
    "SmallDamPer",
    "SmallResPer"
  },
  [CommonFun.Shape.M] = {"MidDamPer", "MidResPer"},
  [CommonFun.Shape.L] = {"BigDamPer", "BigResPer"}
}
CommonFun.AttrEffect = {
  NoMagicDamage = 1,
  NoPhysicalDamage = 2,
  NoHpRecover = 3,
  NoSpRecover = 4,
  NoChantBreak = 5,
  IgnoreRaceDamage = 6,
  IgnoreBodyDamage = 7,
  IgnoreAttrDamage = 8,
  IgnoreNearNormalSkill = 9,
  MustHitAndCri = 10,
  BattleInRiding = 11,
  IgnoreNearPhysicalSkill = 12,
  IgnoreFarSkill = 13,
  NextAttackIncrease = 14,
  TriggerTrapMark = 15,
  BuffPriorArrow = 16,
  HideStrengthEffect = 17,
  HuaShouStatus = 18,
  BaXieZhiZhen = 19,
  InGodStatus = 20,
  KuangJiDam = 21,
  GuaiWuHuJiDam = 22,
  DuRenAndWuYingDam = 23,
  XuShouDam = 24,
  HeiAnDam = 25,
  NormalSkillDam = 26,
  RangeDam = 27,
  MustNotCri = 28,
  Hualiduanjian = 29,
  Shandiyouxiazhuang = 30
}
CommonFun.AttrEffect2 = {
  Shiziqumo = 1,
  NextPointSkillFar = 2,
  PoisinDamNoUse = 3,
  NoDeath = 4,
  MushiCrit = 5,
  NoSpAdd = 6,
  AutoDef = 7,
  NextSkillNoReady = 8,
  NoMonsterAtk = 9,
  BoliBianshen = 10,
  GonghuiBianshen = 11,
  MDamageTo1 = 12,
  DamageTo1 = 13,
  DiffZoneNoDam = 14,
  BCatBianshen = 15,
  NoEnemySkillSelected = 16,
  WeaponBlock = 17,
  isRideWolf = 18,
  NotCure = 19,
  BeMagicMachine = 20,
  NotHide = 21,
  Suspend = 22,
  UltraMan = 23,
  NoBuffAdd = 24,
  NoDeBuffAdd = 25,
  NoButton = 27,
  OverloadState = 28
}
CommonFun.AttrEffect3 = {
  HawkEye = 1,
  NoReflectDamage = 2,
  NoReflectMagicDamage = 3,
  ForbidGainBuffDel = 4,
  MustHit = 5,
  NotSelfHeal = 6,
  Disappear = 7,
  ElectricEnergy = 8,
  ForbidTeamBuffDel = 9,
  AngelFeather = 10,
  CantReflect = 11,
  CantBlock = 12,
  CantNoDeath = 13,
  EarthField = 14,
  NextLockedSkillFar = 15,
  Darkness = 17
}
CommonFun.StateEffect = {
  Poison = 1,
  Blood = 2,
  Burn = 3,
  Dizzy = 4,
  Freeze = 5,
  Stone = 6,
  Sleep = 7,
  Fear = 8,
  NoMove = 9,
  Silence = 10,
  Curse = 11,
  Dark = 12
}
CommonFun.AttrFunction = {
  HandEnable = 1,
  ShootGhost = 2,
  CameraDizzy = 3,
  JustInViceZone = 4,
  FieldStarBossAttackForbid = 5,
  StarBossAttackForbid = 6,
  MvpLimit = 7,
  MiniLimit = 8
}
CommonFun.ArrowAttr = {
  {12500, 5},
  {12501, 4},
  {12502, 6},
  {12503, 3},
  {12504, 2},
  {12505, 1},
  {12506, 8},
  {12507, 7}
}

function CommonFun.GetAtkAttrByArrow(itemid)
  if CommonFun.ArrowAttr == nil then
    return 0
  end
  for key, val in pairs(CommonFun.ArrowAttr) do
    if val[1] == itemid then
      return val[2]
    end
  end
  return 0
end

CommonFun.DamageType = {
  None = 0,
  Normal = 1,
  Crit = 2,
  Miss = 3,
  Treatment = 4,
  Block = 5,
  Barrier = 6,
  ErLianJi = 7,
  Normal_Sp = 8,
  Treatment_Sp = 9,
  AutoBlock = 10,
  WeaponBlock = 11,
  DefMagic = 12,
  DefPhysics = 13
}
CommonFun.AutoItemSkills = {
  [1] = {
    interval = 0.3,
    skills = {
      [1] = {
        skill = 50001,
        items = {
          [1] = 12117,
          [2] = 12325,
          [3] = 12119
        },
        Condition = function(cmd)
          if cmd.PVP or cmd.GVG or cmd.MiniAndMVPAroundMe(10) then
            return 0.3 > cmd.GetMyRelativeHP()
          end
          return false
        end
      },
      [2] = {
        skill = 50000,
        items = {
          [1] = 12001,
          [2] = 12003,
          [3] = 12002,
          [4] = 12023
        },
        Condition = function(cmd)
          return 0.3 > cmd.GetMyRelativeHP()
        end
      }
    }
  },
  [2] = {
    interval = 0.3,
    skills = {
      [1] = {
        skill = 50001,
        items = {
          [1] = 12117,
          [2] = 12325,
          [3] = 12119
        },
        Condition = function(cmd)
          if cmd.PVP or cmd.GVG or cmd.MiniAndMVPAroundMe(10) then
            return 0.3 > cmd.GetMyRelativeSP()
          end
          return false
        end
      },
      [2] = {
        skill = 50000,
        items = {
          [1] = 12024,
          [2] = 12310,
          [3] = 12121
        },
        Condition = function(cmd)
          return 0.3 > cmd.GetMyRelativeSP()
        end
      }
    }
  }
}

function CommonFun.calAttrPoint(curPoint, joblv, job, attr)
  local result = {}
  if job == 0 then
    if joblv == 1 then
      return curPoint + joblv
    elseif joblv == 2 then
      if attr == "Str" then
        return curPoint + 2
      elseif attr == "Vit" then
        return curPoint + 2
      elseif attr == "Int" then
        return curPoint + 1
      elseif attr == "Dex" then
        return curPoint + 1
      elseif attr == "Agi" then
        return curPoint + 1
      elseif attr == "Luk" then
        return curPoint + 1
      end
    elseif joblv == 3 then
      if attr == "Str" then
        return curPoint + 2
      elseif attr == "Vit" then
        return curPoint + 2
      elseif attr == "Int" then
        return curPoint + 2
      elseif attr == "Dex" then
        return curPoint + 2
      elseif attr == "Agi" then
        return curPoint + 1
      elseif attr == "Luk" then
        return curPoint + 1
      end
    elseif joblv == 4 then
      if attr == "Str" then
        return curPoint + 2
      elseif attr == "Vit" then
        return curPoint + 2
      elseif attr == "Int" then
        return curPoint + 2
      elseif attr == "Dex" then
        return curPoint + 2
      elseif attr == "Agi" then
        return curPoint + 2
      elseif attr == "Luk" then
        return curPoint + 2
      end
    elseif joblv == 5 then
      if attr == "Str" then
        return curPoint + 3
      elseif attr == "Vit" then
        return curPoint + 3
      elseif attr == "Int" then
        return curPoint + 2
      elseif attr == "Dex" then
        return curPoint + 2
      elseif attr == "Agi" then
        return curPoint + 2
      elseif attr == "Luk" then
        return curPoint + 2
      end
    elseif joblv == 6 then
      if attr == "Str" then
        return curPoint + 3
      elseif attr == "Vit" then
        return curPoint + 3
      elseif attr == "Int" then
        return curPoint + 3
      elseif attr == "Dex" then
        return curPoint + 3
      elseif attr == "Agi" then
        return curPoint + 2
      elseif attr == "Luk" then
        return curPoint + 2
      end
    elseif joblv == 7 then
      if attr == "Str" then
        return curPoint + 3
      elseif attr == "Vit" then
        return curPoint + 3
      elseif attr == "Int" then
        return curPoint + 3
      elseif attr == "Dex" then
        return curPoint + 3
      elseif attr == "Agi" then
        return curPoint + 3
      elseif attr == "Luk" then
        return curPoint + 3
      end
    elseif joblv == 8 then
      if attr == "Str" then
        return curPoint + 4
      elseif attr == "Vit" then
        return curPoint + 4
      elseif attr == "Int" then
        return curPoint + 3
      elseif attr == "Dex" then
        return curPoint + 3
      elseif attr == "Agi" then
        return curPoint + 3
      elseif attr == "Luk" then
        return curPoint + 3
      end
    elseif joblv == 9 then
      if attr == "Str" then
        return curPoint + 4
      elseif attr == "Vit" then
        return curPoint + 4
      elseif attr == "Int" then
        return curPoint + 4
      elseif attr == "Dex" then
        return curPoint + 4
      elseif attr == "Agi" then
        return curPoint + 3
      elseif attr == "Luk" then
        return curPoint + 3
      end
    elseif joblv == 10 then
      if attr == "Str" then
        return curPoint + 4
      elseif attr == "Vit" then
        return curPoint + 4
      elseif attr == "Int" then
        return curPoint + 4
      elseif attr == "Dex" then
        return curPoint + 4
      elseif attr == "Agi" then
        return curPoint + 4
      elseif attr == "Luk" then
        return curPoint + 4
      end
    end
  end
  return curPoint + CommonFun.calProfessionPropValue(joblv, job, attr)
end

function CommonFun.calProfessionPropValue(joblv, job, attr)
  if GameConfig.AttrRatio[job] == nil then
    return 0
  end
  if GameConfig.AttrValue[job] == nil then
    return 0
  end
  if GameConfig.Attr220Value[job] == nil then
    return 0
  end
  if joblv <= 170 then
    return math.floor((joblv - 10) / 160 * (GameConfig.AttrRatio[job][attr] - 0.5) + 0.5) + 1
  elseif 170 < joblv and joblv <= 200 then
    return GameConfig.AttrRatio[job][attr] + math.floor((joblv - 170) / 30 * GameConfig.AttrValue[job][attr]) + 1
  elseif 200 < joblv and joblv <= 220 then
    return GameConfig.AttrRatio[job][attr] + GameConfig.AttrValue[job][attr] + math.floor((joblv - 200) / 20 * GameConfig.Attr220Value[job][attr]) + 1
  elseif 220 < joblv then
    return GameConfig.AttrRatio[job][attr] + GameConfig.AttrValue[job][attr] + GameConfig.Attr220Value[job][attr] + 1
  end
end

function CommonFun.calHeroAttrPoint(joblv, job, attr)
  if GameConfig.HeroAttrValue[job] == nil then
    return 0
  end
  return math.floor(math.min(joblv, 30) / 5) * GameConfig.HeroAttrValue[job][attr]
end

function CommonFun.getBits(arg)
  arg = arg or 0
  local bits = {}
  for i = 1, 32 do
    if arg >= CommonFun.data32[i] then
      bits[33 - i] = 1
      arg = arg - CommonFun.data32[i]
    else
      bits[33 - i] = 0
    end
  end
  return bits
end

function CommonFun.AccurateFloor(number)
  return math.floor((number * 1000 + 0.5) / 1000)
end

function CommonFun.checkRemoteAtk(profession, WeaponType)
  if (profession == 92 or profession == 93 or profession == 94 or profession == 95) and WeaponType == 210 then
    return true
  end
  for k, v in pairs(GameConfig.Atkcalculate) do
    if v == profession then
      return true
    end
  end
end

function CommonFun.CalcSum(num)
  local result = 0
  for i = num, 0, -1 do
    result = result + i
  end
  return result
end

function CommonFun.WeaponAtkSpd(type, profession)
  if type == 170 then
    return SpearAtkSpd[profession]
  elseif type == 180 then
    return SwordAtkSpd[profession]
  elseif type == 190 then
    return StaffAtkSpd[profession]
  elseif type == 200 then
    return KatarAtkSpd[profession]
  elseif type == 210 then
    return BowAtkSpd[profession]
  elseif type == 220 then
    return MaceAtkSpd[profession]
  elseif type == 230 then
    return AxeAtkSpd[profession]
  elseif type == 250 then
    return KnifeAtkSpd[profession]
  elseif type == 290 then
    return FistAtkSpd[profession]
  elseif type == 510 or type == 511 or type == 512 or type == 513 or type == 514 or type == 515 then
    return ShieldAtkSpd[profession]
  end
  return 0
end

function CommonFun.calcUserShowAttr(attr, profession, lv, WeaponType)
  local showresult = {}
  if CommonFun.checkRemoteAtk(profession, WeaponType) then
    showresult[CommonFun.RoleData.EATTRTYPE_ATK] = attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2 + math.floor(attr[CommonFun.RoleData.EATTRTYPE_DEX] * attr[CommonFun.RoleData.EATTRTYPE_DEX] / 100) + math.floor(attr[CommonFun.RoleData.EATTRTYPE_STR] / 5) + math.floor(attr[CommonFun.RoleData.EATTRTYPE_LUK] / 5)
  else
    showresult[CommonFun.RoleData.EATTRTYPE_ATK] = attr[CommonFun.RoleData.EATTRTYPE_STR] * 2 + math.floor(attr[CommonFun.RoleData.EATTRTYPE_STR] * attr[CommonFun.RoleData.EATTRTYPE_STR] / 100) + math.floor(attr[CommonFun.RoleData.EATTRTYPE_DEX] / 5) + math.floor(attr[CommonFun.RoleData.EATTRTYPE_LUK] / 5)
  end
  showresult[CommonFun.RoleData.EATTRTYPE_DEF] = attr[CommonFun.RoleData.EATTRTYPE_VIT]
  showresult[CommonFun.RoleData.EATTRTYPE_MATK] = attr[CommonFun.RoleData.EATTRTYPE_INT] * 2 + math.floor(attr[CommonFun.RoleData.EATTRTYPE_INT] * attr[CommonFun.RoleData.EATTRTYPE_INT] / 100)
  showresult[CommonFun.RoleData.EATTRTYPE_MDEF] = attr[CommonFun.RoleData.EATTRTYPE_INT]
  showresult[CommonFun.RoleData.EATTRTYPE_HIT] = attr[CommonFun.RoleData.EATTRTYPE_DEX]
  showresult[CommonFun.RoleData.EATTRTYPE_FLEE] = attr[CommonFun.RoleData.EATTRTYPE_AGI]
  showresult[CommonFun.RoleData.EATTRTYPE_CRI] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_LUK] / 3)
  showresult[CommonFun.RoleData.EATTRTYPE_CRIRES] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_LUK] / 5)
  showresult[CommonFun.RoleData.EATTRTYPE_ATKSPD] = attr[CommonFun.RoleData.EATTRTYPE_AGI] / 100
  showresult[CommonFun.RoleData.EATTRTYPE_CASTSPD] = attr[CommonFun.RoleData.EATTRTYPE_DEX] / 30
  showresult[CommonFun.RoleData.EATTRTYPE_RESTORESPD] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_VIT] / 5)
  showresult[CommonFun.RoleData.EATTRTYPE_SPRESTORESPD] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_INT] / 6)
  return showresult
end

function CommonFun.calcUserAttrValue(attr, lv, profession, type, map)
  local result = {}
  local extra = {}
  if profession == 0 then
    return result, extra
  end
  if 0 > attr[CommonFun.RoleData.EATTRTYPE_DEX] then
    attr[CommonFun.RoleData.EATTRTYPE_DEX] = 0
    result[CommonFun.RoleData.EATTRTYPE_DEX] = 0
  end
  if 0 > attr[CommonFun.RoleData.EATTRTYPE_STR] then
    attr[CommonFun.RoleData.EATTRTYPE_STR] = 0
    result[CommonFun.RoleData.EATTRTYPE_STR] = 0
  end
  if 0 > attr[CommonFun.RoleData.EATTRTYPE_VIT] then
    attr[CommonFun.RoleData.EATTRTYPE_VIT] = 0
    result[CommonFun.RoleData.EATTRTYPE_VIT] = 0
  end
  if 0 > attr[CommonFun.RoleData.EATTRTYPE_INT] then
    attr[CommonFun.RoleData.EATTRTYPE_INT] = 0
    result[CommonFun.RoleData.EATTRTYPE_INT] = 0
  end
  if 0 > attr[CommonFun.RoleData.EATTRTYPE_AGI] then
    attr[CommonFun.RoleData.EATTRTYPE_AGI] = 0
    result[CommonFun.RoleData.EATTRTYPE_AGI] = 0
  end
  if 0 > attr[CommonFun.RoleData.EATTRTYPE_LUK] then
    attr[CommonFun.RoleData.EATTRTYPE_LUK] = 0
    result[CommonFun.RoleData.EATTRTYPE_LUK] = 0
  end
  if CommonFun.checkRemoteAtk(profession, type) then
    extra[CommonFun.RoleData.EATTRTYPE_ATK] = attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2 + math.floor(attr[CommonFun.RoleData.EATTRTYPE_DEX] * attr[CommonFun.RoleData.EATTRTYPE_DEX] / 100) + math.floor(attr[CommonFun.RoleData.EATTRTYPE_STR] / 5) + math.floor(attr[CommonFun.RoleData.EATTRTYPE_LUK] / 5) + BaseLvAtkRate1[profession] * lv
  else
    extra[CommonFun.RoleData.EATTRTYPE_ATK] = attr[CommonFun.RoleData.EATTRTYPE_STR] * 2 + math.floor(attr[CommonFun.RoleData.EATTRTYPE_STR] * attr[CommonFun.RoleData.EATTRTYPE_STR] / 100) + math.floor(attr[CommonFun.RoleData.EATTRTYPE_DEX] / 5) + math.floor(attr[CommonFun.RoleData.EATTRTYPE_LUK] / 5) + BaseLvAtkRate1[profession] * lv
  end
  extra[CommonFun.RoleData.EATTRTYPE_DEF] = attr[CommonFun.RoleData.EATTRTYPE_VIT]
  extra[CommonFun.RoleData.EATTRTYPE_MATK] = attr[CommonFun.RoleData.EATTRTYPE_INT] * 2 + math.floor(attr[CommonFun.RoleData.EATTRTYPE_INT] * attr[CommonFun.RoleData.EATTRTYPE_INT] / 100)
  extra[CommonFun.RoleData.EATTRTYPE_MDEF] = attr[CommonFun.RoleData.EATTRTYPE_INT]
  extra[CommonFun.RoleData.EATTRTYPE_MAXHP] = (100 + lv * BaseLvRate[profession] + CommonFun.CalcSum(lv) * HpRate[profession] + BaseHp[profession]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 100)
  extra[CommonFun.RoleData.EATTRTYPE_MAXSP] = (20 + lv * GameConfig.NewRole.recover[profession].sp) * (1 + attr[CommonFun.RoleData.EATTRTYPE_INT] / 100)
  extra[CommonFun.RoleData.EATTRTYPE_HIT] = lv + attr[CommonFun.RoleData.EATTRTYPE_DEX]
  extra[CommonFun.RoleData.EATTRTYPE_FLEE] = lv + attr[CommonFun.RoleData.EATTRTYPE_AGI]
  extra[CommonFun.RoleData.EATTRTYPE_CRI] = 1 + math.floor(attr[CommonFun.RoleData.EATTRTYPE_LUK] / 3)
  extra[CommonFun.RoleData.EATTRTYPE_CRIRES] = 1 + math.floor(attr[CommonFun.RoleData.EATTRTYPE_LUK] / 5)
  extra[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = 0
  extra[CommonFun.RoleData.EATTRTYPE_CRIDEFPER] = 0
  extra[CommonFun.RoleData.EATTRTYPE_MOVESPD] = 1
  extra[CommonFun.RoleData.EATTRTYPE_CASTSPD] = attr[CommonFun.RoleData.EATTRTYPE_DEX] / 30
  extra[CommonFun.RoleData.EATTRTYPE_ATKPER] = 0
  extra[CommonFun.RoleData.EATTRTYPE_DEFPER] = 0
  extra[CommonFun.RoleData.EATTRTYPE_MATKPER] = 0
  extra[CommonFun.RoleData.EATTRTYPE_MDEFPER] = 0
  extra[CommonFun.RoleData.EATTRTYPE_MAXHPPER] = 0
  extra[CommonFun.RoleData.EATTRTYPE_MAXSPPER] = 0
  extra[CommonFun.RoleData.EATTRTYPE_REFINE] = 0
  extra[CommonFun.RoleData.EATTRTYPE_MREFINE] = 0
  extra[CommonFun.RoleData.EATTRTYPE_RESTORESPD] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_VIT] / 5)
  extra[CommonFun.RoleData.EATTRTYPE_SPRESTORESPD] = 1 + math.floor(attr[CommonFun.RoleData.EATTRTYPE_INT] / 6)
  extra[CommonFun.RoleData.EATTRTYPE_EQUIPASPD] = 0
  extra[CommonFun.RoleData.EATTRTYPE_SKILLASPD] = 0
  result[CommonFun.RoleData.EATTRTYPE_EQUIPASPD] = extra[CommonFun.RoleData.EATTRTYPE_EQUIPASPD] + attr[CommonFun.RoleData.EATTRTYPE_EQUIPASPD]
  result[CommonFun.RoleData.EATTRTYPE_SKILLASPD] = extra[CommonFun.RoleData.EATTRTYPE_SKILLASPD] + attr[CommonFun.RoleData.EATTRTYPE_SKILLASPD]
  local ASPD_CHCEKVALUE = 0
  if attr[CommonFun.RoleData.EATTRTYPE_AGI] < 205 then
    ASPD_CHCEKVALUE = math.floor((math.sqrt(205) - math.sqrt(attr[CommonFun.RoleData.EATTRTYPE_AGI])) * 1000 / 7.15) / 1000
  else
    ASPD_CHCEKVALUE = 0
  end
  local BaseJobASPD = BaseJobAtkSpd[profession] + CommonFun.WeaponAtkSpd(type, profession)
  local ASPD_PANISHVALUE = 0
  if 145 < BaseJobASPD then
    ASPD_PANISHVALUE = 1 - (BaseJobASPD - 144) / 50
  else
    ASPD_PANISHVALUE = 0.96
  end
  extra[CommonFun.RoleData.EATTRTYPE_ATKSPD] = math.floor((200 - (200 - (BaseJobASPD - ASPD_CHCEKVALUE + math.sqrt(attr[CommonFun.RoleData.EATTRTYPE_AGI] * 9.999) * ASPD_PANISHVALUE)) * (1 - result[CommonFun.RoleData.EATTRTYPE_SKILLASPD])) * 1000) / 1000
  local EquipASPD = math.floor((195 - extra[CommonFun.RoleData.EATTRTYPE_ATKSPD]) * result[CommonFun.RoleData.EATTRTYPE_EQUIPASPD] * 100) / 100
  local BaseASPD = extra[CommonFun.RoleData.EATTRTYPE_ATKSPD] + EquipASPD
  if 189.58333333333334 <= BaseASPD then
    BaseASPD = 189.58333333333334
  end
  if BaseASPD <= 50 then
    BaseASPD = 50
  end
  result[CommonFun.RoleData.EATTRTYPE_ATKSPD] = 50 / (200 - BaseASPD)
  if 0 >= result[CommonFun.RoleData.EATTRTYPE_ATKSPD] then
    result[CommonFun.RoleData.EATTRTYPE_ATKSPD] = 0
  end
  result[CommonFun.RoleData.EATTRTYPE_ATK] = extra[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_ATK]
  if 0 >= result[CommonFun.RoleData.EATTRTYPE_ATK] then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 0
  end
  result[CommonFun.RoleData.EATTRTYPE_MATK] = extra[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_MATK]
  if 0 >= result[CommonFun.RoleData.EATTRTYPE_MATK] then
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 0
  end
  result[CommonFun.RoleData.EATTRTYPE_DEF] = extra[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_DEF]
  if 0 >= result[CommonFun.RoleData.EATTRTYPE_DEF] then
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 0
  end
  result[CommonFun.RoleData.EATTRTYPE_MDEF] = extra[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
  if 0 >= result[CommonFun.RoleData.EATTRTYPE_MDEF] then
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 0
  end
  result[CommonFun.RoleData.EATTRTYPE_HIT] = (extra[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_HIT]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_HITPER])
  if 0 >= result[CommonFun.RoleData.EATTRTYPE_HIT] then
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 0
  end
  result[CommonFun.RoleData.EATTRTYPE_FLEE] = (extra[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_FLEE]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_FLEEPER])
  if 0 >= result[CommonFun.RoleData.EATTRTYPE_FLEE] then
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 0
  end
  result[CommonFun.RoleData.EATTRTYPE_CRIPER] = attr[CommonFun.RoleData.EATTRTYPE_CRIPER]
  if 0 >= result[CommonFun.RoleData.EATTRTYPE_CRIPER] then
    result[CommonFun.RoleData.EATTRTYPE_CRIPER] = 0
  end
  result[CommonFun.RoleData.EATTRTYPE_CRI] = (extra[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_CRI]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_CRIPER])
  if 0 >= result[CommonFun.RoleData.EATTRTYPE_CRI] then
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 0
  end
  result[CommonFun.RoleData.EATTRTYPE_CRIRES] = extra[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
  if 0 >= result[CommonFun.RoleData.EATTRTYPE_CRIRES] then
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 0
  end
  result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = extra[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] + attr[CommonFun.RoleData.EATTRTYPE_CRIDAMPER]
  if 0 >= result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] then
    result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = 0
  end
  result[CommonFun.RoleData.EATTRTYPE_CRIDEFPER] = extra[CommonFun.RoleData.EATTRTYPE_CRIDEFPER] + attr[CommonFun.RoleData.EATTRTYPE_CRIDEFPER]
  if 0 >= result[CommonFun.RoleData.EATTRTYPE_CRIDEFPER] then
    result[CommonFun.RoleData.EATTRTYPE_CRIDEFPER] = 0
  end
  result[CommonFun.RoleData.EATTRTYPE_MOVESPD] = (extra[CommonFun.RoleData.EATTRTYPE_MOVESPD] + attr[CommonFun.RoleData.EATTRTYPE_MOVESPD]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MOVESPDPER])
  if 0 >= result[CommonFun.RoleData.EATTRTYPE_MOVESPD] then
    result[CommonFun.RoleData.EATTRTYPE_MOVESPD] = 0
  end
  result[CommonFun.RoleData.EATTRTYPE_CASTSPD] = extra[CommonFun.RoleData.EATTRTYPE_CASTSPD] + attr[CommonFun.RoleData.EATTRTYPE_CASTSPD]
  if 0 >= result[CommonFun.RoleData.EATTRTYPE_CASTSPD] then
    result[CommonFun.RoleData.EATTRTYPE_CASTSPD] = 0
  end
  result[CommonFun.RoleData.EATTRTYPE_ATKPER] = extra[CommonFun.RoleData.EATTRTYPE_ATKPER] + attr[CommonFun.RoleData.EATTRTYPE_ATKPER]
  if result[CommonFun.RoleData.EATTRTYPE_ATKPER] <= -1 then
    result[CommonFun.RoleData.EATTRTYPE_ATKPER] = -1
  end
  result[CommonFun.RoleData.EATTRTYPE_DEFPER] = extra[CommonFun.RoleData.EATTRTYPE_DEFPER] + attr[CommonFun.RoleData.EATTRTYPE_DEFPER]
  if result[CommonFun.RoleData.EATTRTYPE_DEFPER] <= -1 then
    result[CommonFun.RoleData.EATTRTYPE_DEFPER] = -1
  end
  result[CommonFun.RoleData.EATTRTYPE_MATKPER] = extra[CommonFun.RoleData.EATTRTYPE_MATKPER] + attr[CommonFun.RoleData.EATTRTYPE_MATKPER]
  if result[CommonFun.RoleData.EATTRTYPE_MATKPER] <= -1 then
    result[CommonFun.RoleData.EATTRTYPE_MATKPER] = -1
  end
  result[CommonFun.RoleData.EATTRTYPE_MDEFPER] = extra[CommonFun.RoleData.EATTRTYPE_MDEFPER] + attr[CommonFun.RoleData.EATTRTYPE_MDEFPER]
  if result[CommonFun.RoleData.EATTRTYPE_MDEFPER] <= -1 then
    result[CommonFun.RoleData.EATTRTYPE_MDEFPER] = -1
  end
  result[CommonFun.RoleData.EATTRTYPE_MAXHPPER] = extra[CommonFun.RoleData.EATTRTYPE_MAXHPPER] + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER]
  if result[CommonFun.RoleData.EATTRTYPE_MAXHPPER] <= -1 then
    result[CommonFun.RoleData.EATTRTYPE_MAXHPPER] = -1
  end
  result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (extra[CommonFun.RoleData.EATTRTYPE_MAXHP] + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + result[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
  if map == 1 or map == 2 then
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 4 * (extra[CommonFun.RoleData.EATTRTYPE_MAXHP] + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + result[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
  end
  result[CommonFun.RoleData.EATTRTYPE_MAXSPPER] = extra[CommonFun.RoleData.EATTRTYPE_MAXSPPER] + attr[CommonFun.RoleData.EATTRTYPE_MAXSPPER]
  if result[CommonFun.RoleData.EATTRTYPE_MAXSPPER] <= -1 then
    result[CommonFun.RoleData.EATTRTYPE_MAXSPPER] = -1
  end
  result[CommonFun.RoleData.EATTRTYPE_MAXSP] = (extra[CommonFun.RoleData.EATTRTYPE_MAXSP] + attr[CommonFun.RoleData.EATTRTYPE_MAXSP]) * (1 + result[CommonFun.RoleData.EATTRTYPE_MAXSPPER])
  result[CommonFun.RoleData.EATTRTYPE_REFINE] = extra[CommonFun.RoleData.EATTRTYPE_REFINE] + attr[CommonFun.RoleData.EATTRTYPE_REFINE]
  result[CommonFun.RoleData.EATTRTYPE_MREFINE] = extra[CommonFun.RoleData.EATTRTYPE_MREFINE] + attr[CommonFun.RoleData.EATTRTYPE_MREFINE]
  result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
  if 1 <= result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] then
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = 1
  end
  result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
  if 1 <= result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] then
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = 1
  end
  result[CommonFun.RoleData.EATTRTYPE_RESTORESPD] = (extra[CommonFun.RoleData.EATTRTYPE_RESTORESPD] + attr[CommonFun.RoleData.EATTRTYPE_RESTORESPD] + math.floor(result[CommonFun.RoleData.EATTRTYPE_MAXHP] / 200)) * (1 + attr[CommonFun.RoleData.EATTRTYPE_RESTORESPDPER])
  result[CommonFun.RoleData.EATTRTYPE_SPRESTORESPD] = (extra[CommonFun.RoleData.EATTRTYPE_SPRESTORESPD] + attr[CommonFun.RoleData.EATTRTYPE_SPRESTORESPD] + math.floor(result[CommonFun.RoleData.EATTRTYPE_MAXSP] / 100)) * (1 + attr[CommonFun.RoleData.EATTRTYPE_SPRESTORESPDPER])
  result[CommonFun.RoleData.EATTRTYPE_SHOWATK] = result[CommonFun.RoleData.EATTRTYPE_ATK] * (1 + result[CommonFun.RoleData.EATTRTYPE_ATKPER])
  result[CommonFun.RoleData.EATTRTYPE_SHOWMATK] = result[CommonFun.RoleData.EATTRTYPE_MATK] * (1 + result[CommonFun.RoleData.EATTRTYPE_MATKPER])
  result[CommonFun.RoleData.EATTRTYPE_SHOWMAXHP] = result[CommonFun.RoleData.EATTRTYPE_MAXHP]
  result[CommonFun.RoleData.EATTRTYPE_SHOWMAXSP] = result[CommonFun.RoleData.EATTRTYPE_MAXSP]
  result[CommonFun.RoleData.EATTRTYPE_SHOWDEF] = extra[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_DEF] * (1 + result[CommonFun.RoleData.EATTRTYPE_DEFPER])
  result[CommonFun.RoleData.EATTRTYPE_SHOWMDEF] = extra[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_MDEF] * (1 + result[CommonFun.RoleData.EATTRTYPE_MDEFPER])
  result[CommonFun.RoleData.EATTRTYPE_SHOWHIT] = result[CommonFun.RoleData.EATTRTYPE_HIT]
  result[CommonFun.RoleData.EATTRTYPE_SHOWFLEE] = result[CommonFun.RoleData.EATTRTYPE_FLEE]
  result[CommonFun.RoleData.EATTRTYPE_SHOWCRI] = result[CommonFun.RoleData.EATTRTYPE_CRI]
  result[CommonFun.RoleData.EATTRTYPE_SHOWCRIRES] = result[CommonFun.RoleData.EATTRTYPE_CRIRES]
  result[CommonFun.RoleData.EATTRTYPE_SHOWATKSPD] = result[CommonFun.RoleData.EATTRTYPE_ATKSPD]
  result[CommonFun.RoleData.EATTRTYPE_SHOWMOVESPD] = result[CommonFun.RoleData.EATTRTYPE_MOVESPD]
  result[CommonFun.RoleData.EATTRTYPE_SHOWCASTSPD] = result[CommonFun.RoleData.EATTRTYPE_CASTSPD]
  result[CommonFun.RoleData.EATTRTYPE_SHOWRESTORESPD] = result[CommonFun.RoleData.EATTRTYPE_RESTORESPD]
  for k, v in pairs(result) do
    if v ~= 0 then
      result[k] = math.floor(v * 1000 + 0.5) / 1000
    else
      result[k] = v
    end
  end
  for k, v in pairs(extra) do
    if v ~= 0 then
      extra[k] = math.floor(v * 1000 + 0.5) / 1000
    else
      extra[k] = 0
    end
  end
  return result, extra
end

function CommonFun.calcUserShowAttrValue(attr, profession, oldlv, newlv, WeaponType)
  local result = {}
  local oldvalue = 50 + oldlv * BaseLvRate[profession] + CommonFun.CalcSum(oldlv) * HpRate[profession] + BaseHp[profession]
  local newvalue = 50 + newlv * BaseLvRate[profession] + CommonFun.CalcSum(newlv) * HpRate[profession] + BaseHp[profession]
  if newvalue > oldvalue + 1 then
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = newvalue - oldvalue
  end
  if CommonFun.checkRemoteAtk(profession, WeaponType) then
    oldvalue = attr[CommonFun.RoleData.EATTRTYPE_DEX] * 3 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * attr[CommonFun.RoleData.EATTRTYPE_DEX] / 100 + attr[CommonFun.RoleData.EATTRTYPE_STR] / 5 + attr[CommonFun.RoleData.EATTRTYPE_LUK] / 5 + oldlv * BaseLvAtkRate1[profession]
  else
    oldvalue = attr[CommonFun.RoleData.EATTRTYPE_STR] * 5 + attr[CommonFun.RoleData.EATTRTYPE_STR] * attr[CommonFun.RoleData.EATTRTYPE_STR] / 100 + attr[CommonFun.RoleData.EATTRTYPE_DEX] / 5 + attr[CommonFun.RoleData.EATTRTYPE_LUK] / 5 + oldlv * BaseLvAtkRate1[profession]
  end
  if CommonFun.checkRemoteAtk(profession, WeaponType) then
    newvalue = attr[CommonFun.RoleData.EATTRTYPE_DEX] * 3 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * attr[CommonFun.RoleData.EATTRTYPE_DEX] / 100 + attr[CommonFun.RoleData.EATTRTYPE_STR] / 5 + attr[CommonFun.RoleData.EATTRTYPE_LUK] / 5 + newlv * BaseLvAtkRate1[profession]
  else
    newvalue = attr[CommonFun.RoleData.EATTRTYPE_STR] * 3 + attr[CommonFun.RoleData.EATTRTYPE_STR] * attr[CommonFun.RoleData.EATTRTYPE_STR] / 100 + attr[CommonFun.RoleData.EATTRTYPE_DEX] / 5 + attr[CommonFun.RoleData.EATTRTYPE_LUK] / 5 + newlv * BaseLvAtkRate1[profession]
  end
  if newvalue > oldvalue + 1 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = newvalue - oldvalue
  end
  oldvalue = attr[CommonFun.RoleData.EATTRTYPE_INT] * 3 + attr[CommonFun.RoleData.EATTRTYPE_INT] * attr[CommonFun.RoleData.EATTRTYPE_INT] / 100 + oldlv * BaseLvAtkRate2[profession]
  newvalue = attr[CommonFun.RoleData.EATTRTYPE_INT] * 3 + attr[CommonFun.RoleData.EATTRTYPE_INT] * attr[CommonFun.RoleData.EATTRTYPE_INT] / 100 + newlv * BaseLvAtkRate2[profession]
  if newvalue > oldvalue + 1 then
    result[CommonFun.RoleData.EATTRTYPE_MATK] = newvalue - oldvalue
  end
  oldvalue = attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * attr[CommonFun.RoleData.EATTRTYPE_VIT] / 100 + oldlv * BaseLvDefRate[profession]
  newvalue = attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * attr[CommonFun.RoleData.EATTRTYPE_VIT] / 100 + newlv * BaseLvDefRate[profession]
  if newvalue > oldvalue + 1 then
    result[CommonFun.RoleData.EATTRTYPE_DEF] = newvalue - oldvalue
  end
  oldvalue = attr[CommonFun.RoleData.EATTRTYPE_INT] * 2 + attr[CommonFun.RoleData.EATTRTYPE_INT] * attr[CommonFun.RoleData.EATTRTYPE_INT] / 100 + oldlv * BaseLvMDefRate[profession]
  newvalue = attr[CommonFun.RoleData.EATTRTYPE_INT] * 2 + attr[CommonFun.RoleData.EATTRTYPE_INT] * attr[CommonFun.RoleData.EATTRTYPE_INT] / 100 + newlv * BaseLvMDefRate[profession]
  if newvalue > oldvalue + 1 then
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = newvalue - oldvalue
  end
  oldvalue = 20 + oldlv * GameConfig.NewRole.recover[profession].sp + attr[CommonFun.RoleData.EATTRTYPE_INT] * 2
  newvalue = 20 + newlv * GameConfig.NewRole.recover[profession].sp + attr[CommonFun.RoleData.EATTRTYPE_INT] * 2
  if newvalue > oldvalue + 1 then
    result[CommonFun.RoleData.EATTRTYPE_MAXSP] = newvalue - oldvalue
  end
  oldvalue = oldlv + attr[CommonFun.RoleData.EATTRTYPE_DEX]
  newvalue = newlv + attr[CommonFun.RoleData.EATTRTYPE_DEX]
  if newvalue > oldvalue + 1 then
    result[CommonFun.RoleData.EATTRTYPE_HIT] = newvalue - oldvalue
  end
  oldvalue = oldlv + attr[CommonFun.RoleData.EATTRTYPE_AGI]
  newvalue = newlv + attr[CommonFun.RoleData.EATTRTYPE_AGI]
  if newvalue > oldvalue + 1 then
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = newvalue - oldvalue
  end
  return result
end

function CommonFun.calcUserShowAttrValuePro(attr, lv, oldpro, newpro, WeaponType)
  local result = {}
  local oldvalue = 50 + lv * BaseLvRate[oldpro] + CommonFun.CalcSum(lv) * HpRate[oldpro] * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 100) + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 20
  local newvalue = 50 + lv * BaseLvRate[newpro] + CommonFun.CalcSum(lv) * HpRate[newpro] * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 100) + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 20
  if newvalue > oldvalue + 1 then
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = newvalue - oldvalue
  end
  if CommonFun.checkRemoteAtk(oldpro, WeaponType) then
    oldvalue = attr[CommonFun.RoleData.EATTRTYPE_DEX] * 3 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * attr[CommonFun.RoleData.EATTRTYPE_DEX] / 100 + attr[CommonFun.RoleData.EATTRTYPE_STR] / 5 + attr[CommonFun.RoleData.EATTRTYPE_LUK] / 5 + lv * 2
  else
    oldvalue = attr[CommonFun.RoleData.EATTRTYPE_STR] * 3 + attr[CommonFun.RoleData.EATTRTYPE_STR] * attr[CommonFun.RoleData.EATTRTYPE_STR] / 100 + attr[CommonFun.RoleData.EATTRTYPE_DEX] / 5 + attr[CommonFun.RoleData.EATTRTYPE_LUK] / 5 + lv * 2
  end
  if CommonFun.checkRemoteAtk(newpro, WeaponType) then
    newvalue = attr[CommonFun.RoleData.EATTRTYPE_DEX] * 3 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * attr[CommonFun.RoleData.EATTRTYPE_DEX] / 100 + attr[CommonFun.RoleData.EATTRTYPE_STR] / 5 + attr[CommonFun.RoleData.EATTRTYPE_LUK] / 5 + lv * 2
  else
    newvalue = attr[CommonFun.RoleData.EATTRTYPE_STR] * 3 + attr[CommonFun.RoleData.EATTRTYPE_STR] * attr[CommonFun.RoleData.EATTRTYPE_STR] / 100 + attr[CommonFun.RoleData.EATTRTYPE_DEX] / 5 + attr[CommonFun.RoleData.EATTRTYPE_LUK] / 5 + lv * 2
  end
  if newvalue > oldvalue + 1 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = newvalue - oldvalue
  end
  oldvalue = 20 + lv * GameConfig.NewRole.recover[oldpro].sp * (1 + attr[CommonFun.RoleData.EATTRTYPE_INT] / 100) + attr[CommonFun.RoleData.EATTRTYPE_INT] * 2
  newvalue = 20 + lv * GameConfig.NewRole.recover[newpro].sp * (1 + attr[CommonFun.RoleData.EATTRTYPE_INT] / 100) + attr[CommonFun.RoleData.EATTRTYPE_INT] * 2
  if newvalue > oldvalue + 1 then
    result[CommonFun.RoleData.EATTRTYPE_MAXSP] = newvalue - oldvalue
  end
  return result
end

function CommonFun.calcNpcAttrValue(extra, attr, profession)
  local NpcResult = {}
  NpcResult[CommonFun.RoleData.EATTRTYPE_VIT] = (extra[CommonFun.RoleData.EATTRTYPE_VIT] + attr[CommonFun.RoleData.EATTRTYPE_VIT]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VITPER])
  NpcResult[CommonFun.RoleData.EATTRTYPE_INT] = (extra[CommonFun.RoleData.EATTRTYPE_INT] + attr[CommonFun.RoleData.EATTRTYPE_INT]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_INTPER])
  NpcResult[CommonFun.RoleData.EATTRTYPE_DEX] = extra[CommonFun.RoleData.EATTRTYPE_DEX] + attr[CommonFun.RoleData.EATTRTYPE_DEX]
  NpcResult[CommonFun.RoleData.EATTRTYPE_AGI] = extra[CommonFun.RoleData.EATTRTYPE_AGI] + attr[CommonFun.RoleData.EATTRTYPE_AGI]
  NpcResult[CommonFun.RoleData.EATTRTYPE_STR] = extra[CommonFun.RoleData.EATTRTYPE_STR] + attr[CommonFun.RoleData.EATTRTYPE_STR]
  NpcResult[CommonFun.RoleData.EATTRTYPE_LUK] = extra[CommonFun.RoleData.EATTRTYPE_LUK] + attr[CommonFun.RoleData.EATTRTYPE_LUK]
  NpcResult[CommonFun.RoleData.EATTRTYPE_CRI] = 1 + math.floor(NpcResult[CommonFun.RoleData.EATTRTYPE_LUK] / 3)
  NpcResult[CommonFun.RoleData.EATTRTYPE_CRIRES] = 1 + math.floor(NpcResult[CommonFun.RoleData.EATTRTYPE_LUK] / 5) + attr[CommonFun.RoleData.EATTRTYPE_MONCRIRES] + extra[CommonFun.RoleData.EATTRTYPE_MONCRIRES]
  NpcResult[CommonFun.RoleData.EATTRTYPE_MAXHP] = (extra[CommonFun.RoleData.EATTRTYPE_MAXHP] + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MONMAXHPPER])
  for key, value in pairs(NpcResult) do
    if value < 0 then
      NpcResult[key] = 0
    end
  end
  NpcResult[CommonFun.RoleData.EATTRTYPE_DEFPER] = attr[CommonFun.RoleData.EATTRTYPE_DEFPER]
  if NpcResult[CommonFun.RoleData.EATTRTYPE_DEFPER] <= -1 then
    NpcResult[CommonFun.RoleData.EATTRTYPE_DEFPER] = -1
  end
  NpcResult[CommonFun.RoleData.EATTRTYPE_MDEFPER] = attr[CommonFun.RoleData.EATTRTYPE_MDEFPER]
  if -1 >= NpcResult[CommonFun.RoleData.EATTRTYPE_MDEFPER] then
    NpcResult[CommonFun.RoleData.EATTRTYPE_MDEFPER] = -1
  end
  return NpcResult
end

function CommonFun.calcMonsterModelNpcAttrValue(npcid, npclevel, npctype, edps, ehp, groupid, diff, layer)
  local result = {}
  local data = Table_MonsterModel[npcid]
  if data == nil then
    return result
  end
  local hpnum = data.HpNum
  local dpsnum = data.DpsNum
  local def = data.Def
  local mdef = data.MDef
  local lv = npclevel
  local lvmodel = data.Level
  local lvincrease = 1
  edps = edps * dpsnum
  ehp = ehp * hpnum
  result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = 0
  result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = 0
  result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = 0
  result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = 0
  result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = 0
  result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = 0
  result[CommonFun.RoleData.EATTRTYPE_REFINE] = 0
  result[CommonFun.RoleData.EATTRTYPE_MREFINE] = 0
  result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = 0
  result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = 0
  if groupid == 22 then
    local lvPro
    local arrayAttr = {
      {
        0,
        0,
        0.05,
        0.1,
        0.15,
        0.5
      },
      {
        0.1,
        0.1,
        0.2,
        0.3,
        0.4,
        0.8
      },
      {
        0,
        0,
        0,
        0.1,
        0.2,
        0.6
      },
      {
        0,
        0,
        0.05,
        0.1,
        0.15,
        0.7
      }
    }
    lvPro = lv / 10 - 11
    result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = arrayAttr[1][lvPro]
    result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = arrayAttr[1][lvPro]
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = arrayAttr[2][lvPro]
    result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = arrayAttr[2][lvPro]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = arrayAttr[3][lvPro]
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = arrayAttr[3][lvPro]
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = arrayAttr[4][lvPro]
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = arrayAttr[4][lvPro]
  end
  if groupid == 30 then
    local diffPro
    local arrayAttr = {
      {
        200,
        200,
        200,
        500,
        500,
        500,
        1000,
        1000,
        1000,
        2000,
        2000,
        2000,
        4000,
        4000,
        4000,
        1000,
        1000,
        1000,
        2000,
        2000,
        2000,
        4000,
        4000,
        4000,
        5000,
        5000,
        5000,
        7500,
        7500,
        7500
      },
      {
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.2
      },
      {
        0,
        0,
        0,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.2,
        0.5,
        0.5,
        0.5,
        0.8,
        0.8,
        0.8,
        0.2,
        0.2,
        0.2,
        0.5,
        0.5,
        0.5,
        0.8,
        0.8,
        0.8,
        1,
        1,
        1,
        1.5,
        1.5,
        1.5
      },
      {
        0,
        0,
        0,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.2,
        0.4,
        0.4,
        0.4,
        0.5,
        0.5,
        0.5,
        0.2,
        0.2,
        0.2,
        0.4,
        0.4,
        0.4,
        0.5,
        0.5,
        0.5,
        0.7,
        0.7,
        0.7,
        1,
        1,
        1
      },
      {
        0,
        0,
        0,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.2,
        0.4,
        0.4,
        0.4,
        0.5,
        0.5,
        0.5,
        0.2,
        0.2,
        0.2,
        0.4,
        0.4,
        0.4,
        0.5,
        0.5,
        0.5,
        0.6,
        0.6,
        0.6,
        0.8,
        0.8,
        0.8
      },
      {
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.2
      },
      {
        0,
        0,
        0,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.2,
        0.3,
        0.3,
        0.3,
        0.4,
        0.4,
        0.4,
        0.2,
        0.2,
        0.2,
        0.3,
        0.3,
        0.3,
        0.4,
        0.4,
        0.4,
        0.5,
        0.5,
        0.5,
        0.75,
        0.75,
        0.75
      },
      {
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.2
      },
      {
        0,
        0,
        0,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.2,
        0.3,
        0.3,
        0.3,
        0.4,
        0.4,
        0.4,
        0.2,
        0.2,
        0.2,
        0.3,
        0.3,
        0.3,
        0.4,
        0.4,
        0.4,
        0.5,
        0.5,
        0.5,
        0.75,
        0.75,
        0.75
      },
      {
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.2
      },
      {
        10,
        10,
        10,
        10,
        10,
        10,
        20,
        20,
        20,
        30,
        30,
        30,
        40,
        40,
        40,
        20,
        20,
        20,
        30,
        30,
        30,
        40,
        40,
        40,
        50,
        50,
        50,
        75,
        75,
        75
      },
      {
        0.25,
        0.25,
        0.25,
        0.25,
        0.25,
        0.25,
        0.5,
        0.5,
        0.5,
        1,
        1,
        1,
        2,
        2,
        2,
        0.5,
        0.5,
        0.5,
        1,
        1,
        1,
        2,
        2,
        2,
        3,
        3,
        3,
        4,
        4,
        4
      },
      {
        800,
        900,
        1100,
        1200,
        1300,
        1800,
        2300,
        2700,
        3400,
        3900,
        4700,
        5500,
        8200,
        12400,
        18500,
        1300,
        1600,
        2300,
        2500,
        3100,
        4400,
        4700,
        5800,
        7300,
        7800,
        9900,
        12800,
        14700,
        17700,
        21200
      },
      {
        400,
        500,
        600,
        600,
        700,
        900,
        1100,
        1400,
        1700,
        2000,
        2400,
        2700,
        4100,
        6200,
        9300,
        700,
        800,
        1100,
        1200,
        1600,
        2200,
        2400,
        2900,
        3700,
        3900,
        5000,
        6400,
        7400,
        8800,
        10600
      },
      {
        600,
        675,
        825,
        900,
        975,
        1350,
        1725,
        2025,
        2550,
        2925,
        3525,
        4125,
        6150,
        9300,
        13875,
        975,
        1200,
        1725,
        1875,
        2325,
        3300,
        3525,
        4350,
        5475,
        5850,
        7425,
        9600,
        11025,
        13275,
        15900
      },
      {
        300,
        375,
        450,
        450,
        525,
        675,
        825,
        1050,
        1275,
        1500,
        1800,
        2025,
        3075,
        4650,
        6975,
        525,
        600,
        825,
        900,
        1200,
        1650,
        1800,
        2175,
        2775,
        2925,
        3750,
        4800,
        5550,
        6600,
        7950
      },
      {
        500,
        562,
        687,
        750,
        812,
        1125,
        1437,
        1687,
        2125,
        2437,
        2937,
        3437,
        5125,
        7750,
        11562,
        812,
        1000,
        1437,
        1562,
        1937,
        2750,
        2937,
        3625,
        4562,
        4875,
        6187,
        8000,
        9187,
        11062,
        13250
      },
      {
        250,
        312,
        375,
        375,
        437,
        562,
        687,
        875,
        1062,
        1250,
        1500,
        1687,
        2562,
        3875,
        5812,
        437,
        500,
        687,
        750,
        1000,
        1375,
        1500,
        1812,
        2312,
        2437,
        3125,
        4000,
        4625,
        5500,
        6625
      }
    }
    diffPro = math.floor(diff % 10000 + diff / 10000 * 15)
    result[CommonFun.RoleData.EATTRTYPE_REFINE] = arrayAttr[1][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_MREFINE] = arrayAttr[1][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = arrayAttr[2][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = arrayAttr[2][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = arrayAttr[3][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = arrayAttr[3][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_DEFPER] = arrayAttr[4][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_MDEFPER] = arrayAttr[4][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = arrayAttr[5][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = arrayAttr[5][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = arrayAttr[6][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = arrayAttr[6][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_NORMALATKDAM] = arrayAttr[7][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_SKILLDAM] = arrayAttr[7][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_NORMALATKRES] = arrayAttr[8][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_SKILLRES] = arrayAttr[8][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_WINDATK] = arrayAttr[9][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_EARTHATK] = arrayAttr[9][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_WATERATK] = arrayAttr[9][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_FIREATK] = arrayAttr[9][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_NEUTRALATK] = arrayAttr[9][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_HOLYATK] = arrayAttr[9][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_DARKATK] = arrayAttr[9][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_GHOSTATK] = arrayAttr[9][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_UNDEADATK] = arrayAttr[9][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_POISONINGATK] = arrayAttr[9][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_BEWINDDAMPER] = arrayAttr[10][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_BEEARTHDAMPER] = arrayAttr[10][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_BEWATERDAMPER] = arrayAttr[10][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_BEFIREDAMPER] = arrayAttr[10][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_BENEUTRALDAMPER] = arrayAttr[10][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_BEHOLYDAMPER] = arrayAttr[10][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_BESHADOWDAMPER] = arrayAttr[10][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_BEGHOSTDAMPER] = arrayAttr[10][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_BEUNDEADDAMPER] = arrayAttr[10][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_BEPOISONDAMPER] = arrayAttr[10][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = arrayAttr[11][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = arrayAttr[11][diffPro]
    result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = arrayAttr[12][diffPro]
    if npctype == 4 then
      def = arrayAttr[15][diffPro]
      mdef = arrayAttr[16][diffPro]
    elseif npctype == 5 then
      def = arrayAttr[13][diffPro]
      mdef = arrayAttr[14][diffPro]
    else
      def = arrayAttr[17][diffPro]
      mdef = arrayAttr[18][diffPro]
    end
  end
  if groupid == 8 then
    if lv == 70 or lv == 90 or lv == 110 or lv == 130 or lv == 145 or lv == 155 or lv == 165 then
      lvincrease = 0.7
    else
    end
    edps = (12 * layer ^ 2 + 111 * layer + 440) * lvincrease * dpsnum
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = layer * 0.007
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = layer * 0.007
    result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = layer * 0.013
    result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = layer * 0.013
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = layer * 0.013
    result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = layer * 0.013
    result[CommonFun.RoleData.EATTRTYPE_REFINE] = math.floor(200 * layer) / 10
    result[CommonFun.RoleData.EATTRTYPE_MREFINE] = math.floor(200 * layer) / 10
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = layer * 0.013
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = layer * 0.013
    if layer <= 10 then
      ehp = (400000.0 * layer - 300000.0) * lvincrease * hpnum
    else
      ehp = (41139 * layer ^ 2 - 556707 * layer + 5000000.0) * lvincrease * hpnum
    end
    if npctype == 4 then
      ehp = ehp * 5
    elseif npctype == 5 then
      ehp = ehp * 10
    end
  end
  local hit = data.Hit
  local flee = data.Flee
  local actHit = math.min(math.max(175 + lvmodel - (hit - 100), 5), 100)
  local actFlee = math.max(math.min(100 - (5 + flee - (125 + lvmodel)), 95), 0)
  local defRes = (4000 + def) / (4000 + def * 10)
  local mdefRes = (1000 + mdef) / (1000 + mdef * 10)
  local cri = data.Luk / 3 + lv / 3.8
  local aspd = 1 / data.AtkSpd
  local skillvalue = data.Skill
  local dps = math.min(edps * aspd / (1.5 * math.min(cri, 100) / 100 + (1 - math.min(cri, 100) / 100)), edps / skillvalue)
  if groupid == 30 then
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = ehp
    result[CommonFun.RoleData.EATTRTYPE_ATK] = edps
    result[CommonFun.RoleData.EATTRTYPE_MATK] = edps
  else
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.max(ehp * math.max(defRes, mdefRes), 1)
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.max(dps, 0)
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.max(dps, 0)
  end
  result[CommonFun.RoleData.EATTRTYPE_HIT] = 20 - actFlee + 3.8 * lv
  result[CommonFun.RoleData.EATTRTYPE_FLEE] = 80 - actHit + 1.8 * lv
  result[CommonFun.RoleData.EATTRTYPE_DEF] = def
  result[CommonFun.RoleData.EATTRTYPE_MDEF] = mdef
  result[CommonFun.RoleData.EATTRTYPE_CRI] = cri
  result[CommonFun.RoleData.EATTRTYPE_CRIRES] = math.max(lv / 6 - data.Luk / 5, 0)
  result[CommonFun.RoleData.EATTRTYPE_ATKSPD] = 1 / data.AtkSpd
  result[CommonFun.RoleData.EATTRTYPE_STR] = data.Str
  result[CommonFun.RoleData.EATTRTYPE_DEX] = data.Dex
  result[CommonFun.RoleData.EATTRTYPE_INT] = data.Int
  result[CommonFun.RoleData.EATTRTYPE_VIT] = data.Vit
  result[CommonFun.RoleData.EATTRTYPE_AGI] = data.Agi
  result[CommonFun.RoleData.EATTRTYPE_LUK] = data.Luk
  return result
end

function CommonFun.calcTowerMonsterNpcAttrValue(attr, Type, classtype, Layer)
  local result = {}
  result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.0304 * Layer * Layer * Layer - 1.6383 * Layer * Layer + 50.113 * Layer + 59.574) * 0.4
  result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.0304 * Layer * Layer * Layer - 1.6383 * Layer * Layer + 50.113 * Layer + 59.574) * 0.4
  result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * Layer * Layer * Layer - 0.0494 * Layer * Layer + 4.5061 * Layer + 1
  result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * Layer
  result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.2746 * Layer * Layer * Layer - 5.8627 * Layer * Layer + 404.87 * Layer + 84.291) * 3
  result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * Layer + 50
  result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer
  result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer * 0.3
  result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.3
  return result
end

function CommonFun.calcTowerSmallMiniNpcAttrValue(attr, Type, classtype, Layer)
  local result = {}
  result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.0304 * Layer * Layer * Layer - 1.6383 * Layer * Layer + 50.113 * Layer + 59.574) * 0.6
  result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.0304 * Layer * Layer * Layer - 1.6383 * Layer * Layer + 50.113 * Layer + 59.574) * 0.6
  result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * Layer * Layer * Layer - 0.0494 * Layer * Layer + 4.5061 * Layer + 1
  result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * Layer
  result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.2746 * Layer * Layer * Layer - 5.8627 * Layer * Layer + 404.87 * Layer + 84.291) * 1.25 * 3
  result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * Layer + 50
  result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer
  result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer * 0.3
  result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.3
  return result
end

function CommonFun.calcTowerMiniNpcAttrValue(attr, Type, classtype, Layer)
  local result = {}
  result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.0304 * Layer * Layer * Layer - 1.6383 * Layer * Layer + 50.113 * Layer + 59.574) * 0.8
  result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.0304 * Layer * Layer * Layer - 1.6383 * Layer * Layer + 50.113 * Layer + 59.574) * 0.8
  result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * Layer * Layer * Layer - 0.0494 * Layer * Layer + 4.5061 * Layer + 1
  result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * Layer
  result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.2746 * Layer * Layer * Layer - 5.8627 * Layer * Layer + 404.87 * Layer + 84.291) * 2 * 3
  result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * Layer + 50
  result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer
  result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer * 0.3
  result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.3
  return result
end

function CommonFun.calcTowerMvpNpcAttrValue(attr, Type, classtype, Layer)
  local result = {}
  if 80 <= Layer then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.0304 * Layer * Layer * Layer - 1.6383 * Layer * Layer + 50.113 * Layer + 59.574) * 0.6
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.0304 * Layer * Layer * Layer - 1.6383 * Layer * Layer + 50.113 * Layer + 59.574) * 0.6
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * Layer * Layer * Layer - 0.0494 * Layer * Layer + 4.5061 * Layer + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * Layer
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.2746 * Layer * Layer * Layer - 5.8627 * Layer * Layer + 404.87 * Layer + 84.291) * 6 * 5 * 0.6
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * Layer + 50
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer
    result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.3
  else
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 0.0304 * Layer * Layer * Layer - 1.6383 * Layer * Layer + 50.113 * Layer + 59.574
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 0.0304 * Layer * Layer * Layer - 1.6383 * Layer * Layer + 50.113 * Layer + 59.574
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * Layer * Layer * Layer - 0.0494 * Layer * Layer + 4.5061 * Layer + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * Layer
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.2746 * Layer * Layer * Layer - 5.8627 * Layer * Layer + 404.87 * Layer + 84.291) * 6 * 5
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * Layer + 50
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer
    result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.3
  end
  return result
end

function CommonFun.calcRoguelikeMonsterNpcAttrValue(attr, Type, classtype, Layer)
  local result = {}
  if Layer <= 10 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.floor(200 * Layer) + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.floor(200 * Layer) + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = math.floor(200 * Layer) / 4 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = math.floor(200 * Layer) / 8 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.floor(-5.4277 * Layer ^ 4 + 578.96 * Layer ^ 3 - 8741.5 * Layer ^ 2 + 239231 * Layer - 42844) * 0.9 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]
    result[CommonFun.RoleData.EATTRTYPE_HIT] = Layer * 5 + 500 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer * 2 + 100 + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer + 20 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.5 + 10 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = Layer * 0.01 + 0.5 + attr[CommonFun.RoleData.EATTRTYPE_CRIDAMPER]
    result[CommonFun.RoleData.EATTRTYPE_REFINE] = math.floor(200 * Layer) / 10 + attr[CommonFun.RoleData.EATTRTYPE_REFINE]
    result[CommonFun.RoleData.EATTRTYPE_MREFINE] = math.floor(200 * Layer) / 10 + attr[CommonFun.RoleData.EATTRTYPE_MREFINE]
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_DAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = Layer * 0.02 + attr[CommonFun.RoleData.EATTRTYPE_IgnoreDef]
    result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = Layer * 0.02 + attr[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF]
    result[CommonFun.RoleData.EATTRTYPE_STATEDEF] = 0.25 + attr[CommonFun.RoleData.EATTRTYPE_STATEDEF]
  elseif 10 < Layer and Layer <= 20 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.floor(25.806 * (Layer - 10) ^ 2 + 541.94 * (Layer - 10) + 2000) + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.floor(25.806 * (Layer - 10) ^ 2 + 541.94 * (Layer - 10) + 2000) + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = math.floor(25.806 * (Layer - 10) ^ 2 + 541.94 * (Layer - 10) + 2000) / 4 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = math.floor(25.806 * (Layer - 10) ^ 2 + 541.94 * (Layer - 10) + 2000) / 8 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.floor(-5.4277 * Layer ^ 4 + 578.96 * Layer ^ 3 - 8741.5 * Layer ^ 2 + 239231 * Layer - 42844) * 0.9 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]
    result[CommonFun.RoleData.EATTRTYPE_HIT] = Layer * 5 + 500 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer * 2 + 120 + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer + 20 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.5 + 10 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = Layer * 0.01 + 0.5 + attr[CommonFun.RoleData.EATTRTYPE_CRIDAMPER]
    result[CommonFun.RoleData.EATTRTYPE_REFINE] = math.floor(500 * Layer - 5000) / 10 + attr[CommonFun.RoleData.EATTRTYPE_REFINE]
    result[CommonFun.RoleData.EATTRTYPE_MREFINE] = math.floor(500 * Layer - 5000) / 10 + attr[CommonFun.RoleData.EATTRTYPE_MREFINE]
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = (Layer - 10) * 0.02 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = (Layer - 10) * 0.02 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = (Layer - 10) * 0.05 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_DAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = (Layer - 10) * 0.05 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = (Layer - 10) * 0.02 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = (Layer - 10) * 0.02 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = (Layer - 10) * 0.04 + 0.2 + attr[CommonFun.RoleData.EATTRTYPE_IgnoreDef]
    result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = (Layer - 10) * 0.04 + 0.2 + attr[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF]
    result[CommonFun.RoleData.EATTRTYPE_STATEDEF] = 0.5 + attr[CommonFun.RoleData.EATTRTYPE_STATEDEF]
  elseif 20 < Layer and Layer <= 40 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 500 + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 500 + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 2000 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 4000 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) * 0.9 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]
    result[CommonFun.RoleData.EATTRTYPE_HIT] = Layer * 5 + 500 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer * 2 + 200 + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer + 20 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.5 + 20 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = Layer * 0.01 + 1 + attr[CommonFun.RoleData.EATTRTYPE_CRIDAMPER]
    result[CommonFun.RoleData.EATTRTYPE_REFINE] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 1000 + attr[CommonFun.RoleData.EATTRTYPE_REFINE]
    result[CommonFun.RoleData.EATTRTYPE_MREFINE] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 1000 + attr[CommonFun.RoleData.EATTRTYPE_MREFINE]
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_IgnoreDef]
    result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF]
    result[CommonFun.RoleData.EATTRTYPE_STATEDEF] = 0.75 + attr[CommonFun.RoleData.EATTRTYPE_STATEDEF]
  elseif 40 < Layer and Layer <= 60 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 500 + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 500 + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 2000 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 4000 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) * 0.9 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]
    result[CommonFun.RoleData.EATTRTYPE_HIT] = Layer * 5 + 500 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer * 2 + 200 + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer + 20 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.5 + 20 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = Layer * 0.01 + 1 + attr[CommonFun.RoleData.EATTRTYPE_CRIDAMPER]
    result[CommonFun.RoleData.EATTRTYPE_REFINE] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 1000 + attr[CommonFun.RoleData.EATTRTYPE_REFINE]
    result[CommonFun.RoleData.EATTRTYPE_MREFINE] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 1000 + attr[CommonFun.RoleData.EATTRTYPE_MREFINE]
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_IgnoreDef]
    result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF]
    result[CommonFun.RoleData.EATTRTYPE_STATEDEF] = 0.75 + attr[CommonFun.RoleData.EATTRTYPE_STATEDEF]
  end
  return result
end

function CommonFun.calcRoguelikeMiniNpcAttrValue(attr, Type, classtype, Layer)
  local result = {}
  if Layer <= 10 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.floor(200 * Layer) + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.floor(200 * Layer) + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = math.floor(200 * Layer) / 4 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = math.floor(200 * Layer) / 8 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.floor(-5.4277 * Layer ^ 4 + 578.96 * Layer ^ 3 - 8741.5 * Layer ^ 2 + 239231 * Layer - 42844) * 5 * 0.9 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]
    result[CommonFun.RoleData.EATTRTYPE_HIT] = Layer * 5 + 800 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer * 2 + 100 + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer + 30 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.5 + 20 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = Layer * 0.01 + 0.5 + attr[CommonFun.RoleData.EATTRTYPE_CRIDAMPER]
    result[CommonFun.RoleData.EATTRTYPE_REFINE] = math.floor(200 * Layer) / 10 + attr[CommonFun.RoleData.EATTRTYPE_REFINE]
    result[CommonFun.RoleData.EATTRTYPE_MREFINE] = math.floor(200 * Layer) / 10 + attr[CommonFun.RoleData.EATTRTYPE_MREFINE]
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_DAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = Layer * 0.02 + attr[CommonFun.RoleData.EATTRTYPE_IgnoreDef]
    result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = Layer * 0.02 + attr[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF]
  elseif 10 < Layer and Layer <= 20 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.floor(25.806 * (Layer - 10) ^ 2 + 541.94 * (Layer - 10) + 2000) + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.floor(25.806 * (Layer - 10) ^ 2 + 541.94 * (Layer - 10) + 2000) + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = math.floor(25.806 * (Layer - 10) ^ 2 + 541.94 * (Layer - 10) + 2000) / 4 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = math.floor(25.806 * (Layer - 10) ^ 2 + 541.94 * (Layer - 10) + 2000) / 8 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.floor(-5.4277 * Layer ^ 4 + 578.96 * Layer ^ 3 - 8741.5 * Layer ^ 2 + 239231 * Layer - 42844) * 5 * 0.9 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]
    result[CommonFun.RoleData.EATTRTYPE_HIT] = Layer * 5 + 800 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer * 2 + 120 + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer + 30 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.5 + 20 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = Layer * 0.01 + 0.5 + attr[CommonFun.RoleData.EATTRTYPE_CRIDAMPER]
    result[CommonFun.RoleData.EATTRTYPE_REFINE] = math.floor(500 * Layer - 5000) / 10 + attr[CommonFun.RoleData.EATTRTYPE_REFINE]
    result[CommonFun.RoleData.EATTRTYPE_MREFINE] = math.floor(500 * Layer - 5000) / 10 + attr[CommonFun.RoleData.EATTRTYPE_MREFINE]
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = (Layer - 10) * 0.02 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = (Layer - 10) * 0.02 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = (Layer - 10) * 0.05 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_DAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = (Layer - 10) * 0.05 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = (Layer - 10) * 0.02 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = (Layer - 10) * 0.02 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = (Layer - 10) * 0.04 + 0.2 + attr[CommonFun.RoleData.EATTRTYPE_IgnoreDef]
    result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = (Layer - 10) * 0.04 + 0.2 + attr[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF]
  elseif 20 < Layer and Layer <= 40 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 500 + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 500 + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 2000 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 4000 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) * 5 * 0.9 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]
    result[CommonFun.RoleData.EATTRTYPE_HIT] = Layer * 10 + 800 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer * 2 + 200 + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer * 2 + 40 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.5 + 40 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = Layer * 0.02 + 1 + attr[CommonFun.RoleData.EATTRTYPE_CRIDAMPER]
    result[CommonFun.RoleData.EATTRTYPE_REFINE] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 1000 + attr[CommonFun.RoleData.EATTRTYPE_REFINE]
    result[CommonFun.RoleData.EATTRTYPE_MREFINE] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 1000 + attr[CommonFun.RoleData.EATTRTYPE_MREFINE]
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_IgnoreDef]
    result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF]
  elseif 40 < Layer and Layer <= 60 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 500 + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 500 + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 2000 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 4000 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) * 5 * 0.9 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]
    result[CommonFun.RoleData.EATTRTYPE_HIT] = Layer * 10 + 800 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer * 2 + 200 + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer * 2 + 40 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.5 + 40 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = Layer * 0.02 + 1 + attr[CommonFun.RoleData.EATTRTYPE_CRIDAMPER]
    result[CommonFun.RoleData.EATTRTYPE_REFINE] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 1000 + attr[CommonFun.RoleData.EATTRTYPE_REFINE]
    result[CommonFun.RoleData.EATTRTYPE_MREFINE] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 1000 + attr[CommonFun.RoleData.EATTRTYPE_MREFINE]
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_IgnoreDef]
    result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF]
  end
  return result
end

function CommonFun.calcRoguelikeMvpNpcAttrValue(attr, Type, classtype, Layer)
  local result = {}
  if Layer <= 10 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.floor(200 * Layer) + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.floor(200 * Layer) + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = math.floor(200 * Layer) / 4 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = math.floor(200 * Layer) / 8 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.floor(-5.4277 * Layer ^ 4 + 578.96 * Layer ^ 3 - 8741.5 * Layer ^ 2 + 239231 * Layer - 42844) * 10 * 0.9 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]
    result[CommonFun.RoleData.EATTRTYPE_HIT] = Layer * 5 + 800 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer * 2 + 100 + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer + 30 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.5 + 20 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = Layer * 0.01 + 0.5 + attr[CommonFun.RoleData.EATTRTYPE_CRIDAMPER]
    result[CommonFun.RoleData.EATTRTYPE_REFINE] = math.floor(200 * Layer) / 10 + attr[CommonFun.RoleData.EATTRTYPE_REFINE]
    result[CommonFun.RoleData.EATTRTYPE_MREFINE] = math.floor(200 * Layer) / 10 + attr[CommonFun.RoleData.EATTRTYPE_MREFINE]
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_DAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = Layer * 0.01 + attr[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = Layer * 0.02 + attr[CommonFun.RoleData.EATTRTYPE_IgnoreDef]
    result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = Layer * 0.02 + attr[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF]
  elseif 10 < Layer and Layer <= 20 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.floor(25.806 * (Layer - 10) ^ 2 + 541.94 * (Layer - 10) + 2000) + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.floor(25.806 * (Layer - 10) ^ 2 + 541.94 * (Layer - 10) + 2000) + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = math.floor(25.806 * (Layer - 10) ^ 2 + 541.94 * (Layer - 10) + 2000) / 4 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = math.floor(25.806 * (Layer - 10) ^ 2 + 541.94 * (Layer - 10) + 2000) / 8 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.floor(-5.4277 * Layer ^ 4 + 578.96 * Layer ^ 3 - 8741.5 * Layer ^ 2 + 239231 * Layer - 42844) * 10 * 0.9 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]
    result[CommonFun.RoleData.EATTRTYPE_HIT] = Layer * 5 + 800 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer * 2 + 120 + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer + 30 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.5 + 20 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = Layer * 0.01 + 0.5 + attr[CommonFun.RoleData.EATTRTYPE_CRIDAMPER]
    result[CommonFun.RoleData.EATTRTYPE_REFINE] = math.floor(500 * Layer - 5000) / 10 + attr[CommonFun.RoleData.EATTRTYPE_REFINE]
    result[CommonFun.RoleData.EATTRTYPE_MREFINE] = math.floor(500 * Layer - 5000) / 10 + attr[CommonFun.RoleData.EATTRTYPE_MREFINE]
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = (Layer - 10) * 0.02 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = (Layer - 10) * 0.02 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = (Layer - 10) * 0.05 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_DAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = (Layer - 10) * 0.05 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = (Layer - 10) * 0.02 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = (Layer - 10) * 0.02 + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = (Layer - 10) * 0.04 + 0.2 + attr[CommonFun.RoleData.EATTRTYPE_IgnoreDef]
    result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = (Layer - 10) * 0.04 + 0.2 + attr[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF]
  elseif 20 < Layer and Layer <= 40 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 500 + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 500 + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 2000 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 4000 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) * 10 * 0.9 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]
    result[CommonFun.RoleData.EATTRTYPE_HIT] = Layer * 10 + 800 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer * 2 + 200 + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer * 2 + 40 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.5 + 40 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = Layer * 0.02 + 1 + attr[CommonFun.RoleData.EATTRTYPE_CRIDAMPER]
    result[CommonFun.RoleData.EATTRTYPE_REFINE] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 1000 + attr[CommonFun.RoleData.EATTRTYPE_REFINE]
    result[CommonFun.RoleData.EATTRTYPE_MREFINE] = math.floor(33.208 * (Layer - 20) ^ 4 - 1626.3 * (Layer - 20) ^ 3 + 30670 * (Layer - 20) ^ 2 + 183476 * (Layer - 20) + 4280000) / 1000 + attr[CommonFun.RoleData.EATTRTYPE_MREFINE]
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_IgnoreDef]
    result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF]
  elseif 40 < Layer and Layer <= 60 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 500 + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 500 + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 2000 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 4000 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) * 10 * 0.9 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]
    result[CommonFun.RoleData.EATTRTYPE_HIT] = Layer * 10 + 800 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = Layer * 2 + 200 + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = Layer * 2 + 40 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = Layer * 0.5 + 40 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_CRIDAMPER] = Layer * 0.02 + 1 + attr[CommonFun.RoleData.EATTRTYPE_CRIDAMPER]
    result[CommonFun.RoleData.EATTRTYPE_REFINE] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 1000 + attr[CommonFun.RoleData.EATTRTYPE_REFINE]
    result[CommonFun.RoleData.EATTRTYPE_MREFINE] = math.floor(26.53 * (Layer - 40) ^ 4 - 1286.3 * (Layer - 40) ^ 3 + 21682 * (Layer - 40) ^ 2 + 588287 * (Layer - 40) + 10620000) / 1000 + attr[CommonFun.RoleData.EATTRTYPE_MREFINE]
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = Layer * 0.005 + 0.195 + attr[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_IgnoreDef]
    result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = Layer * 0.01 + 0.4 + attr[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF]
  end
  return result
end

function CommonFun.calcPveMonsterNpcAttrValue(attr, Type, fScale)
  local result = {}
  if fScale == 1 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_ATK] * 0.8 * 0.2)
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_MATK] * 0.9 * 0.2)
    result[CommonFun.RoleData.EATTRTYPE_DEF] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_DEF] * 1)
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_MDEF] * 1)
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_MAXHP] * 0.88 * 0.5)
  end
  return result
end

function CommonFun.calcPveMiniNpcAttrValue(attr, Type, fScale)
  local result = {}
  if fScale == 1 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_ATK] * 0.6 * 0.2)
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_MATK] * 0.9 * 0.2)
    result[CommonFun.RoleData.EATTRTYPE_DEF] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_DEF] * 1)
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_MDEF] * 1)
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_MAXHP] * 0.88 * 0.5)
  end
  return result
end

function CommonFun.calcPveMvpNpcAttrValue(attr, Type, fScale)
  local result = {}
  if fScale == 1 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_ATK] * 0.6 * 0.2)
    result[CommonFun.RoleData.EATTRTYPE_MATK] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_MATK] * 0.9 * 0.2)
    result[CommonFun.RoleData.EATTRTYPE_DEF] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_DEF] * 1)
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_MDEF] * 1)
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = math.floor(attr[CommonFun.RoleData.EATTRTYPE_MAXHP] * 0.28 * 0.5)
  end
  return result
end

function calcDeadNpcAttrValue(attr, type, pro, lv)
  local result = {}
  result[CommonFun.RoleData.EATTRTYPE_HIT] = attr[CommonFun.RoleData.EATTRTYPE_HIT] * (1 + 0.05 * lv)
  result[CommonFun.RoleData.EATTRTYPE_FLEE] = attr[CommonFun.RoleData.EATTRTYPE_Flee] * (1 + 0.05 * lv)
  result[CommonFun.RoleData.EATTRTYPE_ATK] = attr[CommonFun.RoleData.EATTRTYPE_ATK] * (1 + 0.05 * lv + math.floor(lv / 4) * 0.4)
  result[CommonFun.RoleData.EATTRTYPE_MATK] = attr[CommonFun.RoleData.EATTRTYPE_MATK] * (1 + 0.05 * lv + math.floor(lv / 4) * 0.4)
  result[CommonFun.RoleData.EATTRTYPE_DEF] = attr[CommonFun.RoleData.EATTRTYPE_DEF] * (1 + 0.05 * lv + math.floor(lv / 4) * 0.3)
  result[CommonFun.RoleData.EATTRTYPE_MDEF] = attr[CommonFun.RoleData.EATTRTYPE_MDEF] * (1 + 0.05 * lv + math.floor(lv / 4) * 0.3)
  result[CommonFun.RoleData.EATTRTYPE_MAXHP] = attr[CommonFun.RoleData.EATTRTYPE_MAXHP] * (0.4 + 0.05 * lv + lv * lv / 50)
  result[CommonFun.RoleData.EATTRTYPE_ATKSPD] = attr[CommonFun.RoleData.EATTRTYPE_ATKSPD] * (1 + math.floor(lv / 4) * 0.1)
  return result
end

function CommonFun.calcEndlessTowerNpcAttrValue(attr, Type, classtype, Layer)
  local result = {}
  if Type == 3 then
    result = CommonFun.calcTowerMonsterNpcAttrValue(attr, Type, classtype, Layer)
  elseif Type == 4 then
    result = CommonFun.calcTowerMiniNpcAttrValue(attr, Type, classtype, Layer)
  elseif Type == 5 then
    result = CommonFun.calcTowerMvpNpcAttrValue(attr, Type, classtype, Layer)
  elseif Type == 6 then
    result = CommonFun.calcTowerSmallMiniNpcAttrValue(attr, Type, classtype, Layer)
  end
  for k, v in pairs(result) do
    result[k] = math.floor(v * 1000) / 1000
  end
  return result
end

function CommonFun.calcRoguelikeNpcAttrValue(attr, Type, classtype, Layer)
  local result = {}
  if Type == 3 then
    result = CommonFun.calcRoguelikeMonsterNpcAttrValue(attr, Type, classtype, Layer)
  elseif Type == 4 then
    result = CommonFun.calcRoguelikeMiniNpcAttrValue(attr, Type, classtype, Layer)
  elseif Type == 5 then
    result = CommonFun.calcRoguelikeMvpNpcAttrValue(attr, Type, classtype, Layer)
  end
  for k, v in pairs(result) do
    result[k] = math.floor(v * 1000) / 1000
  end
  return result
end

function CommonFun.calcPveNpcAttrValue(attr, Type, fScale)
  local result = {}
  if Type == 3 then
    result = CommonFun.calcPveMonsterNpcAttrValue(attr, Type, fScale)
  elseif Type == 4 then
    result = CommonFun.calcPveMiniNpcAttrValue(attr, Type, fScale)
  elseif Type == 5 then
    result = CommonFun.calcPveMvpNpcAttrValue(attr, Type, fScale)
  end
  for k, v in pairs(result) do
    result[k] = math.floor(v * 1000) / 1000
  end
  return result
end

function CommonFun.calcLaboratoryNpcAttrValue(attr, level, classtype, roundid)
  local result = {}
  if classtype == 11 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.34 * level * level - 8.26 * level + 72) * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.34 * level * level - 8.26 * level + 72) * 0.4
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * level * level * level - 0.0494 * level * level + 4.5061 * level + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * level
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * level * level * level - 2.9336 * level * level + 202.51 * level + 40.727) * 2 * 3
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * level + 50
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = level
    result[CommonFun.RoleData.EATTRTYPE_CRI] = level * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = level * 0.3
  elseif classtype == 12 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.34 * level * level - 8.26 * level + 72) * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.34 * level * level - 8.26 * level + 72) * 0.4
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * level * level * level - 0.0494 * level * level + 4.5061 * level + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * level
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * level * level * level - 2.9336 * level * level + 202.51 * level + 40.727) * 2 * 3
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * level + 50
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = level
    result[CommonFun.RoleData.EATTRTYPE_CRI] = level * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = level * 0.3
  elseif classtype == 21 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.34 * level * level - 8.26 * level + 72) * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.34 * level * level - 8.26 * level + 72) * 0.4
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * level * level * level - 0.0494 * level * level + 4.5061 * level + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * level
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * level * level * level - 2.9336 * level * level + 202.51 * level + 40.727) * 3
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * level + 50
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = level
    result[CommonFun.RoleData.EATTRTYPE_CRI] = level * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = level * 0.3
  elseif classtype == 31 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.34 * level * level - 8.26 * level + 72) * 0.75
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.34 * level * level - 8.26 * level + 72) * 0.75
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * level * level * level - 0.0494 * level * level + 4.5061 * level + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * level
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * level * level * level - 2.9336 * level * level + 202.51 * level + 40.727) * 3
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * level + 50
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = level
    result[CommonFun.RoleData.EATTRTYPE_CRI] = level * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = level * 0.3
  elseif classtype == 41 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.34 * level * level - 8.26 * level + 72) * 0.75
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.34 * level * level - 8.26 * level + 72) * 0.75
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * level * level * level - 0.0494 * level * level + 4.5061 * level + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * level
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * level * level * level - 2.9336 * level * level + 202.51 * level + 40.727) * 3
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * level + 50
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = level
    result[CommonFun.RoleData.EATTRTYPE_CRI] = level * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = level * 0.3
  elseif classtype == 51 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.34 * level * level - 8.26 * level + 72) * 0.5
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.34 * level * level - 8.26 * level + 72) * 0.5
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * level * level * level - 0.0494 * level * level + 4.5061 * level + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * level
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * level * level * level - 2.9336 * level * level + 202.51 * level + 40.727) * 2
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * level + 50
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = level
    result[CommonFun.RoleData.EATTRTYPE_CRI] = level * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = level * 0.3
  else
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.34 * level * level - 8.26 * level + 72) * 0.5
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.34 * level * level - 8.26 * level + 72) * 0.5
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * level * level * level - 0.0494 * level * level + 4.5061 * level + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * level
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * level * level * level - 2.9336 * level * level + 202.51 * level + 40.727) * 2
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * level + 50
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = level
    result[CommonFun.RoleData.EATTRTYPE_CRI] = level * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = level * 0.3
  end
  return result
end

function CommonFun.calcSealNpcAttrValue(attr, classtype, sealtype, mapid)
  local result = {}
  local A = GameConfig.Seal.npclv[mapid]
  if A == nil then
    A = 65
  end
  if sealtype == 1 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.34 * A * A - 8.26 * A + 72) * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.34 * A * A - 8.26 * A + 72) * 0.23
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * A * A * A - 0.0494 * A * A + 4.5061 * A + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 0.1373 * A * A * A - 2.9336 * A * A + 202.51 * A + 40.727
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * A + 50
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = A + 50
    result[CommonFun.RoleData.EATTRTYPE_CRI] = A * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = A * 0.3
  elseif A < 20 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 4
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * A * A * A - 0.0494 * A * A + 4.5061 * A + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * A * A * A - 2.9336 * A * A + 202.51 * A + 40.727) * 0.1
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = A
    result[CommonFun.RoleData.EATTRTYPE_CRI] = A * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = A * 0.3
  elseif A < 30 and 20 <= A then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (2 * (A - 19) + 8) * 0.5
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (2 * (A - 19) + 8) * 0.2
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * A * A * A - 0.0494 * A * A + 4.5061 * A + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * A * A * A - 2.9336 * A * A + 202.51 * A + 40.727) * 0.1
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = A
    result[CommonFun.RoleData.EATTRTYPE_CRI] = A * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = A * 0.3
  elseif A < 40 and 30 <= A then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (3 * (A - 29) + 25) * 0.5
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (3 * (A - 29) + 25) * 0.2
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * A * A * A - 0.0494 * A * A + 4.5061 * A + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * A * A * A - 2.9336 * A * A + 202.51 * A + 40.727) * 0.15
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = A
    result[CommonFun.RoleData.EATTRTYPE_CRI] = A * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = A * 0.3
  elseif A < 50 and 40 <= A then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (A - 39 + 57) * 0.5
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (A - 39 + 57) * 0.2
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * A * A * A - 0.0494 * A * A + 4.5061 * A + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * A * A * A - 2.9336 * A * A + 202.51 * A + 40.727) * 0.15
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = A
    result[CommonFun.RoleData.EATTRTYPE_CRI] = A * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = A * 0.3
  elseif A < 60 and 50 <= A then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (2 * (A - 49) + 69) * 0.5
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (2 * (A - 49) + 69) * 0.2
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * A * A * A - 0.0494 * A * A + 4.5061 * A + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * A * A * A - 2.9336 * A * A + 202.51 * A + 40.727) * 0.2
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = A
    result[CommonFun.RoleData.EATTRTYPE_CRI] = A * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = A * 0.3
  elseif A < 70 and 60 <= A then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (3 * (A - 59) + 94) * 0.5
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (3 * (A - 59) + 94) * 0.2
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * A * A * A - 0.0494 * A * A + 4.5061 * A + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * A * A * A - 2.9336 * A * A + 202.51 * A + 40.727) * 0.2
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = A
    result[CommonFun.RoleData.EATTRTYPE_CRI] = A * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = A * 0.3
  elseif A < 80 and 70 <= A then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 13 * (A - 69) + 114
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (13 * (A - 69) + 114) * 0.5
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * A * A * A - 0.0494 * A * A + 4.5061 * A + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * A * A * A - 2.9336 * A * A + 202.51 * A + 40.727) * 0.2
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = A
    result[CommonFun.RoleData.EATTRTYPE_CRI] = A * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = A * 0.3
  elseif A < 90 and 80 <= A then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 7 * (A - 79) + 242
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (7 * (A - 79) + 242) * 0.5
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * A * A * A - 0.0494 * A * A + 4.5061 * A + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * A * A * A - 2.9336 * A * A + 202.51 * A + 40.727) * 0.2
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = A
    result[CommonFun.RoleData.EATTRTYPE_CRI] = A * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = A * 0.3
  elseif A < 100 and 90 <= A then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 8 * (A - 89) + 309
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (8 * (A - 89) + 309) * 0.5
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * A * A * A - 0.0494 * A * A + 4.5061 * A + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * A * A * A - 2.9336 * A * A + 202.51 * A + 40.727) * 0.2
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * A
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = A
    result[CommonFun.RoleData.EATTRTYPE_CRI] = A * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = A * 0.3
  end
  return result
end

function CommonFun.calcDojoNpcAttrValue(attr, Type, classtype, DojoLevel)
  local result = {}
  local A = DojoLevel * DojoLevel / 150
  if A <= 1 then
    A = 1
  end
  if Type == ENPCTYPE_MONSTER then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.0057 * DojoLevel * DojoLevel * DojoLevel - 0.3728 * DojoLevel * DojoLevel + 15.339 * DojoLevel - 10) * 0.2
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.0057 * DojoLevel * DojoLevel * DojoLevel - 0.3728 * DojoLevel * DojoLevel + 15.339 * DojoLevel - 10) * 0.2
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * DojoLevel * DojoLevel * DojoLevel - 0.0494 * DojoLevel * DojoLevel + 4.5061 * DojoLevel + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * DojoLevel
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * DojoLevel * DojoLevel * DojoLevel - 2.9336 * DojoLevel * DojoLevel + 202.51 * DojoLevel + 40.727) * 0.3
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * DojoLevel + 50
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = DojoLevel
    result[CommonFun.RoleData.EATTRTYPE_CRI] = DojoLevel * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = DojoLevel * 0.3
  elseif Type == ENPCTYPE_MINIBOSS then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.0057 * DojoLevel * DojoLevel * DojoLevel - 0.3728 * DojoLevel * DojoLevel + 15.339 * DojoLevel - 10) * 0.5
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.0057 * DojoLevel * DojoLevel * DojoLevel - 0.3728 * DojoLevel * DojoLevel + 15.339 * DojoLevel - 10) * 0.5
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * DojoLevel * DojoLevel * DojoLevel - 0.0494 * DojoLevel * DojoLevel + 4.5061 * DojoLevel + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * DojoLevel
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * DojoLevel * DojoLevel * DojoLevel - 2.9336 * DojoLevel * DojoLevel + 202.51 * DojoLevel + 40.727) * 0.75
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * DojoLevel + 50
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = DojoLevel
    result[CommonFun.RoleData.EATTRTYPE_CRI] = DojoLevel * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = DojoLevel * 0.3
  elseif Type == ENPCTYPE_MVP then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.0057 * DojoLevel * DojoLevel * DojoLevel - 0.3728 * DojoLevel * DojoLevel + 15.339 * DojoLevel - 10) * 0.75
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.0057 * DojoLevel * DojoLevel * DojoLevel - 0.3728 * DojoLevel * DojoLevel + 15.339 * DojoLevel - 10) * 0.75
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * DojoLevel * DojoLevel * DojoLevel - 0.0494 * DojoLevel * DojoLevel + 4.5061 * DojoLevel + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * DojoLevel
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * DojoLevel * DojoLevel * DojoLevel - 2.9336 * DojoLevel * DojoLevel + 202.51 * DojoLevel + 40.727) * A
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * DojoLevel + 50
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = DojoLevel
    result[CommonFun.RoleData.EATTRTYPE_CRI] = DojoLevel * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = DojoLevel * 0.3
  else
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (0.0057 * DojoLevel * DojoLevel * DojoLevel - 0.3728 * DojoLevel * DojoLevel + 15.339 * DojoLevel - 10) * 0.3
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (0.0057 * DojoLevel * DojoLevel * DojoLevel - 0.3728 * DojoLevel * DojoLevel + 15.339 * DojoLevel - 10) * 0.3
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 8.0E-4 * DojoLevel * DojoLevel * DojoLevel - 0.0494 * DojoLevel * DojoLevel + 4.5061 * DojoLevel + 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 2 * DojoLevel
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (0.1373 * DojoLevel * DojoLevel * DojoLevel - 2.9336 * DojoLevel * DojoLevel + 202.51 * DojoLevel + 40.727) * 0.6
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 2 * DojoLevel + 50
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = DojoLevel
    result[CommonFun.RoleData.EATTRTYPE_CRI] = DojoLevel * 0.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = DojoLevel * 0.3
  end
  return result
end

function CommonFun.calcWeaponPetNpcAttrValue(attr, classtype, level, srcUser)
  local result = {}
  if srcUser == nil then
    return result
  end
  local a = 1
  if srcUser ~= nil and srcUser:HasBuffID(30000) == true then
    a = 1.1
  end
  local wlv = srcUser:GetWeaponPetLevel()
  if classtype == 51 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 0.15 * level * level - 3 * level + 70 + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 0.1 * level * level - 3 * level + 70 + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = level * 6 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = level * 2 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (4 * level * level + 140 * level + 1000 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 3 * level + 50 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = level + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = level * 0.3 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = level * 0.3 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_DAMINCREASE] = wlv * 0 + attr[CommonFun.RoleData.EATTRTYPE_DAMINCREASE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMINCREASE] = wlv * 0 + attr[CommonFun.RoleData.EATTRTYPE_MDAMINCREASE]
    result[CommonFun.RoleData.EATTRTYPE_HEALENCPER] = math.floor((wlv + 1) / 2) * 0.2 + level / 200 + attr[CommonFun.RoleData.EATTRTYPE_HEALENCPER]
  elseif classtype == 41 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (math.max(0.009 * (level - 10) ^ 3 - 0.09 * (level - 10) ^ 2 + 8 * (level - 10) + 25, 25) + attr[CommonFun.RoleData.EATTRTYPE_ATK]) * a
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 0.1 * level * level - 3 * level + 70 + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = level * 6 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = level * 2 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (5 * level * level + 140 * level + 1000 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 3 * level + 50 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = level + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = level * 0.3 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = level * 0.3 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_DAMINCREASE] = math.floor((wlv + 1) / 2) * 0.2 + attr[CommonFun.RoleData.EATTRTYPE_DAMINCREASE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMINCREASE] = wlv * 0 + attr[CommonFun.RoleData.EATTRTYPE_MDAMINCREASE]
    result[CommonFun.RoleData.EATTRTYPE_HEALENCPER] = wlv * 0 + attr[CommonFun.RoleData.EATTRTYPE_HEALENCPER]
  elseif classtype == 11 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 0.15 * level * level - 3 * level + 70 + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 0.1 * level * level - 3 * level + 70 + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = level * 12 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = level * 4 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (4 * level * level + 350 * level + 5000 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + math.floor((wlv + 1) / 2) * 0.2 + level / 200 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 3 * level + 50 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = level + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = level * 0.3 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = level * 0.3 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_DAMINCREASE] = wlv * 0 + attr[CommonFun.RoleData.EATTRTYPE_DAMINCREASE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMINCREASE] = wlv * 0 + attr[CommonFun.RoleData.EATTRTYPE_MDAMINCREASE]
    result[CommonFun.RoleData.EATTRTYPE_HEALENCPER] = wlv * 0 + attr[CommonFun.RoleData.EATTRTYPE_HEALENCPER]
  elseif classtype == 21 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 0.1 * level * level - 3 * level + 70 + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (math.max(0.01 * (level - 10) ^ 3 - 0.1 * (level - 10) ^ 2 + 10 * (level - 10) + 25, 25) + attr[CommonFun.RoleData.EATTRTYPE_MATK]) * a
    result[CommonFun.RoleData.EATTRTYPE_DEF] = level * 6 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = level * 2 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (5 * level * level + 140 * level + 1000 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 3 * level + 50 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = level + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = level * 0.3 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = level * 0.3 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
    result[CommonFun.RoleData.EATTRTYPE_DAMINCREASE] = wlv * 0 + attr[CommonFun.RoleData.EATTRTYPE_DAMINCREASE]
    result[CommonFun.RoleData.EATTRTYPE_MDAMINCREASE] = math.floor((wlv + 1) / 2) * 0.2 + attr[CommonFun.RoleData.EATTRTYPE_MDAMINCREASE]
    result[CommonFun.RoleData.EATTRTYPE_HEALENCPER] = wlv * 0 + attr[CommonFun.RoleData.EATTRTYPE_HEALENCPER]
  else
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 0.15 * level * level - 3 * level + 70 + attr[CommonFun.RoleData.EATTRTYPE_ATK]
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 0.1 * level * level - 3 * level + 70 + attr[CommonFun.RoleData.EATTRTYPE_MATK]
    result[CommonFun.RoleData.EATTRTYPE_DEF] = level * 6 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = level * 2 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 1.5 * level * level - 10 * level + 1000 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 3 * level + 50 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = level + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
    result[CommonFun.RoleData.EATTRTYPE_CRI] = level * 0.3 + attr[CommonFun.RoleData.EATTRTYPE_CRI]
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = level * 0.3 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
  end
  return result
end

function CommonFun.calcPetNpcAttrValue(attr, petlv, classtype)
  local result = {}
  local QualityRatio = 0
  if classtype == 11 or classtype == 21 or classtype == 31 or classtype == 41 or classtype == 51 or classtype == 61 then
    QualityRatio = 1.4
  elseif classtype == 12 or classtype == 22 or classtype == 32 or classtype == 42 or classtype == 52 or classtype == 62 then
    QualityRatio = 1.8
  elseif classtype == 13 or classtype == 23 or classtype == 33 or classtype == 43 or classtype == 53 or classtype == 63 then
    QualityRatio = 2.3
  elseif classtype == 14 or classtype == 24 or classtype == 34 or classtype == 44 or classtype == 54 or classtype == 64 then
    QualityRatio = 3
  else
    QualityRatio = 1
  end
  if classtype == 11 or classtype == 12 or classtype == 13 or classtype == 14 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (3 + (petlv - 1) * 0.216) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_STR]
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_AGI]
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (4 + (petlv - 1) * 0.288) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_VIT]
    result[CommonFun.RoleData.EATTRTYPE_INT] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_INT]
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (1.5 + (petlv - 1) * 0.108) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_DEX]
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_LUK]
  elseif classtype == 21 or classtype == 22 or classtype == 23 or classtype == 24 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_STR]
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_AGI]
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_VIT]
    result[CommonFun.RoleData.EATTRTYPE_INT] = (4 + (petlv - 1) * 0.288) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_INT]
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (4 + (petlv - 1) * 0.288) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_DEX]
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_LUK]
  elseif classtype == 31 or classtype == 32 or classtype == 33 or classtype == 34 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (4 + (petlv - 1) * 0.288) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_STR]
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (3 + (petlv - 1) * 0.216) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_AGI]
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_VIT]
    result[CommonFun.RoleData.EATTRTYPE_INT] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_INT]
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (1 + (petlv - 1) * 0.072) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_DEX]
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (1 + (petlv - 1) * 0.072) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_LUK]
  elseif classtype == 41 or classtype == 42 or classtype == 43 or classtype == 44 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_STR]
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (3 + (petlv - 1) * 0.216) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_AGI]
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_VIT]
    result[CommonFun.RoleData.EATTRTYPE_INT] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_INT]
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (4 + (petlv - 1) * 0.288) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_DEX]
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (1.5 + (petlv - 1) * 0.108) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_LUK]
  elseif classtype == 51 or classtype == 52 or classtype == 53 or classtype == 54 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_STR]
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_AGI]
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (3 + (petlv - 1) * 0.216) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_VIT]
    result[CommonFun.RoleData.EATTRTYPE_INT] = (4 + (petlv - 1) * 0.288) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_INT]
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (1.5 + (petlv - 1) * 0.108) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_DEX]
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_LUK]
  elseif classtype == 61 or classtype == 62 or classtype == 63 or classtype == 64 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (2 + (petlv - 1) * 0.144) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_STR]
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (2 + (petlv - 1) * 0.144) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_AGI]
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (0.7 + (petlv - 1) * 0.0504) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_VIT]
    result[CommonFun.RoleData.EATTRTYPE_INT] = (0.5 + (petlv - 1) * 0.036) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_INT]
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (2.5 + (petlv - 1) * 0.18) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_DEX]
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (2.3 + (petlv - 1) * 0.1656) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_LUK]
  else
    result[CommonFun.RoleData.EATTRTYPE_STR] = (2 + (petlv - 1) * 0.144) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_STR]
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (2 + (petlv - 1) * 0.144) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_AGI]
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (2 + (petlv - 1) * 0.144) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_VIT]
    result[CommonFun.RoleData.EATTRTYPE_INT] = (1 + (petlv - 1) * 0.072) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_INT]
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (2 + (petlv - 1) * 0.144) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_DEX]
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (1 + (petlv - 1) * 0.072) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_LUK]
  end
  if classtype == 1 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 78 + (petlv - 1) * 6.12 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 24 + (petlv - 1) * 1.91 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 34 + (petlv - 1) * 1.72 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 34 + (petlv - 1) * 1.72 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (126 + (petlv - 1) * 126.81 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 44 + (petlv - 1) * 1.72 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 44 + (petlv - 1) * 1.72 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 14 + (petlv - 1) * 0.28 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 12.4 + (petlv - 1) * 0.17 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 11 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 168 + (petlv - 1) * 12.19 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + (petlv - 1) * 1.34 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 76 + (petlv - 1) * 4.85 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 52 + (petlv - 1) * 3 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (170 + (petlv - 1) * 276.5 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 44 + (petlv - 1) * 1.78 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 126 + (petlv - 1) * 0.57 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 12.8 + (petlv - 1) * 0.2 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 11.7 + (petlv - 1) * 0.12 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 12 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 216 + (petlv - 1) * 15.7 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + (petlv - 1) * 1.78 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 94 + (petlv - 1) * 6.19 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 64 + (petlv - 1) * 3.82 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (190 + (petlv - 1) * 343.02 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 50 + (petlv - 1) * 2.29 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 26 + (petlv - 1) * 0.76 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 13.6 + (petlv - 1) * 0.26 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 12.2 + (petlv - 1) * 0.15 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 13 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 276 + (petlv - 1) * 20.04 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 30 + (petlv - 1) * 2.17 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 118 + (petlv - 1) * 7.91 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 76 + (petlv - 1) * 4.97 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (214 + (petlv - 1) * 426.19 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 56 + (petlv - 1) * 3 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 32 + (petlv - 1) * 0.95 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 14.6 + (petlv - 1) * 0.33 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 12.8 + (petlv - 1) * 0.19 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 14 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 360 + (petlv - 1) * 26.17 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 36 + (petlv - 1) * 2.87 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 154 + (petlv - 1) * 10.34 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 100 + (petlv - 1) * 6.44 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (248 + (petlv - 1) * 542.6 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 74 + (petlv - 1) * 3.82 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 38 + (petlv - 1) * 1.27 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 16.1 + (petlv - 1) * 0.43 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 13.6 + (petlv - 1) * 0.25 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 21 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 42 + (petlv - 1) * 3 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 144 + (petlv - 1) * 10.78 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 16 + (petlv - 1) * 0.57 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 76 + (petlv - 1) * 5.17 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (110 + (petlv - 1) * 72.76 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 86 + (petlv - 1) * 4.85 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 26 + (petlv - 1) * 0.57 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 12.8 + (petlv - 1) * 0.2 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 11.7 + (petlv - 1) * 0.12 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 22 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 54 + (petlv - 1) * 3.89 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 186 + (petlv - 1) * 13.85 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 16 + (petlv - 1) * 0.76 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 100 + (petlv - 1) * 6.57 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (113 + (petlv - 1) * 81.07 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 104 + (petlv - 1) * 6.19 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 26 + (petlv - 1) * 0.76 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 13.6 + (petlv - 1) * 0.26 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 12.2 + (petlv - 1) * 0.15 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 23 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 66 + (petlv - 1) * 4.97 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 240 + (petlv - 1) * 17.68 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 22 + (petlv - 1) * 0.95 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 124 + (petlv - 1) * 8.42 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (116 + (petlv - 1) * 91.46 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 128 + (petlv - 1) * 7.91 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 32 + (petlv - 1) * 0.95 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 14.6 + (petlv - 1) * 0.33 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 12.8 + (petlv - 1) * 0.19 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 24 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 90 + (petlv - 1) * 6.51 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 318 + (petlv - 1) * 23.04 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 28 + (petlv - 1) * 1.27 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 160 + (petlv - 1) * 11.04 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (120 + (petlv - 1) * 106.02 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 164 + (petlv - 1) * 10.34 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 38 + (petlv - 1) * 1.27 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 16.1 + (petlv - 1) * 0.43 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 13.6 + (petlv - 1) * 0.25 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 31 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 222 + (petlv - 1) * 16.08 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + (petlv - 1) * 1.34 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 16 + (petlv - 1) * 0.57 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 22 + (petlv - 1) * 0.89 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (110 + (petlv - 1) * 72.76 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 32 + (petlv - 1) * 1.21 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 68 + (petlv - 1) * 3.63 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 15.64 + (petlv - 1) * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 13.36 + (petlv - 1) * 0.24 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 32 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 282 + (petlv - 1) * 20.74 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + (petlv - 1) * 1.78 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 16 + (petlv - 1) * 0.76 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 22 + (petlv - 1) * 1.14 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (113 + (petlv - 1) * 81.07 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 38 + (petlv - 1) * 1.53 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 80 + (petlv - 1) * 4.65 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 17.26 + (petlv - 1) * 0.52 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 14.32 + (petlv - 1) * 0.31 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 33 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 366 + (petlv - 1) * 26.48 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 30 + (petlv - 1) * 2.17 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 22 + (petlv - 1) * 0.95 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 28 + (petlv - 1) * 1.46 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (116 + (petlv - 1) * 91.46 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 44 + (petlv - 1) * 1.97 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 98 + (petlv - 1) * 6 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 19.24 + (petlv - 1) * 0.66 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 15.52 + (petlv - 1) * 0.39 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 34 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 474 + (petlv - 1) * 34.59 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 36 + (petlv - 1) * 2.87 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 28 + (petlv - 1) * 1.27 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 34 + (petlv - 1) * 1.91 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (120 + (petlv - 1) * 106.02 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 56 + (petlv - 1) * 2.55 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 128 + (petlv - 1) * 7.72 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 22.06 + (petlv - 1) * 0.86 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 17.2 + (petlv - 1) * 0.51 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 41 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 156 + (petlv - 1) * 11.23 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 4.04 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_STR] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + (petlv - 1) * 1.34 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 16 + (petlv - 1) * 0.57 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 22 + (petlv - 1) * 0.89 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (110 + (petlv - 1) * 72.76 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 86 + (petlv - 1) * 4.85 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 68 + (petlv - 1) * 3.63 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 18.46 + (petlv - 1) * 0.6 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 15.04 + (petlv - 1) * 0.36 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 42 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 198 + (petlv - 1) * 14.42 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 4.444 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_STR] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + (petlv - 1) * 1.78 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 16 + (petlv - 1) * 0.76 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 22 + (petlv - 1) * 1.14 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (113 + (petlv - 1) * 81.07 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 104 + (petlv - 1) * 6.19 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 80 + (petlv - 1) * 4.65 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 20.86 + (petlv - 1) * 0.78 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 16.48 + (petlv - 1) * 0.46 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 43 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 252 + (petlv - 1) * 18.44 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 4.444 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_STR] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 30 + (petlv - 1) * 2.17 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 22 + (petlv - 1) * 0.95 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 28 + (petlv - 1) * 1.46 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (116 + (petlv - 1) * 91.46 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 128 + (petlv - 1) * 7.91 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 98 + (petlv - 1) * 6 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 23.86 + (petlv - 1) * 0.99 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 18.28 + (petlv - 1) * 0.59 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 44 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 330 + (petlv - 1) * 24.06 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 4.444 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_STR] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 36 + (petlv - 1) * 2.87 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 28 + (petlv - 1) * 1.27 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 34 + (petlv - 1) * 1.91 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (120 + (petlv - 1) * 106.02 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 164 + (petlv - 1) * 10.34 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 128 + (petlv - 1) * 7.72 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 28.12 + (petlv - 1) * 1.3 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 20.8 + (petlv - 1) * 0.77 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 51 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 30 + (petlv - 1) * 2.42 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 144 + (petlv - 1) * 10.78 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 58 + (petlv - 1) * 3.63 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 100 + (petlv - 1) * 6.63 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (153 + (petlv - 1) * 218.28 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 44 + (petlv - 1) * 1.78 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 26 + (petlv - 1) * 0.57 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 12.8 + (petlv - 1) * 0.2 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 11.7 + (petlv - 1) * 0.12 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 52 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 42 + (petlv - 1) * 3.12 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 186 + (petlv - 1) * 13.85 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 70 + (petlv - 1) * 4.65 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 124 + (petlv - 1) * 8.55 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (168 + (petlv - 1) * 268.18 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 50 + (petlv - 1) * 2.29 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 26 + (petlv - 1) * 0.76 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 13.6 + (petlv - 1) * 0.26 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 12.2 + (petlv - 1) * 0.15 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 53 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 54 + (petlv - 1) * 4.02 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 240 + (petlv - 1) * 17.68 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 88 + (petlv - 1) * 6 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 160 + (petlv - 1) * 10.91 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (186 + (petlv - 1) * 330.55 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 56 + (petlv - 1) * 3 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 32 + (petlv - 1) * 0.95 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 14.6 + (petlv - 1) * 0.33 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 12.8 + (petlv - 1) * 0.19 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 54 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 72 + (petlv - 1) * 5.17 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 318 + (petlv - 1) * 23.04 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 118 + (petlv - 1) * 7.72 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 208 + (petlv - 1) * 14.23 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (212 + (petlv - 1) * 417.86 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 74 + (petlv - 1) * 3.82 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 38 + (petlv - 1) * 1.27 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 16.1 + (petlv - 1) * 0.43 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 13.6 + (petlv - 1) * 0.25 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 61 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 120 + (petlv - 1) * 9 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + (petlv - 1) * 1.34 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 16 + (petlv - 1) * 0.89 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 22 + (petlv - 1) * 1.02 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (113 + (petlv - 1) * 86.11 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 62 + (petlv - 1) * 3 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 50 + (petlv - 1) * 2.42 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 23 + (petlv - 1) * 0.93 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 17.7 + (petlv - 1) * 0.55 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 62 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 156 + (petlv - 1) * 11.55 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + (petlv - 1) * 1.78 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 22 + (petlv - 1) * 1.08 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 28 + (petlv - 1) * 1.27 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (117 + (petlv - 1) * 97.98 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 74 + (petlv - 1) * 3.82 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 62 + (petlv - 1) * 3.06 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 26.6 + (petlv - 1) * 1.19 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 20 + (petlv - 1) * 0.71 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  elseif classtype == 63 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 204 + (petlv - 1) * 14.74 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 30 + (petlv - 1) * 2.17 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 28 + (petlv - 1) * 1.4 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 28 + (petlv - 1) * 1.72 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (121 + (petlv - 1) * 112.84 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 86 + (petlv - 1) * 4.97 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 74 + (petlv - 1) * 3.95 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 31.2 + (petlv - 1) * 1.53 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 22.7 + (petlv - 1) * 0.91 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  else
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 264 + (petlv - 1) * 19.27 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 6.464 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.4
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 36 + (petlv - 1) * 2.87 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 4.444
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 34 + (petlv - 1) * 1.78 + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 2
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 40 + (petlv - 1) * 2.17 + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 6 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (127 + (petlv - 1) * 133.61 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 50) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 110 + (petlv - 1) * 6.44 + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 2
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 92 + (petlv - 1) * 5.17 + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 2
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 37.7 + (petlv - 1) * 1.99 + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.67
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 26.6 + (petlv - 1) * 1.19 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.4
  end
  result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
  result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
  return result
end

function CommonFun.PetAttrShow(PetLv, classtype)
  local result = {}
  local QualityRatio = 0
  if classtype == 11 or classtype == 21 or classtype == 31 or classtype == 41 or classtype == 51 or classtype == 61 then
    QualityRatio = 1.4
  elseif classtype == 12 or classtype == 22 or classtype == 32 or classtype == 42 or classtype == 52 or classtype == 62 then
    QualityRatio = 1.8
  elseif classtype == 13 or classtype == 23 or classtype == 33 or classtype == 43 or classtype == 53 or classtype == 63 then
    QualityRatio = 2.3
  elseif classtype == 14 or classtype == 24 or classtype == 34 or classtype == 44 or classtype == 54 or classtype == 64 then
    QualityRatio = 3
  else
    QualityRatio = 1
  end
  PetLv = PetLv or 0
  if classtype == 11 or classtype == 12 or classtype == 13 or classtype == 14 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (3 + PetLv * 0.216) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (0.5 + PetLv * 0.036) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (4 + PetLv * 0.288) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_INT] = (0.5 + PetLv * 0.036) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (1.5 + PetLv * 0.108) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (0.5 + PetLv * 0.036) * QualityRatio
  elseif classtype == 21 or classtype == 22 or classtype == 23 or classtype == 24 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (0.5 + PetLv * 0.036) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (0.5 + PetLv * 0.036) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (0.5 + PetLv * 0.036) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_INT] = (4 + PetLv * 0.288) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (4 + PetLv * 0.288) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (0.5 + PetLv * 0.036) * QualityRatio
  elseif classtype == 31 or classtype == 32 or classtype == 33 or classtype == 34 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (4 + PetLv * 0.288) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (3 + PetLv * 0.216) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (0.5 + PetLv * 0.036) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_INT] = (0.5 + PetLv * 0.036) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (1 + PetLv * 0.072) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (1 + PetLv * 0.072) * QualityRatio
  elseif classtype == 41 or classtype == 42 or classtype == 43 or classtype == 44 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (0.5 + PetLv * 0.036) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (3 + PetLv * 0.216) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (0.5 + PetLv * 0.036) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_INT] = (0.5 + PetLv * 0.036) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (4 + PetLv * 0.288) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (1.5 + PetLv * 0.108) * QualityRatio
  elseif classtype == 51 or classtype == 52 or classtype == 53 or classtype == 54 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (0.5 + PetLv * 0.036) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (0.5 + PetLv * 0.036) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (3 + PetLv * 0.216) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_INT] = (4 + PetLv * 0.288) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (1.5 + PetLv * 0.108) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (0.5 + PetLv * 0.036) * QualityRatio
  elseif classtype == 61 or classtype == 62 or classtype == 63 or classtype == 64 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (2 + PetLv * 0.144) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (2 + PetLv * 0.144) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (0.7 + PetLv * 0.0504) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_INT] = (0.5 + PetLv * 0.036) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (2.5 + PetLv * 0.18) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (2.3 + PetLv * 0.1656) * QualityRatio
  else
    result[CommonFun.RoleData.EATTRTYPE_STR] = (2 + PetLv * 0.144) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (2 + PetLv * 0.144) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (2 + PetLv * 0.144) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_INT] = (1 + PetLv * 0.072) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (2 + PetLv * 0.144) * QualityRatio
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (1 + PetLv * 0.072) * QualityRatio
  end
  if classtype == 1 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 78 + PetLv * 6.12
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 24 + PetLv * 1.91
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 34 + PetLv * 1.72
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 34 + PetLv * 1.72
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 126 + PetLv * 126.81
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 44 + PetLv * 1.72
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 44 + PetLv * 1.72
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 14 + PetLv * 0.28
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 12.4 + PetLv * 0.17
  elseif classtype == 11 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 168 + PetLv * 12.19
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + PetLv * 1.34
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 76 + PetLv * 4.85
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 52 + PetLv * 3
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 170 + PetLv * 276.5
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 44 + PetLv * 1.78
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 126 + PetLv * 0.57
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 12.8 + PetLv * 0.2
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 11.7 + PetLv * 0.12
  elseif classtype == 12 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 216 + PetLv * 15.7
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + PetLv * 1.78
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 94 + PetLv * 6.19
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 64 + PetLv * 3.82
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 190 + PetLv * 343.02
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 50 + PetLv * 2.29
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 26 + PetLv * 0.76
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 13.6 + PetLv * 0.26
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 12.2 + PetLv * 0.15
  elseif classtype == 13 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 276 + PetLv * 20.04
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 30 + PetLv * 2.17
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 118 + PetLv * 7.91
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 76 + PetLv * 4.97
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 214 + PetLv * 426.19
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 56 + PetLv * 3
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 32 + PetLv * 0.95
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 14.6 + PetLv * 0.33
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 12.8 + PetLv * 0.19
  elseif classtype == 14 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 360 + PetLv * 26.17
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 36 + PetLv * 2.87
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 154 + PetLv * 10.34
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 100 + PetLv * 6.44
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 248 + PetLv * 542.6
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 74 + PetLv * 3.82
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 38 + PetLv * 1.27
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 16.1 + PetLv * 0.43
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 13.6 + PetLv * 0.25
  elseif classtype == 21 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 42 + PetLv * 3
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 144 + PetLv * 10.78
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 16 + PetLv * 0.57
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 76 + PetLv * 5.17
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 110 + PetLv * 72.76
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 86 + PetLv * 4.85
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 26 + PetLv * 0.57
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 12.8 + PetLv * 0.2
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 11.7 + PetLv * 0.12
  elseif classtype == 22 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 54 + PetLv * 3.89
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 186 + PetLv * 13.85
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 16 + PetLv * 0.76
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 100 + PetLv * 6.57
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 113 + PetLv * 81.07
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 104 + PetLv * 6.19
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 26 + PetLv * 0.76
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 13.6 + PetLv * 0.26
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 12.2 + PetLv * 0.15
  elseif classtype == 23 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 66 + PetLv * 4.97
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 240 + PetLv * 17.68
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 22 + PetLv * 0.95
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 124 + PetLv * 8.42
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 116 + PetLv * 91.46
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 128 + PetLv * 7.91
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 32 + PetLv * 0.95
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 14.6 + PetLv * 0.33
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 12.8 + PetLv * 0.19
  elseif classtype == 24 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 90 + PetLv * 6.51
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 318 + PetLv * 23.04
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 28 + PetLv * 1.27
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 160 + PetLv * 11.04
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 120 + PetLv * 106.02
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 164 + PetLv * 10.34
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 38 + PetLv * 1.27
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 16.1 + PetLv * 0.43
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 13.6 + PetLv * 0.25
  elseif classtype == 31 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 222 + PetLv * 16.08
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + PetLv * 1.34
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 16 + PetLv * 0.57
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 22 + PetLv * 0.89
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 110 + PetLv * 72.76
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 32 + PetLv * 1.21
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 68 + PetLv * 3.63
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 15.64 + PetLv * 0.4
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 13.36 + PetLv * 0.24
  elseif classtype == 32 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 282 + PetLv * 20.74
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + PetLv * 1.78
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 16 + PetLv * 0.76
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 22 + PetLv * 1.14
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 113 + PetLv * 81.07
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 38 + PetLv * 1.53
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 80 + PetLv * 4.65
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 17.26 + PetLv * 0.52
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 14.32 + PetLv * 0.31
  elseif classtype == 33 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 366 + PetLv * 26.48
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 30 + PetLv * 2.17
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 22 + PetLv * 0.95
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 28 + PetLv * 1.46
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 116 + PetLv * 91.46
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 44 + PetLv * 1.97
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 98 + PetLv * 6
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 19.24 + PetLv * 0.66
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 15.52 + PetLv * 0.39
  elseif classtype == 34 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 474 + PetLv * 34.59
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 36 + PetLv * 2.87
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 28 + PetLv * 1.27
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 34 + PetLv * 1.91
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 120 + PetLv * 106.02
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 56 + PetLv * 2.55
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 128 + PetLv * 7.72
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 22.06 + PetLv * 0.86
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 17.2 + PetLv * 0.51
  elseif classtype == 41 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 156 + PetLv * 11.23
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + PetLv * 1.34
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 16 + PetLv * 0.57
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 22 + PetLv * 0.89
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 110 + PetLv * 72.76
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 86 + PetLv * 4.85
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 68 + PetLv * 3.63
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 18.46 + PetLv * 0.6
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 15.04 + PetLv * 0.36
  elseif classtype == 42 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 198 + PetLv * 14.42
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + PetLv * 1.78
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 16 + PetLv * 0.76
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 22 + PetLv * 1.14
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 113 + PetLv * 81.07
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 104 + PetLv * 6.19
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 80 + PetLv * 4.65
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 20.86 + PetLv * 0.78
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 16.48 + PetLv * 0.46
  elseif classtype == 43 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 252 + PetLv * 18.44
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 30 + PetLv * 2.17
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 22 + PetLv * 0.95
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 28 + PetLv * 1.46
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 116 + PetLv * 91.46
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 128 + PetLv * 7.91
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 98 + PetLv * 6
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 23.86 + PetLv * 0.99
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 18.28 + PetLv * 0.59
  elseif classtype == 44 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 330 + PetLv * 24.06
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 36 + PetLv * 2.87
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 28 + PetLv * 1.27
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 34 + PetLv * 1.91
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 120 + PetLv * 106.02
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 164 + PetLv * 10.34
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 128 + PetLv * 7.72
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 28.12 + PetLv * 1.3
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 20.8 + PetLv * 0.77
  elseif classtype == 51 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 30 + PetLv * 2.42
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 144 + PetLv * 10.78
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 58 + PetLv * 3.63
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 100 + PetLv * 6.63
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 153 + PetLv * 218.28
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 44 + PetLv * 1.78
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 26 + PetLv * 0.57
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 12.8 + PetLv * 0.2
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 11.7 + PetLv * 0.12
  elseif classtype == 52 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 42 + PetLv * 3.12
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 186 + PetLv * 13.85
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 70 + PetLv * 4.65
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 124 + PetLv * 8.55
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 168 + PetLv * 268.18
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 50 + PetLv * 2.29
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 26 + PetLv * 0.76
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 13.6 + PetLv * 0.26
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 12.2 + PetLv * 0.15
  elseif classtype == 53 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 54 + PetLv * 4.02
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 240 + PetLv * 17.68
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 88 + PetLv * 6
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 160 + PetLv * 10.91
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 186 + PetLv * 330.55
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 56 + PetLv * 3
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 32 + PetLv * 0.95
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 14.6 + PetLv * 0.33
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 12.8 + PetLv * 0.19
  elseif classtype == 54 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 72 + PetLv * 5.17
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 318 + PetLv * 23.04
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 118 + PetLv * 7.72
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 208 + PetLv * 14.23
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 212 + PetLv * 417.86
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 74 + PetLv * 3.82
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 38 + PetLv * 1.27
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 16.1 + PetLv * 0.43
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 13.6 + PetLv * 0.25
  elseif classtype == 61 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 120 + PetLv * 9
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + PetLv * 1.34
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 16 + PetLv * 0.89
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 22 + PetLv * 1.02
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 113 + PetLv * 86.11
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 62 + PetLv * 3
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 50 + PetLv * 2.42
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 23 + PetLv * 0.93
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 17.7 + PetLv * 0.55
  elseif classtype == 62 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 156 + PetLv * 11.55
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 18 + PetLv * 1.78
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 22 + PetLv * 1.08
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 28 + PetLv * 1.27
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 117 + PetLv * 97.98
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 74 + PetLv * 3.82
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 62 + PetLv * 3.06
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 26.6 + PetLv * 1.19
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 20 + PetLv * 0.71
  elseif classtype == 63 then
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 204 + PetLv * 14.74
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 30 + PetLv * 2.17
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 28 + PetLv * 1.4
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 28 + PetLv * 1.72
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 121 + PetLv * 112.84
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 86 + PetLv * 4.97
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 74 + PetLv * 3.95
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 31.2 + PetLv * 1.53
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 22.7 + PetLv * 0.91
  else
    result[CommonFun.RoleData.EATTRTYPE_ATK] = 264 + PetLv * 19.27
    result[CommonFun.RoleData.EATTRTYPE_MATK] = 36 + PetLv * 2.87
    result[CommonFun.RoleData.EATTRTYPE_DEF] = 34 + PetLv * 1.78
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = 40 + PetLv * 2.17
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = 127 + PetLv * 133.61
    result[CommonFun.RoleData.EATTRTYPE_HIT] = 110 + PetLv * 6.44
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = 92 + PetLv * 5.17
    result[CommonFun.RoleData.EATTRTYPE_CRI] = 37.7 + PetLv * 1.99
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 26.6 + PetLv * 1.19
  end
  return result
end

function CommonFun.calcBeingNpcAttrValue(attr, npcid, npclevel, srcUser)
  local result = {}
  if srcUser == nil then
    return result
  end
  local Vit = srcUser:GetProperty("Vit")
  local Str = srcUser:GetProperty("Str")
  local Int = srcUser:GetProperty("Int")
  local Dex = srcUser:GetProperty("Dex")
  local MaxHp = srcUser:GetProperty("MaxHp")
  local mapid, maptype = srcUser:GetMapInfo()
  if maptype == 2 or maptype == 4 then
    MaxHp = MaxHp / 4
  end
  local Atk = srcUser:GetProperty("Atk")
  local MAtk = srcUser:GetProperty("MAtk")
  local Def = srcUser:GetProperty("Def")
  local MDef = srcUser:GetProperty("MDef")
  local Refine = srcUser:GetProperty("Refine")
  local MRefine = srcUser:GetProperty("MRefine")
  local Hit = srcUser:GetProperty("Hit")
  local Flee = srcUser:GetProperty("Flee")
  local Cri = srcUser:GetProperty("Cri")
  local CriRes = srcUser:GetProperty("CriRes")
  local npcSkillId_1 = srcUser:GetLernedSkillLevel(416)
  local npcSkillId_2 = srcUser:GetLernedSkillLevel(428)
  local npcSkillId_3 = srcUser:GetLernedSkillLevel(1127)
  local QualityRatio = 2
  local lianjie = 0
  if srcUser:HasBuffID(116310) then
    lianjie = 0.05 * npcSkillId_3 - 0.25
  end
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  local Atk_7 = 0
  if srcUser:HasBuffID(90001586) and 5 < RefineLv7 then
    Atk_7 = (RefineLv7 - 5) * 10
  end
  if srcUser:HasBuffID(42010) and 5 < RefineLv7 then
    Atk_7 = (RefineLv7 - 5) * 10
  end
  local AtkPer_7 = 0
  if srcUser:HasBuffID(90001587) and 10 < RefineLv7 then
    AtkPer_7 = (RefineLv7 - 10) * 0.01
  end
  if srcUser:HasBuffID(42010) and 10 < RefineLv7 then
    AtkPer_7 = (RefineLv7 - 10) * 0.01
  end
  if srcUser:HasBuffID(90004484) then
    AtkPer_7 = AtkPer_7 + 0.15
  end
  local MAXHPPER_7 = 0
  if srcUser:HasBuffID(90004484) then
    MAXHPPER_7 = MAXHPPER_7 + 0.15
  end
  local GemValue1 = srcUser:GetGemValue(132023)
  local GemValue2 = srcUser:GetGemValue(132053)
  local GemDam = 1 + GemValue1 / 100000 + GemValue2 / 100000
  if npcid == 600010 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (1 + (npclevel - 1) * 0.05) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_STR]
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (1 + (npclevel - 1) * 0.05) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_AGI]
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (7 + (npclevel - 1) * 0.04) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_VIT]
    result[CommonFun.RoleData.EATTRTYPE_INT] = (7 + (npclevel - 1) * 0.35) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_INT]
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (3 + (npclevel - 1) * 0.1) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_DEX]
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (1 + (npclevel - 1) * 0.05) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_LUK]
    local BeingBase_ATK = (28 + (npclevel - 1) * 0.96) * 1.5
    local BeingBase_MATK = (66 + (npclevel - 1) * 2.81) * 1.5
    local BeingBase_DEF = 28 + (npclevel - 1) * 1.38
    local BeingBase_MDEF = 42 + (npclevel - 1) * 2.09
    local BeingBase_MAXHP = 130 + (npclevel - 1) * 129.93
    local BeingBase_HIT = 62 + (npclevel - 1) * 0.6
    local BeingBase_FLEE = 54 + (npclevel - 1) * 0.19
    local BeingBase_CRI = 51.32 + (npclevel - 1) * 0.07
    local BeingBase_CRIRES = 50.8 + (npclevel - 1) * 0.04
    local BeingToUser_ATK = (Str * 0.5 + Atk * 0.02 + Refine * 0.3) * 1.5
    local BeingToUser_MATK = (Int * 3 + MAtk * 0.02 + MRefine * 0.3) * 1.5
    local BeingToUser_DEF = Vit * 2 + Def * 0.3
    local BeingToUser_MDEF = Int * 2 + MDef * 0.3
    local BeingToUser_MAXHP = Vit * 300 + MaxHp * 0.6
    local BeingToUser_HIT = 0
    local BeingToUser_FLEE = Flee * 0.5
    local BeingToUser_CRI = 0
    local BeingToUser_CRIRES = CriRes * 0.5
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (BeingBase_ATK + BeingToUser_ATK + Atk_7 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 4.02 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.2 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.2) * (1 + attr[CommonFun.RoleData.EATTRTYPE_ATKPER]) * (1 + AtkPer_7) * GemDam
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (BeingBase_MATK + BeingToUser_MATK + Atk_7 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 2.01 + npcSkillId_1 * 100) * (1 + npcSkillId_2 * 0.01) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MATKPER]) * (1 + AtkPer_7) * GemDam
    result[CommonFun.RoleData.EATTRTYPE_DEF] = BeingBase_DEF + BeingToUser_DEF + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = BeingBase_MDEF + BeingToUser_MDEF + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 0.5
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (BeingBase_MAXHP + BeingToUser_MAXHP + attr[CommonFun.RoleData.EATTRTYPE_MAXHP] + npcSkillId_1 * 2000) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 100) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER] + MAXHPPER_7)
    if maptype == 2 or maptype == 4 then
      result[CommonFun.RoleData.EATTRTYPE_MAXHP] = result[CommonFun.RoleData.EATTRTYPE_MAXHP] * 4
    end
    result[CommonFun.RoleData.EATTRTYPE_HIT] = BeingToUser_HIT + BeingToUser_HIT + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 1
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = BeingBase_FLEE + BeingToUser_FLEE + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 1
    result[CommonFun.RoleData.EATTRTYPE_CRI] = BeingBase_CRI + BeingToUser_CRI + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.33
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = BeingBase_CRIRES + BeingToUser_CRIRES + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.2
    result[CommonFun.RoleData.EATTRTYPE_ATKSPD] = 1.5
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = npcSkillId_2 * 0.02 + lianjie + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = 0.75
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = 0.75
  elseif npcid == 600020 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (6 + (npclevel - 1) * 0.3) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_STR]
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (1 + (npclevel - 1) * 0.05) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_AGI]
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (8 + (npclevel - 1) * 0.4) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_VIT]
    result[CommonFun.RoleData.EATTRTYPE_INT] = (2 + (npclevel - 1) * 0.1) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_INT]
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (2 + (npclevel - 1) * 0.1) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_DEX]
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (1 + (npclevel - 1) * 0.05) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_LUK]
    local BeingBase_ATK = (108 + (npclevel - 1) * 4.94) * 1.5
    local BeingBase_MATK = (26 + (npclevel - 1) * 0.79) * 1.5
    local BeingBase_DEF = 32 + (npclevel - 1) * 1.6
    local BeingBase_MDEF = 24 + (npclevel - 1) * 1.19
    local BeingBase_MAXHP = 134 + (npclevel - 1) * 141.43
    local BeingBase_HIT = 58 + (npclevel - 1) * 0.38
    local BeingBase_FLEE = 54 + (npclevel - 1) * 0.19
    local BeingBase_CRI = 51.32 + (npclevel - 1) * 0.07
    local BeingBase_CRIRES = 50.8 + (npclevel - 1) * 0.04
    local BeingToUser_ATK = (Str * 5 + Atk * 0.02 + Refine * 0.3) * 1.5
    local BeingToUser_MATK = (Int * 0.5 + MAtk * 0.02 + MRefine * 0.3) * 1.5
    local BeingToUser_DEF = Vit * 4 + Def * 0.6
    local BeingToUser_MDEF = Int * 4 + MDef * 0.6
    local BeingToUser_MAXHP = Vit * 500 + MaxHp * 0.8
    local BeingToUser_HIT = Hit * 0.5
    local BeingToUser_FLEE = Flee * 0.5
    local BeingToUser_CRI = Cri * 0.5
    local BeingToUser_CRIRES = CriRes * 0.5
    local Num1 = srcUser:GetBuffLayer(91000141)
    local Num2 = srcUser:GetBuffLayer(91000721)
    local Num3 = srcUser:GetBuffLayer(91001121)
    local Num4 = srcUser:GetBuffLayer(91001131)
    local AtkPer_1 = 0.03
    local AtkPer_2 = 0
    if srcUser:HasBuffID(91000141) or srcUser:HasBuffID(91000721) or srcUser:HasBuffID(91001121) or srcUser:HasBuffID(91001131) then
      AtkPer_2 = (Num1 + Num2 + Num3 + Num4) * AtkPer_1
    end
    local WeaponRefineLv = srcUser:GetEquipedRefineLv(7)
    if (srcUser:HasBuffID(90001583) or srcUser:HasBuffID(42010)) and 15 <= WeaponRefineLv then
      AtkPer_2 = AtkPer_2 + 0.1
    end
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (BeingBase_ATK + BeingToUser_ATK + Atk_7 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 4.02 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.2 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.2 + npcSkillId_1 * 100) * (1 + AtkPer_2 + AtkPer_7) * (1 + attr[CommonFun.RoleData.EATTRTYPE_ATKPER]) * GemDam
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (BeingBase_MATK + BeingToUser_MATK + Atk_7 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 2.01) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MATKPER]) * (1 + AtkPer_7) * GemDam
    result[CommonFun.RoleData.EATTRTYPE_DEF] = BeingBase_DEF + BeingToUser_DEF + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = BeingBase_MDEF + BeingToUser_MDEF + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 0.5
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (BeingBase_MAXHP + BeingToUser_MAXHP + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 100) * (1 + npcSkillId_2 * 0.01) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER] + MAXHPPER_7)
    if maptype == 2 or maptype == 4 then
      result[CommonFun.RoleData.EATTRTYPE_MAXHP] = result[CommonFun.RoleData.EATTRTYPE_MAXHP] * 4
    end
    result[CommonFun.RoleData.EATTRTYPE_HIT] = BeingToUser_HIT + BeingToUser_HIT + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 1
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = BeingBase_FLEE + BeingToUser_FLEE + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 1
    result[CommonFun.RoleData.EATTRTYPE_CRI] = BeingBase_CRI + BeingToUser_CRI + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.33
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = BeingBase_CRIRES + BeingToUser_CRIRES + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.2
    result[CommonFun.RoleData.EATTRTYPE_ATKSPD] = 1 + npcSkillId_1 * 0.05 + npcSkillId_2 * 0.05
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = 0.75
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = 0.75
  elseif npcid == 600030 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (1 + (npclevel - 1) * 0.05) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_STR]
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (1 + (npclevel - 1) * 0.05) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_AGI]
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (6 + (npclevel - 1) * 0.35) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_VIT]
    result[CommonFun.RoleData.EATTRTYPE_INT] = (8 + (npclevel - 1) * 0.4) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_INT]
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (3 + (npclevel - 1) * 0.1) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_DEX]
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (1 + (npclevel - 1) * 0.05) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_LUK]
    local BeingBase_ATK = (28 + (npclevel - 1) * 0.96) * 1.5
    local BeingBase_MATK = (74 + (npclevel - 1) * 3.21) * 1.5
    local BeingBase_DEF = 24 + (npclevel - 1) * 1.19
    local BeingBase_MDEF = 44 + (npclevel - 1) * 2.19
    local BeingBase_MAXHP = 126 + (npclevel - 1) * 118.44
    local BeingBase_HIT = 62 + (npclevel - 1) * 0.6
    local BeingBase_FLEE = 54 + (npclevel - 1) * 0.19
    local BeingBase_CRI = 51.32 + (npclevel - 1) * 0.07
    local BeingBase_CRIRES = 50.8 + (npclevel - 1) * 0.04
    local BeingToUser_ATK = (Str * 1 + Atk * 0.02 + Refine * 0.3) * 1.5
    local BeingToUser_MATK = (Int * 4.5 + MAtk * 0.02 + MRefine * 0.3) * 1.5
    local BeingToUser_DEF = Vit * 1 + Def * 0.3
    local BeingToUser_MDEF = Int * 1 + MDef * 0.3
    local BeingToUser_MAXHP = Vit * 300 + MaxHp * 0.6
    local BeingToUser_HIT = 0
    local BeingToUser_FLEE = Flee * 0.5
    local BeingToUser_CRI = 0
    local BeingToUser_CRIRES = CriRes * 0.5
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (BeingBase_ATK + BeingToUser_ATK + Atk_7 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 4.02 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.2 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.2) * (1 + attr[CommonFun.RoleData.EATTRTYPE_ATKPER]) * (1 + AtkPer_7) * GemDam
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (BeingBase_MATK + BeingToUser_MATK + Atk_7 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 2.01 + npcSkillId_1 * 100) * (1 + npcSkillId_2 * 0.01) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MATKPER]) * (1 + AtkPer_7) * GemDam
    result[CommonFun.RoleData.EATTRTYPE_DEF] = BeingBase_DEF + BeingToUser_DEF + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1 + npcSkillId_1 * 40
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = BeingBase_MDEF + BeingToUser_MDEF + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 0.5
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (BeingBase_MAXHP + BeingToUser_MAXHP + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 100) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER] + MAXHPPER_7)
    if maptype == 2 or maptype == 4 then
      result[CommonFun.RoleData.EATTRTYPE_MAXHP] = result[CommonFun.RoleData.EATTRTYPE_MAXHP] * 4
    end
    result[CommonFun.RoleData.EATTRTYPE_HIT] = BeingToUser_HIT + BeingToUser_HIT + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 1
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = BeingBase_FLEE + BeingToUser_FLEE + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 1
    result[CommonFun.RoleData.EATTRTYPE_CRI] = BeingBase_CRI + BeingToUser_CRI + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.33
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = BeingBase_CRIRES + BeingToUser_CRIRES + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.2
    result[CommonFun.RoleData.EATTRTYPE_ATKSPD] = 1.5
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = npcSkillId_2 * 0.02 + lianjie + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = 0.75
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = 0.75
  elseif npcid == 591010 then
    result[CommonFun.RoleData.EATTRTYPE_STR] = (6 + (npclevel - 1) * 0.3) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_STR]
    result[CommonFun.RoleData.EATTRTYPE_AGI] = (1 + (npclevel - 1) * 0.05) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_AGI]
    result[CommonFun.RoleData.EATTRTYPE_VIT] = (8 + (npclevel - 1) * 0.4) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_VIT]
    result[CommonFun.RoleData.EATTRTYPE_INT] = (2 + (npclevel - 1) * 0.1) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_INT]
    result[CommonFun.RoleData.EATTRTYPE_DEX] = (2 + (npclevel - 1) * 0.1) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_DEX]
    result[CommonFun.RoleData.EATTRTYPE_LUK] = (1 + (npclevel - 1) * 0.05) * QualityRatio + attr[CommonFun.RoleData.EATTRTYPE_LUK]
    local BeingBase_ATK = (108 + (npclevel - 1) * 4.94) * 1.5
    local BeingBase_MATK = (26 + (npclevel - 1) * 0.79) * 1.5
    local BeingBase_DEF = 32 + (npclevel - 1) * 1.6
    local BeingBase_MDEF = 24 + (npclevel - 1) * 1.19
    local BeingBase_MAXHP = 134 + (npclevel - 1) * 141.43
    local BeingBase_HIT = 58 + (npclevel - 1) * 0.38
    local BeingBase_FLEE = 54 + (npclevel - 1) * 0.19
    local BeingBase_CRI = 51.32 + (npclevel - 1) * 0.07
    local BeingBase_CRIRES = 50.8 + (npclevel - 1) * 0.04
    local BeingToUser_ATK = (Str * 5 + Dex * 2 + Atk * 0.02 + Refine * 0.3) * 1.5
    local BeingToUser_MATK = (Int * 0.5 + MAtk * 0.02 + MRefine * 0.3) * 1.5
    local BeingToUser_DEF = Vit * 4 + Def * 0.6
    local BeingToUser_MDEF = Int * 4 + MDef * 0.6
    local BeingToUser_MAXHP = Vit * 500 + MaxHp * 0.7
    local BeingToUser_HIT = Hit * 0.5
    local BeingToUser_FLEE = Flee * 0.5
    local BeingToUser_CRI = Cri * 0.5
    local BeingToUser_CRIRES = CriRes * 0.5
    result[CommonFun.RoleData.EATTRTYPE_ATK] = (BeingBase_ATK + BeingToUser_ATK + Atk_7 + attr[CommonFun.RoleData.EATTRTYPE_ATK] + attr[CommonFun.RoleData.EATTRTYPE_STR] * 4.02 + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.2 + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 0.2 + npcSkillId_1 * 100) * (1 + AtkPer_7 + npcSkillId_2 * 0.01) * (1 + attr[CommonFun.RoleData.EATTRTYPE_ATKPER]) * GemDam
    result[CommonFun.RoleData.EATTRTYPE_MATK] = (BeingBase_MATK + BeingToUser_MATK + Atk_7 + attr[CommonFun.RoleData.EATTRTYPE_MATK] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 2.01) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MATKPER]) * (1 + AtkPer_7) * GemDam
    result[CommonFun.RoleData.EATTRTYPE_DEF] = BeingBase_DEF + BeingToUser_DEF + attr[CommonFun.RoleData.EATTRTYPE_DEF] + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 1
    result[CommonFun.RoleData.EATTRTYPE_MDEF] = BeingBase_MDEF + BeingToUser_MDEF + attr[CommonFun.RoleData.EATTRTYPE_MDEF] + attr[CommonFun.RoleData.EATTRTYPE_INT] * 1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] * 0.5
    result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (BeingBase_MAXHP + BeingToUser_MAXHP + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_VIT] / 100) * 1 * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER] + MAXHPPER_7)
    if maptype == 2 or maptype == 4 then
      result[CommonFun.RoleData.EATTRTYPE_MAXHP] = result[CommonFun.RoleData.EATTRTYPE_MAXHP] * 4
    end
    result[CommonFun.RoleData.EATTRTYPE_HIT] = BeingToUser_HIT + BeingToUser_HIT + attr[CommonFun.RoleData.EATTRTYPE_HIT] + attr[CommonFun.RoleData.EATTRTYPE_DEX] * 1
    result[CommonFun.RoleData.EATTRTYPE_FLEE] = BeingBase_FLEE + BeingToUser_FLEE + attr[CommonFun.RoleData.EATTRTYPE_FLEE] + attr[CommonFun.RoleData.EATTRTYPE_AGI] * 1
    result[CommonFun.RoleData.EATTRTYPE_CRI] = BeingBase_CRI + BeingToUser_CRI + attr[CommonFun.RoleData.EATTRTYPE_CRI] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.33
    result[CommonFun.RoleData.EATTRTYPE_CRIRES] = BeingBase_CRIRES + BeingToUser_CRIRES + attr[CommonFun.RoleData.EATTRTYPE_CRIRES] + attr[CommonFun.RoleData.EATTRTYPE_LUK] * 0.2
    result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = npcSkillId_1 * 0.05
    result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = npcSkillId_2 * 0.02 + lianjie + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
    result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = 0.75
    result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = 0.75
  end
  return result
end

function CommonFun.calcTwelvePvpAttrValue(attr, crystalLv, destroyBarrack)
  local result = {}
  local Super = 0
  if destroyBarrack == true then
    Super = 1
  end
  result[CommonFun.RoleData.EATTRTYPE_MAXHP] = attr[CommonFun.RoleData.EATTRTYPE_MAXHP] + (crystalLv - 1) * 500000 + Super * 2500000
  return result
end

function CommonFun.calcBoKiNpcAttrValue(attr, level, stage)
  local result = {}
  result[CommonFun.RoleData.EATTRTYPE_ATK] = 200 * level + 5000 + attr[CommonFun.RoleData.EATTRTYPE_ATK]
  result[CommonFun.RoleData.EATTRTYPE_DEF] = 500 + level * 6 + attr[CommonFun.RoleData.EATTRTYPE_DEF]
  result[CommonFun.RoleData.EATTRTYPE_MDEF] = 300 + level * 3 + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
  result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (20 * level * level + 2500 * level + 250000 + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
  result[CommonFun.RoleData.EATTRTYPE_DAMINCREASE] = 0.002 * level + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_DAMINCREASE]
  result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = 0.002 * level + 0.05 + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
  result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = 0.002 * level + 0.05 + attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
  result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = 0.005 * level + 0.1 + attr[CommonFun.RoleData.EATTRTYPE_IgnoreDef]
  result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = 0.002 * level + attr[CommonFun.RoleData.EATTRTYPE_DAMSPIKE]
  return result
end

function CommonFun.calcBeautyPalaceMonsterAttrValue(attr, room, floor)
  local result = {}
  if room <= 10 then
    room = room + 10
  end
  local a = math.floor(math.log10(room) ^ 2 * 1.05 ^ (room - 10 ^ math.floor(math.log10(room))) * 1000) / 1000
  local b = 0
  if floor == 2 then
    b = 1
  end
  if floor == 3 then
    b = 1.33
  end
  result[CommonFun.RoleData.EATTRTYPE_ATK] = 3115 * a + attr[CommonFun.RoleData.EATTRTYPE_ATK]
  result[CommonFun.RoleData.EATTRTYPE_MATK] = 2840 * a + attr[CommonFun.RoleData.EATTRTYPE_MATK]
  result[CommonFun.RoleData.EATTRTYPE_DEF] = 500 + 200 * b + attr[CommonFun.RoleData.EATTRTYPE_DEF]
  result[CommonFun.RoleData.EATTRTYPE_DEFPER] = 1 - 0.8 / a ^ 0.5 + attr[CommonFun.RoleData.EATTRTYPE_DEFPER]
  result[CommonFun.RoleData.EATTRTYPE_MDEF] = 300 + 200 * b + attr[CommonFun.RoleData.EATTRTYPE_MDEF]
  result[CommonFun.RoleData.EATTRTYPE_MDEFPER] = 1 - 0.8 / a ^ 0.5 + attr[CommonFun.RoleData.EATTRTYPE_MDEFPER]
  result[CommonFun.RoleData.EATTRTYPE_MAXHP] = (608660 * a + attr[CommonFun.RoleData.EATTRTYPE_MAXHP]) * (1 + b * 3) * (1 + attr[CommonFun.RoleData.EATTRTYPE_MAXHPPER])
  result[CommonFun.RoleData.EATTRTYPE_HIT] = 540 * a ^ 0.25 + attr[CommonFun.RoleData.EATTRTYPE_HIT]
  result[CommonFun.RoleData.EATTRTYPE_FLEE] = 310 + a * 5 + attr[CommonFun.RoleData.EATTRTYPE_FLEE]
  result[CommonFun.RoleData.EATTRTYPE_CRIRES] = 0.3 * a ^ 0.25 + attr[CommonFun.RoleData.EATTRTYPE_CRIRES]
  result[CommonFun.RoleData.EATTRTYPE_REFINE] = 500 * a + attr[CommonFun.RoleData.EATTRTYPE_REFINE]
  result[CommonFun.RoleData.EATTRTYPE_MREFINE] = 500 * a + attr[CommonFun.RoleData.EATTRTYPE_MREFINE]
  result[CommonFun.RoleData.EATTRTYPE_DAMREDUC] = 1 - 0.7 / a ^ 0.5 + 0.1 * b + attr[CommonFun.RoleData.EATTRTYPE_DAMREDUC]
  result[CommonFun.RoleData.EATTRTYPE_MDAMREDUC] = 1 - 0.7 / a ^ 0.5 + 0.1 * b + attr[CommonFun.RoleData.EATTRTYPE_MDAMREDUC]
  result[CommonFun.RoleData.EATTRTYPE_DAMSPIKE] = 1 - 0.7 / a ^ 0.5 + 0.1 * b + attr[CommonFun.RoleData.EATTRTYPE_DAMSPIKE]
  result[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE] = 1 - 0.7 / a ^ 0.5 + 0.1 * b + attr[CommonFun.RoleData.EATTRTYPE_MDAMSPIKE]
  result[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC] = 1 - 1 / a ^ 0.25 + 0.1 * b + attr[CommonFun.RoleData.EATTRTYPE_REFINEDAMREDUC]
  result[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC] = 1 - 1 / a ^ 0.25 + 0.1 * b + attr[CommonFun.RoleData.EATTRTYPE_REFINEMDAMREDUC]
  result[CommonFun.RoleData.EATTRTYPE_IgnoreDef] = 1 - 0.8 / a ^ 0.5 + 0.1 * b + attr[CommonFun.RoleData.EATTRTYPE_IgnoreDef]
  result[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF] = 1 - 0.8 / a ^ 0.5 + 0.1 * b + attr[CommonFun.RoleData.EATTRTYPE_IGNOREMDEF]
  result[CommonFun.RoleData.EATTRTYPE_STATEDEF] = 0.75 + attr[CommonFun.RoleData.EATTRTYPE_STATEDEF]
  return result
end

function CommonFun.ShapeCorrection(srcUser, targetUser)
  local value = 2
  local WeaponType = srcUser:GetEquipedWeaponType()
  local ShapeAtkPer = srcUser:GetProperty("ShapeAtkPer")
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  if nil ~= CommonFun.Shape then
    if CommonFun.Shape.S == targetUser.shape then
      value = 1
    elseif CommonFun.Shape.M == targetUser.shape then
      value = 2
    elseif CommonFun.Shape.L == targetUser.shape then
      value = 3
    end
  end
  if bits[CommonFun.AttrEffect.IgnoreBodyDamage] == 1 then
    return 1
  end
  local A = WeaponShapeCorrection[WeaponType][value] * (1 + ShapeAtkPer)
  if 1 <= A then
    return 1
  end
  return WeaponShapeCorrection[WeaponType] ~= nil and A or 1
end

CommonFun.TableSkill2EquipBuffAndIgnoreDef = {
  [3008] = {
    buffid = {90004214, 124170},
    IgnoreDef = 0.3
  },
  [3015] = {
    buffid = {90004214, 124170},
    IgnoreDef = 0.3
  },
  [1246] = {
    buffid = {90004244, 131080},
    IgnoreDef = 0.15
  },
  [3909] = {
    buffid = {90004334},
    IgnoreDef = 1
  },
  [2041] = {
    buffid = {90004644},
    IgnoreDef = 0.15
  },
  [2055] = {
    buffid = {90004644},
    IgnoreDef = 0.15
  },
  [2080] = {
    buffid = {90004644},
    IgnoreDef = 0.15
  },
  [188] = {
    buffid = {90004844},
    IgnoreDef = 0.15
  },
  [4317] = {
    buffid = {90004864},
    IgnoreDef = 0.2
  },
  [1822] = {
    buffid = {90004864},
    IgnoreDef = 0.2
  },
  [2035] = {
    buffid = {90004624},
    IgnoreDef = 1
  },
  [3311] = {
    buffid = {90004584},
    IgnoreDef = 0.5
  }
}

function CommonFun.EquipBuffAndIgnoreDef(skillid)
  res = {}
  if CommonFun.TableSkill2EquipBuffAndIgnoreDef[skillid] == nil then
    return res, 0
  elseif CommonFun.TableSkill2EquipBuffAndIgnoreDef[skillid].buffid == nil or CommonFun.TableSkill2EquipBuffAndIgnoreDef[skillid].IgnoreDef == nil then
    return res, 0
  else
    return CommonFun.TableSkill2EquipBuffAndIgnoreDef[skillid].buffid, CommonFun.TableSkill2EquipBuffAndIgnoreDef[skillid].IgnoreDef
  end
end

function CommonFun.CalcDef(srcUser, targetUser, params)
  local Buff = srcUser:HasBuffID(24700)
  local targetRace = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    targetRace = 2
  end
  local Def2 = targetUser:GetProperty("Def")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local RealDef = Def2 - Vit2
  if Def2 <= 0 then
    Def2 = 0
  end
  if Buff == true and targetRace == 1 then
    RealDef = 0
  end
  if RealDef <= 0 then
    RealDef = 0
  end
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if params ~= nil then
    local SkillID, SkillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local BuffIDs, IgnoreDefAdd = CommonFun.EquipBuffAndIgnoreDef(SkillID)
    local TempAdd = true
    for i = 1, #BuffIDs do
      if BuffIDs[i] ~= 0 and srcUser:HasBuffID(BuffIDs[i]) == false then
        TempAdd = false
        break
      end
    end
    if TempAdd then
      IgnoreDef = IgnoreDef + IgnoreDefAdd
    end
  end
  local Card1 = srcUser:GetEquipCardNum(7, 24667)
  if (targetUser.boss or targetUser.mini) and 0 < Card1 and srcUser:HasBuffID(81002110) then
    IgnoreDef = IgnoreDef + Card1 * 0.25 + 0.05
  elseif (targetUser.boss or targetUser.mini) and 0 < Card1 then
    IgnoreDef = IgnoreDef + Card1 * 0.25
  end
  if (targetUser.boss or targetUser.mini) and srcUser:HasBuffID(57710) then
    local RefineLv2 = srcUser:GetEquipedRefineLv(2)
    IgnoreDef = IgnoreDef + RefineLv2 * 0.01
  end
  local Card2 = srcUser:GetEquipCardNum(7, 23238)
  if (targetUser.boss or targetUser.mini or targetUser:GetNpcID() ~= 0) and 0 < Card2 then
    local RefineLv = srcUser:GetEquipedRefineLv(7)
    IgnoreDef = IgnoreDef + Card2 * (0.2 + RefineLv * 0.02)
  end
  if nil ~= CommonFun.Shape and CommonFun.Shape.L == targetUser.shape and srcUser:HasBuffID(90004494) then
    IgnoreDef = IgnoreDef + 0.2
  end
  if nil ~= CommonFun.Shape and CommonFun.Shape.L == targetUser.shape and srcUser:HasBuffID(90004384) then
    IgnoreDef = IgnoreDef + 0.3
  end
  if targetUser:GetBuffActive(137321) then
    IgnoreDef = 0
  end
  local pvpReduce = 0
  local mapid, maptype = srcUser:GetMapInfo()
  if (maptype == 2 or maptype == 4) and targetUser:GetNpcID() ~= 40022 then
    DefPer2 = DefPer2 < -1 and -1 or 1 < DefPer2 and 1 or DefPer2
    DefPer2 = math.floor(DefPer2 * 1000) / 1000
    DefPer2 = DefPer2 + 0.5 * (1 - math.sin(DefPer2 * 3.14 / 2))
    local Master = targetUser:GetMasterUser()
    if targetUser:GetNpcID() == 0 or Master ~= nil then
      pvpReduce = 0.2
    end
  end
  local DefFinal = RealDef * (1 + DefPer2 - IgnoreDef + pvpReduce) + Vit2 * (1 + VitPer2 + pvpReduce * 5)
  if DefFinal < 0 then
    DefFinal = 0
  end
  local div = 4000 + DefFinal * 10
  div = div ~= 0 and div or 1
  local DefReduc1 = (4000 + DefFinal) / div
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local AtkFinal = Atk * (1 + AtkPer)
  local DefReduc2 = 1 / (1 + 6 * DefFinal / AtkFinal)
  local DefReduc = math.max(DefReduc1, DefReduc2)
  return DefReduc
end

function CommonFun.CalcMDef(srcUser, targetUser)
  local MDef2 = targetUser:GetProperty("MDef")
  local Int2 = targetUser:GetProperty("Int")
  local RealMDef = MDef2 - Int2
  if MDef2 <= 0 then
    MDef2 = 0
  end
  if RealMDef <= 0 then
    RealMDef = 0
  end
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Card2 = srcUser:GetEquipCardNum(7, 24668)
  if (targetUser.boss or targetUser.mini) and 0 < Card2 and srcUser:HasBuffID(81002120) then
    IgnoreMDef = IgnoreMDef + Card2 * 0.25 + 0.05
  elseif (targetUser.boss or targetUser.mini) and 0 < Card2 then
    IgnoreMDef = IgnoreMDef + Card2 * 0.25
  end
  if (targetUser.boss or targetUser.mini) and srcUser:HasBuffID(57710) then
    local RefineLv2 = srcUser:GetEquipedRefineLv(2)
    IgnoreMDef = IgnoreMDef + RefineLv2 * 0.01
  end
  if targetUser:GetBuffActive(137321) then
    IgnoreMDef = 0
  end
  local pvpReduce = 0
  local mapid, maptype = srcUser:GetMapInfo()
  if (maptype == 2 or maptype == 4) and targetUser:GetNpcID() ~= 40022 then
    MDefPer2 = MDefPer2 < -1 and -1 or 1 < MDefPer2 and 1 or MDefPer2
    MDefPer2 = math.floor(MDefPer2 * 1000) / 1000
    MDefPer2 = MDefPer2 + 0.5 * (1 - math.sin(MDefPer2 * 3.14 / 2))
    local Master = targetUser:GetMasterUser()
    if targetUser:GetNpcID() == 0 or Master ~= nil then
      pvpReduce = 0.2
    end
  end
  local MDefFinal = RealMDef * (1 + MDefPer2 - IgnoreMDef + pvpReduce) + Int2 * (1 + pvpReduce * 5)
  if MDefFinal < 0 then
    MDefFinal = 0
  end
  local div = 1000 + MDefFinal * 10
  div = div ~= 0 and div or 1
  local MDefReduc1 = (1000 + MDefFinal) / div
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MAtkFinal = MAtk * (1 + MAtkPer)
  local MDefReduc2 = 1 / (1 + 13 * MDefFinal / MAtkFinal)
  local MDefReduc = math.max(MDefReduc1, MDefReduc2)
  return MDefReduc
end

function CommonFun.ParseRace(str)
  if "Brute" == str then
    return CommonFun.Race.Brute
  elseif "DemiHuman" == str then
    return CommonFun.Race.DemiHuman
  elseif "Demon" == str then
    return CommonFun.Race.Demon
  elseif "Plant" == str then
    return CommonFun.Race.Plant
  elseif "Undead" == str then
    return CommonFun.Race.DeadLess
  elseif "Formless" == str then
    return CommonFun.Race.Formless
  elseif "Fish" == str then
    return CommonFun.Race.Fish
  elseif "Angel" == str then
    return CommonFun.Race.Angel
  elseif "Insect" == str then
    return CommonFun.Race.Insect
  elseif "Dragon" == str then
    return CommonFun.Race.Dragon
  end
end

function CommonFun.ParseNature(str)
  if "Wind" == str then
    return CommonFun.Nature.Wind
  elseif "Earth" == str then
    return CommonFun.Nature.Earth
  elseif "Water" == str then
    return CommonFun.Nature.Water
  elseif "Fire" == str then
    return CommonFun.Nature.Fire
  elseif "Neutral" == str then
    return CommonFun.Nature.Neutral
  elseif "Holy" == str then
    return CommonFun.Nature.Holy
  elseif "Shadow" == str then
    return CommonFun.Nature.Shadow
  elseif "Ghost" == str then
    return CommonFun.Nature.Ghost
  elseif "Undead" == str then
    return CommonFun.Nature.Undead
  elseif "Poison" == str then
    return CommonFun.Nature.Poison
  end
end

function CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceInc = 0
  local raceRed = 0
  local srcRace = srcUser.race
  local targetRace = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    targetRace = 2
  end
  if targetUser:HasBuffID(49320) and targetUser:HasBuffID(49325) then
  elseif targetUser:HasBuffID(49320) then
    srcRace = 2
  end
  if nil == CommonFun.RaceProps[targetRace] then
    return 1
  end
  if nil == CommonFun.RaceProps[srcRace] then
    return 1
  end
  raceInc = srcUser:GetProperty(CommonFun.RaceProps[targetRace][1])
  raceRed = targetUser:GetProperty(CommonFun.RaceProps[srcRace][2])
  local skilllv = srcUser:GetLernedSkillLevel(306)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if 5 < skilllv and skillID == 306 or skillID == 3303 or skillID == 819 then
    raceRed = math.max(raceRed - 0.06 * (skilllv - 5), 0)
  end
  local Arrow_attr = CommonFun.GetUserArrowAttr(srcUser, params)
  raceInc = raceInc + Arrow_attr
  local A = 1 + raceInc - raceRed
  if A <= 0.15 then
    A = 0.15
  end
  return A
end

function CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local raceInc = 0
  local raceRed = 0
  local srcRace = srcUser.race
  local targetRace = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    targetRace = 2
  end
  if targetUser:HasBuffID(49320) and targetUser:HasBuffID(49325) then
  elseif targetUser:HasBuffID(49320) then
    srcRace = 2
  end
  if nil == CommonFun.RaceProps[targetRace] then
    return 1
  end
  if nil == CommonFun.RaceProps[srcRace] then
    return 1
  end
  raceInc = srcUser:GetProperty(CommonFun.RaceProps[targetRace][1])
  raceRed = targetUser:GetProperty(CommonFun.RaceProps[srcRace][2])
  return 1 - raceRed
end

function CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local bodyInc = 0
  local bodyRed = 0
  local srcShape = srcUser.shape
  local targetShape = targetUser.shape
  bodyInc = srcUser:GetProperty(CommonFun.ShapeProps[targetShape][1])
  bodyRed = targetUser:GetProperty(CommonFun.ShapeProps[srcShape][2])
  if srcUser:HasBuffID(21830150) then
    bodyRed = 0
  end
  local A = 1 + bodyInc - bodyRed
  if A <= 0.15 then
    A = 0.15
  end
  return A
end

function CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyInc = 0
  local bodyRed = 0
  local srcShape = srcUser.shape
  local targetShape = targetUser.shape
  bodyInc = srcUser:GetProperty(CommonFun.ShapeProps[targetShape][1])
  bodyRed = targetUser:GetProperty(CommonFun.ShapeProps[srcShape][2])
  local result = 1 - bodyRed
  if result <= 0.15 then
    result = 0.15
  end
  return result
end

function CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossInc = 0
  local NpcDamPer = 0
  local MonsterDamPer = 0
  local NpcResPer = 0
  if targetUser:GetNpcID() == 0 then
    NpcDamPer = srcUser:GetProperty("NpcDamPer")
    NpcResPer = targetUser:GetProperty("NpcResPer")
  end
  if targetUser.boss or targetUser.mini then
    bossInc = srcUser:GetProperty("BossDamPer")
  end
  if targetUser.boss == false and targetUser.mini == false and targetUser:GetNpcID() ~= 0 then
    MonsterDamPer = srcUser:GetProperty("MonsterDamPer")
  end
  local A = (1 + bossInc) * (1 + NpcDamPer - NpcResPer) * (1 + MonsterDamPer)
  if A <= 0.15 then
    A = 0.15
  end
  return A
end

function CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local bossRed = 0
  local MonsterResPer = 0
  if srcUser.boss or srcUser.mini then
    bossRed = targetUser:GetProperty("BossResPer")
  end
  if srcUser.boss == false and srcUser.mini == false and srcUser:GetNpcID() ~= 0 then
    MonsterResPer = targetUser:GetProperty("MonsterResPer")
  end
  local result = 1 - bossRed - MonsterResPer
  if result <= 0.1 then
    result = 0.1
  end
  return result
end

function CommonFun.NpcParam(srcUser, targetUser, params, damageParam, logger)
  local NpcDamPer = 0
  local NpcResPer = 0
  if targetUser:GetNpcID() == 0 then
    NpcDamPer = srcUser:GetProperty("NpcDamPer")
    NpcResPer = targetUser:GetProperty("NpcResPer")
  end
  local A = 1 + NpcDamPer - NpcResPer
  if A <= 0.15 then
    A = 0.15
  end
  return A
end

function CommonFun.GetUserAtkLevel(srcUser, element, params, damageParam)
  local srcAtkLevel = 1
  local rollType = 0
  if params ~= nil and damageParam ~= nil then
    local skillParams = Table_Skill[params.skillIDAndLevel]
    if skillParams ~= nil then
      rollType = skillParams.RollType
      local srcAtkElement = 0
      if damageParam.elementparam ~= nil and damageParam.elementparam ~= 0 then
        srcAtkElement = damageParam.elementparam
      end
      if damageParam.elementlevel ~= nil and damageParam.elementlevel ~= 0 and element == srcAtkElement then
        srcAtkLevel = damageParam.elementlevel
      end
    end
  end
  srcAtkLevel = srcAtkLevel + srcUser:GetElementAtkUpLevel(element, rollType)
  return srcAtkLevel
end

function CommonFun.GetUserDefLevel(targetUser, element)
  local targetDefLevel = 1
  if targetUser:GetNpcID() ~= 0 then
    if targetUser:GetNatureLv() ~= 0 then
      return targetUser:GetNatureLv()
    end
    local monster = Table_Monster[targetUser:GetNpcID()]
    if monster ~= nil and monster.NatureLevel ~= nil and monster.NatureLevel ~= 0 then
      targetDefLevel = monster.NatureLevel
    end
  end
  targetDefLevel = targetDefLevel + targetUser:GetElementDefUpLevel(element)
  targetDefLevel = math.min(targetDefLevel, 4)
  return targetDefLevel
end

function CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement, params, damageParam)
  local ElementRate = GameConfig.ElementRestrain[srcAtkElement][targetDefElement]
  if params ~= nil and damageParam ~= nil then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    if (skillID == 1700 or skillID == 1725) and (targetDefElement == 3 or targetDefElement == 4) then
      local skilllv = srcUser:GetLernedSkillLevel(1715)
      ElementRate = 0.75 + skilllv * 0.05
    end
    if (skillID == 2705 or skillID == 2706) and targetDefElement == 2 then
      ElementRate = 1
    end
  end
  local srcAtkLevel = CommonFun.GetUserAtkLevel(srcUser, srcAtkElement, params, damageParam)
  local tarDefLevel = CommonFun.GetUserDefLevel(targetUser, targetDefElement)
  if srcUser:HasBuffID(22000991) and srcAtkElement == 1 or srcUser:HasBuffID(22000992) and srcAtkElement == 2 or srcUser:HasBuffID(22000993) and srcAtkElement == 3 or srcUser:HasBuffID(22000994) and srcAtkElement == 4 or srcUser:HasBuffID(22000996) and srcAtkElement == 5 or srcUser:HasBuffID(22000995) and srcAtkElement == 8 then
    ElementRate = ElementRate + 0.15
  end
  if srcUser:HasBuffID(116832) and srcAtkElement == 1 or srcUser:HasBuffID(116833) and srcAtkElement == 2 or srcUser:HasBuffID(116831) and srcAtkElement == 3 or srcUser:HasBuffID(116830) and srcAtkElement == 4 then
    local skilllv = srcUser:GetLernedSkillLevel(1163)
    ElementRate = ElementRate + 0.02 * skilllv
  end
  if srcUser:HasBuffID(1000031) and srcAtkElement == 8 then
    local skilllv1 = srcUser:GetLernedSkillLevel(1163)
    local skilllv2 = srcUser:GetLernedSkillLevel(5003)
    local layer = 0
    if srcUser:HasBuffID(116832) then
      layer = layer + 1
    end
    if srcUser:HasBuffID(116830) then
      layer = layer + 1
    end
    if srcUser:HasBuffID(116831) then
      layer = layer + 1
    end
    if srcUser:HasBuffID(116833) then
      layer = layer + 1
    end
    ElementRate = ElementRate + 0.02 * skilllv1 * skilllv2 * 0.05 * layer
  end
  if 3 <= tarDefLevel then
    ElementRate = ElementRate + (srcAtkLevel - 1) * 0.25 - 0.25 - (tarDefLevel - 2) * 0.125
  elseif 2 <= tarDefLevel and tarDefLevel < 3 then
    ElementRate = ElementRate + (srcAtkLevel - 1) * 0.25 - 0.25
  else
    ElementRate = ElementRate + (srcAtkLevel - 1) * 0.25
  end
  if ElementRate < 0 then
    ElementRate = 0
  end
  return ElementRate
end

function CommonFun.GetUserArrowAttr(srcUser, params)
  local skillParams = Table_Skill[params.skillIDAndLevel]
  if skillParams == nil then
    return 0
  end
  local hasArrow = false
  local arrowNum = 0
  if skillParams.StrengthenCost ~= nil then
    for key, val in pairs(skillParams.StrengthenCost) do
      if val.type == 1 and val.num ~= nil then
        hasArrow = true
        arrowNum = val.num
      end
    end
  end
  local ArrowAttr = 0
  if hasArrow == false then
    ArrowAttr = 0
  elseif srcUser.arrow_server ~= nil then
    if srcUser.arrow_server == 12508 then
      ArrowAttr = 0.3
    end
  elseif srcUser:GetArrowID() == 12508 then
    local arrowid = srcUser:GetArrowID()
    local hasNum = srcUser:GetPackageItemNum(arrowid)
    if arrowNum <= hasNum then
      ArrowAttr = 0.3
    else
      ArrowAttr = 0
    end
  end
  return ArrowAttr
end

function CommonFun.GetUserAtkAttrByList(srcUser, params, damageParamList)
  if damageParamList == nil or damageParamList[1] == nil then
    return 5
  end
  return CommonFun.GetUserAtkAttr(srcUser, params, damageParamList[1])
end

function CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local skillParams = Table_Skill[params.skillIDAndLevel]
  if skillParams == nil then
    return 0
  end
  if damageParam == nil then
    return 0
  end
  local hasArrow = false
  local arrowNum = 0
  if skillParams.StrengthenCost ~= nil then
    for key, val in pairs(skillParams.StrengthenCost) do
      if val.type == 1 and val.num ~= nil then
        hasArrow = true
        arrowNum = val.num
      end
    end
  end
  local srcAtkElement = 0
  if damageParam.elementparam ~= nil and damageParam.elementparam ~= 0 then
    srcAtkElement = damageParam.elementparam
  elseif hasArrow == false then
    srcAtkElement = srcUser:GetProperty("AtkAttr")
  else
    local AttrEffect = srcUser:GetProperty("AttrEffect")
    local bits = CommonFun.getBits(AttrEffect)
    if bits[CommonFun.AttrEffect.BuffPriorArrow] == 1 then
      srcAtkElement = srcUser:GetProperty("AtkAttr")
    elseif srcUser.arrow_server ~= nil then
      if srcUser.arrow_server == 0 or srcUser.arrow_server == 12508 or srcUser.arrow_server == 12509 then
        srcAtkElement = srcUser:GetProperty("AtkAttr")
      else
        srcAtkElement = CommonFun.GetAtkAttrByArrow(srcUser.arrow_server)
      end
    elseif srcUser:GetArrowID() == 0 or srcUser:GetArrowID() == 12508 or srcUser:GetArrowID() == 12509 then
      srcAtkElement = srcUser:GetProperty("AtkAttr")
    else
      local arrowid = srcUser:GetArrowID()
      local hasNum = srcUser:GetPackageItemNum(arrowid)
      if arrowNum <= hasNum then
        srcAtkElement = CommonFun.GetAtkAttrByArrow(arrowid)
      else
        srcAtkElement = srcUser:GetProperty("AtkAttr")
      end
    end
  end
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2300 or skillID == 2323 or skillID == 2343 or skillID == 2344 then
    if srcUser:HasBuffID(135001) then
      srcAtkElement = 1
    elseif srcUser:HasBuffID(135002) then
      srcAtkElement = 2
    elseif srcUser:HasBuffID(135003) then
      srcAtkElement = 3
    elseif srcUser:HasBuffID(135004) then
      srcAtkElement = 4
    elseif srcUser:HasBuffID(135005) then
      srcAtkElement = 6
    elseif srcUser:HasBuffID(135006) then
      srcAtkElement = 7
    elseif srcUser:HasBuffID(135007) then
      srcAtkElement = 8
    end
  end
  if skillID == 1288 and srcUser:GetNpcID() == 580500 then
    if srcUser:HasBuffID(7014) then
      srcAtkElement = 1
    elseif srcUser:HasBuffID(7012) then
      srcAtkElement = 2
    elseif srcUser:HasBuffID(7011) then
      srcAtkElement = 3
    elseif srcUser:HasBuffID(7013) then
      srcAtkElement = 4
    end
  end
  return srcAtkElement
end

function CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam)
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if srcUser:HasBuffID(135210) then
    targetDefElement = 8
  end
  if srcUser:HasBuffID(20510031) then
    targetDefElement = 7
  end
  local ElementRate = CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement, params, damageParam)
  if nil == srcAtkElement then
    return 0
  end
  if nil == targetDefElement then
    return 0
  end
  if skillID == 1645 or skillID == 1652 then
    local GemValue = srcUser:GetGemValue(153171)
    ElementRate = ElementRate + GemValue / 1000
  end
  if (srcUser:HasBuffID(69650) or srcUser:HasBuffID(71090)) and 1 < ElementRate then
    ElementRate = ElementRate * 1.1
  end
  if targetUser:HasBuffID(49130) then
    ElementRate = math.min(ElementRate, 1)
  end
  if srcUser:HasBuffID(49210) then
    ElementRate = ElementRate + 0.15
  end
  return ElementRate
end

function CommonFun.calcElementRate(srcUser, targetUser, params, damageParam, logger)
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  if srcUser:HasBuffID(20510031) then
    targetDefElement = 7
  end
  local ElementRate = CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement, params, damageParam)
  local Num1 = srcUser:GetRunePoint(31019)
  local Num2 = srcUser:GetRunePoint(31020)
  local RuneRate = (Num1 + Num2) * 0.1
  if nil == srcAtkElement then
    logger.error(string.format("%s srcAtkElement is nil", srcUser.name))
    return 0
  end
  if nil == targetDefElement then
    logger.error(string.format("%s targetDefElement is nil", targetUser.name))
    return 0
  end
  if nil == CommonFun.NatureProps[srcAtkElement] then
    logger.error(string.format("CommonFun.NatureProps[%s] is nil", tostring(srcAtkElement)))
    return 0
  end
  if srcAtkElement == 10 then
    ElementRate = ElementRate + RuneRate
  end
  if srcAtkElement == 6 and targetDefElement == 7 then
    local GemValue = srcUser:GetGemValue(51022)
    ElementRate = ElementRate + GemValue / 100000
  end
  if (srcUser:HasBuffID(69650) or srcUser:HasBuffID(71090)) and 1 < ElementRate then
    ElementRate = ElementRate * 1.1
  end
  if targetUser:HasBuffID(49130) then
    ElementRate = math.min(ElementRate, 1)
  end
  if srcUser:HasBuffID(49210) then
    ElementRate = ElementRate + 0.15
  end
  return ElementRate
end

function CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local elementInc = 0
  local elementRed = 0
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  if srcUser:HasBuffID(20510031) then
    targetDefElement = 7
  end
  if nil == srcAtkElement then
    logger.error(string.format("%s srcAtkElement is nil", srcUser.name))
    return 0
  end
  if nil == targetDefElement then
    logger.error(string.format("%s targetDefElement is nil", targetUser.name))
    return 0
  end
  if nil == CommonFun.NatureProps[targetDefElement] then
    logger.error(string.format("%s CommonFun.NatureProps[][%s] is nil", srcUser.name, tostring(targetDefElement)))
    return 0
  end
  if nil == CommonFun.NatureProps[srcAtkElement] then
    logger.error(string.format("CommonFun.NatureProps[%s] is nil", tostring(srcAtkElement)))
    return 0
  end
  elementInc = srcUser:GetProperty(CommonFun.NatureProps[targetDefElement][1])
  elementRed = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement][2])
  return (1 + elementInc) * CommonFun.calcElementRate(srcUser, targetUser, params, damageParam, logger)
end

function CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local elementInc = 0
  local elementRed = 0
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  if srcUser:HasBuffID(20510031) then
    targetDefElement = 7
  end
  if nil == srcAtkElement then
    logger.error(string.format("%s srcAtkElement is nil", srcUser.name))
    return 0
  end
  if nil == targetDefElement then
    logger.error(string.format("%s targetDefElement is nil", targetUser.name))
    return 0
  end
  if nil == CommonFun.NatureProps[targetDefElement] then
    logger.error(string.format("%s CommonFun.NatureProps[%s] is nil", srcUser.name, tostring(targetDefElement)))
    return 0
  end
  if nil == CommonFun.NatureProps[srcAtkElement] then
    logger.error(string.format("CommonFun.NatureProps[%s] is nil", tostring(srcAtkElement)))
    return 0
  end
  elementInc = srcUser:GetProperty(CommonFun.NatureProps[targetDefElement][1])
  elementRed = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement][2])
  elementAtk = srcUser:GetProperty(CommonFun.NatureProps[srcAtkElement][3])
  if nil == elementAtk then
    elementAtk = 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(306)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if 5 < skilllv and skillID == 306 or skillID == 3303 or skillID == 819 then
    elementRed = math.max(elementRed - 0.06 * (skilllv - 5), 0)
  end
  if skillID == 1288 or skillID == 1812 or skillID == 4310 then
    local GemValue = srcUser:GetGemValue(61002)
    elementRed = math.max(elementRed - GemValue / 100000, 0)
  end
  local result = 1 + elementAtk - elementRed
  if result <= 0.15 then
    result = 0.15
  end
  return result
end

function CommonFun.MergeSkillID(skillID, skillLevel)
  return skillID * 1000 + skillLevel
end

function CommonFun.UnmergeSkillID(skillIDAndLevel)
  return math.floor(skillIDAndLevel / 1000), skillIDAndLevel % 1000
end

function CommonFun.IsInRate(rate, random)
  if rate == nil or random == nil then
    return false
  end
  return random < rate
end

function CommonFun.RandomRange(min, max, random)
  if random == nil then
    return 0
  end
  local p = random / 100
  p = min + p * (max - min)
  return p
end

function CommonFun.Clamp(value, min, max)
  if value < min then
    return min
  end
  if max < value then
    return max
  end
  return value
end

function CommonFun.GetAttrName(attrid)
  if Table_RoleData then
    local attr = Table_RoleData[attrid]
    if attr then
      return attr.VarName
    end
  end
  return ""
end

function CommonFun.CalcHitRate(srcUser, targetUser, skillParams)
  local Hit = srcUser:GetProperty("Hit")
  local Flee2 = targetUser:GetProperty("Flee")
  local StateEffect2 = targetUser:GetProperty("StateEffect")
  local bits2 = CommonFun.getBits(StateEffect2)
  local srcAttrEffect = srcUser:GetProperty("AttrEffect3")
  local bits4 = CommonFun.getBits(srcAttrEffect)
  local isCanBlock = true
  if bits4[CommonFun.AttrEffect3.MustHit] == 1 and srcUser:HasBuffID(21930030) then
    isCanBlock = false
  end
  local targetAttrEffect = targetUser:GetProperty("AttrEffect3")
  local bits5 = CommonFun.getBits(targetAttrEffect)
  if bits5[CommonFun.AttrEffect3.CantBlock] == 1 then
    isCanBlock = false
  end
  local skill_qy = srcUser:GetLernedSkillLevel(2561)
  if 7 <= skill_qy and srcUser:HasBuffID(136780) and targetUser:HasBuffID(136781) then
    isCanBlock = false
  end
  local skilllv_1 = skillParams.id
  local Num1 = srcUser:GetRunePoint(32011)
  local Num2 = srcUser:GetRunePoint(32012)
  local RuneHit = Num1 * 0.1 + Num2 * 0.05
  local Num3 = srcUser:GetRunePoint(70130)
  local RuneHit2 = Num3 * 0.2
  local SkillHit = skillParams.SkillHit or 0
  if skilllv_1 == nil then
    RuneHit = 0
  end
  if math.floor(skilllv_1 / 1000) == 181 or math.floor(skilllv_1 / 1000) == 1111 then
    SkillHit = (skillParams.SkillHit or 0) + RuneHit
  end
  if math.floor(skilllv_1 / 1000) == 355 then
    SkillHit = (skillParams.SkillHit or 0) + RuneHit2
  end
  if math.floor(skilllv_1 / 1000) == 2020 then
    local fbGem = srcUser:GetGemValue(163111)
    SkillHit = (skillParams.SkillHit or 0) + fbGem / 100000
  end
  if math.floor(skilllv_1 / 1000) == 188 then
    local xlGem = srcUser:GetGemValue(31061)
    SkillHit = (skillParams.SkillHit or 0) + xlGem / 100000
  end
  if math.floor(skilllv_1 / 1000) == 228 or math.floor(skilllv_1 / 1000) == 229 or math.floor(skilllv_1 / 1000) == 1478 then
    local Gem = srcUser:GetGemValue(143061)
    SkillHit = (skillParams.SkillHit or 0) + Gem / 100000
  end
  if math.floor(skilllv_1 / 1000) == 1261 or math.floor(skilllv_1 / 1000) == 1272 or math.floor(skilllv_1 / 1000) == 1713 or math.floor(skilllv_1 / 1000) == 1727 then
    local DragonGem = srcUser:GetGemValue(11003)
    SkillHit = (skillParams.SkillHit or 0) + DragonGem / 100000
  end
  if srcUser:isCostBattleCount() == true and targetUser:GetNpcID() == 0 then
    local Monsterlevel = 0
    local monster_cfg = Table_Monster[srcUser:GetNpcID()]
    if monster_cfg ~= nil then
      Monsterlevel = monster_cfg.Level
    end
    local PlayerBaseLv = targetUser.BaseLv
    local deltalv = Monsterlevel - PlayerBaseLv
    if 40 < deltalv then
      Hit = Hit + (deltalv - 40) * 10 + 100
    else
      if 20 < deltalv then
        Hit = Hit + (deltalv - 20) * 5
      else
      end
    end
  end
  local rate = (Hit + 80) * (1 + SkillHit) - Flee2
  if bits2[CommonFun.StateEffect.Dizzy] == 1 or bits2[CommonFun.StateEffect.Freeze] == 1 or bits2[CommonFun.StateEffect.Stone] == 1 or bits2[CommonFun.StateEffect.Sleep] == 1 then
    rate = 100
  end
  if math.floor(skilllv_1 / 1000) == 319 or math.floor(skilllv_1 / 1000) == 306 or math.floor(skilllv_1 / 1000) == 310 or math.floor(skilllv_1 / 1000) == 411 or math.floor(skilllv_1 / 1000) == 422 or math.floor(skilllv_1 / 1000) == 91001 or math.floor(skilllv_1 / 1000) == 410 then
    rate = 100
  end
  if math.floor(skilllv_1 / 1000) == 1284 or math.floor(skilllv_1 / 1000) == 1288 or math.floor(skilllv_1 / 1000) == 1122 or math.floor(skilllv_1 / 1000) == 3303 or math.floor(skilllv_1 / 1000) == 819 or math.floor(skilllv_1 / 1000) == 3706 or math.floor(skilllv_1 / 1000) == 1812 or math.floor(skilllv_1 / 1000) == 1835 or math.floor(skilllv_1 / 1000) == 1817 then
    rate = 100
  end
  if math.floor(skilllv_1 / 1000) == 2563 or math.floor(skilllv_1 / 1000) == 2572 then
    rate = 100
  end
  if srcUser:HasBuffID(115090) or srcUser:HasBuffID(115091) then
    local Hp = srcUser:GetProperty("Hp")
    local MaxHp = srcUser:GetProperty("MaxHp")
    if Hp > MaxHp * 0.09 and math.floor(skilllv_1 / 1000) == 372 then
      rate = 100
    end
  end
  if srcUser:HasBuffID(128091) and rate == 100 then
    local MustMissRate = srcUser:GetProperty("MustMissRate")
    rate = 100 * (1 - MustMissRate)
  end
  if srcUser:HasBuffID(133580) or srcUser:HasBuffID(133581) then
    local MustMissRate = srcUser:GetProperty("MustMissRate")
    rate = math.min(rate, 100) * (1 - MustMissRate)
  end
  if srcUser:HasBuffID(165540) then
    rate = 100
  end
  if CommonFun.RollType.Attack == skillParams.RollType and srcUser:HasBuffID(49120) or isCanBlock == false then
    rate = 100
  end
  rate = CommonFun.Clamp(rate, 5, 100)
  if srcUser:HasBuffID(44522) or srcUser:HasBuffID(44532) then
    rate = 0
  end
  return rate
end

function CommonFun.CalcFleeRate(srcUser, targetUser, skillParams)
  local Hit = srcUser:GetProperty("Hit")
  local Flee2 = targetUser:GetProperty("Flee")
  local rate = 0
  rate = CommonFun.Clamp(rate, 0, 100)
  return rate
end

function CommonFun.CalcCritRate(srcUser, targetUser, skillParams)
  local Cri = srcUser:GetProperty("Cri")
  local CriRes2 = targetUser:GetProperty("CriRes")
  local Hp = targetUser:GetProperty("Hp")
  local MaxHp = targetUser:GetProperty("MaxHp")
  local targetRace = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    targetRace = 2
  end
  local DefAttr2 = targetUser:GetProperty("DefAttr")
  local AttrEffect = srcUser:GetProperty("AttrEffect2")
  local bits = CommonFun.getBits(AttrEffect)
  local skillLevel = srcUser:GetLernedSkillLevel(250)
  local rate = Cri - CriRes2
  local Card1 = srcUser:GetEquipCardNum(7, 20097)
  local Card2 = srcUser:GetEquipCardNum(7, 20030)
  local Card3 = srcUser:GetEquipCardNum(7, 20031)
  local Card4 = srcUser:GetEquipCardNum(7, 24016)
  local Card5 = srcUser:GetEquipCardNum(7, 20114)
  local Card6 = srcUser:GetEquipCardNum(3, 20160)
  local Card7 = srcUser:GetEquipCardNum(3, 20173)
  local Card8 = srcUser:GetEquipCardNum(7, 20187)
  local Card9 = srcUser:GetEquipCardNum(7, 20197)
  local Card10 = srcUser:GetEquipCardNum(7, 20200)
  local a = 0
  local b = 0
  local c = 0
  local d = 0
  local e = 0
  local f = 0
  local g = 0
  local h = 0
  local i = 0
  if targetRace == 4 then
    a = Card1 * 20
  end
  if targetRace == 5 then
    b = Card2 * 20
  end
  if targetRace == 6 then
    c = Card3 * 20
  end
  if bits[CommonFun.AttrEffect2.MushiCrit] == 1 and (targetRace == 3 or DefAttr2 == 9) then
    d = Card4 * 9
  end
  if targetRace == 1 then
    e = Card5 * 10
  end
  if targetRace == 7 then
    f = Card6 * 20 + Card8 * 20
  end
  if targetRace == 1 or targetRace == 4 then
    g = Card7 * 15
  end
  if targetRace == 10 then
    h = Card9 * 20
  end
  if targetRace == 2 then
    i = Card10 * 20
  end
  local mapid, maptype = srcUser:GetMapInfo()
  local CriDef = 0
  if (maptype == 2 or maptype == 4) and targetUser:GetNpcID() ~= 40022 then
    CriDef = math.floor((Cri - CriRes2) / 3)
    CriDef = math.max(CriDef, 0)
  end
  local Hp_rate = 0.3
  if 5 < skillLevel then
    Hp_rate = Hp_rate + (skillLevel - 5) * 0.04
  end
  if Hp <= MaxHp * Hp_rate then
    rate = Cri - CriRes2 + math.min(skillLevel * 6, 30) + a + b + c + d + e + f + g + h - CriDef
  else
    rate = Cri - CriRes2 + a + b + c + d + e + f + g + h + i - CriDef
  end
  if (targetUser:GetNpcID() ~= 0 or targetUser.boss or targetUser.mini) and srcUser:HasBuffID(64710) then
    rate = 100
  end
  if srcUser:HasBuffID(115090) or srcUser:HasBuffID(115091) then
    local Hp = srcUser:GetProperty("Hp")
    local MaxHp = srcUser:GetProperty("MaxHp")
    if Hp > MaxHp * 0.09 then
      rate = 0
    end
  end
  if targetUser:HasBuffID(159610) then
    rate = rate * 0.75
  end
  local Profession = srcUser:GetProfressionID()
  if Profession == 625 then
    rate = 0
  end
  if targetUser:GetNpcID() == 30043 then
    rate = 0
  end
  if targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    rate = 0
  end
  if targetUser:HasBuffID(20310140) and (targetUser:HasBuffID(116070) or targetUser:HasBuffID(116072)) then
    rate = 0
  end
  if targetUser:HasBuffID(151028) then
    rate = 0
  end
  local skillID = skillParams.id
  if math.floor(skillID / 1000) == 5400 or math.floor(skillID / 1000) == 5404 then
    rate = 0
  end
  if srcUser:GetNpcID() == 580101 or srcUser:GetNpcID() == 580102 or srcUser:GetNpcID() == 580103 or srcUser:GetNpcID() == 580104 or srcUser:GetNpcID() == 580105 then
    rate = 0
  end
  rate = CommonFun.Clamp(rate, 0, 100)
  return rate
end

function CommonFun.IsMiss(srcUser, targetUser, skillParams)
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local StateEffect2 = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local bits2 = CommonFun.getBits(StateEffect2)
  if bits[CommonFun.AttrEffect.MustHitAndCri] == 1 or bits2[CommonFun.StateEffect.Sleep] == 1 then
    return false
  end
  local hitRate = CommonFun.CalcHitRate(srcUser, targetUser, skillParams)
  if CommonFun.IsInRate(hitRate, srcUser:GetRandom()) == false then
    return true
  end
  return false
end

function CommonFun.IsCrit(srcUser, targetUser, skillParams)
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local AttrEffect2 = targetUser:GetProperty("AttrEffect")
  local StateEffect2 = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local bits1 = CommonFun.getBits(AttrEffect2)
  local bits2 = CommonFun.getBits(StateEffect2)
  local skillID = skillParams.id
  if math.floor(skillID / 1000) == 91001 then
    return false
  end
  if bits[CommonFun.AttrEffect.MustHitAndCri] == 1 or bits2[CommonFun.StateEffect.Sleep] == 1 then
    return true
  end
  if bits1[CommonFun.AttrEffect.MustNotCri] == 1 then
    return false
  end
  local critRate = CommonFun.CalcCritRate(srcUser, targetUser, skillParams)
  if CommonFun.IsInRate(critRate, srcUser:GetRandom()) then
    return true
  end
  return false
end

function CommonFun.CalcCrit(srcUser, targetUser, skillParams)
  local CriDamPer = srcUser:GetProperty("CriDamPer")
  local CriDefPer2 = targetUser:GetProperty("CriDefPer")
  local targetRace = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    targetRace = 2
  end
  local Weapon = srcUser:GetEquipedID(7)
  local scale = 1.5 + CriDamPer - CriDefPer2
  if targetRace == 3 and (Weapon == 41815 or Weapon == 141815) then
    scale = 1.75 + CriDamPer - CriDefPer2
  end
  local Buff = srcUser:HasBuffID(80000300)
  if targetRace == 5 and Buff == true then
    scale = 1.55 + CriDamPer - CriDefPer2
  end
  local Buff = srcUser:HasBuffID(80000310)
  if targetRace == 6 and Buff == true then
    scale = 1.55 + CriDamPer - CriDefPer2
  end
  local CardKapok = srcUser:GetEquipCardNum(7, 23247)
  if targetRace == 1 and srcUser:HasBuffID(56650) then
    scale = 1.5 + CardKapok * 0.15 + CriDamPer - CriDefPer2
  end
  if targetRace == 9 and srcUser:HasBuffID(56650) then
    scale = 1.5 + CardKapok * 0.15 + CriDamPer - CriDefPer2
  end
  local Cri = srcUser:GetProperty("Cri")
  local CriRes = targetUser:GetProperty("CriRes")
  local Gem = srcUser:GetGemValue(31021)
  scale = scale + (Cri - CriRes) * Gem / 100000
  if srcUser:HasBuffID(64710) then
    scale = scale - 0.25
  end
  scale = CommonFun.Clamp(scale, 1, 100)
  return scale
end

function CommonFun.TableHasValue(t, v)
  for key, value in pairs(t) do
    if v == value then
      return true
    end
  end
  return false
end

function CommonFun.IsLongSkill(launch_range)
  if launch_range == nil then
    return false
  end
  return 3 < launch_range
end

function CommonFun.CheckStormBossMiss(targetUser, srcUser)
  local monster = Table_Monster[targetUser:GetNpcID()]
  if monster == nil then
    return false
  end
  if targetUser.isBossFromBranch == true then
    return false
  end
  if monster.BattleTimeReward == nil or monster.BattleTimeReward.cost_time == nil then
    return false
  end
  local costtime = monster.BattleTimeReward.cost_time
  if srcUser:OpenStormBossLucky() == true then
    local costtime1 = monster.BattleTimeReward.cost_time / 10
    return costtime1 > srcUser:GetSpareBattleTime()
  else
    return costtime > srcUser:GetSpareBattleTime()
  end
end

function CommonFun.GetDamReduceValue(srcUser, targetUser, value)
  local damage = value
  if damage ~= 0 then
  end
  local mapid, maptype = srcUser:GetMapInfo()
  if damage ~= 0 and mapid == 7200 then
    damage = damage / 500
  end
  if damage ~= 0 and mapid == 7204 then
    damage = damage / (math.random(0, 1) * 4 + 48) / 10
  end
  if damage ~= 0 and (mapid == 7505 or mapid == 7510 or mapid == 7515 or mapid == 7520) then
    damage = damage / 40
  end
  if damage ~= 0 and mapid == 149 then
    local shengwang1 = srcUser:GetPrestigeLevel()
    local shengwang2 = targetUser:GetPrestigeLevel()
    local xishu = shengwang2 - shengwang1
    local jianshang = 1
    if 1 <= xishu then
      if xishu <= 3 then
        jianshang = 1 - xishu * 0.3
      else
        jianshang = 0.01
      end
    end
    if xishu <= -1 and targetUser:GetNpcID() == 0 then
      jianshang = -xishu * 2
    end
    damage = damage * jianshang
  end
  if damage ~= 0 and targetUser:isCostBattleCount() == true then
    local PlayerBaseLv = srcUser.BaseLv
    local monster_cfg = Table_Monster[targetUser:GetNpcID()]
    local Monsterlevel = 0
    if monster_cfg ~= nil then
      Monsterlevel = monster_cfg.Level
    end
    local Pressing = 1
    local deltalv = Monsterlevel - PlayerBaseLv
    if 40 < deltalv then
      Pressing = 1 - math.min((deltalv - 40) * 0.05 + 0.5, 0.95)
    elseif 20 < deltalv then
      Pressing = 1 - math.min((deltalv - 20) * 0.025, 0.95)
    end
    damage = damage * Pressing
  end
  if damage <= 1 then
    return 1
  end
  if 2147483647 <= damage then
    damage = 2147483647
  end
  return damage
end

function CommonFun.CalcDamage(srcUser, targetUser, params, logger)
  local damage, damagetype = CommonFun.CalcBaseDamage(srcUser, targetUser, params, logger)
  local sharedam, realdam
  local MonsterBeingNpc = ""
  local Monster_BeingNpc = Table_Monster[targetUser:GetNpcID()]
  if Monster_BeingNpc ~= nil then
    MonsterBeingNpc = Monster_BeingNpc.Type
  end
  if 0 < damage and srcUser:isCostBattleCount() == true and (targetUser:GetNpcID() == 0 or MonsterBeingNpc == "BeingNpc" or MonsterBeingNpc == "PetNpc") then
    local Monsterlevel = 0
    local monster_cfg = Table_Monster[srcUser:GetNpcID()]
    if monster_cfg ~= nil then
      Monsterlevel = monster_cfg.Level
    end
    local PlayerBaseLv = targetUser.BaseLv
    local PlayerMaxHp = targetUser:GetProperty("MaxHp")
    local Master = targetUser:GetMasterUser()
    if Master ~= nil then
      PlayerBaseLv = Master.BaseLv
      local MasterMaxHp = Master:GetProperty("MaxHp")
      if PlayerMaxHp < MasterMaxHp then
        PlayerMaxHp = MasterMaxHp
      end
    end
    if PlayerMaxHp <= 1 then
      PlayerMaxHp = 1
    end
    local deltalv = Monsterlevel - PlayerBaseLv
    if 40 < deltalv then
      damage = damage + PlayerMaxHp * 0.01 * math.min((deltalv - 40) * 2 + 10, 50)
    elseif 30 < deltalv then
      damage = damage + PlayerMaxHp * 0.01 * math.min((deltalv - 30) * 0.75 + 2.5, 10)
    else
      if 20 < deltalv then
        damage = damage + PlayerMaxHp * 0.01 * (deltalv - 20) * 0.25
      else
      end
    end
  end
  if 0 < damage then
    if targetUser.isServerCall then
      if targetUser.have_sharedam_server ~= nil and targetUser.have_sharedam_server == true then
        damage, sharedam, damagetype = CommonFun.CalcShareDamage(srcUser, targetUser, damage, damagetype)
      end
    else
      damage, sharedam, damagetype = CommonFun.CalcShareDamage(srcUser, targetUser, damage, damagetype)
    end
  end
  if 0 < damage and targetUser.diffShowDamage == true then
    local Level = srcUser.BaseLv
    local MonsterLevel = Table_MonsterLevel[Level]
    local MonsterID = targetUser:GetNpcID()
    local Monster = Table_Monster[MonsterID]
    if Monster ~= nil and MonsterLevel ~= nil then
      realdam = damage * Monster.Hp / MonsterLevel.RealMaxHp
    end
  end
  if 0 < damage and srcUser.diffShowDamage == true then
    local Level = targetUser.BaseLv
    local MonsterLevel = Table_MonsterLevel[Level]
    if MonsterLevel ~= nil then
      damage = damage * MonsterLevel.LevelReduc
    end
  end
  local mapid, maptype = srcUser:GetMapInfo()
  if 0 < damage and (srcUser:InDamReduceRaid() == true and srcUser:IsUserCamp() == true or mapid == 149 or targetUser:isCostBattleCount() == true) then
    damage = CommonFun.GetDamReduceValue(srcUser, targetUser, damage)
    local skillParams = Table_Skill[params.skillIDAndLevel]
    if skillParams ~= nil and skillParams.DamRatio ~= nil then
      damage = damage * skillParams.DamRatio
    end
  end
  if 2147483647 <= damage then
    damage = 2147483647
  end
  return damage, damagetype, sharedam, realdam
end

function CommonFun.CalcBaseDamage(srcUser, targetUser, params, logger)
  local damageType = CommonFun.DamageType.Normal
  local damage, forceDamageType = CommonFun.DoCalcDamage(srcUser, targetUser, params, logger)
  if nil == srcUser then
    logger.error(string.format("srcUser is nil"))
    return 0, CommonFun.DamageType.None
  end
  if nil == targetUser then
    logger.error(string.format("targetUser is nil"))
    return 0, CommonFun.DamageType.None
  end
  if nil == Table_Skill then
    logger.error("Table_Skill is nil")
    return 0, CommonFun.DamageType.None
  end
  local skillParams = Table_Skill[params.skillIDAndLevel]
  if nil == skillParams then
    logger.error(string.format("Table_Skill[%d] is nil", params.skillIDAndLevel))
    return 0, CommonFun.DamageType.None
  end
  local paramList = skillParams.Damage
  if nil == paramList or #paramList <= 0 then
    return 0, CommonFun.DamageType.None
  end
  local mapid, maptype = srcUser:GetMapInfo()
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    return 0, CommonFun.DamageType.Miss
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    return 0, CommonFun.DamageType.Miss
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    return 0, CommonFun.DamageType.Miss
  end
  local iscrit = CommonFun.IsCrit(srcUser, targetUser, skillParams)
  if CommonFun.RollType.Attack == skillParams.RollType then
    if srcUser:IsAttackSkill(params.skillIDAndLevel) then
      if iscrit == false and CommonFun.IsMiss(srcUser, targetUser, skillParams) == true then
        return 0, CommonFun.DamageType.Miss
      end
    elseif not srcUser:IsAttackSkill(params.skillIDAndLevel) and CommonFun.IsMiss(srcUser, targetUser, skillParams) == true then
      return 0, CommonFun.DamageType.Miss
    end
  end
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local enemy = srcUser:IsEnemy(targetUser)
  local DefAttr2 = targetUser:GetProperty("DefAttr")
  local AttrEffect2 = targetUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local AttrEffect3 = targetUser:GetProperty("AttrEffect2")
  local bits3 = CommonFun.getBits(AttrEffect3)
  local srcAttrEffect = srcUser:GetProperty("AttrEffect3")
  local bits4 = CommonFun.getBits(srcAttrEffect)
  local AttrEffect4 = targetUser:GetProperty("AttrEffect3")
  local bits5 = CommonFun.getBits(AttrEffect4)
  local isCanBlock = true
  if bits4[CommonFun.AttrEffect3.MustHit] == 1 and srcUser:HasBuffID(21930030) then
    isCanBlock = false
  end
  if bits5[CommonFun.AttrEffect3.CantBlock] == 1 then
    isCanBlock = false
  end
  local skill_qy = srcUser:GetLernedSkillLevel(2561)
  if 7 <= skill_qy and srcUser:HasBuffID(136780) and targetUser:HasBuffID(136781) then
    isCanBlock = false
  end
  if enemy then
    if targetUser:IsImmuneSkill(skillID) then
      return 0, CommonFun.DamageType.Miss
    end
    if skillID == 160 and DefAttr2 == CommonFun.Nature.Undead and targetUser.boss == false and targetUser.mini == false and targetUser:GetNpcID() ~= 18143 and targetUser:GetNpcID() ~= 18144 and targetUser:GetNpcID() ~= 18145 and targetUser:HasBuffID(160000) == false then
      local Luk = srcUser:GetProperty("Luk")
      local Int = srcUser:GetProperty("Int")
      local BaseLv = srcUser.BaseLv
      local Hp = targetUser:GetProperty("Hp")
      local MaxHp = targetUser:GetProperty("MaxHp")
      local rate = (20 * skillLevel + Luk + Int + BaseLv + (1 - Hp / MaxHp) * 200) / 10
      if 70 <= rate then
        rate = 70
      end
      if CommonFun.IsInRate(rate, srcUser:GetRandom()) then
        return targetUser:GetProperty("MaxHp"), CommonFun.DamageType.Normal
      end
    end
    if bits2[CommonFun.AttrEffect.NoMagicDamage] == 1 and CommonFun.RollType.Magic == skillParams.RollType then
      return 0, CommonFun.DamageType.WeaponBlock
    end
    if bits2[CommonFun.AttrEffect.NoPhysicalDamage] == 1 and CommonFun.RollType.Attack == skillParams.RollType then
      return 0, CommonFun.DamageType.WeaponBlock
    end
    if bits2[CommonFun.AttrEffect.IgnoreNearNormalSkill] == 1 and nil ~= skillParams.Launch_Type and CommonFun.LaunchType.CloseAttack == skillParams.Launch_Type then
      return 0, CommonFun.DamageType.WeaponBlock
    end
    if bits2[CommonFun.AttrEffect.IgnoreNearPhysicalSkill] == 1 and skillParams.Launch_Range ~= nil and CommonFun.IsLongSkill(skillParams.Launch_Range) == false and skillParams.RollType == 1 and skillID ~= 319 and isCanBlock == true then
      return 0, CommonFun.DamageType.Barrier
    end
    if bits2[CommonFun.AttrEffect.IgnoreFarSkill] == 1 and skillParams.Launch_Range ~= nil and CommonFun.IsLongSkill(skillParams.Launch_Range) == true and skillParams.RollType == 1 and skillID ~= 2227 and skillID ~= 2243 and skillID ~= 2251 and isCanBlock == true then
      return 0, CommonFun.DamageType.Barrier
    end
    if skillParams.Launch_Range ~= nil and skillParams.RollType == 1 and skillParams.Logic == "SkillLockedTarget" and isCanBlock == true and targetUser:HasBuffID(132080) then
      local Bufflv = targetUser:GetBuffLevel(132080)
      local WeaponType = targetUser:GetEquipedWeaponType()
      local ShadowNum = targetUser:GetPetCount("ShadowNpc")
      local Rate = Bufflv * ShadowNum * 2
      if CommonFun.IsInRate(Rate, srcUser:GetRandom()) and WeaponType == 210 then
        return 0, CommonFun.DamageType.Miss
      end
    end
    if skillParams.Launch_Range ~= nil and CommonFun.IsLongSkill(skillParams.Launch_Range) == true and skillParams.RollType == 1 and skillParams.Logic == "SkillLockedTarget" and isCanBlock == true then
      local Rate = 0
      if targetUser:HasBuffID(118172) then
        local Bufflv = targetUser:GetBuffLevel(118172)
        Rate = Bufflv * 10 + 20
      end
      if targetUser:HasBuffID(90160) or targetUser:HasBuffID(123280) then
        local Value = targetUser:GetProperty("LongFleeRate")
        Rate = Rate + Value
      end
      if CommonFun.IsInRate(Rate, srcUser:GetRandom()) and srcUser:HasBuffID(49120) == false then
        return 0, CommonFun.DamageType.Miss
      end
    end
    if skillParams.Launch_Range ~= nil and CommonFun.IsLongSkill(skillParams.Launch_Range) == true and skillParams.RollType == 1 and isCanBlock == true then
      local Rate = 0
      if targetUser:HasBuffID(133644) or targetUser:HasBuffID(136010) or targetUser:HasBuffID(136011) then
        Rate = targetUser:GetProperty("LongFleeRate")
      end
      if CommonFun.IsInRate(Rate, srcUser:GetRandom()) and srcUser:HasBuffID(49120) == false then
        return 0, CommonFun.DamageType.Miss
      end
    end
    if targetUser:HasBuffID(20910160) and targetUser:HasBuffID(106100) and CommonFun.RollType.Magic == skillParams.RollType and skillParams.Logic ~= "SkillLockedTarget" and isCanBlock == true and 0 < damage then
      return 0, CommonFun.DamageType.Miss
    end
    if srcUser:HasBuffID(136780) and targetUser:HasBuffID(136781) == false then
      return 0, CommonFun.DamageType.Miss
    end
    if srcUser:HasBuffID(136781) == false and targetUser:HasBuffID(136780) then
      return 0, CommonFun.DamageType.Miss
    end
    if CommonFun.RollType.Magic == skillParams.RollType and isCanBlock == true and 0 < damage then
      local Flee = targetUser:GetProperty("Flee")
      local Rate = 0
      if targetUser:HasBuffID(32980) then
        Rate = Rate + 5 + math.min(Flee / 50, 15)
      end
      local CardSP = targetUser:GetBuffLayer(53550)
      if 0 < CardSP then
        Rate = Rate + CardSP * 5
      end
      local CardNumH1 = targetUser:GetBuffLayer(56900)
      Rate = Rate + CardNumH1 * 3
      local CardNumH3 = targetUser:GetBuffLayer(58640)
      Rate = Rate + CardNumH3 * 5
      local CardNumMY = targetUser:GetBuffLayer(57850)
      Rate = Rate + CardNumMY * 5
      if targetUser:HasBuffID(90004954) then
        Rate = Rate + 10
      end
      if targetUser:HasBuffID(90005054) then
        Rate = Rate + 5
      end
      local MemoryBufflvlayer = targetUser:GetBuffLayer(29250)
      if targetUser:HasBuffID(29250) then
        Rate = Rate + MemoryBufflvlayer * 1
      end
      if targetUser:HasBuffID(118250) or targetUser:HasBuffID(128100) or targetUser:HasBuffID(128101) or targetUser:HasBuffID(135200) or targetUser:HasBuffID(100038250) or targetUser:HasBuffID(135353) or targetUser:HasBuffID(136011) or targetUser:HasBuffID(1001001) then
        local MagicFlee = targetUser:GetProperty("MagicFleeRate")
        Rate = Rate + MagicFlee
      end
      if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
        if srcUser.isServerCall then
          targetUser:OnDodgeMagic()
        end
        return 0, CommonFun.DamageType.Miss
      end
    end
    local judu = true
    if skillID == 187 and srcUser:HasBuffID(20310010) then
      judu = false
    end
    if skillID == 2227 or skillID == 2243 or skillID == 2251 then
      judu = false
    end
    if isCanBlock == false then
      judu = false
    end
    local HarmImmune = targetUser:GetProperty("HarmImmune")
    if nil ~= HarmImmune and 0 < HarmImmune then
      local harmImmuneInfo = Table_BuffStateOdds[HarmImmune]
      if nil ~= harmImmuneInfo then
        local rate = harmImmuneInfo.Odds * 100
        if params.pvpMap then
          local Dex = srcUser:GetProperty("Dex")
          local Agi = targetUser:GetProperty("Agi")
          local rate1 = math.min(Dex * 0.1 - Agi * 0.1, 20)
          if rate1 < 0 then
            rate1 = 0
          end
          rate = rate - rate1
          if rate < 0 then
            rate = 0
          end
        end
        local WeaponType = targetUser:GetEquipedWeaponType()
        if targetUser:HasBuffID(20110040) and WeaponType == 180 then
          rate = rate + 5
        end
        if CommonFun.IsInRate(rate, srcUser:GetRandom()) and math.floor(params.skillIDAndLevel / 1000) ~= 306 and math.floor(params.skillIDAndLevel / 1000) ~= 422 and math.floor(params.skillIDAndLevel / 1000) ~= 1122 and math.floor(params.skillIDAndLevel / 1000) ~= 1164 and judu == true and math.floor(params.skillIDAndLevel / 1000) ~= 3303 and math.floor(params.skillIDAndLevel / 1000) ~= 819 and math.floor(params.skillIDAndLevel / 1000) ~= 3706 and math.floor(params.skillIDAndLevel / 1000) ~= 1809 and math.floor(params.skillIDAndLevel / 1000) ~= 1835 and math.floor(params.skillIDAndLevel / 1000) ~= 1915 and math.floor(params.skillIDAndLevel / 1000) ~= 1941 then
          return 0, CommonFun.DamageType.Block
        end
      end
    end
    if bits3[CommonFun.AttrEffect2.AutoDef] == 1 then
      local rate = targetUser:GetProperty("AutoBlockRate")
      rate = math.min(rate, 60)
      if CommonFun.IsInRate(rate, srcUser:GetRandom()) and math.floor(params.skillIDAndLevel / 1000) ~= 306 and math.floor(params.skillIDAndLevel / 1000) ~= 411 and math.floor(params.skillIDAndLevel / 1000) ~= 422 and math.floor(params.skillIDAndLevel / 1000) ~= 1122 and math.floor(params.skillIDAndLevel / 1000) ~= 1164 and judu == true and math.floor(params.skillIDAndLevel / 1000) ~= 3303 and math.floor(params.skillIDAndLevel / 1000) ~= 819 and math.floor(params.skillIDAndLevel / 1000) ~= 3706 and math.floor(params.skillIDAndLevel / 1000) ~= 1809 and math.floor(params.skillIDAndLevel / 1000) ~= 1835 and math.floor(params.skillIDAndLevel / 1000) ~= 1915 and math.floor(params.skillIDAndLevel / 1000) ~= 1941 then
        local skilllv_weiw = targetUser:GetLernedSkillLevel(1190)
        if 0 < skilllv_weiw and srcUser.isServerCall then
          targetUser:AddBuff(116700, srcUser:GetGuid())
        end
        local skilllv_ss = targetUser:GetLernedSkillLevel(3806)
        if 0 < skilllv_ss and srcUser.isServerCall then
          targetUser:AddBuff(130080, targetUser:GetGuid())
        end
        local skilllv_zhanji2 = targetUser:GetLernedSkillLevel(5402)
        local targetid = targetUser:GetGuid()
        local distance = srcUser:GetDistance(targetid)
        if 0 < skilllv_zhanji2 and distance <= 3 then
          local zhanjirate = skilllv_zhanji2 * 5 + 25
          if srcUser.isServerCall and CommonFun.IsInRate(zhanjirate, srcUser:GetRandom()) then
            targetUser:AddBuff(1004010, srcUser:GetGuid())
          end
        end
        return 0, CommonFun.DamageType.AutoBlock
      end
    end
    if bits3[CommonFun.AttrEffect2.WeaponBlock] == 1 and isCanBlock == true then
      local rate = targetUser:GetProperty("WeaponBlockRate")
      local GemValue2 = targetUser:GetGemValue(31012)
      if CommonFun.IsInRate(rate, srcUser:GetRandom()) and skillParams.Launch_Range ~= nil and CommonFun.IsLongSkill(skillParams.Launch_Range) == false and skillParams.RollType == 1 and math.floor(params.skillIDAndLevel / 1000) ~= 306 and math.floor(params.skillIDAndLevel / 1000) ~= 3303 and math.floor(params.skillIDAndLevel / 1000) ~= 819 then
        local RuneNum = targetUser:GetRunePoint(34030)
        if 0 < RuneNum then
          local RuneRate = RuneNum * 25 + GemValue2 / 1000
          if srcUser.isServerCall and CommonFun.IsInRate(RuneRate, srcUser:GetRandom()) then
            targetUser:AddBuff(116041, srcUser:GetGuid())
          end
        end
        return 0, CommonFun.DamageType.WeaponBlock
      end
      local rate2 = 0
      local skilllv_xiaodao = targetUser:GetLernedSkillLevel(6102)
      local xiaodao = targetUser:GetBuffLayer(1011001)
      if targetUser:HasBuffID(1011001) then
        rate2 = xiaodao * 0.4 * skilllv_xiaodao
      end
      if CommonFun.IsInRate(rate2, srcUser:GetRandom()) and skillParams.Launch_Range ~= nil and CommonFun.IsLongSkill(skillParams.Launch_Range) == true and skillParams.RollType == 1 and math.floor(params.skillIDAndLevel / 1000) ~= 2227 and math.floor(params.skillIDAndLevel / 1000) ~= 2243 and math.floor(params.skillIDAndLevel / 1000) ~= 2251 then
        return 0, CommonFun.DamageType.WeaponBlock
      end
    end
    if srcUser:HasBuffID(1007000) and targetUser:HasBuffID(1007010) then
      local fromid = srcUser:GetBuffFromID(1007000)
      local guid = targetUser:GetGuid()
      local Rate1 = 0
      local skilllv_bafeng = targetUser:GetBuffLevel(1007010)
      if fromid == guid then
        Rate1 = skilllv_bafeng * 5
      end
      if CommonFun.IsInRate(Rate1, srcUser:GetRandom()) and srcUser:HasBuffID(49120) == false then
        return 0, CommonFun.DamageType.Miss
      end
    end
    local buff2MissAtkAttr = {
      [90005525] = {
        6,
        7,
        8,
        10
      },
      [90005545] = {
        1,
        2,
        3,
        4
      },
      [30031304] = {
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      },
      [30031305] = {
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      },
      [30031306] = {
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      },
      [30031307] = {
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      }
    }
    local srcAtkElement = CommonFun.GetUserAtkAttrByList(srcUser, params, skillParams.Damage)
    for buff, atkAttrs in pairs(buff2MissAtkAttr) do
      if targetUser:HasBuffID(buff) and CommonFun.isInArray(atkAttrs, srcAtkElement) and isCanBlock == true then
        if srcUser.isServerCall then
          targetUser:AddBuffCount(buff)
        end
        return 0, CommonFun.DamageType.Miss
      end
    end
    if targetUser:IsFly() and CommonFun.TableHasValue(NpcFeatures.Flight.ImmuneSkill, skillID) then
      return 0, CommonFun.DamageType.Miss
    end
  end
  if nil ~= forceDamageType then
    damageType = forceDamageType
    if CommonFun.DamageType.None == damageType or CommonFun.DamageType.Miss == damageType or CommonFun.DamageType.Block == damageType then
      return damage, damageType
    end
  elseif 0 == damage then
    return 0, CommonFun.DamageType.Miss
  elseif damage < 0 then
    damageType = CommonFun.DamageType.Treatment
  end
  if CommonFun.DamageType.Normal == damageType or CommonFun.DamageType.Crit == damageType or CommonFun.DamageType.ErLianJi == damageType then
    local profressionID = srcUser:GetProfressionID()
    if 0 < profressionID then
      local randomRange = Table_Class[profressionID].DamRandom
      if nil ~= randomRange then
        damage = damage * CommonFun.RandomRange(randomRange[1], randomRange[2], srcUser:GetRandom())
      end
    end
  end
  if (damageType == nil or damageType == CommonFun.DamageType.Normal or damageType == CommonFun.DamageType.Crit) and CommonFun.RollType.Attack == skillParams.RollType and srcUser:IsAttackSkill(params.skillIDAndLevel) and iscrit then
    damageType = CommonFun.DamageType.Crit
    local damageParam = skillParams.Damage
    if damageParam ~= nil and damageParam[1] ~= nil then
      damageParam = damageParam[1]
    end
    local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
    local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
    local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
    local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
    local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
    local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
    local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
    local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
    local Str1 = srcUser:GetProperty("Str")
    local Num1 = srcUser:GetRunePoint(62080)
    local Num2 = srcUser:GetRunePoint(51013)
    local Num3 = srcUser:GetRunePoint(120010)
    local Numlianj = srcUser:GetRunePoint(130110)
    local RuneDamage = Num1 * 0.01 + Num2 * 0.05 + Num3 * 0.05 + Numlianj * 0.03 + 1
    local Str = Str1 * RuneDamage
    local Dex = srcUser:GetProperty("Dex")
    local Luk = srcUser:GetProperty("Luk")
    local Int = srcUser:GetProperty("Int")
    local Agi = srcUser:GetProperty("Agi")
    local DamIncrease = srcUser:GetProperty("DamIncrease")
    local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
    local race2 = targetUser.race
    if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
    elseif srcUser:HasBuffID(49320) then
      race2 = 2
    end
    local DefAttr2 = targetUser:GetProperty("DefAttr")
    local skillLevel = srcUser:GetLernedSkillLevel(29)
    local skillLevel1 = srcUser:GetLernedSkillLevel(1701)
    local skillLevel2 = 0
    if race2 == 3 or DefAttr2 == 9 or DefAttr2 == 7 or srcUser:HasBuffID(20510031) and srcUser:HasBuffID(22000520) or DefAttr2 == 7 and srcUser:HasBuffID(22000520) then
      skillLevel2 = srcUser:GetLernedSkillLevel(234)
      if 10 < skillLevel2 then
        skillLevel2 = 10
      end
    end
    local SkillRealDamage1 = 0
    if skillLevel <= 5 then
      SkillRealDamage1 = skillLevel * 20
    elseif 5 < skillLevel and skillLevel <= 10 then
      SkillRealDamage1 = 100 + math.floor(Agi / 5) * ((skillLevel - 5) * 0.5 + 0.5)
    else
      SkillRealDamage1 = 100 + (skillLevel - 10) * 20 + math.floor(Agi / 5) * 3 + Luk * 2
    end
    local Numliehuo = srcUser:GetRunePoint(203003)
    local liehuo = 1 + Numliehuo * 0.05
    local SkillRealDamage2 = 0
    if skillLevel1 <= 10 then
      SkillRealDamage2 = skillLevel1 * 20 * liehuo
    else
      SkillRealDamage2 = 200 * liehuo
    end
    local SkillRealDamage = SkillRealDamage1 + SkillRealDamage2
    local BaseAtk = 0
    local BaseMAtk = Int * 2 + math.floor(Int * Int / 100)
    local BaseAtk1 = Str1 * 2 + math.floor(Str1 * Str1 / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
    local BaseAtk2 = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
    local BaseAtk3 = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
    local NoramlAtkAdd = 5 * Str
    local profressionID = srcUser:GetProfressionID()
    local WeaponType = srcUser:GetEquipedWeaponType()
    if (profressionID == 92 or profressionID == 93 or profressionID == 94 or profressionID == 95) and WeaponType == 210 then
      BaseAtk1 = BaseAtk2
      BaseAtk3 = BaseAtk2
      NoramlAtkAdd = 3 * Dex
    end
    for k, v in pairs(GameConfig.Atkcalculate) do
      if v == profressionID then
        BaseAtk1 = BaseAtk2
        BaseAtk3 = BaseAtk2
        NoramlAtkAdd = 3 * Dex
      end
    end
    local Num4 = srcUser:GetRunePoint(52013)
    local Num5 = srcUser:GetRunePoint(52014)
    local Num6 = srcUser:GetRunePoint(52015)
    local Num7 = srcUser:GetRunePoint(52016)
    local Num8 = srcUser:GetRunePoint(52017)
    local Num9 = srcUser:GetRunePoint(52018)
    local RuneDamage1 = (Num4 + Num5 + Num6 + Num7 + Num8 + Num9) * 0.07
    local Atk1 = srcUser:GetProperty("Atk")
    local MAtk = srcUser:GetProperty("MAtk")
    local MAtkPer = srcUser:GetProperty("MAtkPer")
    local MonkAtk = 0
    if srcUser:HasBuffID(100510) then
      MonkAtk = 5 * Int
    end
    local AtkSpdAdd = 0
    local skilllv_SpdAdd = srcUser:GetLernedSkillLevel(22)
    if srcUser:HasBuffID(80082) and 10 < skilllv_SpdAdd then
      AtkSpdAdd = (skilllv_SpdAdd - 10) * 120
    end
    local skilllv_mfzr = srcUser:GetLernedSkillLevel(3002)
    local Opening = srcUser:GetSkillOptByOption(17)
    local MagicAtk = 0
    if 0 < skilllv_mfzr and Opening == 0 then
      local Sp = srcUser:GetProperty("Sp")
      MagicAtk = Sp * skilllv_mfzr * 0.2
    end
    local skilllv_element = srcUser:GetLernedSkillLevel(127)
    local atk_element = 0
    if 10 < skilllv_element then
      atk_element = Dex * ((skilllv_element - 10) * 0.5)
    end
    local NormalAtk = srcUser:GetProperty("NormalAtk")
    NormalAtk = NormalAtk + NoramlAtkAdd
    local Atk = Atk1 + RuneDamage1 * MAtk * (1 + MAtkPer) + MonkAtk + AtkSpdAdd + MagicAtk + atk_element + NormalAtk
    local Num10 = srcUser:GetRunePoint(11022)
    local Num11 = srcUser:GetRunePoint(203024)
    local Num12 = srcUser:GetRunePoint(11024)
    local Num13 = srcUser:GetRunePoint(12004)
    local Num14 = srcUser:GetRunePoint(12011)
    local Num16 = srcUser:GetRunePoint(70010)
    local RuneDamage2 = (Num10 + Num11 + Num12 + Num13 + Num14 + Num16) * 0.03
    local Num15 = srcUser:GetRunePoint(120020)
    local RuneDamage3 = Num15 * 0.03
    local AtkPer1 = srcUser:GetProperty("AtkPer")
    local AtkPer = AtkPer1 + RuneDamage2 + RuneDamage3
    local MAtkPer = srcUser:GetProperty("MAtkPer")
    local Refine = srcUser:GetProperty("Refine")
    local MRefine = srcUser:GetProperty("MRefine")
    local Vit2 = targetUser:GetProperty("Vit")
    local VitPer2 = targetUser:GetProperty("VitPer")
    local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
    local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
    local RealDamage = targetUser:GetProperty("RealDamage")
    if targetUser:HasBuffID(96050) and 1 <= RealDamage then
      local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
      if skillID == 359 then
        RealDamage = RealDamage - 1
      end
    end
    local AttrEffect = srcUser:GetProperty("AttrEffect")
    local bits = CommonFun.getBits(AttrEffect)
    local AttrEffect2 = targetUser:GetProperty("AttrEffect")
    local bits2 = CommonFun.getBits(AttrEffect2)
    local StateEffect = targetUser:GetProperty("StateEffect")
    local bits3 = CommonFun.getBits(StateEffect)
    local Weapon = srcUser:GetEquipedID(7)
    if skillParams.RollType == 1 then
      if bits[CommonFun.AttrEffect.NextAttackIncrease] == 1 then
        damage = (((Atk - BaseAtk1) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk3) * raceparam * bossparam * bossparam2 * (1 - DamReduc2) + Refine + SkillRealDamage - Vit2 * (1 + VitPer2)) * CommonFun.CalcCrit(srcUser, targetUser, skillParams) * (1 - RefineDamReduc) * (1 + DamIncrease) * 2 * (1 + RealDamage) * (1 + skillLevel2 * 0.05)
        if damage <= 0 then
          damage = 0
        end
      elseif bits2[CommonFun.AttrEffect.NormalSkillDam] == 1 and (profressionID == 42 or profressionID == 43 or profressionID == 44 or profressionID == 45 or profressionID == 102 or profressionID == 103 or profressionID == 104 or profressionID == 105 or profressionID == 112 or profressionID == 113 or profressionID == 114 or profressionID == 115) then
        local targetid = targetUser:GetGuid()
        local distance = srcUser:GetDistance(targetid)
        local skilllv_1 = srcUser:GetLernedSkillLevel(133)
        local DisDam = 1
        if 10 < skilllv_1 then
          DisDam = 1 + distance / 7.5 * (skilllv_1 - 10) * 0.1
          if srcUser:HasBuffID(131080) then
            DisDam = 1 + (skilllv_1 - 10) * 0.1
          end
          DisDam = math.min(DisDam, 2)
        end
        damage = (((Atk - BaseAtk1) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk3) * raceparam * bossparam * bossparam2 * (1 - DamReduc2) + Refine + SkillRealDamage - Vit2 * (1 + VitPer2)) * CommonFun.CalcCrit(srcUser, targetUser, skillParams) * (1 - RefineDamReduc) * (1 + DamIncrease) * 1.3 * (1 + RealDamage) * (1 + skillLevel2 * 0.05) * DisDam
        if damage <= 0 then
          damage = 0
        end
      elseif bits3[CommonFun.StateEffect.Dizzy] == 1 and (Weapon == 40322 or Weapon == 140322) then
        damage = (((Atk - BaseAtk1) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk3) * raceparam * bossparam * bossparam2 * (1 - DamReduc2) + Refine + SkillRealDamage - Vit2 * (1 + VitPer2)) * CommonFun.CalcCrit(srcUser, targetUser, skillParams) * (1 - RefineDamReduc) * (1 + DamIncrease) * (1 + RealDamage) * (1 + skillLevel2 * 0.05) * 1.5
        if damage <= 0 then
          damage = 0
        end
      elseif skillID == 300 or skillID == 469 or skillID == 1397 or skillID == 1446 or skillID == 252 then
        local targetid = targetUser:GetGuid()
        local distance = srcUser:GetDistance(targetid)
        local skilllv_1 = srcUser:GetLernedSkillLevel(133)
        local skilllv_2 = srcUser:GetLernedSkillLevel(478)
        local DisDam = 1
        if 10 < skilllv_1 then
          DisDam = 1 + distance / 7.5 * (skilllv_1 - 10) * 0.1
          if srcUser:HasBuffID(131080) then
            DisDam = 1 + (skilllv_1 - 10) * 0.1
          end
          DisDam = math.min(DisDam, 2)
        elseif 10 < skilllv_2 then
          DisDam = 1 + distance / 7.5 * (skilllv_2 - 10) * 0.1
          DisDam = math.min(DisDam, 2)
        end
        local fromid = targetUser:GetBuffFromID(116470)
        local guid = srcUser:GetGuid()
        local BUffDam = 1
        local skilllv_biaoji = srcUser:GetLernedSkillLevel(1147)
        local GemBiaoji = srcUser:GetGemValue(91121)
        local Numxp = srcUser:GetRunePoint(94080)
        if fromid == guid then
          BUffDam = 1 + skilllv_biaoji * 0.02 + Numxp * 0.02 + GemBiaoji / 100000
        end
        local SpAtk = 0
        if srcUser:HasBuffID(131096) then
          local Sp = srcUser:GetProperty("Sp")
          SpAtk = Sp
        end
        damage = ((((Atk - BaseAtk1) * (1 + AtkPer) + SpAtk) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk3) * raceparam * bossparam * bossparam2 * (1 - DamReduc2) + Refine + SkillRealDamage - Vit2 * (1 + VitPer2)) * CommonFun.CalcCrit(srcUser, targetUser, skillParams) * (1 - RefineDamReduc) * (1 + DamIncrease) * (1 + RealDamage) * (1 + skillLevel2 * 0.05) * DisDam * BUffDam
        if damage <= 0 then
          damage = 0
        end
      elseif skillID == 470 then
        local Enemy = 1
        local skilllv_zy = srcUser:GetLernedSkillLevel(1145)
        if 0 < skilllv_zy and 1 >= srcUser:GetRangeEnemy(3) then
          Enemy = 1 + skilllv_zy * 0.03
        end
        damage = (((Atk - BaseAtk1) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk3) * raceparam * bossparam * bossparam2 * (1 - DamReduc2) + Refine + SkillRealDamage - Vit2 * (1 + VitPer2)) * CommonFun.CalcCrit(srcUser, targetUser, skillParams) * (1 - RefineDamReduc) * (1 + DamIncrease) * (1 + RealDamage) * (1 + skillLevel2 * 0.05) * Enemy
        if damage <= 0 then
          damage = 0
        end
      else
        damage = (((Atk - BaseAtk1) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk3) * raceparam * bossparam * bossparam2 * (1 - DamReduc2) + Refine + SkillRealDamage - Vit2 * (1 + VitPer2)) * CommonFun.CalcCrit(srcUser, targetUser, skillParams) * (1 - RefineDamReduc) * (1 + DamIncrease) * (1 + RealDamage) * (1 + skillLevel2 * 0.05)
        if damage <= 0 then
          damage = 0
        end
      end
    elseif bits[CommonFun.AttrEffect.NextAttackIncrease] == 1 then
      damage = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk + MRefine) * CommonFun.CalcCrit(srcUser, targetUser, skillParams) * (1 + MDamIncrease) * 2 * (1 + RealDamage)
    elseif bits2[CommonFun.AttrEffect.NormalSkillDam] == 1 and (profressionID == 42 or profressionID == 43 or profressionID == 44 or profressionID == 45 or profressionID == 102 or profressionID == 103 or profressionID == 104 or profressionID == 105 or profressionID == 112 or profressionID == 113 or profressionID == 114 or profressionID == 115) then
      local targetid = targetUser:GetGuid()
      local distance = srcUser:GetDistance(targetid)
      local skilllv_1 = srcUser:GetLernedSkillLevel(133)
      local DisDam = 1
      if 10 < skilllv_1 then
        DisDam = 1 + distance / 7.5 * (skilllv_1 - 10) * 0.1
        if srcUser:HasBuffID(131080) then
          DisDam = 1 + (skilllv_1 - 10) * 0.1
        end
        DisDam = math.min(DisDam, 2)
      end
      damage = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk + MRefine) * CommonFun.CalcCrit(srcUser, targetUser, skillParams) * (1 + MDamIncrease) * 1.3 * (1 + RealDamage) * DisDam
    else
      damage = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk + MRefine) * CommonFun.CalcCrit(srcUser, targetUser, skillParams) * (1 + MDamIncrease) * (1 + RealDamage)
    end
    if targetUser:GetNpcID() == 30028 then
      damage = 1
    end
    local elementDam = CommonFun.DoCalcElementDam(srcUser, targetUser, params, damageParam)
    local stateDam = CommonFun.DoCalcStateEffectDam(srcUser, targetUser)
    local fromid = targetUser:GetBuffFromID(45000120)
    local guid = srcUser:GetGuid()
    local BUffDam = 1
    if fromid == guid then
      BUffDam = 1.3
    end
    local RefineLv = srcUser:GetEquipedRefineLv(7)
    local HolyEquip = 1
    if (Weapon == 40319 or Weapon == 140319) and (profressionID == 11 or profressionID == 12 or profressionID == 13 or profressionID == 14 or profressionID == 15 or profressionID == 203 or profressionID == 204 or profressionID == 205 or profressionID == 72 or profressionID == 73 or profressionID == 74 or profressionID == 75 or profressionID == 605 or profressionID == 665) then
      HolyEquip = 1 + 0.05 * RefineLv
    end
    if (Weapon == 40360 or Weapon == 140360) and (profressionID == 11 or profressionID == 12 or profressionID == 13 or profressionID == 14 or profressionID == 15 or profressionID == 203 or profressionID == 204 or profressionID == 205 or profressionID == 72 or profressionID == 73 or profressionID == 74 or profressionID == 75 or profressionID == 605 or profressionID == 665) then
      HolyEquip = 1 + 0.05 * RefineLv
    end
    local zhufu = 1
    if srcUser:HasBuffID(129040) or srcUser:HasBuffID(129041) then
      local skilllv_zf = srcUser:GetLernedSkillLevel(3610)
      local GemValue = srcUser:GetGemValue(51161)
      zhufu = 1 + skilllv_zf * 0.02 + GemValue / 100000
    end
    local Ninja = 1
    local NinjaDamPer = 1
    if skillID == 2010 or skillID == 2011 or skillID == 2012 or skillID == 2013 then
      local Agi = srcUser:GetProperty("Agi")
      local AgiRune = srcUser:GetRunePoint(163012)
      local AgiDam = 1 + math.floor(Agi / 10) * AgiRune * 0.004
      local Famous = 1
      local RefineLv7 = srcUser:GetEquipedRefineLv(7)
      if srcUser:HasBuffID(44360) then
        Famous = Famous * (RefineLv7 * 0.01 + 1)
      end
      if srcUser:HasBuffID(44370) then
        Famous = Famous * (RefineLv7 * 0.03 + 1)
      end
      Ninja = AgiDam * Famous
    end
    if skillID == 2011 then
      NinjaDamPer = 1.5
    end
    if skillID == 2012 then
      NinjaDamPer = 3
    end
    if skillID == 2013 then
      local Rune = srcUser:GetRunePoint(163021)
      NinjaDamPer = 6 * (1 + Rune * 0.05)
    end
    if skillID == 2200 and WeaponType == 320 then
      damage = damage * 2
    end
    if skillID == 300 or skillID == 113 or skillID == 252 then
      local guid = srcUser:GetGuid()
      local Debuff_Layer_1 = targetUser:GetBuffLayerByIDAndFromID(96082, guid)
      local Debuff_Layer_2 = targetUser:GetBuffLayerByIDAndFromID(96083, guid)
      local sw_dam = math.max(Debuff_Layer_1, Debuff_Layer_2) * 0.06 + 1
      damage = damage * sw_dam
    end
    if skillID == 300 or skillID == 113 or skillID == 252 then
      local bafeng = 1
      local fromid = targetUser:GetBuffFromID(1007000)
      local guid = srcUser:GetGuid()
      local skilllv_1 = srcUser:GetLernedSkillLevel(5700)
      if fromid == guid then
        bafeng = 1 + skilllv_1 * 0.03
      end
      damage = damage * bafeng
    end
    if skillID == 173 then
      local skilllv_qihei = srcUser:GetLernedSkillLevel(194)
      if targetUser:GetBuffActive(95500) then
        damage = damage * (1 + 0.15 * skilllv_qihei)
      end
    end
    if skillID == 5904 then
      local skilllv_shengguang = srcUser:GetLernedSkillLevel(5900)
      damage = damage * (1 + 0.1 * skilllv_shengguang)
    end
    damage = damage * elementDam * stateDam * BUffDam * HolyEquip * zhufu * Ninja * NinjaDamPer
  end
  local GetNpcID = targetUser:GetNpcID()
  local GetSelfID = srcUser:GetNpcID()
  if 0 < damage and GetNpcID == 30034 and srcUser:HasBuffID(121) then
    local Atk = srcUser:GetProperty("Atk")
    local MAtk = srcUser:GetProperty("MAtk")
    damage = damage + (Atk + MAtk) * 2.5
  end
  if targetUser:HasBuffID(10740) and srcUser:HasBuffID(10741) == false then
    damage = 0.2
  end
  local NormalRealDam = srcUser:GetProperty("NormalRealDam")
  local NormalMRealDam = srcUser:GetProperty("NormalMRealDam")
  local SkillRealDam = srcUser:GetProperty("SkillRealDam")
  local SkillMRealDam = srcUser:GetProperty("SkillMRealDam")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local NormalAtkDam = srcUser:GetProperty("NormalAtkDam")
  local NormalAtkRes = targetUser:GetProperty("NormalAtkRes")
  local SkillDam = srcUser:GetProperty("SkillDam")
  local SkillRes = targetUser:GetProperty("SkillRes")
  if (skillID == 306 or skillID == 3303 or skillID == 819) and srcUser:HasBuffID(22000830) then
    SkillRes = math.max(SkillRes - 0.3, 0)
  end
  local ActuallySkiRes = SkillRes - SkillDam
  local ActuallyNorRes = NormalAtkRes - NormalAtkDam
  if maptype == 2 or maptype == 4 then
    ActuallySkiRes = ActuallySkiRes < -1 and -1 or 1 < ActuallySkiRes and 1 or ActuallySkiRes
    ActuallySkiRes = math.floor(ActuallySkiRes * 1000) / 1000
    ActuallySkiRes = ActuallySkiRes + 0.4 * (1 - math.sin(ActuallySkiRes * 3.14 / 2))
    ActuallyNorRes = ActuallyNorRes < -1 and -1 or 1 < ActuallyNorRes and 1 or ActuallyNorRes
    ActuallyNorRes = math.floor(ActuallyNorRes * 1000) / 1000
    ActuallyNorRes = ActuallyNorRes + 0.4 * (1 - math.sin(ActuallyNorRes * 3.14 / 2))
  end
  local NormalEnd = 1 - ActuallyNorRes
  local SkillEnd = 1 - ActuallySkiRes
  NormalEnd = math.max(NormalEnd, 0.15)
  SkillEnd = math.max(SkillEnd, 0.15)
  if CommonFun.RollType.Magic == skillParams.RollType then
    if srcUser:IsAttackSkill(params.skillIDAndLevel) and 0 < damage then
      damage = (damage + NormalMRealDam * (1 - RefineMDamReduc)) * NormalEnd
    elseif not srcUser:IsAttackSkill(params.skillIDAndLevel) and 0 < damage then
      damage = (damage + SkillMRealDam * (1 - RefineMDamReduc)) * SkillEnd
    end
  end
  if CommonFun.RollType.Attack == skillParams.RollType then
    if srcUser:IsAttackSkill(params.skillIDAndLevel) and 0 < damage then
      damage = (damage + NormalRealDam * (1 - RefineDamReduc)) * NormalEnd
    elseif not srcUser:IsAttackSkill(params.skillIDAndLevel) and 0 < damage then
      damage = (damage + SkillRealDam * (1 - RefineDamReduc)) * SkillEnd
    end
  end
  if GetNpcID == 40021 then
    if srcUser:IsAttackSkill(params.skillIDAndLevel) == false and skillID ~= 151 or srcUser:InGvgZone() == false or srcUser:NoAttackMetal() == true then
      return 0, CommonFun.DamageType.Miss
    end
    local hl_maxhp = targetUser:GetProperty("MaxHp")
    if damage >= hl_maxhp * 1 / 200 then
      damage = hl_maxhp * 1 / 200
    end
  end
  if GetNpcID == 40022 or GetNpcID == 55000 then
    if srcUser:IsAttackSkill(params.skillIDAndLevel) == false and skillID ~= 151 then
      return 0, CommonFun.DamageType.Miss
    end
    local hl_maxhp = targetUser:GetProperty("MaxHp")
    if damage >= hl_maxhp * 1 / 30 then
      damage = hl_maxhp * 1 / 30
    end
  end
  if srcUser:HasBuffID(166450) == true and srcUser:IsAttackSkill(params.skillIDAndLevel) == false and skillID ~= 151 then
    return 0, CommonFun.DamageType.Miss
  end
  if (CommonFun.DamageType.Normal == damageType or CommonFun.DamageType.Crit == damageType or CommonFun.DamageType.ErLianJi == damageType) and targetUser:DamageAlways1() then
    damageType = CommonFun.DamageType.Normal
    damage = 1
  end
  if targetUser:HasBuffID(159620) and 0 < damage and isCanBlock == true then
    local targetid = targetUser:GetGuid()
    local distance = srcUser:GetDistance(targetid)
    if 5 <= distance then
      return 0, CommonFun.DamageType.None
    end
  end
  local Baxie = true
  if (skillID == 469 or skillID == 470 or skillID == 4228) and srcUser:HasBuffID(20910120) then
    Baxie = false
  end
  if skillID == 2227 or skillID == 2243 or skillID == 2251 then
    Baxie = false
  end
  if isCanBlock == false then
    Baxie = false
  end
  if bits2[CommonFun.AttrEffect.BaXieZhiZhen] == 1 and CommonFun.RollType.Attack == skillParams.RollType and 0 < damage and skillID ~= 411 and skillID ~= 306 and skillID ~= 3303 and skillID ~= 819 and Baxie == true then
    if targetUser.AddBuffDamage ~= nil then
      targetUser:AddBuffDamage(damage)
    end
    if srcUser.isServerCall then
      srcUser:SetMissStillBuff()
    end
    return 0, CommonFun.DamageType.Miss
  end
  if 0 < damage and (targetUser:GetNpcID() == 56941 or targetUser:GetNpcID() == 56942) and srcUser:GetNpcID() ~= 56941 and srcUser:GetNpcID() ~= 56942 then
    return 1, CommonFun.DamageType.Normal
  end
  if 0 < damage and targetUser:GetNpcID() == 300100 and srcUser:HasBuffID(180220) then
    damage = damage * 1.3
  end
  if 0 < damage and srcUser:GetNpcID() == 300100 and targetUser:HasBuffID(180219) then
    damage = damage * 0.5
  end
  if 0 < damage and targetUser:GetNpcID() == 300101 and srcUser:HasBuffID(180518) then
    damage = damage * 1.25
  end
  if 0 < damage and srcUser:GetNpcID() == 300101 and targetUser:HasBuffID(180517) then
    damage = damage * 0.7
  end
  if (targetUser:HasBuffID(121030) == true or targetUser:HasBuffID(55693) == true or targetUser:HasBuffID(90003955) == true or targetUser:HasBuffID(90005555) == true) and CommonFun.RollType.Magic == skillParams.RollType and 0 < damage and isCanBlock == true then
    return 0, CommonFun.DamageType.DefMagic
  end
  if (targetUser:HasBuffID(90003975) == true or targetUser:HasBuffID(90005405) == true) and CommonFun.RollType.Attack == skillParams.RollType and 0 < damage and isCanBlock == true then
    return 0, CommonFun.DamageType.DefPhysics
  end
  if srcUser:IsAttackSkill(params.skillIDAndLevel) == false and targetUser:HasBuffID(107330) and isCanBlock == true and 0 < damage then
    local Bufflv = targetUser:GetBuffLevel(107330)
    if CommonFun.IsInRate(Bufflv * 3, srcUser:GetRandom()) then
      return 0, CommonFun.DamageType.WeaponBlock
    end
  end
  local JGBH = 1
  if (targetUser:HasBuffID(100660) == true or targetUser:HasBuffID(21430114) == true) and 0 < damage then
    local GemValue = targetUser:GetProperty("JinGangRate")
    JGBH = 0.15 - GemValue
    local skilllv_ab = srcUser:GetLernedSkillLevel(306)
    if 5 < skilllv_ab and skillID == 306 or skillID == 3303 or skillID == 819 then
      JGBH = 1
    end
    damage = math.floor(damage * JGBH)
  end
  local ZFZ = 1
  if targetUser:HasBuffID(117105) == true and 0 < damage then
    local skilllv_zfz = targetUser:GetBuffLevel(117105)
    ZFZ = 1 - 0.15 * (skilllv_zfz - 5)
    damage = math.floor(damage * ZFZ)
  end
  if targetUser:HasBuffID(31790) and 0 < damage then
    damage = damage * 1.2
  end
  if targetUser:HasBuffID(136240) then
    local MoonReduc = targetUser:GetProperty("MoonReduc")
    if targetUser:GetMoonMark(srcUser) then
      damage = damage * (1 - MoonReduc)
    end
  end
  if srcUser:HasBuffID(136581) ~= true and targetUser:HasBuffID(136580) and 0 < damage then
    local TreeReduc = targetUser:GetProperty("TreeReduc")
    damage = damage * (1 - TreeReduc)
  end
  if targetUser:HasBuffID(136600) or targetUser:HasBuffID(136522) and 0 < damage then
    local DragonReduc = targetUser:GetProperty("DragonReduc")
    damage = damage * (1 - DragonReduc)
  end
  if targetUser:HasBuffID(165542) and 0 < damage then
    damage = damage * 1.5
  end
  if targetUser:HasBuffID(166580) and 0 < damage then
    damage = damage * 1.3
  end
  if CommonFun.RollType.Attack == skillParams.RollType and targetUser:HasBuffID(10110) and 0 < damage then
    damage = damage * 0.01
  end
  if targetUser:HasBuffID(90003554) and 0 < damage then
    local MaxHp = targetUser:GetProperty("MaxHp")
    local Hp = targetUser:GetProperty("Hp")
    if Hp / MaxHp >= 0.9 then
      damage = damage * 0.5
    end
  end
  if targetUser:HasBuffID(135240) == true then
    local skilllv_sz = targetUser:GetBuffLevel(135240)
    damage = damage * (1 - 0.1 * skilllv_sz)
  end
  if targetUser:HasBuffID(135361) or targetUser:HasBuffID(135363) then
    local SoulNum = targetUser:GetProperty("Soul_Linker")
    damage = damage / math.max(1, SoulNum)
  end
  if targetUser:HasBuffID(30031100) and 0 < damage then
    local mateNum = targetUser:GetMapTeammateNum()
    local fentan = 1
    if targetUser:HasBuffID(30031101) then
      fentan = 0.9
    elseif targetUser:HasBuffID(30031102) then
      fentan = 0.75
    elseif targetUser:HasBuffID(30031103) then
      fentan = 0.6
    end
    damage = damage / math.max(1, mateNum) * fentan
  end
  local MaxHpsrcUser = srcUser:GetProperty("MaxHp")
  local MaxHptargetUser = targetUser:GetProperty("MaxHp")
  local MaxHp_hpper = MaxHptargetUser / MaxHpsrcUser
  if targetUser:HasBuffID(63180) and 0 < damage and 1 < MaxHp_hpper then
    damage = damage * 0.95
  end
  local StateEffectGashapon = srcUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffectGashapon)
  if bits[CommonFun.StateEffect.Poison] == 1 and targetUser:HasBuffID(64350) and 0 < damage then
    damage = damage * 0.9
  end
  if targetUser:HasBuffID(90003164) and targetUser:InMoveStatus() == true and 0 < damage then
    damage = damage * 0.7
  end
  if targetUser:HasBuffID(90003984) and targetUser:InMoveStatus() == true and 0 < damage then
    damage = damage * 0.95
  end
  if targetUser:HasBuffID(56510) then
    local guid = targetUser:GetGuid()
    local Debuff_Layer = srcUser:GetBuffLayerByIDAndFromID(96083, guid)
    damage = damage * (1 - 0.06 * Debuff_Layer)
  end
  if CommonFun.Shape.L == targetUser.shape and CommonFun.RollType.Magic == skillParams.RollType and 0 < damage then
    local largedam = 1
    if srcUser:HasBuffID(71930) then
      largedam = largedam + 0.25
    end
    local CardMedia = srcUser:GetEquipCardNum(7, 23265)
    largedam = largedam + CardMedia * 0.15
    local CardLabore = srcUser:GetEquipCardNum(7, 23284)
    largedam = largedam + CardLabore * 0.1
    if srcUser:HasBuffID(29440) then
      largedam = largedam + 0.04
    elseif srcUser:HasBuffID(29441) then
      largedam = largedam + 0.08
    elseif srcUser:HasBuffID(29442) then
      largedam = largedam + 0.2
    end
    damage = damage * largedam
  end
  if CommonFun.Shape.M == targetUser.shape and CommonFun.RollType.Magic == skillParams.RollType and 0 < damage then
    local mediumdam = 1
    local RefineLv = srcUser:GetEquipedRefineLv(8)
    if srcUser:HasBuffID(72280) then
      mediumdam = mediumdam + 0.05 + RefineLv * 0.01
    end
    if srcUser:HasBuffID(57300) then
      mediumdam = mediumdam + 0.02 + RefineLv * 0.01
    end
    if srcUser:HasBuffID(57310) then
      mediumdam = mediumdam + 0.05 + RefineLv * 0.01
    end
    damage = damage * mediumdam
  end
  if srcUser:HasBuffID(187550) then
    local mapid, maptype = srcUser:GetMapInfo()
    if mapid == 141 or mapid == 142 or mapid == 143 then
      local MaxHpMijing = targetUser:GetProperty("MaxHp")
      local layerMijing = srcUser:GetBuffLayer(187550)
      local HpMijing = targetUser:GetProperty("Hp")
      if HpMijing <= MaxHpMijing * 0.3 then
        damage = damage * (1 + layerMijing * 0.2)
      end
    end
  end
  local NoHurtRatio = targetUser:GetProperty("NoHurtRatio")
  if 0 < NoHurtRatio and NoHurtRatio ~= nil and 0 < damage then
    local Str_qy = targetUser:GetProperty("Str")
    local Vit_qy = targetUser:GetProperty("Vit")
    if damage <= (Str_qy + Vit_qy) * NoHurtRatio then
      if srcUser.isServerCall then
        targetUser:AddBuff(136732, targetUser:GetGuid())
      end
      return 0, CommonFun.DamageType.Barrier
    end
  end
  if targetUser:HasBuffID(128120) and srcUser:HasBuffID(128123) == false and 0 < damage then
    local Ensemble = targetUser:GetProperty("Ensemble")
    damage = damage * (1 - Ensemble % 1000 * 0.1)
  end
  if srcUser:HasBuffID(128120) and targetUser:HasBuffID(128123) == false and 0 < damage then
    local GemValue1 = srcUser:GetGemValue(102162)
    local GemValue2 = srcUser:GetGemValue(112162)
    damage = damage * (1 + GemValue1 / 100000 + GemValue2 / 100000)
  end
  if targetUser:HasBuffID(131530) then
    local skill_lv = targetUser:GetBuffLevel(131530)
    local MaxHp = targetUser:GetProperty("MaxHp")
    local SeaJudgePer = targetUser:GetProperty("SeaJudgePer")
    local SeaReducPer = targetUser:GetProperty("SeaReducPer")
    if damage >= MaxHp * (0.2 - SeaJudgePer) then
      damage = damage * (1 - skill_lv * 0.03 - SeaReducPer)
      if srcUser.isServerCall then
        targetUser:AddBuff(131531, targetUser:GetGuid())
        if targetUser:HasBuffID(22000090) then
          targetUser:AddBuff(131502, srcUser:GetGuid())
          targetUser:AddBuff(131503, srcUser:GetGuid())
        end
      end
    end
  end
  local WeaponType = targetUser:GetEquipedWeaponType()
  local WeaponType2 = srcUser:GetEquipedWeaponType()
  local Baw = targetUser:GetProperty("BaWangRate")
  if WeaponType == 250 and (WeaponType2 == 180 or WeaponType2 == 250) and 0 < damage then
    damage = damage * (1 - Baw)
  end
  local anxiang = 1
  if targetUser:HasBuffID(1008010) and (WeaponType2 == 190 or WeaponType2 == 210 or WeaponType2 == 260 or WeaponType2 == 270 or WeaponType2 == 310 or WeaponType2 == 320) and WeaponType == 210 and 0 < damage then
    local skill_anxiang = targetUser:GetLernedSkillLevel(5802)
    damage = damage * (1 - skill_anxiang * 0.06)
  end
  if targetUser:HasBuffID(119092) then
    local rain_num = targetUser:GetBuffLayer(119092)
    local skill_meisheng = srcUser:GetLernedSkillLevel(5503)
    local skill_meisheng1 = srcUser:GetLernedSkillLevel(5553)
    if 1 <= skill_meisheng or 1 <= skill_meisheng1 then
      damage = damage * (1 + 0.01 * (skill_meisheng + skill_meisheng1) * rain_num)
    end
  end
  local targetid = targetUser:GetGuid()
  local distance = srcUser:GetDistance(targetid)
  if CommonFun.LaunchType.LongAttack == skillParams.Launch_Type and (targetUser:HasBuffID(115004) or targetUser:HasBuffID(115080)) and 2 <= distance then
    local BuffNum = targetUser:GetBuffLevel(115080)
    if BuffNum == 0 then
      BuffNum = targetUser:GetBuffLevel(115004)
    end
    damage = math.floor(damage * (1 - (0.15 * BuffNum - 0.05)))
  end
  if targetUser:HasBuffID(1010100) and 3 < distance then
    local lianxugongji = targetUser:GetBuffLevel(1010100)
    damage = damage * (1 - lianxugongji * 0.06)
  end
  if targetUser:HasBuffID(137840) and 5 < distance then
    local Bufflv = targetUser:GetBuffLevel(137840)
    damage = damage * (1 - Bufflv * 0.08)
  end
  if bits3[CommonFun.AttrEffect2.MDamageTo1] == 1 and CommonFun.RollType.Magic == skillParams.RollType then
    return 1, CommonFun.DamageType.Normal
  end
  if bits3[CommonFun.AttrEffect2.DamageTo1] == 1 and CommonFun.RollType.Attack == skillParams.RollType then
    return 1, CommonFun.DamageType.Normal
  end
  local RaidType = srcUser:GetRaidType()
  if RaidType == 32 then
    local ball66 = 1
    if srcUser:HasBuffID(210010) and targetUser:HasBuffID(107340) then
      ball66 = 0.9
    elseif srcUser:HasBuffID(210010) and targetUser:HasBuffID(107341) then
      ball66 = 0.8
    elseif srcUser:HasBuffID(210010) and targetUser:HasBuffID(107342) then
      ball66 = 0.7
    elseif srcUser:HasBuffID(210010) and targetUser:HasBuffID(107343) then
      ball66 = 0.6
    end
    if 0 < damage then
      damage = damage * ball66
    end
  end
  if RaidType == 44 then
    local ball66 = 1
    if srcUser:HasBuffID(210200) and targetUser:HasBuffID(107340) then
      ball66 = 0.96
    elseif srcUser:HasBuffID(210200) and targetUser:HasBuffID(107341) then
      ball66 = 0.92
    elseif srcUser:HasBuffID(210200) and targetUser:HasBuffID(107342) then
      ball66 = 0.88
    elseif srcUser:HasBuffID(210200) and targetUser:HasBuffID(107343) then
      ball66 = 0.84
    end
    if 0 < damage then
      damage = damage * ball66
    end
  end
  if RaidType == 50 then
    local CarRealDam = srcUser:GetProperty("CarRealDam")
    local CarRealDamPer = srcUser:GetProperty("CarRealDamPer")
    local TwlPlayerReduc = targetUser:GetProperty("TwlPlayerReduc")
    local TwlMonsterReduc = targetUser:GetProperty("TwlMonsterReduc")
    local TwlMonsterDam = srcUser:GetProperty("TwlMonsterDam")
    local MaxHp = targetUser:GetProperty("MaxHp")
    if GetSelfID == 0 and 0 < damage then
      damage = damage * (1 - TwlPlayerReduc)
    end
    if GetSelfID ~= 0 and srcUser:HasBuffID(151028) == false and 0 < damage then
      damage = damage * (1 - TwlMonsterReduc)
    end
    if GetSelfID == 0 and GetNpcID ~= 0 and targetUser:HasBuffID(151028) == false and 0 < damage then
      damage = damage * (1 + TwlMonsterDam)
    elseif GetSelfID ~= 0 and GetNpcID ~= 0 and targetUser:HasBuffID(151028) == false and targetUser:HasBuffID(160000) == true and 0 < damage then
      damage = damage * (1 + TwlMonsterDam / 3)
    elseif GetSelfID ~= 0 and GetNpcID ~= 0 and targetUser:HasBuffID(151028) == false and targetUser:HasBuffID(160000) == false and 0 < damage then
      damage = damage * (1 + TwlMonsterDam)
    end
    if srcUser:HasBuffID(151028) and GetNpcID == 0 and targetUser:HasBuffID(151200) == false then
      damage = damage + 0.1 * MaxHp
    elseif not srcUser:HasBuffID(151028) or GetNpcID ~= 0 or targetUser:HasBuffID(151200) then
    end
    if targetUser:HasBuffID(151028) then
      if srcUser:IsAttackSkill(params.skillIDAndLevel) == false and 0 < damage then
        return 0, CommonFun.DamageType.Miss
      elseif srcUser:IsAttackSkill(params.skillIDAndLevel) == false and damage < 0 then
        return 0, CommonFun.DamageType.None
      else
        damage = math.min(damage, MaxHp * 0.003) + CarRealDam * (1 + CarRealDamPer)
      end
    end
    local Master = srcUser:GetMasterUser()
    if targetUser:HasBuffID(151028) and srcUser:HasBuffID(151231) == false and (GetSelfID == 0 or Master ~= nil) and srcUser:HasBuffID(151200) == false then
      damage = 0
    elseif not targetUser:HasBuffID(151028) or srcUser:HasBuffID(151200) then
    end
  end
  local FinalDam = CommonFun.calcFinalDam(srcUser, targetUser, params, logger)
  local MonsterFinalDam = CommonFun.calcMonsterFinalDam(srcUser, targetUser, params, logger)
  if 0 < damage then
    local ResultDamInc = srcUser:GetProperty("ResultDamInc")
    local ResultDamRes = targetUser:GetProperty("ResultDamRes")
    local BossRealDam = srcUser:GetProperty("BossRealDam")
    local BossRealReduc = targetUser:GetProperty("BossRealReduc")
    if targetUser.boss == false then
      BossRealDam = 0
    end
    local Result = 1 + ResultDamInc - ResultDamRes
    Result = math.max(Result, 0.1)
    local BossResult = 1 + BossRealDam - BossRealReduc
    BossResult = math.max(BossResult, 0.01)
    damage = damage * FinalDam * MonsterFinalDam * Result * BossResult
  end
  if 0 < damage and (GetNpcID == 81000 or GetNpcID == 81001 or GetNpcID == 81002 or GetNpcID == 81003 or GetNpcID == 81004 or GetNpcID == 81005) then
    damage = CommonFun.calcATMDam(srcUser, targetUser, params, logger)
    return damage, damageType
  end
  if 0 < damage and (GetNpcID == 250300 or GetNpcID == 250310 or GetNpcID == 250330 or GetNpcID == 260300 or GetNpcID == 260310 or GetNpcID == 260330 or GetNpcID == 270300 or GetNpcID == 270310 or GetNpcID == 270330) then
    damage = damage * CommonFun.calcBOSSFinalDam(srcUser, targetUser, params, logger)
  end
  if targetUser:HasBuffID(159530) and 0 < damage then
    local Limit_Dam = targetUser:GetProperty("MaxHp")
    if damage < Limit_Dam * 0.02 then
      damage = 0
    end
  end
  if 0 < damage and GetNpcID == 280711 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 476 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280708 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 480 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280709 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 188 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280710 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1111 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280734 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1104 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280720 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 2035 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280721 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 2020 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280745 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 2041 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280722 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 2019 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280746 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 2045 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280459 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 2045 or skillID == 2019 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and (GetNpcID == 280735 or GetNpcID == 280732 or GetNpcID == 280733) then
    local college = 0.01
    damage = math.floor(damage * college)
  end
  if 0 < damage and (GetNpcID == 280717 or GetNpcID == 280741) then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 172 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280449 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 172 or skillID == 143 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and (GetNpcID == 280718 or GetNpcID == 280742) then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 143 and srcUser:HasBuffID(117320) then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280705 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1423 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280729 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1433 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and (GetNpcID == 280830 or GetNpcID == 280706) then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1373 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280730 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1384 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280723 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1247 or skillID == 1251 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280747 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 138 or skillID == 201 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280731 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 300 and (srcUser:HasBuffID(117410) or srcUser:HasBuffID(117411)) then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280707 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 300 and srcUser:HasBuffID(90200) then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280700 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 360 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280724 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 360 or skillID == 1180 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280701 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1164 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280725 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1165 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280702 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if (skillID == 3209 or skillID == 79 or skillID == 74 or skillID == 107 or skillID == 1312) and (srcUser:HasBuffID(118340) or srcUser:HasBuffID(118341) or srcUser:HasBuffID(118342) or srcUser:HasBuffID(118343) or srcUser:HasBuffID(118344)) then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280726 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1305 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280703 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 21 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280727 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 21 or skillID == 1261 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280425 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 13 and (srcUser:HasBuffID(80110) or srcUser:HasBuffID(80113) or srcUser:HasBuffID(117630)) then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280704 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 13 and (srcUser:HasBuffID(80110) or srcUser:HasBuffID(80113)) then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280728 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 13 and srcUser:HasBuffID(117630) then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280713 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 448 or skillID == 402 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280737 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1122 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280443 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1625 or skillID == 1637 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280714 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1625 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280738 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1637 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280715 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1612 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280739 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1614 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280719 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1203 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280743 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 1208 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and (GetNpcID == 280489 or GetNpcID == 280490) then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 2200 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280748 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 2202 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280750 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 2202 or skillID == 2224 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280749 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 2227 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280751 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 2227 or skillID == 2207 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280755 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 2323 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if 0 < damage and GetNpcID == 280756 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    local college = 0.01
    if skillID == 2323 or skillID == 2301 then
      college = 1
    end
    damage = math.floor(damage * college)
  end
  if bits2[CommonFun.AttrEffect.InGodStatus] == 1 and 0 < damage then
    return 0, CommonFun.DamageType.Miss
  end
  if GetSelfID == 0 and (GetNpcID == 301200 or GetNpcID == 301201 or GetNpcID == 301202 or GetNpcID == 301203 or GetNpcID == 301204 or GetNpcID == 301205 or GetNpcID == 301206) then
    return 0, CommonFun.DamageType.Miss
  end
  if targetUser:HasBuffID(32290) and 0 < damage and targetUser:HasBuffID(135251) == false then
    local mapid, maptype = srcUser:GetMapInfo()
    local pvpRatio = 5
    if maptype == 2 or maptype == 4 then
      pvpRatio = 20
    end
    local Sp = targetUser:GetProperty("Sp")
    if Sp > damage / pvpRatio then
      damage = damage / pvpRatio
      return damage, CommonFun.DamageType.Normal_Sp
    elseif 0 < Sp and Sp < damage / pvpRatio then
      damage = damage - Sp * pvpRatio
      local Hp = targetUser:GetProperty("Hp")
      if damage >= Hp then
        return damage, damageType
      end
      if srcUser.isServerCall then
        srcUser:AddBuff(32291, targetUser:GetGuid())
      end
    end
  end
  if srcUser:HasBuffID(154690) and srcUser:IsAttackSkill(params.skillIDAndLevel) == false and 0 < damage then
    local skilllv_luk = srcUser:GetBoKiSkillLv(4520)
    local skilllv_lukdam = srcUser:GetBoKiSkillLv(4521)
    local Rate = skilllv_luk * 3
    if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
      damage = damage * (1.3 + skilllv_lukdam * 0.03)
      damageType = CommonFun.DamageType.Crit
      local skilllv_lukzs = srcUser:GetBoKiSkillLv(4522)
      if 0 < skilllv_lukzs and srcUser.isServerCall then
        srcUser:AddBuff(154340, targetUser:GetGuid())
      end
    end
  end
  local TaichiSecretLandGemLv = targetUser:GetSecretLandGemLv(384009)
  if TaichiSecretLandGemLv ~= 0 and 0 < damage then
    local reduceRatio = TaichiSecretLandGemLv * 0.002 + math.max(TaichiSecretLandGemLv - 30, 0) * 0.001 + math.max(TaichiSecretLandGemLv - 60, 0) * 0.002
    local loseValue = damage * reduceRatio
    damage = damage - loseValue
    if srcUser.isServerCall then
      targetUser:ChangeHpDuringTime(-loseValue, 3, srcUser:GetGuid())
    end
  end
  if (srcUser:HasBuffID(35600) or srcUser:HasBuffID(43230) or srcUser:HasBuffID(55170) or srcUser:HasBuffID(66730) or srcUser:HasBuffID(55890) or srcUser:HasBuffID(70450) or srcUser:HasBuffID(56700) or srcUser:HasBuffID(56730) or srcUser:HasBuffID(55710) or srcUser:HasBuffID(73550) or srcUser:HasBuffID(57700)) and 0 < damage then
    local Luk = srcUser:GetProperty("Luk")
    local CriDamNum = 1.5 + math.floor(Luk / 6) / 100
    local Ring1 = srcUser:GetEquipedID(5)
    local RefineLv1 = srcUser:GetEquipedRefineLv(5)
    local Ring2 = srcUser:GetEquipedID(6)
    local RefineLv2 = srcUser:GetEquipedRefineLv(6)
    local CriNum1 = 0
    if srcUser:HasBuffID(35600) then
      CriNum1 = 20
    end
    local a = 0
    local b = 0
    if (Ring1 == 44076 or Ring1 == 144076) and RefineLv1 < 8 then
      a = 3
    elseif (Ring1 == 44076 or Ring1 == 144076) and 8 <= RefineLv1 and RefineLv1 < 12 then
      a = 6
    elseif (Ring1 == 44076 or Ring1 == 144076) and RefineLv1 >= 12 then
      a = 10
    end
    if (Ring2 == 44076 or Ring2 == 144076) and RefineLv2 < 8 then
      b = 3
    elseif (Ring2 == 44076 or Ring2 == 144076) and 8 <= RefineLv2 and RefineLv2 < 12 then
      b = 6
    elseif (Ring2 == 44076 or Ring2 == 144076) and RefineLv2 >= 12 then
      b = 10
    end
    local CriNum2 = a + b
    local CardBK = srcUser:GetEquipCardNum(7, 20189)
    local CardBK1 = srcUser:GetEquipCardNum(7, 24113)
    local CardKL = srcUser:GetEquipCardNum(7, 23256)
    local CardConjuror = srcUser:GetEquipCardNum(2, 23252)
    local CriNum3 = CardBK * 15 + CardBK1 * 17.5 + CardKL * 10 + CardConjuror * 10
    local CardNumH1 = srcUser:GetEquipCardNum(5, 23064)
    local CardNumH2 = srcUser:GetEquipCardNum(6, 23064)
    local CardNumB1 = srcUser:GetEquipCardNum(5, 23324)
    local CardNumB2 = srcUser:GetEquipCardNum(6, 23324)
    local CriNum5 = CardNumH1 * 10 + CardNumH2 * 10 + CardNumB1 * 8 + CardNumB2 * 8
    local CriNum4 = 0
    local RefineLv3 = srcUser:GetEquipedRefineLv(11)
    if srcUser:HasBuffID(66730) and 6 <= RefineLv3 then
      CriNum4 = 20
    elseif srcUser:HasBuffID(66730) and RefineLv3 < 6 then
      CriNum4 = 10
    end
    local CriNum6 = 0
    local RefineLv10 = srcUser:GetEquipedRefineLv(10)
    if srcUser:HasBuffID(70450) then
      CriNum6 = 5 + RefineLv10 * 1
    end
    local CriNum7 = 0
    local RefineLv8 = srcUser:GetEquipedRefineLv(8)
    if srcUser:HasBuffID(73550) then
      CriNum7 = 10 + RefineLv8 * 1
    end
    local CriNum = CriNum1 + CriNum2 + CriNum3 + CriNum4 + CriNum5 + CriNum6 + CriNum7
    if CommonFun.RollType.Magic == skillParams.RollType and srcUser:IsAttackSkill(params.skillIDAndLevel) == false and 0 < damage and CommonFun.IsInRate(CriNum, srcUser:GetRandom()) and (mapid == 7200 or mapid == 7204 or mapid == 7505 or mapid == 7510 or mapid == 7515 or mapid == 7520) then
      return math.min(damage * CriDamNum), CommonFun.DamageType.Crit
    elseif CommonFun.RollType.Magic == skillParams.RollType and srcUser:IsAttackSkill(params.skillIDAndLevel) == false and 0 < damage and CommonFun.IsInRate(CriNum, srcUser:GetRandom()) then
      return math.min(damage * CriDamNum, 2147483647), CommonFun.DamageType.Crit
    end
  end
  damage = math.floor(damage)
  local count = params.hitedCount
  local index = params.hitedIndex
  if skillParams.Logic_Param.spotter ~= nil and index ~= 1 then
    local spotter = srcUser:GetSpotter(params.skillIDAndLevel) + skillParams.Logic_Param.spotter
    return math.min(damage * spotter, 2147483647), damageType
  end
  if skillID == 252 and count == 1 and srcUser:HasBuffID(20410160) then
    local spotter = srcUser:GetSpotter(params.skillIDAndLevel) + skillParams.Logic_Param.spotter
    return math.min(damage * (1 + spotter * 0.3 * 2), 2147483647), damageType
  end
  local mapid, maptype = srcUser:GetMapInfo()
  if damage >= 2147483647 and (mapid == 7200 or mapid == 7204 or mapid == 7505 or mapid == 7510 or mapid == 7515 or mapid == 7520) then
  elseif damage >= 2147483647 then
    damage = 2147483647
  end
  return damage, damageType
end

function CommonFun.DoCalcElementDam(srcUser, targetUser, params, damageParam)
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  if srcUser.SetTempAtkAttr ~= nil then
    srcUser:SetTempAtkAttr(srcAtkElement)
  end
  if targetUser.SetTempBeAtkAttr ~= nil then
    targetUser:SetTempBeAtkAttr(srcAtkElement)
  end
  return 1
end

function CommonFun.DoCalcStateEffectDam(srcUser, targetUser, params)
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Profession = srcUser:GetProfressionID()
  local Num1 = srcUser:GetRunePoint(31011)
  local Num2 = srcUser:GetRunePoint(31012)
  local Num3 = srcUser:GetRunePoint(31013)
  local Num4 = srcUser:GetRunePoint(31014)
  local Num5 = srcUser:GetRunePoint(31015)
  local RuneDamage1 = Num1 * 0.1 + Num2 * 0.05 + Num3 * 0.1 + Num4 * 0.05 + Num5 * 0.05
  local Num6 = srcUser:GetRunePoint(41011)
  local Num7 = srcUser:GetRunePoint(41012)
  local Num8 = srcUser:GetRunePoint(41013)
  local RuneDamage2 = Num6 * 0.15 + Num7 * 0.1 + Num8 * 0.15
  local Num9 = srcUser:GetRunePoint(62001)
  local Num10 = srcUser:GetRunePoint(62002)
  local Num11 = srcUser:GetRunePoint(62003)
  local Num12 = srcUser:GetRunePoint(62004)
  local Num13 = srcUser:GetRunePoint(62005)
  local RuneDamage3 = Num9 * 0.02 + Num10 * 0.04 + Num11 * 0.04 + Num12 * 0.02 + Num13 * 0.02
  local Num14 = srcUser:GetRunePoint(120180)
  local RuneDamage4 = Num14 * 0.03
  local Num16 = srcUser:GetRunePoint(120210)
  local RuneDamage6 = Num16 * 0.1
  local Num17 = srcUser:GetRunePoint(90210)
  local RuneDamage7 = Num17 * 0.05
  local Num18 = srcUser:GetRunePoint(90200)
  local RuneDamage8 = Num18 * 0.03
  local Snatch = 0
  local fromid = targetUser:GetBuffFromID(106131)
  local guid = srcUser:GetGuid()
  local Num19 = srcUser:GetRunePoint(90110)
  if fromid == guid then
    Snatch = 0.05 * Num19
  end
  local DizzyRatio = 0
  if srcUser:HasBuffID(80001480) and srcUser:HasBuffID(51230) or srcUser:HasBuffID(81002040) and srcUser:HasBuffID(56220) then
    DizzyRatio = 0.15
  end
  if srcUser:HasBuffID(38010) then
    DizzyRatio = DizzyRatio + 0.1
  end
  local CardNumzsj = srcUser:GetEquipCardNum(7, 24624)
  if srcUser:HasBuffID(54100) then
    DizzyRatio = DizzyRatio + 0.1 * CardNumzsj
  end
  local Ring5 = srcUser:GetEquipedID(5)
  local RefineLv5 = srcUser:GetEquipedRefineLv(5)
  local Ring6 = srcUser:GetEquipedID(6)
  local RefineLv6 = srcUser:GetEquipedRefineLv(6)
  local curse5 = 0
  local curse6 = 0
  if Ring5 == 44089 or Ring5 == 144089 then
    curse5 = RefineLv5 / 100
  end
  if Ring6 == 44089 or Ring6 == 144089 then
    curse6 = RefineLv6 / 100
  end
  local curse = curse5 + curse6
  local skilllv_Rogue = srcUser:GetLernedSkillLevel(484)
  local Rogue = 0
  if 0 < skilllv_Rogue then
    Rogue = 0.03 * skilllv_Rogue
  end
  local bloodrain = 0
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(90001048) and 10 <= RefineLv7 then
    bloodrain = 0.15
  end
  if srcUser:HasBuffID(41870) and 5 <= RefineLv7 then
    bloodrain = 0.2
  end
  if srcUser:HasBuffID(44290) or srcUser:HasBuffID(44300) then
    bloodrain = RefineLv7 * 0.01
  end
  if srcUser:HasBuffID(90004314) then
    bloodrain = 0.15
  end
  if srcUser:HasBuffID(64350) then
    bloodrain = bloodrain + 0.1
  end
  local skilllv_Zhuangtai = srcUser:GetLernedSkillLevel(1166)
  local skilllv_Zhuangtai2 = srcUser:GetLernedSkillLevel(1490)
  local skilllv_Zhuangtai3 = srcUser:GetLernedSkillLevel(1716)
  local skilllv_Zhuangtai4 = srcUser:GetLernedSkillLevel(1912)
  local Numfs = srcUser:GetRunePoint(24080)
  local Yishang = skilllv_Zhuangtai * 0.05 + Numfs * 0.03 + skilllv_Zhuangtai2 * 0.05 + skilllv_Zhuangtai3 * 0.05 + skilllv_Zhuangtai4 * 0.05
  local FrozenM = 0
  local Card1 = srcUser:GetEquipCardNum(7, 20025)
  if 0 < Card1 and srcUser:HasBuffID(80000250) then
    FrozenM = 0.25 + FrozenM
  end
  if srcUser:HasBuffID(52180) and srcUser:HasBuffID(81000050) then
    FrozenM = 0.2 + FrozenM
  end
  if srcUser:HasBuffID(56250) and srcUser:HasBuffID(81003180) then
    FrozenM = 0.2 + FrozenM
  end
  if srcUser:HasBuffID(54930) and srcUser:HasBuffID(54910) then
    FrozenM = 0.1 + FrozenM
  end
  local BloodM = 0
  if srcUser:HasBuffID(37540) then
    BloodM = 0.05 + BloodM
  end
  if bits[CommonFun.StateEffect.Poison] == 1 and (Weapon == 40909 or Weapon == 140909) then
    return 1 + bloodrain
  end
  if bits[CommonFun.StateEffect.Poison] == 1 and (Weapon == 40945 or Weapon == 140945) then
    return 1 + bloodrain
  end
  if bits[CommonFun.StateEffect.Poison] == 1 and (Weapon == 62819 or Weapon == 162819 or Weapon == 63153 or Weapon == 163153) then
    return 1 + bloodrain
  end
  if bits[CommonFun.StateEffect.Poison] == 1 and (Weapon == 40766 or Weapon == 140766) then
    return 1 + bloodrain
  end
  if bits[CommonFun.StateEffect.Poison] == 1 then
    return 1 + bloodrain
  end
  if targetUser:GetBuffFromID(106131) and fromid == guid and (Profession == 92 or Profession == 93 or Profession == 94 or Profession == 95) then
    return 1 + Snatch
  end
  if bits[CommonFun.StateEffect.Dizzy] == 1 and (Profession == 92 or Profession == 93 or Profession == 94 or Profession == 95) then
    return 1 + Rogue + RuneDamage7 + Snatch
  end
  if (bits[CommonFun.StateEffect.NoMove] == 1 or targetUser:HasBuffID(106151)) and (Profession == 92 or Profession == 93 or Profession == 94 or Profession == 95) then
    return 1 + Rogue + RuneDamage8 + Snatch
  end
  if (bits[CommonFun.StateEffect.Dark] == 1 or targetUser:HasBuffID(106151)) and (Profession == 92 or Profession == 93 or Profession == 94 or Profession == 95) then
    return 1 + Rogue + Snatch + curse
  end
  if (bits[CommonFun.StateEffect.Dizzy] == 1 or bits[CommonFun.StateEffect.NoMove] == 1 or bits[CommonFun.StateEffect.Dark] == 1 or targetUser:HasBuffID(106151)) and (Profession == 92 or Profession == 93 or Profession == 94 or Profession == 95) then
    return 1 + Rogue + Snatch
  end
  if bits[CommonFun.StateEffect.Dizzy] == 1 and (Weapon == 41813 or Weapon == 141813) then
    return 1.15 + RuneDamage1 + RuneDamage3 + RuneDamage6 + DizzyRatio + Rogue
  end
  if bits[CommonFun.StateEffect.Dizzy] == 1 and (Weapon == 41811 or Weapon == 141811) then
    return 1 + 0.05 * RefineLv + RuneDamage1 + RuneDamage3 + RuneDamage6 + DizzyRatio + Rogue
  end
  if bits[CommonFun.StateEffect.Dizzy] == 1 and (Profession == 61 or Profession == 62 or Profession == 63 or Profession == 64 or Profession == 65 or Profession == 31 or Profession == 32 or Profession == 33 or Profession == 34 or Profession == 35 or Profession == 213 or Profession == 214 or Profession == 215) then
    return 1 + RuneDamage1 + RuneDamage3 + DizzyRatio
  end
  if bits[CommonFun.StateEffect.Freeze] == 1 then
    return 1 + Yishang + FrozenM
  end
  if bits[CommonFun.StateEffect.NoMove] == 1 then
    return 1 + RuneDamage2
  end
  if bits[CommonFun.StateEffect.Silence] == 1 and (Profession == 122 or Profession == 123 or Profession == 124 or Profession == 125) then
    return 1 + RuneDamage4 + curse
  end
  if bits[CommonFun.StateEffect.Dizzy] == 1 and (Profession == 122 or Profession == 123 or Profession == 124 or Profession == 125) then
    return 1 + RuneDamage6 + DizzyRatio
  end
  if srcUser:HasBuffID(80113) and bits[CommonFun.StateEffect.Blood] == 1 then
    local skilllv_1 = srcUser:GetLernedSkillLevel(25)
    if 10 < skilllv_1 then
      return 1 + (skilllv_1 - 10) * 0.05 + BloodM
    end
  end
  if bits[CommonFun.StateEffect.Blood] == 1 then
    return 1 + Yishang + BloodM
  end
  if bits[CommonFun.StateEffect.Dizzy] == 1 and (Profession == 24 or Profession == 25 or Profession == 144 or Profession == 145 or Profession == 204 or Profession == 205 or Profession == 224 or Profession == 225) then
    return 1 + Yishang + DizzyRatio
  end
  if (bits[CommonFun.StateEffect.Freeze] == 1 or bits[CommonFun.StateEffect.Blood] == 1 or bits[CommonFun.StateEffect.Burn] == 1) and (Profession == 24 or Profession == 25 or Profession == 144 or Profession == 145 or Profession == 204 or Profession == 205 or Profession == 224 or Profession == 225) then
    return 1 + Yishang
  end
  if bits[CommonFun.StateEffect.Dizzy] == 1 then
    return 1 + DizzyRatio
  end
  local GemValue = srcUser:GetGemValue(91061)
  local RuneNum_mjhw = srcUser:GetRunePoint(153041)
  if bits[CommonFun.StateEffect.Fear] == 1 then
    return 1 + GemValue / 100000 + RuneNum_mjhw * 0.03 + curse
  end
  if bits[CommonFun.StateEffect.Curse] == 1 or bits[CommonFun.StateEffect.Fear] == 1 or bits[CommonFun.StateEffect.Dark] == 1 or bits[CommonFun.StateEffect.Silence] == 1 then
    return 1 + curse
  end
  if targetUser:HasBuffID(106090) then
    return 1 + Rogue
  end
  return 1
end

function CommonFun.calcMDamIncrease(srcUser, targetUser)
  local MDamIncrease = srcUser:GetProperty("MDamIncrease")
  local DamReduc = srcUser:GetProperty("DamReduc")
  local Buff = srcUser:HasBuffID(85060)
  local MDamIncrease1 = MDamIncrease
  if Buff == true and 0.7 <= DamReduc then
    MDamIncrease1 = (DamReduc - 0.7) / 3 + MDamIncrease
  end
  if MDamIncrease1 <= 0 then
    MDamIncrease1 = 0
  end
  return MDamIncrease1
end

function CommonFun.calcSkillDamReduc(srcUser, targetUser)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local EnergyDamReduc = targetUser:GetProperty("EnergyDamReduc")
  local SteelDamReduc = targetUser:GetProperty("SteelDamReduc")
  local ProtectDamReduc = targetUser:GetProperty("ProtectDamReduc")
  local HideDamReduc = targetUser:GetProperty("HideDamReduc")
  local DragonDamReduc = targetUser:GetProperty("DragonDamReduc")
  local DeadDamReduc = targetUser:GetProperty("DeadDamReduc")
  local SkillDamReduc = (1 - EnergyDamReduc) * (1 - SteelDamReduc) * (1 - ProtectDamReduc) * (1 - HideDamReduc) * (1 - DragonDamReduc) * (1 - DeadDamReduc)
  if SkillDamReduc <= 0.1 then
    SkillDamReduc = 0.1
  end
  return SkillDamReduc
end

function CommonFun.calcSkillMDamReduc(srcUser, targetUser)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local SteelMDamReduc = targetUser:GetProperty("SteelMDamReduc")
  local ProtectMDamReduc = targetUser:GetProperty("ProtectMDamReduc")
  local HideMDamReduc = targetUser:GetProperty("HideMDamReduc")
  local DragonMDamReduc = targetUser:GetProperty("DragonMDamReduc")
  local WindMDamReduc = targetUser:GetProperty("WindMDamReduc")
  local DeadMDamReduc = targetUser:GetProperty("DeadMDamReduc")
  local SkillMDamReduc = (1 - SteelMDamReduc) * (1 - ProtectMDamReduc) * (1 - HideMDamReduc) * (1 - DragonMDamReduc) * (1 - WindMDamReduc) * (1 - DeadMDamReduc)
  if SkillMDamReduc <= 0.1 then
    SkillMDamReduc = 0.1
  end
  return SkillMDamReduc
end

function CommonFun.calcSpikeLv(srcUser, targetUser)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local RefineLv3 = srcUser:GetEquipedRefineLv(7)
  local ReduceLv1 = 0
  local ReduceLv2 = 0
  local ReduceLv3 = 0
  local ReduceLv = 0
  if RefineLv1 < 5 then
    ReduceLv1 = 0
  elseif 5 <= RefineLv1 and RefineLv1 < 10 then
    ReduceLv1 = 1
  elseif 10 <= RefineLv1 and RefineLv1 < 15 then
    ReduceLv1 = 2
  else
    ReduceLv1 = 4
  end
  if RefineLv2 < 5 then
    ReduceLv2 = 0
  elseif 5 <= RefineLv2 and RefineLv2 < 10 then
    ReduceLv2 = 1
  elseif 10 <= RefineLv2 and RefineLv2 < 15 then
    ReduceLv2 = 2
  else
    ReduceLv2 = 4
  end
  if RefineLv3 < 5 then
    ReduceLv3 = 0
  elseif 5 <= RefineLv3 and RefineLv3 < 10 then
    ReduceLv3 = 1
  elseif 10 <= RefineLv3 and RefineLv3 < 15 then
    ReduceLv3 = 2
  else
    ReduceLv3 = 4
  end
  ReduceLv = ReduceLv1 + ReduceLv2 + ReduceLv3
  return ReduceLv
end

function CommonFun.calcDamReDuc(srcUser, targetUser)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local DamSpike = srcUser:GetProperty("DamSpike")
  if nil ~= CommonFun.Shape and CommonFun.Shape.M == targetUser.shape and srcUser:HasBuffID(90004384) then
    DamSpike = DamSpike + 0.15
  end
  local DamReduc2 = targetUser:GetProperty("DamReduc")
  local ReduceLv = CommonFun.calcSpikeLv(srcUser, targetUser)
  local SkillDamReduc = CommonFun.calcSkillDamReduc(srcUser, targetUser)
  local A = 1 - (1 + 0.009 * ReduceLv + DamSpike - DamReduc2) * SkillDamReduc
  if 0.85 <= A then
    A = 0.85
  end
  return A
end

function CommonFun.calcMDamReDuc(srcUser, targetUser)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MDamSpike = srcUser:GetProperty("MDamSpike")
  local MDamReduc2 = targetUser:GetProperty("MDamReduc")
  local ReduceLv = CommonFun.calcSpikeLv(srcUser, targetUser)
  local SkillMDamReduc = CommonFun.calcSkillMDamReduc(srcUser, targetUser)
  local A = 1 - (1 + 0.009 * ReduceLv + MDamSpike - MDamReduc2) * SkillMDamReduc
  if 0.85 <= A then
    A = 0.85
  end
  return A
end

function CommonFun.calcFinalDam(srcUser, targetUser, params, logger)
  local Weapon_Id = srcUser:GetEquipedID(7)
  local Damage_Per = 0
  if Weapon_Id == 40610 or Weapon_Id == 140610 then
    local target_Hp = targetUser:GetProperty("Hp")
    local target_MaxHp = targetUser:GetProperty("MaxHp")
    local target_hpper = target_Hp / target_MaxHp
    if srcUser:HasBuffID(90000924) and target_hpper <= 0.3 then
      Damage_Per = Damage_Per + 0.15
    end
    if srcUser:HasBuffID(90000925) and target_hpper <= 0.1 then
      Damage_Per = Damage_Per + 0.3
    end
    if srcUser:HasBuffID(90000928) and target_hpper <= 0.45 then
      Damage_Per = Damage_Per + 0.05
    end
    local RefineLv1 = srcUser:GetEquipedRefineLv(7)
    if srcUser:HasBuffID(90000929) and 15 <= RefineLv1 then
      Damage_Per = Damage_Per + 0.1
    end
  end
  if srcUser:HasBuffID(44280) then
    local target_Hp = targetUser:GetProperty("Hp")
    local target_MaxHp = targetUser:GetProperty("MaxHp")
    local target_hpper = target_Hp / target_MaxHp
    if target_hpper <= 0.3 then
      Damage_Per = Damage_Per + 0.5
    end
  end
  if Weapon_Id == 41565 or Weapon_Id == 141565 then
    local target_Hp8 = targetUser:GetProperty("Hp")
    local target_MaxHp8 = targetUser:GetProperty("MaxHp")
    local target_hpper8 = target_Hp8 / target_MaxHp8
    if srcUser:HasBuffID(41970) and target_hpper8 <= 0.3 then
      Damage_Per = Damage_Per + 0.15
    end
  end
  if srcUser:HasBuffID(65460) then
    local target_HpW = targetUser:GetProperty("Hp")
    local target_MaxHpW = targetUser:GetProperty("MaxHp")
    local target_hpperW = target_HpW / target_MaxHpW
    local RefineLv12 = srcUser:GetEquipedRefineLv(12)
    if target_hpperW <= 0.3 or 10 <= RefineLv12 and target_hpperW <= 0.6 then
      Damage_Per = Damage_Per + 0.1
    end
  end
  if srcUser:HasBuffID(72210) then
    local target_Hp = targetUser:GetProperty("Hp")
    local target_MaxHp = targetUser:GetProperty("MaxHp")
    local target_hpper = target_Hp / target_MaxHp
    if target_hpper <= 0.3 then
      Damage_Per = Damage_Per + 0.15
    end
  end
  local shenqi = 0
  if srcUser:HasBuffID(107031) then
    shenqi = 0.5
  elseif srcUser:HasBuffID(107030) then
    shenqi = 0.3
  end
  local Godness = 0
  if srcUser:HasBuffID(31790) then
    Godness = 0.1
  end
  local GreatbuffD = 0
  if srcUser:HasBuffID(166580) then
    GreatbuffD = 0.3
  end
  local testbuff = 0
  local Num33 = targetUser:GetStatusNum()
  if 3 <= Num33 and srcUser:HasBuffID(65100) then
    testbuff = 10
  end
  local Personalartifact = 0
  local NumDebuff = targetUser:GetStatusNum()
  if srcUser:HasBuffID(49230) then
    Personalartifact = 0.08 * NumDebuff
  end
  local Cardsnake = srcUser:GetEquipCardNum(7, 23315)
  if srcUser:HasBuffID(57480) then
    Personalartifact = Personalartifact + 0.02 * NumDebuff * Cardsnake
  end
  local count = params.hitedCount
  local DemonLeader = 0
  if srcUser:HasBuffID(57200) and srcUser:HasBuffID(81002810) then
    DemonLeader = 0.1
  elseif srcUser:HasBuffID(57200) and 1 <= count then
    DemonLeader = 0.1 / count
  end
  local Transmission = 0
  local SecretLandGemLv = srcUser:GetSecretLandGemLv(384002)
  local targetid = targetUser:GetGuid()
  local distance = srcUser:GetDistance(targetid)
  if SecretLandGemLv ~= 0 and 6 <= distance and srcUser:HasBuffID(48610) then
    Transmission = SecretLandGemLv * 0.002 + math.max(SecretLandGemLv - 30, 0) * 0.001 + math.max(SecretLandGemLv - 60, 0) * 0.002
  end
  local Handtohand = 0
  local HandSecretLandGemLv = srcUser:GetSecretLandGemLv(384005)
  if HandSecretLandGemLv ~= 0 and distance <= 5 and srcUser:GetRangeVaildEnemy(5) == 1 then
    Handtohand = HandSecretLandGemLv * 0.002 + math.max(HandSecretLandGemLv - 30, 0) * 0.001 + math.max(HandSecretLandGemLv - 60, 0) * 0.002
  end
  local Thunder = 0
  local ThunderSecretLandGemLv = srcUser:GetSecretLandGemLv(384003)
  if ThunderSecretLandGemLv ~= 0 and srcUser:HasBuffID(48621) then
    Thunder = ThunderSecretLandGemLv * 0.002 + math.max(ThunderSecretLandGemLv - 30, 0) * 0.001 + math.max(ThunderSecretLandGemLv - 60, 0) * 0.002
  end
  local Mineral = 0
  local Numabnormal = targetUser:GetStatusNum()
  if srcUser:HasBuffID(55210) then
    Mineral = Numabnormal * 0.05
  end
  local GreatbuffNum = targetUser:GetBuffLayer(165536)
  local GreatNum = 0
  if srcUser:HasBuffID(165535) then
    GreatNum = GreatbuffNum * 0.05
  end
  local Hide = 0
  if srcUser:HasBuffID(107098) then
    Hide = 0.3
  elseif srcUser:HasBuffID(107099) then
    Hide = 0.6
  end
  local WeaponType = srcUser:GetEquipedWeaponType()
  local WeaponType2 = targetUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(1146)
  local Overlord = 0
  local GemValue = srcUser:GetGemValue(91092)
  if WeaponType == 250 then
    Overlord = skilllv_1 * 0.02 + GemValue / 100000
  end
  local dragon = 0
  local Dtarget_Hp = targetUser:GetProperty("Hp")
  local Dtarget_MaxHp = targetUser:GetProperty("MaxHp")
  local Dtarget_hpper = Dtarget_Hp / Dtarget_MaxHp
  if srcUser:HasBuffID(33410) and 0.5 <= Dtarget_hpper then
    dragon = 0.05
  end
  if srcUser:HasBuffID(55740) and 0.5 <= Dtarget_hpper then
    dragon = dragon + 0.05
  end
  if srcUser:HasBuffID(55740) and srcUser:HasBuffID(81001690) and Dtarget_hpper < 0.5 then
    dragon = dragon + 0.05
  end
  local CriFinalDamPer = 0
  local Cri = srcUser:GetProperty("Cri")
  local CriRes2 = targetUser:GetProperty("CriRes")
  local RateFinal = Cri - CriRes2
  if srcUser:HasBuffID(29420) then
    CriFinalDamPer = CriFinalDamPer + math.min(RateFinal * 0.03 / 100, 0.04)
  elseif srcUser:HasBuffID(29421) then
    CriFinalDamPer = CriFinalDamPer + math.min(RateFinal * 0.06 / 100, 0.08)
  elseif srcUser:HasBuffID(29422) then
    CriFinalDamPer = CriFinalDamPer + math.min(RateFinal * 0.15 / 100, 0.2)
  end
  local Devilballs = 0
  local Dtarget_Hp = targetUser:GetProperty("Hp")
  local Dtarget_MaxHp = targetUser:GetProperty("MaxHp")
  local Dtarget_hpper = Dtarget_Hp / Dtarget_MaxHp
  if srcUser:HasBuffID(68390) and 0.7 <= Dtarget_hpper then
    Devilballs = 0.05
  end
  local staff = 0
  local RefineLvH = srcUser:GetEquipedRefineLv(7)
  local Sp = srcUser:GetProperty("Sp")
  local MaxSp = srcUser:GetProperty("MaxSp")
  if 10 <= RefineLvH and srcUser:HasBuffID(44310) then
    staff = math.floor((MaxSp - Sp) / MaxSp * 10) / 100
  end
  local sword = 0
  local Dtarget_Sp = targetUser:GetProperty("Sp")
  local Dtarget_MaxSp = targetUser:GetProperty("MaxSp")
  local Dtarget_spper = Dtarget_Sp / Dtarget_MaxSp
  if srcUser:HasBuffID(43160) and Dtarget_spper < 0.5 then
    sword = 0.2
  end
  local Dagger = 0
  local DaggerRate = 10
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  if 5 <= RefineLv and RefineLv < 10 then
    DaggerRate = DaggerRate + 5
  elseif 10 <= RefineLv and RefineLv < 15 then
    DaggerRate = DaggerRate + 5 + 5
  elseif 15 <= RefineLv then
    DaggerRate = DaggerRate + 5 + 5 + 10
  end
  if srcUser:HasBuffID(43170) and CommonFun.IsInRate(DaggerRate, srcUser:GetRandom()) then
    Dagger = 1
  end
  local atls = 0
  local RefineLv9 = srcUser:GetEquipedRefineLv(8)
  if srcUser:HasBuffID(33980) and Dtarget_hpper <= 0.4 then
    atls = 0.04 + RefineLv9 * 0.01
  end
  local tail = 0
  if srcUser:HasBuffID(64690) and Dtarget_hpper <= 0.4 then
    tail = 0.1
  end
  local Whale = 0
  local WsrcUser_Hp = srcUser:GetProperty("Hp")
  local Wtarget_Hp = targetUser:GetProperty("Hp")
  local Wtarget_hpper = WsrcUser_Hp / Wtarget_Hp
  if srcUser:HasBuffID(36150) and 1 < Wtarget_hpper then
    Whale = 0.05
  end
  local Ignore = 0
  local IgnoreMDefHS = srcUser:GetProperty("IgnoreMDef")
  local MDefPerHS = targetUser:GetProperty("MDefPer")
  local pvpReduceHS = 0
  if srcUser:HasBuffID(138002) then
    local IgnoreDef = srcUser:GetProperty("IgnoreDef")
    IgnoreMDefHS = IgnoreMDefHS + IgnoreDef
  end
  local mapid, maptype = srcUser:GetMapInfo()
  if (maptype == 2 or maptype == 4) and targetUser:GetNpcID() ~= 40022 then
    MDefPerHS = MDefPerHS < -1 and -1 or 1 < MDefPerHS and 1 or MDefPerHS
    MDefPerHS = math.floor(MDefPerHS * 1000) / 1000
    MDefPerHS = MDefPerHS + 0.5 * (1 - math.sin(MDefPerHS * 3.14 / 2))
    local Master = targetUser:GetMasterUser()
    if targetUser:GetNpcID() == 0 or Master ~= nil then
      pvpReduceHS = 0.2
    end
  end
  local RealMDefPer = IgnoreMDefHS - MDefPerHS - pvpReduceHS
  if srcUser:HasBuffID(90003144) and 1 <= RealMDefPer then
    Ignore = 0.1
  end
  if srcUser:HasBuffID(90004284) and 1 <= RealMDefPer then
    Ignore = Ignore + 0.1
  end
  if 1 <= RealMDefPer then
    if srcUser:HasBuffID(29410) then
      Ignore = Ignore + 0.03
    elseif srcUser:HasBuffID(29411) then
      Ignore = Ignore + 0.06
    elseif srcUser:HasBuffID(29412) then
      Ignore = Ignore + 0.15
    end
  end
  local IgnoreD = 0
  local IgnoreDefHS = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDefHS = IgnoreDef1
  else
    IgnoreDefHS = IgnoreDef1 + IgnoreDef2
  end
  local DefPerHS = targetUser:GetProperty("DefPer")
  local pvpReduceDHS = 0
  if srcUser:HasBuffID(138002) then
    local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
    IgnoreDefHS = IgnoreDefHS + IgnoreMDef
  end
  local mapid, maptype = srcUser:GetMapInfo()
  if (maptype == 2 or maptype == 4) and targetUser:GetNpcID() ~= 40022 then
    DefPerHS = DefPerHS < -1 and -1 or 1 < DefPerHS and 1 or DefPerHS
    DefPerHS = math.floor(DefPerHS * 1000) / 1000
    DefPerHS = DefPerHS + 0.5 * (1 - math.sin(DefPerHS * 3.14 / 2))
    local Master = targetUser:GetMasterUser()
    if targetUser:GetNpcID() == 0 or Master ~= nil then
      pvpReduceDHS = 0.2
    end
  end
  local RealIgnoreDefPer = IgnoreDefHS - DefPerHS - pvpReduceDHS
  if srcUser:HasBuffID(58040) and 1 <= RealIgnoreDefPer then
    IgnoreD = IgnoreD + 0.1
  end
  if srcUser:HasBuffID(58210) and 1 <= RealIgnoreDefPer then
    IgnoreD = IgnoreD + 0.1
  end
  if 1 <= RealIgnoreDefPer then
    if srcUser:HasBuffID(29400) then
      IgnoreD = IgnoreD + 0.03
    elseif srcUser:HasBuffID(29401) then
      IgnoreD = IgnoreD + 0.06
    elseif srcUser:HasBuffID(29402) then
      IgnoreD = IgnoreD + 0.15
    end
  end
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  local CardNum = srcUser:GetEquipCardNum(7, 23035)
  local CardDie = 0
  local CardS = 0
  if (bits[CommonFun.StateEffect.Dizzy] == 1 or bits[CommonFun.StateEffect.Curse] == 1 or bits[CommonFun.StateEffect.Silence] == 1 or bits[CommonFun.StateEffect.Blood] == 1 or bits[CommonFun.StateEffect.Poison] == 1) and srcUser:HasBuffID(81000700) and 0 < CardNum then
    CardS = 0.05
  end
  if (bits[CommonFun.StateEffect.Dizzy] == 1 or bits[CommonFun.StateEffect.Curse] == 1 or bits[CommonFun.StateEffect.Silence] == 1 or bits[CommonFun.StateEffect.Blood] == 1 or bits[CommonFun.StateEffect.Poison] == 1) and 0 < CardNum then
    CardDie = 0.2 * CardNum + CardS
  end
  local kaimeila = 0
  if srcUser:HasBuffID(53020) and bits[CommonFun.StateEffect.Poison] == 1 then
    kaimeila = kaimeila + 0.2
  end
  if srcUser:HasBuffID(80001710) and bits[CommonFun.StateEffect.Poison] == 1 then
    kaimeila = kaimeila + 0.05
  end
  local Profession = srcUser:GetProfressionID()
  if srcUser:HasBuffID(53130) and bits[CommonFun.StateEffect.Poison] == 1 and (Profession == 32 or Profession == 33 or Profession == 34 or Profession == 35) then
    kaimeila = kaimeila + 0.1
  end
  if (srcUser:HasBuffID(55350) or srcUser:HasBuffID(56680)) and bits[CommonFun.StateEffect.Poison] == 1 then
    kaimeila = kaimeila + 0.2
  end
  if srcUser:HasBuffID(55750) and bits[CommonFun.StateEffect.Poison] == 1 then
    kaimeila = kaimeila + 0.1
  end
  local GunBlood = 0
  if srcUser:HasBuffID(55800) and bits[CommonFun.StateEffect.Blood] == 1 then
    GunBlood = GunBlood + 0.1
  end
  local InkSnake = 0
  if srcUser:HasBuffID(57530) and (bits[CommonFun.StateEffect.Dark] == 1 or bits[CommonFun.StateEffect.Curse] == 1) then
    InkSnake = InkSnake + 0.15
  end
  local HpM = srcUser:GetProperty("Hp")
  local MaxHpM = srcUser:GetProperty("MaxHp")
  local hpperM = HpM / MaxHpM
  local tiger = 0
  if srcUser:HasBuffID(52980) then
    tiger = math.floor((1 - hpperM) * 10) * 0.02
  end
  local robot = 0
  if srcUser:HasBuffID(69100) then
    robot = math.floor((1 - hpperM) * 100) * 0.001
  end
  local queen = 0
  local Num_queen = targetUser:GetBuffLayer(53561)
  if Profession == 82 or Profession == 83 or Profession == 84 or Profession == 85 or Profession == 21 or Profession == 22 or Profession == 23 or Profession == 24 or Profession == 25 or Profession == 223 or Profession == 224 or Profession == 225 or Profession == 635 or Profession == 675 then
    queen = Num_queen * 0.05
  end
  local Danatos = 0
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  if srcUser:HasBuffID(55960) then
    Danatos = math.floor(((Def2 - Vit2) * (1 + DefPer2) + Vit2 * (1 + VitPer2)) / 200) * 0.001
  end
  local MaxSp1 = srcUser:GetProperty("MaxSp")
  local Image = 0
  if srcUser:HasBuffID(56600) then
    Image = math.floor(MaxSp1 / 1000) * 0.001
  end
  local Ball = 0
  local Num_ball = targetUser:GetBuffLayer(210011)
  local skill_ball = 0
  local RaidType = srcUser:GetRaidType()
  if RaidType == 32 then
    if srcUser:HasBuffID(107340) then
      skill_ball = 0.07
    elseif srcUser:HasBuffID(107341) then
      skill_ball = 0.14
    elseif srcUser:HasBuffID(107342) then
      skill_ball = 0.21
    elseif srcUser:HasBuffID(107343) then
      skill_ball = 0.28
    end
    if 0 < Num_ball and srcUser:HasBuffID(210030) then
      Ball = Num_ball * Num_ball / 200 + skill_ball + 0.5
    elseif 0 < Num_ball then
      Ball = Num_ball * Num_ball / 200 + skill_ball
    end
  end
  if RaidType == 44 then
    if srcUser:HasBuffID(107340) and targetUser:HasBuffID(210200) then
      Ball = 0.04
    elseif srcUser:HasBuffID(107341) and targetUser:HasBuffID(210200) then
      Ball = 0.08
    elseif srcUser:HasBuffID(107342) and targetUser:HasBuffID(210200) then
      Ball = 0.12
    elseif srcUser:HasBuffID(107343) and targetUser:HasBuffID(210200) then
      Ball = 0.16
    end
  end
  local kb = 0
  if srcUser:HasBuffID(124200) and targetUser:HasBuffID(124180) then
    local skilllv = srcUser:GetLernedSkillLevel(3024)
    kb = skilllv * 0.05
  end
  local gz = 0
  if srcUser:HasBuffID(129550) then
    local skilllv = srcUser:GetLernedSkillLevel(3709)
    local skilllv2 = srcUser:GetLernedSkillLevel(4409)
    local skilllv4 = srcUser:GetLernedSkillLevel(1741)
    local Hiding = targetUser:GetProperty("Hiding")
    local Hp = targetUser:GetProperty("Hp")
    local MaxHp = targetUser:GetProperty("MaxHp")
    local skilllv3 = srcUser:GetLernedSkillLevel(4426)
    local skilllv5 = srcUser:GetLernedSkillLevel(1742)
    if Hiding == 1 and Hp <= MaxHp * ((skilllv + skilllv2 + skilllv4) * 0.04 + 0.1) then
      gz = (skilllv + skilllv2 + skilllv4) * 0.04 + 0.1 + (skilllv3 + skilllv5) * 0.04
    end
  end
  local SunHate = 0
  if srcUser:HasBuffID(136250) then
    local skilllv = srcUser:GetLernedSkillLevel(2422)
    if srcUser:GetSunMark(targetUser) then
      local Value = srcUser:GetGemValue(193021)
      SunHate = skilllv * 0.05 + Value / 100000
    end
  end
  local Mvp_blood = 0
  if srcUser:HasBuffID(159750) then
    local Hp = srcUser:GetProperty("Hp")
    local MaxHp = srcUser:GetProperty("MaxHp")
    Mvp_blood = (MaxHp - Hp) / MaxHp * 5
  end
  local Final = 1 + Damage_Per + shenqi + Godness + Hide + Overlord + dragon + CardDie + tiger + kaimeila + atls + Ball + Whale + queen + kb + gz + sword + Dagger + testbuff + GreatNum + GreatbuffD + tail + Mineral + staff + Devilballs + Personalartifact + robot + Ignore
  Final = Final + SunHate + Mvp_blood + Danatos + Image + GunBlood + Transmission + Handtohand + InkSnake + Thunder + DemonLeader + CriFinalDamPer
  local huangjing = 0
  if srcUser:HasBuffID(180005) and targetUser.isRareElite then
    local jingying = srcUser:GetBuffLayer(180005)
    huangjing = jingying * 0.25
    Final = Final + huangjing
  end
  if srcUser:HasBuffID(161350) or srcUser:HasBuffID(33571) then
    Final = 0
  end
  local skillParams = Table_Skill[params.skillIDAndLevel]
  if srcUser:HasBuffID(174829) and CommonFun.RollType.Attack == skillParams.RollType and targetUser:GetNpcID() == 30064 then
    Final = 0
  end
  return Final
end

function CommonFun.calcMonsterFinalDam(srcUser, targetUser, params, logger)
  local A = 1
  local ratio = 1
  if targetUser:GetNpcID() == 10025 and srcUser:HasBuffID(34600) then
    ratio = 1.5
  end
  if targetUser:GetNpcID() == 10026 and srcUser:HasBuffID(34600) then
    ratio = 1.5
  end
  if targetUser:GetNpcID() == 10027 and srcUser:HasBuffID(34600) then
    ratio = 1.5
  end
  if targetUser:GetNpcID() == 10028 and srcUser:HasBuffID(34600) then
    ratio = 1.5
  end
  if targetUser:GetNpcID() == 10030 and srcUser:HasBuffID(34610) then
    ratio = 1.3
  end
  if targetUser:GetNpcID() == 10034 and srcUser:HasBuffID(34610) then
    ratio = 1.3
  end
  if targetUser:GetNpcID() == 10037 and srcUser:HasBuffID(34620) then
    ratio = 1.3
  end
  if targetUser:GetNpcID() == 10038 and srcUser:HasBuffID(34620) then
    ratio = 1.3
  end
  if targetUser:GetNpcID() == 10042 and srcUser:HasBuffID(34630) then
    ratio = 1.2
  end
  if targetUser:GetNpcID() == 10045 and srcUser:HasBuffID(34630) then
    ratio = 1.2
  end
  if targetUser:GetNpcID() == 10046 and srcUser:HasBuffID(34640) then
    ratio = 1.2
  end
  if targetUser:GetNpcID() == 10048 and srcUser:HasBuffID(34640) then
    ratio = 1.2
  end
  if targetUser:GetNpcID() == 10101 and srcUser:HasBuffID(34640) then
    ratio = 1.2
  end
  if targetUser:GetNpcID() == 10050 and srcUser:HasBuffID(34650) then
    ratio = 1.2
  end
  if targetUser:GetNpcID() == 10052 and srcUser:HasBuffID(34650) then
    ratio = 1.2
  end
  if targetUser:GetNpcID() == 10053 and srcUser:HasBuffID(34650) then
    ratio = 1.2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(43720) or srcUser:HasBuffID(43930)) then
    ratio = 2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(43730) or srcUser:HasBuffID(43940)) then
    ratio = 2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(43740) or srcUser:HasBuffID(43950)) then
    ratio = 2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(43750) or srcUser:HasBuffID(43960)) then
    ratio = 2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(43760) or srcUser:HasBuffID(43970)) then
    ratio = 2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(43770) or srcUser:HasBuffID(43980)) then
    ratio = 2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(43780) or srcUser:HasBuffID(43990)) then
    ratio = 2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(43790) or srcUser:HasBuffID(44000)) then
    ratio = 2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(43800) or srcUser:HasBuffID(44010)) then
    ratio = 2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(43810) or srcUser:HasBuffID(44020)) then
    ratio = 2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(43820) or srcUser:HasBuffID(44030)) then
    ratio = 2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(43830) or srcUser:HasBuffID(44040)) then
    ratio = 2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(43840) or srcUser:HasBuffID(44050)) then
    ratio = 2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(43850) or srcUser:HasBuffID(44060)) then
    ratio = 2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(45180) or srcUser:HasBuffID(45200)) then
    ratio = 2
  end
  if (targetUser:GetNpcID() == 10268 or targetUser:GetNpcID() == 10269) and (srcUser:HasBuffID(45190) or srcUser:HasBuffID(45210)) then
    ratio = 2
  end
  if targetUser:GetNpcID() == 10270 and srcUser:HasBuffID(43880) then
    ratio = 2
  end
  if targetUser:GetNpcID() == 10271 and srcUser:HasBuffID(43880) then
    ratio = 2
  end
  if targetUser:GetNpcID() == 10272 and srcUser:HasBuffID(43880) then
    ratio = 2
  end
  if targetUser:GetNpcID() == 10273 and srcUser:HasBuffID(43890) then
    ratio = 2
  end
  if targetUser:GetNpcID() == 10274 and srcUser:HasBuffID(43890) then
    ratio = 2
  end
  return A * ratio
end

function CommonFun.calcATMDam(srcUser, targetUser, params, logger)
  local A = 111111
  local base = 1
  if targetUser:GetNpcID() == 81000 and srcUser:HasBuffID(120350) then
    base = 2
  end
  if targetUser:GetNpcID() == 81001 and srcUser:HasBuffID(120360) then
    base = 2
  end
  if targetUser:GetNpcID() == 81002 and srcUser:HasBuffID(120370) then
    base = 2
  end
  if targetUser:GetNpcID() == 81003 and srcUser:HasBuffID(120380) then
    base = 2
  end
  if targetUser:GetNpcID() == 81004 and srcUser:HasBuffID(120390) then
    base = 2
  end
  if targetUser:GetNpcID() == 81005 and srcUser:HasBuffID(120400) then
    base = 2
  end
  return A * base
end

function CommonFun.calcBOSSFinalDam(srcUser, targetUser, params, logger)
  local A = 1
  if targetUser:GetNpcID() == 250300 and srcUser:HasBuffID(164081) then
    A = 0
  end
  if targetUser:GetNpcID() == 250310 and srcUser:HasBuffID(164071) then
    A = 0
  end
  if targetUser:GetNpcID() == 250330 and srcUser:HasBuffID(164081) then
    A = 0
  end
  if targetUser:GetNpcID() == 260300 and srcUser:HasBuffID(164081) then
    A = 0
  end
  if targetUser:GetNpcID() == 260310 and srcUser:HasBuffID(164071) then
    A = 0
  end
  if targetUser:GetNpcID() == 260330 and srcUser:HasBuffID(164081) then
    A = 0
  end
  if targetUser:GetNpcID() == 270300 and srcUser:HasBuffID(164081) then
    A = 0
  end
  if targetUser:GetNpcID() == 270310 and srcUser:HasBuffID(164071) then
    A = 0
  end
  if targetUser:GetNpcID() == 270330 and srcUser:HasBuffID(164081) then
    A = 0
  end
  return A
end

function CommonFun.DoCalcDamage(srcUser, targetUser, params, logger)
  local damage = 0
  local damageType
  local RealDamage = targetUser:GetProperty("RealDamage")
  if targetUser:HasBuffID(96050) and 1 <= RealDamage then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    if skillID == 359 then
      RealDamage = RealDamage - 1
    end
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local BaseLv = targetUser.BaseLv
  local BaseLv1 = srcUser.BaseLv
  local TransformID = srcUser:GetProperty("TransformID")
  local MRefine = srcUser:GetProperty("MRefine")
  local skillParams = Table_Skill[params.skillIDAndLevel]
  local damageParamList = skillParams.Damage
  for i = 1, #damageParamList do
    local damageParam = damageParamList[i]
    local func = CommonFun.CalcDamageFuncs[damageParam.type]
    if nil ~= func then
      local partDamage, partDamageType = func(srcUser, targetUser, params, damageParam, logger)
      local elementDam = CommonFun.DoCalcElementDam(srcUser, targetUser, params, damageParam)
      local stateDam = CommonFun.DoCalcStateEffectDam(srcUser, targetUser)
      local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
      if (targetUser:HasBuffID(116813) or targetUser:HasBuffID(116817) or targetUser:HasBuffID(186150) or targetUser:HasBuffID(156111) or targetUser:HasBuffID(135271) or targetUser:HasBuffID(116810) and targetUser.boss == false and targetUser.mini == false) and 0 < partDamage then
        local Numjianyu = srcUser:GetRunePoint(223021)
        local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
        local GemValue = srcUser:GetGemValue(21161)
        if skillID == 1915 or skillID == 1908 or skillID == 1941 then
          if 1 <= Numjianyu and targetUser:HasBuffID(116810) then
            partDamage = partDamage * Numjianyu * 0.2
          else
            partDamage = 0
            partDamageType = CommonFun.DamageType.WeaponBlock
          end
        elseif skillID == 1164 then
          if targetUser:HasBuffID(116810) and srcUser:HasBuffID(22000010) then
          elseif 0 < GemValue and srcAtkElement == 8 then
          elseif 0 < GemValue and srcAtkElement ~= 8 then
            partDamage = 0
          else
            partDamage = 0
            partDamageType = CommonFun.DamageType.WeaponBlock
          end
        elseif srcAtkElement ~= 8 then
          partDamage = 0
          partDamageType = CommonFun.DamageType.WeaponBlock
        end
      end
      if (srcAtkElement == 5 or srcAtkElement == 6 or srcAtkElement == 8) and targetUser:HasBuffID(154910) then
        partDamage = 0
      end
      if srcAtkElement == 3 and targetUser:HasBuffID(154920) then
        partDamage = 0
      end
      if srcAtkElement == 4 and (targetUser:HasBuffID(154920) or targetUser:HasBuffID(10570)) then
        partDamage = 0
      end
      if (srcAtkElement == 1 or srcAtkElement == 2) and targetUser:HasBuffID(154930) then
        partDamage = 0
      end
      if (srcAtkElement == 7 or srcAtkElement == 9) and targetUser:HasBuffID(154940) then
        partDamage = 0
      end
      if srcAtkElement == 10 and (targetUser:HasBuffID(154940) or targetUser:HasBuffID(10580)) then
        partDamage = 0
      end
      if srcAtkElement == 1 and targetUser:HasBuffID(49160) then
        partDamage = partDamage * 0.4
      end
      if srcAtkElement == 2 and targetUser:HasBuffID(49170) then
        partDamage = partDamage * 0.4
      end
      if srcAtkElement == 3 and targetUser:HasBuffID(49180) then
        partDamage = partDamage * 0.4
      end
      if srcAtkElement == 4 and targetUser:HasBuffID(49190) then
        partDamage = partDamage * 0.4
      end
      if srcAtkElement == 6 and targetUser:HasBuffID(49270) then
        partDamage = partDamage * 0.4
      end
      if srcAtkElement == 7 and targetUser:HasBuffID(49280) then
        partDamage = partDamage * 0.4
      end
      if srcAtkElement == 8 and targetUser:HasBuffID(49290) then
        partDamage = partDamage * 0.4
      end
      if srcAtkElement == 10 and targetUser:HasBuffID(49300) then
        partDamage = partDamage * 0.4
      end
      if srcAtkElement == 5 and targetUser:HasBuffID(49310) then
        partDamage = partDamage * 0.4
      end
      if (srcAtkElement == 3 or srcAtkElement == 4) and targetUser:HasBuffID(159570) then
        partDamage = partDamage * 0.8
      end
      if (srcAtkElement == 2 or srcAtkElement == 4) and targetUser:HasBuffID(159571) then
        partDamage = partDamage * 0.8
      end
      if (srcAtkElement == 1 or srcAtkElement == 2) and targetUser:HasBuffID(159572) then
        partDamage = partDamage * 0.8
      end
      if (srcAtkElement == 1 or srcAtkElement == 3) and targetUser:HasBuffID(159573) then
        partDamage = partDamage * 0.8
      end
      if srcAtkElement ~= 8 and targetUser:HasBuffID(159574) then
        partDamage = partDamage * 0.8
      end
      if srcAtkElement == 6 and targetUser:HasBuffID(159575) then
        partDamage = partDamage * 0.8
      end
      if srcUser:HasBuffID(178100) and targetUser:HasBuffID(177930) then
        local fuhua = targetUser:GetBuffLayer(177930)
        partDamage = partDamage * (1 + math.min(fuhua * 0.2, 0.6))
      end
      partDamage = partDamage * elementDam * stateDam
      damage = damage + partDamage
      if nil ~= partDamageType then
        damageType = partDamageType
      end
    else
      logger.error(string.format("CommonFun.CalcDamageFuncs[%s] is nil", tostring(damageParam.type)))
    end
  end
  damage = math.floor(damage)
  if 0 < damage and targetUser:GetNpcID() == 30043 then
    local damageParam = damageParamList[1]
    if damageParam ~= nil and damageParam.type ~= 8002 then
      return 1, CommonFun.DamageType.Normal
    end
  end
  if 0 < damage and (targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013) then
    local damageParam = damageParamList[1]
    if damageParam ~= nil and damageParam.type ~= 8020 and damageParam.type ~= 8021 then
      return 1, CommonFun.DamageType.Normal
    end
  end
  if 0 < damage and (targetUser:GetNpcID() == 56107 or targetUser:GetNpcID() == 56108 or targetUser:GetNpcID() == 56109) then
    local damageParam = damageParamList[1]
    if damageParam ~= nil and damageParam.type ~= 8010 and damageParam.type ~= 8011 then
      return 1, CommonFun.DamageType.Normal
    end
  end
  if targetUser:HasBuffID(155031) then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    if skillID == 79338 then
      return 0, CommonFun.DamageType.Miss
    end
  end
  if srcUser:GetNpcID() == 300102 or srcUser:GetNpcID() == 301300 or srcUser:GetNpcID() == 301301 or srcUser:GetNpcID() == 301302 or srcUser:GetNpcID() == 301303 then
    local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
    if skillID == 79342 then
      local targetid = targetUser:GetGuid()
      local distance = srcUser:GetDistance(targetid)
      if distance <= 7 then
        return 0, CommonFun.DamageType.None
      end
    end
  end
  if srcUser.boss and targetUser.boss == false then
    local mapid, maptype = srcUser:GetMapInfo()
    if maptype == 5 then
      return math.floor(damage * (1 + RealDamage)), damageType
    elseif srcUser:GetNpcID() == 291100 or srcUser:GetNpcID() == 291200 or srcUser:GetNpcID() == 291300 or srcUser:GetNpcID() == 292100 or srcUser:GetNpcID() == 292200 or srcUser:GetNpcID() == 292300 or srcUser:GetNpcID() == 293100 or srcUser:GetNpcID() == 293200 or srcUser:GetNpcID() == 293300 then
      return math.floor(damage * (1 + RealDamage)), damageType
    elseif srcUser:GetNpcID() == 294104 or srcUser:GetNpcID() == 294105 or srcUser:GetNpcID() == 294204 or srcUser:GetNpcID() == 294205 or srcUser:GetNpcID() == 294304 or srcUser:GetNpcID() == 294305 or srcUser:GetNpcID() == 295107 or srcUser:GetNpcID() == 295207 or srcUser:GetNpcID() == 295307 then
      return math.floor(damage * (1 + RealDamage)) + math.floor(MaxHp * math.random(1, 5) / 300) * (1 + (BaseLv1 - BaseLv) / 200), damageType
    elseif BaseLv <= BaseLv1 and 70 <= BaseLv1 then
      return math.floor(damage * (1 + RealDamage)) + math.floor(BaseLv1 * math.random(10, 25) + MRefine * 5 + MaxHp * math.random(1, 5) / 100) * (1 + (BaseLv1 - BaseLv) / 200), damageType
    else
      return math.floor(damage * (1 + RealDamage)) + math.floor(BaseLv1 * math.random(10, 25) + MRefine * 5 + MaxHp * math.random(1, 5) / 100) * (1 - (BaseLv - BaseLv1) / 200), damageType
    end
  end
  if targetUser.boss and srcUser:GetNpcID() == 0 and BaseLv >= BaseLv1 then
    return math.floor(damage * (1 + RealDamage)) * (1 - (BaseLv - BaseLv1) / 200), damageType
  end
  if TransformID ~= 0 then
    local AttrEffect = srcUser:GetProperty("AttrEffect2")
    local bits = CommonFun.getBits(AttrEffect)
    local temp = false
    if bits[CommonFun.AttrEffect2.BoliBianshen] == 1 or bits[CommonFun.AttrEffect2.GonghuiBianshen] == 1 then
      temp = true
    end
    if bits[CommonFun.AttrEffect2.BCatBianshen] == 1 and targetUser:GetNpcID() == 30043 then
      temp = true
    end
    if 240000 <= TransformID and TransformID <= 240050 then
      temp = true
    end
    if bits[CommonFun.AttrEffect2.UltraMan] == 1 and (targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013) then
      temp = true
    end
    if bits[CommonFun.AttrEffect2.UltraMan] == 1 and (targetUser:GetNpcID() == 56107 or targetUser:GetNpcID() == 56108 or targetUser:GetNpcID() == 56109) then
      temp = true
    end
    if TransformID == 62052 or TransformID == 62143 or TransformID == 62142 then
      temp = true
    end
    if TransformID == 56634 or TransformID == 56635 then
      temp = true
    end
    if TransformID == 455003 or TransformID == 455004 or TransformID == 455005 or TransformID == 280118 or TransformID == 280119 or TransformID == 280120 then
      temp = true
    end
    if 80089 <= TransformID and TransformID <= 80094 then
      temp = true
    end
    if temp == false then
      return 6
    end
  end
  local index = params.hitedIndex
  if 100 <= index and math.floor(params.skillIDAndLevel / 1000) == 144 then
    local Buff1 = srcUser:HasBuffID(45000130)
    local Num0 = srcUser:GetRunePoint(52001)
    local Num1 = srcUser:GetRunePoint(52040)
    local Num2 = srcUser:GetRunePoint(52041)
    local Num3 = srcUser:GetRunePoint(52042)
    local Num4 = srcUser:GetRunePoint(52003)
    local RuneDamage = (Num0 + Num1 + Num2 + Num3) * 0.1 + Num4 * 0.03
    local BuffRate = 0
    if Buff1 == true then
      BuffRate = RuneDamage
    end
    return damage * BuffRate, damageType
  end
  if damage < 0 then
    RealDamage = 0
  end
  if index ~= 1 and (math.floor(params.skillIDAndLevel / 1000) == 74 or math.floor(params.skillIDAndLevel / 1000) == 79 or math.floor(params.skillIDAndLevel / 1000) == 107 or math.floor(params.skillIDAndLevel / 1000) == 1902) then
    local Num1 = srcUser:GetRunePoint(22070)
    local Num2 = srcUser:GetRunePoint(22033)
    local Num3 = srcUser:GetRunePoint(22080)
    local Num4 = srcUser:GetRunePoint(223008)
    local Num5 = srcUser:GetRunePoint(223012)
    local RuneDamage = (Num1 + Num2 + Num4) * 0.02 + (Num3 + Num5) * 0.05
    return math.floor(damage * RuneDamage * (1 + RealDamage)), damageType
  end
  return math.floor(damage * (1 + RealDamage)), damageType
end

local share_temp_result = {}

function CommonFun.CalcShareDamage(srcUser, tUser, damage, damagetype)
  if Table_Buffer == nil then
    return damage, nil
  end
  local result
  local newdamage = damage
  local buffs = {
    70047011,
    115001,
    115002,
    116260,
    116261,
    116262,
    116263,
    116264,
    116265,
    116266,
    116267,
    116268,
    116269,
    181171,
    181173,
    181175
  }
  if buffs == nil or #buffs == 0 then
    return damage, nil
  end
  local findok = false
  local buffID, oneresult
  for i = 1, #buffs do
    buffID = buffs[i]
    local buff = Table_Buffer[buffID]
    if tUser:HasBuffID(buffID) and buff ~= nil and buff.BuffEffect ~= nil and buff.BuffEffect.shareper ~= nil then
      local shareTargetID = tUser:GetBuffFromID(buffID)
      if buff.BuffEffect.share_to_being == 1 then
        shareTargetID = tUser:GetHighHpBeingGUID()
      end
      if shareTargetID ~= 0 and (buff.BuffEffect.checkbuff == nil or CommonFunHelper.HasBuffID(shareTargetID, buff.BuffEffect.checkbuff) == true) and (buff.BuffEffect.range == nil or tUser:GetDistance(shareTargetID) <= buff.BuffEffect.range) then
        local perdam = buff.BuffEffect.shareper * damage
        local decPerdam = perdam
        local damtype = damagetype
        local Rune = CommonFunHelper.GetBuffLayer(shareTargetID, 41100060)
        local dunpai = 0
        if CommonFunHelper.HasBuffID(shareTargetID, 40490) == true then
          dunpai = 0.05
        end
        if CommonFunHelper.HasBuffID(shareTargetID, 90001803) == true then
          dunpai = 0.1
        end
        if CommonFunHelper.HasBuffID(shareTargetID, 43280) == true then
          dunpai = 0.1
        end
        if CommonFunHelper.HasBuffLayer(shareTargetID, 43280, EBUFFERLAYER_SHADOW) == true then
          local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
          if equipRingSD.id ~= 0 then
            dunpai = 0.1 * equipRingSD.quench_per / 100
          end
        end
        local huangjia = 0
        if CommonFunHelper.HasBuffID(shareTargetID, 91000400) == true then
          huangjia = 0.1
        end
        perdam = perdam * (1 - Rune * 0.08 - dunpai - huangjia)
        if buff.BuffEffect.autoblock == 1 then
          local bits3 = CommonFun.getBits(CommonFunHelper.GetProperty(shareTargetID, "AttrEffect2"))
          if bits3 ~= nil and bits3[CommonFun.AttrEffect2.AutoDef] == 1 then
            local skilllv_1 = 0
            if tUser.isServerCall then
              skilllv_1 = CommonFunHelper.GetLernedSkillLevel(shareTargetID, 356)
            else
              local sklvbuffeff = CommonFunHelper.GetBuffEffectByType(shareTargetID, "SkillLevel")
              if sklvbuffeff and sklvbuffeff.level then
                skilllv_1 = sklvbuffeff.level
              else
                skilllv_1 = 1
              end
            end
            local rate = skilllv_1 * 4 + 10
            if CommonFun.IsInRate(rate, srcUser:GetRandom()) then
              perdam = 0
              damtype = CommonFun.DamageType.AutoBlock
            end
          end
        end
        if buff.BuffEffect.overflow == 1 then
          local hp = CommonFunHelper.GetUserHP(shareTargetID)
          if perdam > hp then
            if decPerdam >= perdam then
              decPerdam = decPerdam - perdam + hp
            else
              decPerdam = hp
            end
            perdam = hp
          end
        end
        findok = true
        newdamage = newdamage - decPerdam
        oneresult = share_temp_result[shareTargetID]
        if oneresult == nil then
          local oneresult = {}
          oneresult.damage = perdam
          oneresult.type = damtype
          oneresult.charid = shareTargetID
          share_temp_result[shareTargetID] = oneresult
        else
          oneresult.damage = oneresult.damage + perdam
        end
      end
    end
  end
  if findok == true then
    result = {}
    for k, v in pairs(share_temp_result) do
      if v.damage ~= 0 or v.type == CommonFun.DamageType.AutoBlock then
        table.insert(result, v)
        share_temp_result[k] = nil
      end
    end
  end
  if 0 < damage and newdamage < 0 then
    newdamage = 0
  end
  if newdamage == 0 then
    damagetype = CommonFun.DamageType.None
  end
  return newdamage, result, damagetype
end

function CommonFun.CalcBeatBackRate(tUser, skillid)
  return 0
end

function CommonFun.isInArray(arr, value)
  for i = 1, #arr do
    if arr[i] == value then
      return true
    end
  end
  return false
end

function CommonFun.checkAttrFunctionMiss(targetUser, srcUser)
  if targetUser == nil or srcUser == nil then
    return false
  end
  if targetUser.isBossFromBranch then
    return false
  end
  local mapid, maptype = srcUser:GetMapInfo()
  if maptype == 2 or maptype == 3 or maptype == 4 then
    return false
  end
  if targetUser.field or targetUser.star or targetUser.boss or targetUser.mini then
    local AttrFunction = srcUser:GetProperty("AttrFunction")
    local bitfunc = CommonFun.getBits(AttrFunction)
    if bitfunc[CommonFun.AttrFunction.FieldStarBossAttackForbid] == 1 then
      return true
    end
  end
  if targetUser.star or targetUser.boss or targetUser.mini then
    local AttrFunction = srcUser:GetProperty("AttrFunction")
    local bitfunc = CommonFun.getBits(AttrFunction)
    if bitfunc[CommonFun.AttrFunction.StarBossAttackForbid] == 1 then
      return true
    end
  end
  if targetUser.serverBossType == 1 then
    local AttrFunction = srcUser:GetProperty("AttrFunction")
    local bitfunc = CommonFun.getBits(AttrFunction)
    if bitfunc[CommonFun.AttrFunction.MvpLimit] == 1 then
      return true
    end
  end
  if targetUser.serverBossType == 2 then
    local AttrFunction = srcUser:GetProperty("AttrFunction")
    local bitfunc = CommonFun.getBits(AttrFunction)
    if bitfunc[CommonFun.AttrFunction.MiniLimit] == 1 then
      return true
    end
  end
  return false
end

function CommonFun.getNpcMasterUser(srcUser)
  if srcUser == nil or srcUser:GetNpcID() == 0 then
    return nil
  end
  return srcUser:GetMasterUser()
end

function CommonFun.calcDamage_17(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local Num1 = srcUser:GetRunePoint(11022)
  local Num2 = srcUser:GetRunePoint(11023)
  local Num3 = srcUser:GetRunePoint(11024)
  local Num4 = srcUser:GetRunePoint(12004)
  local Num5 = srcUser:GetRunePoint(12011)
  local RuneDamage = (Num1 + Num2 + Num3 + Num4 + Num5) * 0.03
  local AtkPer1 = srcUser:GetProperty("AtkPer")
  local AtkPer = AtkPer1 + RuneDamage
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Agi = srcUser:GetProperty("Agi")
  local WeaponType = srcUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local skilllv_2 = srcUser:GetLernedSkillLevel(damageParam.skill2_id)
  local Refine = srcUser:GetProperty("Refine")
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  local Weapon = srcUser:GetEquipedID(7)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local SkillRealDam = 0
  if skilllv_1 <= 5 then
    SkillRealDam = skilllv_1 * 20
  else
    SkillRealDam = 100 + math.floor(Agi / 5) * ((skilllv_1 - 5) * 0.5 + 0.5)
  end
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) + SkillRealDam - Vit2 * (1 + VitPer2)
  if CommonFun.IsInRate(skilllv_2 * 5, srcUser:GetRandom()) then
    return A * 2, CommonFun.DamageType.ErLianJi
  end
  if bits[CommonFun.StateEffect.Dizzy] == 1 and (Weapon == 40322 or Weapon == 140322) then
    return A * 1.5
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_18(srcUser, targetUser, params, damageParam, logger)
  local Str1 = srcUser:GetProperty("Str")
  local Num1 = srcUser:GetRunePoint(62080)
  local RuneDamage = Num1 * 0.01 + 1
  local Str = Str1 * RuneDamage
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 5 * Str
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local WeaponType = srcUser:GetEquipedWeaponType()
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str1 * 2 + math.floor(Str1 * Str1 / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local BaseAtk1 = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk1) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local skilllv_1 = srcUser:GetLernedSkillLevel(179)
  if WeaponType == 250 and CommonFun.IsInRate(skilllv_1 * 5, srcUser:GetRandom()) then
    return A * 2, CommonFun.DamageType.ErLianJi
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_19(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local Num1 = srcUser:GetRunePoint(11022)
  local Num2 = srcUser:GetRunePoint(11023)
  local Num3 = srcUser:GetRunePoint(11024)
  local Num4 = srcUser:GetRunePoint(12004)
  local Num5 = srcUser:GetRunePoint(12011)
  local RuneDamage = (Num1 + Num2 + Num3 + Num4 + Num5) * 0.03
  local AtkPer1 = srcUser:GetProperty("AtkPer")
  local AtkPer = AtkPer1 + RuneDamage
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 5 * Str
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Agi = srcUser:GetProperty("Agi")
  local WeaponType = srcUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local skilllv_2 = srcUser:GetLernedSkillLevel(damageParam.skill2_id)
  local Refine = srcUser:GetProperty("Refine")
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  local Weapon = srcUser:GetEquipedID(7)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local SkillRealDam = 0
  if skilllv_1 <= 5 then
    SkillRealDam = skilllv_1 * 20
  elseif 5 < skilllv_1 and skilllv_1 <= 10 then
    SkillRealDam = 100 + math.floor(Agi / 5) * ((skilllv_1 - 5) * 0.5 + 0.5)
  else
    SkillRealDam = 100 + (skilllv_1 - 10) * 20 + math.floor(Agi / 5) * 3 + Luk * 2
  end
  local AtkSpdAdd = 0
  local skilllv_3 = srcUser:GetLernedSkillLevel(22)
  if srcUser:HasBuffID(80082) and 10 < skilllv_3 then
    AtkSpdAdd = (skilllv_3 - 10) * 120
  end
  local skilllv_mfzr = srcUser:GetLernedSkillLevel(3002)
  local Sp = srcUser:GetProperty("Sp")
  local Opening = srcUser:GetSkillOptByOption(17)
  local MagicAtk = 0
  if 0 < skilllv_mfzr and Opening == 0 then
    MagicAtk = Sp * skilllv_mfzr * 0.2
  end
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk + AtkSpdAdd + NormalAtk - BaseAtk + MagicAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local HolyEquip = 1
  if Weapon == 40319 or Weapon == 140319 then
    HolyEquip = 1 + 0.05 * RefineLv
  end
  if Weapon == 40360 or Weapon == 140360 then
    HolyEquip = 1 + 0.05 * RefineLv
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine + SkillRealDam) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * HolyEquip
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 5204 then
    local skilllv_sishi = srcUser:GetLernedSkillLevel(5200)
    A = A * (1 + skilllv_sishi * 0.05)
    local Cri = srcUser:GetProperty("Cri")
    local CriRes2 = targetUser:GetProperty("CriRes")
    local CriDamPer = srcUser:GetProperty("CriDamPer")
    local CriDefPer2 = targetUser:GetProperty("CriDefPer")
    local Rate = Cri - CriRes2
    if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
      A = ((AtkFinal * (1 - DamReduc2) + Refine + SkillRealDam) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * HolyEquip * (1 + skilllv_sishi * 0.05)
      return A * (1.5 + CriDamPer - CriDefPer2), CommonFun.DamageType.Crit
    end
  end
  if WeaponType == 250 and CommonFun.IsInRate(skilllv_2 * 5, srcUser:GetRandom()) then
    return A * 2, CommonFun.DamageType.ErLianJi
  end
  if bits[CommonFun.StateEffect.Dizzy] == 1 and (Weapon == 40322 or Weapon == 140322) then
    return A * 1.5
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_20(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 380 or skillID == 383 or skillID == 384 then
    AtkPer = 0
  end
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_21(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local skilllv_1 = srcUser:GetLernedSkillLevel(127)
  local atk_add = 0
  if 10 < skilllv_1 and (skillID == 300 or skillID == 113) then
    atk_add = Dex * ((skilllv_1 - 10) * 0.5)
  end
  local NormalAtk = 0
  if skillID == 300 or skillID == 113 or skillID == 252 then
    local NormalAtkAttr = srcUser:GetProperty("NormalAtk")
    NormalAtk = NormalAtkAttr + 3 * Dex
  end
  local SpAtk = 0
  if srcUser:HasBuffID(131096) and (skillID == 300 or skillID == 113 or skillID == 252) then
    local Sp = srcUser:GetProperty("Sp")
    SpAtk = Sp
  end
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = (((Atk - BaseAtk + NormalAtk + atk_add) * (1 + AtkPer) + SpAtk) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local targetid = targetUser:GetGuid()
  local distance = srcUser:GetDistance(targetid)
  local skilllv_1 = srcUser:GetLernedSkillLevel(133)
  local DisDam = 1
  if 10 < skilllv_1 then
    DisDam = 1 + distance / 7.5 * (skilllv_1 - 10) * 0.1
    if srcUser:HasBuffID(131080) then
      DisDam = 1 + (skilllv_1 - 10) * 0.1
    end
    DisDam = math.min(DisDam, 2)
  end
  local profressionID = srcUser:GetProfressionID()
  if srcUser:HasBuffID(56712) and (profressionID == 42 or profressionID == 43 or profressionID == 44 or profressionID == 45) then
    DisDam = DisDam + distance / 7.5 * 0.1
  end
  local Injured = 1
  if bits[CommonFun.AttrEffect.NormalSkillDam] == 1 then
    Injured = 1.3
  end
  local bafeng = 1
  local fromid = targetUser:GetBuffFromID(1007000)
  local guid = srcUser:GetGuid()
  local skilllv_1 = srcUser:GetLernedSkillLevel(5700)
  if fromid == guid then
    bafeng = 1 + skilllv_1 * 0.03
  end
  if skillID == 5304 then
    local skilllv_diyu = srcUser:GetLernedSkillLevel(5300)
    damChangePer = skilllv_diyu * 0.9 + 3.6
  end
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if skillID == 300 or skillID == 113 or skillID == 252 then
    local guid = srcUser:GetGuid()
    local Debuff_Layer_1 = targetUser:GetBuffLayerByIDAndFromID(96082, guid)
    local Debuff_Layer_2 = targetUser:GetBuffLayerByIDAndFromID(96083, guid)
    local sw_dam = math.max(Debuff_Layer_1, Debuff_Layer_2) * 0.06 + 1
    A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * DisDam * Injured * sw_dam * bafeng
  end
  if skillID == 404 then
    local GemValue = srcUser:GetGemValue(41131)
    local skilllv_3 = srcUser:GetLernedSkillLevel(5703)
    if skilllv_3 == 0 then
      bafeng = 1
      DisDam = 1
      Injured = 1
    end
    A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) * (1 + GemValue / 100000) - Vit2 * (1 + VitPer2)) * bafeng * (1 + skilllv_3 * 0.1) * DisDam * Injured
    local CriDamPer = srcUser:GetProperty("CriDamPer")
    local CriDefPer2 = targetUser:GetProperty("CriDefPer")
    local GemRate = srcUser:GetGemValue(41132)
    local Rate = GemRate / 1000
    if srcUser:HasBuffID(90004254) and srcUser:HasBuffID(131080) then
      Rate = Rate + 30
    end
    if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
      A = (AtkFinal * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) * (1 + GemValue / 100000) - Vit2 * (1 + VitPer2)
      return A * (1.5 + CriDamPer - CriDefPer2), CommonFun.DamageType.Crit
    end
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_22(srcUser, targetUser, params, damageParam, logger)
  local Dex = srcUser:GetProperty("Dex")
  local Int = srcUser:GetProperty("Int")
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local skilllv_2 = srcUser:GetLernedSkillLevel(damageParam.skill2_id)
  local count = params.hitedCount
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local damChangePer2 = damageParam.damChangePer2
  local damChangePer3 = damageParam.damChangePer3
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local skilllv_1_value1 = 0
  local skilllv_1_value2 = 0
  if skilllv_1 <= 0 then
    skilllv_1_value1 = 0
  else
    skilllv_1_value1 = skilllv_1 * damChangePer + damChangePer1
  end
  if skilllv_1 <= 0 then
    skilllv_1_value2 = 1
  elseif 0 < skilllv_1 and skilllv_1 <= 10 then
    skilllv_1_value2 = skilllv_1 * 0.5 + 0.5
  elseif 10 < skilllv_1 then
    skilllv_1_value2 = 5.5
  end
  if count <= 1 then
    count = 1
  end
  local Num1 = srcUser:GetRunePoint(42006)
  local Num2 = srcUser:GetRunePoint(42007)
  local Num3 = srcUser:GetRunePoint(42008)
  local Num4 = srcUser:GetRunePoint(42009)
  local Num5 = srcUser:GetRunePoint(42010)
  local RuneDamage = Num1 * 0.05 + Num2 * 0.1 + Num3 * 0.1 + Num4 * 0.05 + Num5 * 0.05 + 1
  local XuShouShuDam = skilllv_2 * damChangePer2 * RuneDamage
  local Refine = srcUser:GetProperty("Refine")
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Num6 = srcUser:GetRunePoint(42011)
  local Num7 = srcUser:GetRunePoint(42012)
  local RuneDamage2 = Num6 * Refine
  local RuneDamage3 = Num7 * RefineLv * 0.01 + 1
  local Num8 = srcUser:GetRunePoint(42013)
  local Num9 = srcUser:GetRunePoint(42014)
  local Num10 = srcUser:GetRunePoint(42015)
  local GemValue = srcUser:GetGemValue(41072)
  local RuneRate = Num8 * 10 + Num9 * 10 + Num10 * 30 + GemValue / 1000
  local RuneDamage4 = 1
  if CommonFun.IsInRate(RuneRate, srcUser:GetRandom()) then
    RuneDamage4 = 2
  end
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits3 = CommonFun.getBits(StateEffect)
  local Num11 = srcUser:GetRunePoint(42080)
  local RuneDamage5 = 1
  if bits3[CommonFun.StateEffect.Dizzy] == 1 then
    RuneDamage5 = 1 + Num11 * 0.02
  end
  local taozhuang = 1
  if srcUser:HasBuffID(90001463) and srcUser:HasBuffID(90001473) then
    taozhuang = 1.15
  end
  if srcUser:HasBuffID(41800) and srcUser:HasBuffID(90001473) then
    taozhuang = 1.15
  end
  if srcUser:HasBuffID(90001463) and srcUser:HasBuffID(42500) then
    taozhuang = 1.15
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id ~= 0 and (srcUser:HasBuffID(90001463) or srcUser:HasBuffID(41800)) and srcUser:HasBuffLayer(42500, EBUFFERLAYER_SHADOW) then
    taozhuang = 1.15
  end
  if srcUser:HasBuffID(91001030) then
    taozhuang = 1.15
  end
  local IntSD = srcUser:GetProperty("Int")
  if 180 <= IntSD and srcUser:HasBuffID(90001477) then
    taozhuang = taozhuang + 0.15
  end
  if 180 <= IntSD and srcUser:HasBuffID(42500) then
    taozhuang = taozhuang + 0.15
  end
  local RefineLv2 = srcUser:GetEquipedRefineLv(2)
  if 15 <= RefineLv2 and srcUser:HasBuffID(42500) then
    taozhuang = taozhuang + 0.3
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id ~= 0 then
    if 180 <= IntSD and srcUser:HasBuffLayer(42500, EBUFFERLAYER_SHADOW) then
      taozhuang = taozhuang + 0.15
    end
    if 15 <= equipRingSD.refinelv and srcUser:HasBuffLayer(42500, EBUFFERLAYER_SHADOW) then
      taozhuang = taozhuang + 0.3
    end
  end
  if srcUser:HasBuffID(41800) then
    taozhuang = taozhuang + 0.2
  end
  if srcUser:HasBuffID(90004264) then
    taozhuang = taozhuang + 0.5
  end
  local FifthT = 0
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  if srcUser:HasBuffID(90004264) then
    FifthT = MAtk * (1 + MAtkPer)
  end
  local A = (((skilllv_1_value1 + XuShouShuDam + math.floor(Int / 2) * 2 + math.floor(Dex / 10) * 2) * skilllv_1_value2 * damChangePer3 * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 + RuneDamage2) * RuneDamage3 * RuneDamage4 * RuneDamage5 + (Atk * (1 + AtkPer) + Refine + FifthT) * taozhuang * skilllv_1 * 0.05) * (1 - RefineDamReduc)
  local Weapon = srcUser:GetEquipedID(7)
  local B = 1
  if Weapon == 41233 or Weapon == 141233 or Weapon == 41256 or Weapon == 141256 then
    B = 2
  end
  if srcUser:HasBuffID(90001465) then
    B = B + 0.3
  end
  if srcUser:HasBuffID(41800) then
    B = B + 0.3
  end
  if bits[CommonFun.AttrEffect.XuShouDam] == 1 and skilllv_2 == 10 and bits2[CommonFun.AttrEffect.Shandiyouxiazhuang] == 1 then
    A = (((skilllv_1_value1 + XuShouShuDam * 1.2 + math.floor(Int / 2) * 2 * 4 + math.floor(Dex / 10) * 2) * skilllv_1_value2 * damChangePer3 * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 + RuneDamage2) * RuneDamage3 * RuneDamage4 * RuneDamage5 + (Atk * (1 + AtkPer) + Refine + FifthT) * taozhuang * skilllv_1 * 0.05) * (1 - RefineDamReduc)
  elseif bits[CommonFun.AttrEffect.XuShouDam] == 1 and skilllv_2 == 10 then
    A = (((skilllv_1_value1 + XuShouShuDam * 1.2 + math.floor(Int / 2) * 2 + math.floor(Dex / 10) * 2) * skilllv_1_value2 * damChangePer3 * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 + RuneDamage2) * RuneDamage3 * RuneDamage4 * RuneDamage5 + (Atk * (1 + AtkPer) + Refine + FifthT) * taozhuang * skilllv_1 * 0.05) * (1 - RefineDamReduc)
  elseif bits2[CommonFun.AttrEffect.Shandiyouxiazhuang] == 1 then
    A = ((((skilllv_1_value1 + XuShouShuDam) * B + math.floor(Int / 2) * 2 * 4 + math.floor(Dex / 10) * 2) * skilllv_1_value2 * damChangePer3 * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 + RuneDamage2) * RuneDamage3 * RuneDamage4 * RuneDamage5 + (Atk * (1 + AtkPer) + Refine + FifthT) * taozhuang * skilllv_1 * 0.05) * (1 - RefineDamReduc)
  elseif skilllv_2 == 10 then
    A = ((((skilllv_1_value1 + XuShouShuDam) * B + math.floor(Int / 2) * 2 + math.floor(Dex / 10) * 2) * skilllv_1_value2 * damChangePer3 * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 + RuneDamage2) * RuneDamage3 * RuneDamage4 * RuneDamage5 + (Atk * (1 + AtkPer) + Refine + FifthT) * taozhuang * skilllv_1 * 0.05) * (1 - RefineDamReduc)
  end
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1253 or skillID == 1255 or skillID == 1257 then
    local skilllv_wolf = srcUser:GetLernedSkillLevel(1242)
    local Num_wolf = srcUser:GetRunePoint(44020)
    local Num_all = srcUser:GetRunePoint(44030)
    local skilllv_1 = srcUser:GetLernedSkillLevel(128)
    local skilllv_2 = srcUser:GetLernedSkillLevel(135)
    local GemValue = srcUser:GetGemValue(41001)
    local GemDam = 1 + GemValue / 100000
    A = A * (1 + skilllv_wolf * 0.015) * (1 + Num_wolf * 0.04) * (1 + (skilllv_1 + skilllv_2) * Num_all * 0.005) * GemDam
  end
  local skilllv_hezou = srcUser:GetBuffLevel(118830)
  if srcUser:HasBuffID(1005581) then
    skilllv_hezou = skilllv_hezou * 2
  end
  A = A * (skilllv_hezou * 0.06 + 1)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_23(srcUser, targetUser, params, damageParam, logger)
  local BaseLv = srcUser.BaseLv
  local Dex = srcUser:GetProperty("Dex")
  local Int = srcUser:GetProperty("Int")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local skilllv_2 = srcUser:GetLernedSkillLevel(damageParam.skill2_id)
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local damChangePer = damageParam.damChangePer
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local BaseLvDamage = 0
  if skillID == 202 then
    local IBaseLv = srcUser.BaseLv
    if srcUser:HasBuffID(42130) then
      BaseLvDamage = IBaseLv * 15
    end
  end
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits2 = CommonFun.getBits(StateEffect)
  local Num6 = srcUser:GetRunePoint(42070)
  local RuneDamage2 = 1
  if bits2[CommonFun.StateEffect.Sleep] == 1 then
    RuneDamage2 = 1 + Num6 * 0.05
  end
  local suit = 1
  if (srcUser:HasBuffID(90000773) or srcUser:HasBuffID(42480) or srcUser:HasBuffLayer(42480, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(90001005) or srcUser:HasBuffID(43000) or srcUser:HasBuffLayer(43000, EBUFFERLAYER_SHADOW)) then
    suit = 1.1
  end
  local RefineLv2 = srcUser:GetEquipedRefineLv(2)
  if srcUser:HasBuffID(90000777) then
    if 10 <= RefineLv2 and RefineLv2 < 15 then
      suit = suit + (RefineLv2 - 10) * 0.02
    elseif 15 <= RefineLv2 then
      suit = suit + (RefineLv2 - 10) * 0.02 + 0.05
    end
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRing.id == 42092 or equipRing.id == 142092 then
    suit = suit + equipRing.refinelv * 0.02
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id == 42092 or equipRingSD.id == 142092 then
    suit = suit + equipRingSD.refinelv * 0.02 * equipRingSD.quench_per / 100
  end
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(90000999) then
    if 10 <= RefineLv7 and RefineLv7 < 15 then
      suit = suit + 0.08
    elseif 15 <= RefineLv7 then
      suit = suit + 0.08 + 0.12
    end
  end
  if srcUser:HasBuffID(41812) then
    if 5 <= RefineLv7 and RefineLv7 < 10 then
      suit = suit + 0.05
    elseif 10 <= RefineLv7 and RefineLv7 < 15 then
      suit = suit + 0.05 + 0.1
    elseif 15 <= RefineLv7 then
      suit = suit + 0.05 + 0.1 + 0.15
    end
  end
  if srcUser:HasBuffID(90004274) then
    suit = suit + 0.1
  end
  local RefineLv5 = srcUser:GetEquipedRefineLv(5)
  local RefineLv6 = srcUser:GetEquipedRefineLv(6)
  local Ring1 = srcUser:GetEquipedID(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  if srcUser:HasBuffID(90001009) and (Ring1 == 44006 or Ring1 == 144006) and 10 <= order1 then
    a = RefineLv5 * 0.01
  end
  if srcUser:HasBuffID(90001009) and (Ring2 == 44006 or Ring2 == 144006) and 10 <= order2 then
    b = RefineLv6 * 0.01
  end
  local equipRing5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRing5.id == 44050 or equipRing5.id == 144050 then
    a = equipRing5.refinelv * 0.02
  end
  local equipRingSD5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRingSD5.id == 44050 or equipRingSD5.id == 144050 then
    a = equipRingSD5.refinelv * 0.02 * equipRingSD5.quench_per / 100
  end
  local equipRing6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRing6.id == 44050 or equipRing6.id == 144050 then
    b = equipRing6.refinelv * 0.02
  end
  local equipRingSD6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRingSD6.id == 44050 or equipRingSD6.id == 144050 then
    b = equipRingSD6.refinelv * 0.02 * equipRingSD6.quench_per / 100
  end
  suit = suit + a + b
  local Angel = 1
  if srcUser:HasBuffID(90001014) then
    local RefineLv = srcUser:GetEquipedRefineLv(7)
    suit = suit + 0.02 * RefineLv
  end
  local Num7 = srcUser:GetRunePoint(42060)
  local RuneDamage3 = 1 + Num7 * 0.03 * skilllv_1
  local skilllv_trap = srcUser:GetLernedSkillLevel(1248)
  local GemValue = srcUser:GetGemValue(41011)
  local trap = 1 + skilllv_trap * 0.02 + GemValue / 100000
  local GemValueyj = srcUser:GetGemValue(41101)
  local Leiqu = 1
  if srcUser:GetFromSkill() == 815001 then
    local GemValuelq = srcUser:GetGemValue(41122)
    Leiqu = 1 + GemValuelq / 100000
  end
  local RangeDam = srcUser:GetProperty("RangeDam")
  local A = (Dex * (3 + BaseLv / 100) * (1 + Int / 35) * damChangePer + (skilllv_1 * 20 + GemValueyj / 1000) * RuneDamage3) * DefReduc * (1 + MDamIncrease) * (1 - MDamReduc2) * (1 - RefineMDamReduc) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 * raceparam * bossparam * RuneDamage2 * suit * trap * Leiqu * (1 + RangeDam) + BaseLvDamage
  if A <= 1 then
    return 1
  end
  local Num1 = srcUser:GetRunePoint(42031)
  local Num2 = srcUser:GetRunePoint(42032)
  local Num3 = srcUser:GetRunePoint(42033)
  local Num4 = srcUser:GetRunePoint(42034)
  local Num5 = srcUser:GetRunePoint(42035)
  local RuneDamage = Num1 * 0.1 + Num2 * 0.05 + Num3 * 0.05 + Num4 * 0.1 + Num5 * 0.05 + 1
  if bits[CommonFun.AttrEffect.TriggerTrapMark] == 1 then
    return A * (1 + skilllv_2 * 0.1) * RuneDamage
  end
  return A
end

function CommonFun.calcDamage_24(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local CriDamPer = srcUser:GetProperty("CriDamPer")
  local CriDefPer2 = targetUser:GetProperty("CriDefPer")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + Luk / 10) * (1 + CriDamPer - CriDefPer2) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_25(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 5 * Str
  local Num1 = srcUser:GetRunePoint(70010)
  local RuneDamage = Num1 * 0.03
  local AtkPer1 = srcUser:GetProperty("AtkPer")
  local AtkPer = AtkPer1 + RuneDamage
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local HolyEquip = 1
  if Weapon == 40319 or Weapon == 140319 then
    HolyEquip = 1 + 0.05 * RefineLv
  end
  if Weapon == 40360 or Weapon == 140360 then
    HolyEquip = 1 + 0.05 * RefineLv
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * HolyEquip
  if srcUser:HasBuffID(115090) or srcUser:HasBuffID(115091) then
    elementparam = 5
    local Hp = srcUser:GetProperty("Hp")
    local MaxHp = srcUser:GetProperty("MaxHp")
    local skilllv_1 = srcUser:GetLernedSkillLevel(361)
    local Hp_ratio = 1
    if srcUser:HasBuffID(22001140) then
      Hp_ratio = 1 + (MaxHp - Hp) / (3 * MaxHp)
    end
    local mapid, maptype = srcUser:GetMapInfo()
    local pvpRatio = 1
    if maptype == 2 or maptype == 4 then
      pvpRatio = 0.25
    end
    local dam = 0
    if srcUser:HasBuffID(90004914) then
      DefReduc = 1
    end
    if 5 < skilllv_1 then
      dam = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (skilllv_1 - 5) * 0.3 * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2)) * HolyEquip
    end
    if Hp > MaxHp * 0.09 then
      local DamGem = srcUser:GetGemValue(72161)
      local Fifth = 1
      if srcUser:HasBuffID(90004914) then
        Fifth = 1.15
      end
      A = (MaxHp * 0.09 * (1 + math.max((skilllv_1 - 1) * 0.1, 0.4)) * pvpRatio * (1 - RefineDamReduc) + dam) * (1 + DamGem / 100000) * Fifth * Hp_ratio
    end
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(179)
  local WeaponType = srcUser:GetEquipedWeaponType()
  if WeaponType == 250 and CommonFun.IsInRate(skilllv_1 * 5, srcUser:GetRandom()) then
    return A * 2, CommonFun.DamageType.ErLianJi
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_26(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_27(srcUser, targetUser, params, damageParam, logger)
  local Str1 = srcUser:GetProperty("Str")
  local Num1 = srcUser:GetRunePoint(120010)
  local RuneDamage = Num1 * 0.05 + 1
  local Str = Str1 * RuneDamage
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local Int = srcUser:GetProperty("Int")
  if srcUser:HasBuffID(100510) then
    Atk = Atk + 5 * Int
  end
  local AtkPer1 = srcUser:GetProperty("AtkPer")
  local Num2 = srcUser:GetRunePoint(120020)
  local RuneDamage2 = Num2 * 0.03
  local AtkPer = AtkPer1 + RuneDamage2
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 5 * Str
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str1 * 2 + math.floor(Str1 * Str1 / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local BaseAtk1 = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk1) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local WeaponType = srcUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(179)
  if WeaponType == 250 and CommonFun.IsInRate(skilllv_1 * 5, srcUser:GetRandom()) then
    return A * 2, CommonFun.DamageType.ErLianJi
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_28(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Num2 = 1
  if srcUser:HasBuffID(90001513) then
    Num2 = 1.3
  end
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local Fifth = 1
  if skillID == 317 and srcUser:HasBuffID(90004584) then
    Fifth = Fifth + 0.15
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Num2 * Fifth
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_30(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local CardXR = 1
  local CardNum = srcUser:GetEquipCardNum(7, 23048)
  local CardNum2 = srcUser:GetEquipCardNum(7, 24664)
  CardNum = CardNum + CardNum2
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 84 then
    CardXR = CardNum * 0.25 + 1
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * CardXR
  if skillID == 1930 then
    local MDamSpike = srcUser:GetProperty("MDamSpike")
    MAtkFinal = (MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk
    A = (MAtkFinal * (1 + MDamSpike) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease)
  end
  if skillID == 1500 then
    local Num1 = srcUser:GetRunePoint(143026)
    A = A * (1 + Num1 * 0.1)
  end
  if skillID == 3209 then
    local skilllv_1 = srcUser:GetLernedSkillLevel(3226)
    local taozhuang1 = 1
    if srcUser:HasBuffID(91000470) or srcUser:HasBuffID(91000770) or srcUser:HasBuffID(91001490) or srcUser:HasBuffID(91001500) then
      taozhuang1 = 1.15
    end
    if srcUser:HasBuffID(90004514) then
      taozhuang1 = taozhuang1 + 0.15
    end
    local Ring1 = srcUser:GetEquipedID(7)
    local RefineLv = srcUser:GetEquipedRefineLv(7)
    if Ring1 == 63440 or Ring1 == 163440 then
      taozhuang1 = RefineLv * 0.01 + taozhuang1
    end
    local Num1 = srcUser:GetRunePoint(22160)
    local Num2 = srcUser:GetRunePoint(22161)
    local RuneDamage = (Num1 + Num2) * 0.1 + 1
    local GemKj = 0
    local GemSj = 0
    if srcUser:HasBuffID(126122) then
      GemSj = srcUser:GetGemValue(82151)
    end
    local GemDam = 1 + GemSj / 100000
    A = A * (1 + skilllv_1 * 0.06) * taozhuang1 * RuneDamage * GemDam
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_31(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Num1 = srcUser:GetRunePoint(22160)
  local Num2 = srcUser:GetRunePoint(22161)
  local RuneDamage = (Num1 + Num2) * 0.1 + 1
  local taozhuang1 = 1
  if srcUser:HasBuffID(91000470) or srcUser:HasBuffID(91000770) or srcUser:HasBuffID(91001490) or srcUser:HasBuffID(91001500) then
    taozhuang1 = 1.15
  end
  local Ring1 = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  if Ring1 == 63440 or Ring1 == 163440 then
    taozhuang1 = RefineLv * 0.01 + taozhuang1
  end
  if srcUser:HasBuffID(90004514) then
    taozhuang1 = taozhuang1 + 0.15
  end
  local BaseLvDamage = 0
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local CardXR = 1
  local CardNum = srcUser:GetEquipCardNum(7, 23048)
  local CardNum2 = srcUser:GetEquipCardNum(7, 24664)
  CardNum = CardNum + CardNum2
  if skillID == 107 then
    CardXR = CardNum * 0.25 + 1
    local IBaseLv = srcUser.BaseLv
    if srcUser:HasBuffID(42110) then
      BaseLvDamage = IBaseLv * 15
    end
    if srcUser:HasBuffID(42120) then
      BaseLvDamage = IBaseLv * 15
    end
  end
  local GemValue = srcUser:GetGemValue(82073)
  local GemDam = 1 + GemValue / 100000
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2) + damChangePer1) * RuneDamage * taozhuang1 * GemDam * CardXR + BaseLvDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_32(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local BaseLvDamage = 0
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 93 or skillID == 1483 then
    local IBaseLv = srcUser.BaseLv
    if srcUser:HasBuffID(42110) then
      BaseLvDamage = IBaseLv * 15
    end
  end
  if skillID == 1482 then
    local IBaseLv1 = srcUser.BaseLv
    if srcUser:HasBuffID(42110) then
      BaseLvDamage = IBaseLv1 * 15
    end
    local GemValue = srcUser:GetGemValue(143161)
    damChangePer = damChangePer * (1 + GemValue / 100000)
  end
  local CardXR = 1
  local CardNum = srcUser:GetEquipCardNum(7, 23048)
  local CardNum2 = srcUser:GetEquipCardNum(7, 24664)
  CardNum = CardNum + CardNum2
  if skillID == 82 then
    CardXR = CardNum * 0.25 + 1
  end
  if skillID == 1939 then
    local skilllv_mf = srcUser:GetLernedSkillLevel(1933)
    damChangePer = (skilllv_mf * 0.8 + 8.8) * 0.8
  end
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local AtkFinal = 0
  if (srcUser:HasBuffID(30031400) or srcUser:HasBuffID(30031401) or srcUser:HasBuffID(30031402) or srcUser:HasBuffID(30031403)) and (skillID == 81 or skillID == 82 or skillID == 801) then
    AtkFinal = Atk * (1 + AtkPer)
  end
  local A = (((MAtkFinal + AtkFinal) * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam) * CardXR + BaseLvDamage
  local Num1 = srcUser:GetRunePoint(143014)
  if skillID == 81 or skillID == 1482 or skillID == 1904 then
    if srcUser:HasBuffID(52170) and srcUser:HasBuffID(81000040) then
      A = A * 1.2
    end
    if srcUser:HasBuffID(53290) then
      A = A * 1.05
    end
    if 0 < Num1 then
      A = A * (Num1 * 0.07 + 1)
    end
    local GemValue1 = srcUser:GetGemValue(21073)
    local GemValue2 = srcUser:GetGemValue(143073)
    A = A * (1 + GemValue1 / 100000 + GemValue2 / 100000)
  end
  if skillID == 1160 then
    local GemValue = srcUser:GetGemValue(21053)
    A = A * (1 + GemValue / 100000)
  end
  if skillID == 82 then
    local GemValue = srcUser:GetGemValue(21062)
    A = A * (1 + GemValue / 100000)
  end
  if skillID == 93 then
    local GemValue = srcUser:GetGemValue(21092)
    A = A * (1 + GemValue / 100000)
  end
  if skillID == 3107 then
    local skilllv_kf = srcUser:GetLernedSkillLevel(3124)
    A = A * (1 + skilllv_kf * 0.05)
  end
  if (skillID == 3111 or skillID == 1933 or skillID == 1939) and (targetUser:HasBuffID(118140) or targetUser:HasBuffID(125140)) then
    local skilllv_slj = srcUser:GetLernedSkillLevel(3126)
    local skilllv_mofeng = srcUser:GetLernedSkillLevel(1946)
    A = A * (1 + skilllv_slj * 0.12 + skilllv_mofeng * 0.12)
  end
  if skillID == 3108 or skillID == 1931 then
    local GemValue = srcUser:GetGemValue(21141)
    A = A * (1 + GemValue / 100000)
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_33(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local Luk = srcUser:GetProperty("Luk")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local skilllv_1 = srcUser:GetLernedSkillLevel(235)
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local ElementRate = CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam)
  if srcAtkElement == 6 and targetDefElement == 7 then
    local GemValue = srcUser:GetGemValue(51022)
    ElementRate = ElementRate + GemValue / 100000
  end
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42110) then
    BaseLvDamage = IBaseLv * 20
  end
  local Weapon = srcUser:GetEquipedID(7)
  local B = 0
  if Weapon == 41521 or Weapon == 141521 or Weapon == 41568 or Weapon == 141568 then
    B = Luk * 50
  end
  local WeaponRefineLv = srcUser:GetEquipedRefineLv(7)
  if (srcUser:HasBuffID(90001413) or srcUser:HasBuffID(41980)) and 10 <= WeaponRefineLv then
    B = B * 2
  end
  local A = (((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer + B * MDefReduc * (1 - MDamReduc2) * (1 - RefineMDamReduc)) * (1 + MDamIncrease) * ElementRate * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2) + damChangePer1) * (1 + skilllv_1 * 0.1) + BaseLvDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_34(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer1 = srcUser:GetProperty("MAtkPer")
  local Num1 = srcUser:GetRunePoint(21007)
  local Num2 = srcUser:GetRunePoint(22001)
  local Num3 = srcUser:GetRunePoint(22002)
  local Num4 = srcUser:GetRunePoint(22005)
  local Num5 = srcUser:GetRunePoint(223003)
  local RuneDamage = (Num1 + Num2 + Num3 + Num4 + Num5) * 0.05
  local MAtkPer = MAtkPer1 + RuneDamage
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local DamageRatio = 1
  if srcUser:HasBuffID(80001450) then
    DamageRatio = 1.15
  end
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam) * DamageRatio
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_35(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local Num1 = srcUser:GetRunePoint(22006)
  local RuneRate = 0
  if 0 < Num1 then
    RuneRate = 8
  end
  local RuneDamage = Num1 * 0.1 + 1
  local Num2 = srcUser:GetRunePoint(22160)
  local Num3 = srcUser:GetRunePoint(22161)
  local RuneDamage1 = (Num2 + Num3) * 0.1 + 1
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42110) then
    BaseLvDamage = IBaseLv * 15
  end
  if srcUser:HasBuffID(42120) then
    BaseLvDamage = IBaseLv * 15
  end
  local taozhuang1 = 1
  if srcUser:HasBuffID(91000470) or srcUser:HasBuffID(91000770) or srcUser:HasBuffID(91001490) or srcUser:HasBuffID(91001500) then
    taozhuang1 = 1.15
  end
  if srcUser:HasBuffID(90004514) then
    taozhuang1 = taozhuang1 + 0.15
  end
  local Ring1 = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  if Ring1 == 63440 or Ring1 == 163440 then
    taozhuang1 = RefineLv * 0.01 + taozhuang1
  end
  local GemValue = srcUser:GetGemValue(82071)
  local GemDam = 1 + GemValue / 100000
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2) + damChangePer1) * RuneDamage1 * taozhuang1 * GemDam + BaseLvDamage
  if CommonFun.IsInRate(RuneRate, srcUser:GetRandom()) then
    return A * RuneDamage, CommonFun.DamageType.Crit
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_36(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 3 * Int
  local MAtkPer1 = srcUser:GetProperty("MAtkPer")
  local Num1 = srcUser:GetRunePoint(22017)
  local Num2 = srcUser:GetRunePoint(22022)
  local Num3 = srcUser:GetRunePoint(22023)
  local RuneDamage3 = (Num1 + Num2 + Num3) * 0.05
  local MAtkPer = MAtkPer1 + RuneDamage3
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local Num11 = srcUser:GetRunePoint(21005)
  local Num12 = srcUser:GetRunePoint(21008)
  local Num13 = srcUser:GetRunePoint(21009)
  local Num14 = srcUser:GetRunePoint(21011)
  local Num15 = srcUser:GetRunePoint(21017)
  local Num16 = srcUser:GetRunePoint(22011)
  local Num17 = srcUser:GetRunePoint(22026)
  local Num18 = srcUser:GetRunePoint(22029)
  local Num19 = srcUser:GetBuffLayer(90000952)
  local Num20 = srcUser:GetBuffLayer(90000953)
  local Num21 = srcUser:GetBuffLayer(90000954)
  local Num24 = 0
  local RefineLv2 = srcUser:GetEquipedRefineLv(2)
  if srcUser:HasBuffID(90000959) then
    Num24 = Num24 + RefineLv2 * 0.01
  end
  local Num26 = 0
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRing.id == 42126 or equipRing.id == 142126 then
    Num26 = Num26 + equipRing.refinelv * 0.01 + 0.1
  end
  if (equipRing.id == 42126 or equipRing.id == 142126) and equipRing.refinelv >= 15 then
    Num26 = Num26 + 0.05
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id == 42126 or equipRingSD.id == 142126 then
    Num26 = Num26 + (equipRingSD.refinelv * 0.01 + 0.1) * equipRingSD.quench_per / 100
  end
  if (equipRingSD.id == 42126 or equipRingSD.id == 142126) and equipRingSD.refinelv >= 15 then
    Num26 = Num26 + 0.05 * equipRingSD.quench_per / 100
  end
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(90004304) then
    Num26 = Num26 + 0.04 * RefineLv7
  end
  local EquipDamage = 0
  if srcUser:HasBuffID(90004304) then
    EquipDamage = EquipDamage + 0.1 * RefineLv7
  end
  local Num22 = srcUser:GetBuffLayer(90000942)
  local Num23 = srcUser:GetBuffLayer(90000944)
  local Num25 = 0
  local RefineLv4 = srcUser:GetEquipedRefineLv(4)
  if srcUser:HasBuffID(90000949) and 10 <= RefineLv4 then
    Num25 = 1
  end
  local Num27 = 0
  local equipRingshoes = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  if equipRingshoes.id == 43587 or equipRingshoes.id == 143587 then
    if equipRingshoes.refinelv < 5 then
      Num27 = Num27 + 10
    elseif equipRingshoes.refinelv >= 5 and equipRingshoes.refinelv < 10 then
      Num27 = Num27 + 10 + 5
    elseif equipRingshoes.refinelv >= 10 and equipRingshoes.refinelv < 15 then
      Num27 = Num27 + 10 + 5 + 5
    elseif equipRingshoes.refinelv >= 15 then
      Num27 = Num27 + 10 + 5 + 5 + 5
    end
  end
  local equipRingSDshoes = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  if equipRingSDshoes.id == 43587 or equipRingSDshoes.id == 143587 then
    if equipRingSDshoes.refinelv < 5 then
      Num27 = Num27 + 10 * equipRingSDshoes.quench_per / 100
    elseif equipRingSDshoes.refinelv >= 5 and equipRingSDshoes.refinelv < 10 then
      Num27 = Num27 + 15 * equipRingSDshoes.quench_per / 100
    elseif equipRingSDshoes.refinelv >= 10 and equipRingSDshoes.refinelv < 15 then
      Num27 = Num27 + 20 * equipRingSDshoes.quench_per / 100
    elseif equipRingSDshoes.refinelv >= 15 then
      Num27 = Num27 + 25 * equipRingSDshoes.quench_per / 100
    end
  end
  local RuneDamage = (Num11 + Num12 + Num13 + Num14 + Num15 + Num16 + Num17 + Num18) * 0.1 + 1 + 0.03 * Num19 + 0.03 * Num20 + 0.04 * Num21 + Num24 + Num26
  local RuneDamage1 = 0
  if 0 < Num11 + Num12 + Num13 + Num14 + Num15 + Num16 + Num17 + Num18 + Num22 + Num23 + Num25 + Num27 then
    RuneDamage1 = 5 + Luk / 3 + Num22 * 5 + Num23 * 5 + Num25 * 5 + Num27
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk + NormalAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local srcAtkElement1 = 1
  local elementInc1 = 0
  local elementRed1 = 0
  local targetDefElement = targetUser:GetProperty("DefAttr")
  if nil == targetDefElement then
    logger.error(string.format("%s targetDefElement is nil", targetUser.name))
    return 0
  end
  if nil == CommonFun.NatureProps[targetDefElement] then
    logger.error(string.format("%s CommonFun.NatureProps[%s] is nil", srcUser.name, tostring(targetDefElement)))
    return 0
  end
  if nil == CommonFun.NatureProps[srcAtkElement1] then
    logger.error(string.format("CommonFun.NatureProps[%s] is nil", tostring(srcAtkElement1)))
    return 0
  end
  elementInc1 = srcUser:GetProperty(CommonFun.NatureProps[targetDefElement][1])
  elementRed1 = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement1][2])
  elementAtk1 = srcUser:GetProperty(CommonFun.NatureProps[srcAtkElement1][3])
  if nil == elementAtk1 then
    elementAtk1 = 0
  end
  local result1 = 1 + elementAtk1 - elementRed1
  if result1 <= 0.1 then
    result1 = 0.1
  end
  local srcAtkElement2 = 2
  local elementInc2 = 0
  local elementRed2 = 0
  local targetDefElement = targetUser:GetProperty("DefAttr")
  if nil == targetDefElement then
    logger.error(string.format("%s targetDefElement is nil", targetUser.name))
    return 0
  end
  if nil == CommonFun.NatureProps[targetDefElement] then
    logger.error(string.format("%s CommonFun.NatureProps[%s] is nil", srcUser.name, tostring(targetDefElement)))
    return 0
  end
  if nil == CommonFun.NatureProps[srcAtkElement2] then
    logger.error(string.format("CommonFun.NatureProps[%s] is nil", tostring(srcAtkElement2)))
    return 0
  end
  elementInc2 = srcUser:GetProperty(CommonFun.NatureProps[targetDefElement][1])
  elementRed2 = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement2][2])
  elementAtk2 = srcUser:GetProperty(CommonFun.NatureProps[srcAtkElement2][3])
  if nil == elementAtk2 then
    elementAtk2 = 0
  end
  local result2 = 1 + elementAtk2 - elementRed2
  if result2 <= 0.1 then
    result2 = 0.1
  end
  local srcAtkElement3 = 3
  local elementInc3 = 0
  local elementRed3 = 0
  local targetDefElement = targetUser:GetProperty("DefAttr")
  if nil == targetDefElement then
    logger.error(string.format("%s targetDefElement is nil", targetUser.name))
    return 0
  end
  if nil == CommonFun.NatureProps[targetDefElement] then
    logger.error(string.format("%s CommonFun.NatureProps[%s] is nil", srcUser.name, tostring(targetDefElement)))
    return 0
  end
  if nil == CommonFun.NatureProps[srcAtkElement3] then
    logger.error(string.format("CommonFun.NatureProps[%s] is nil", tostring(srcAtkElement3)))
    return 0
  end
  elementInc3 = srcUser:GetProperty(CommonFun.NatureProps[targetDefElement][1])
  elementRed3 = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement3][2])
  elementAtk3 = srcUser:GetProperty(CommonFun.NatureProps[srcAtkElement3][3])
  if nil == elementAtk3 then
    elementAtk3 = 0
  end
  local result3 = 1 + elementAtk3 - elementRed3
  if result3 <= 0.1 then
    result3 = 0.1
  end
  local srcAtkElement4 = 4
  local elementInc4 = 0
  local elementRed4 = 0
  local targetDefElement = targetUser:GetProperty("DefAttr")
  if nil == targetDefElement then
    logger.error(string.format("%s targetDefElement is nil", targetUser.name))
    return 0
  end
  if nil == CommonFun.NatureProps[targetDefElement] then
    logger.error(string.format("%s CommonFun.NatureProps[%s] is nil", srcUser.name, tostring(targetDefElement)))
    return 0
  end
  if nil == CommonFun.NatureProps[srcAtkElement4] then
    logger.error(string.format("CommonFun.NatureProps[%s] is nil", tostring(srcAtkElement4)))
    return 0
  end
  elementInc4 = srcUser:GetProperty(CommonFun.NatureProps[targetDefElement][1])
  elementRed4 = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement4][2])
  elementAtk4 = srcUser:GetProperty(CommonFun.NatureProps[srcAtkElement4][3])
  if nil == elementAtk4 then
    elementAtk4 = 0
  end
  local result4 = 1 + elementAtk4 - elementRed4
  if result4 <= 0.1 then
    result4 = 0.1
  end
  local srcAtkElement8 = 8
  local elementInc8 = 0
  local elementRed8 = 0
  local targetDefElement = targetUser:GetProperty("DefAttr")
  if nil == targetDefElement then
    logger.error(string.format("%s targetDefElement is nil", targetUser.name))
    return 0
  end
  if nil == CommonFun.NatureProps[targetDefElement] then
    logger.error(string.format("%s CommonFun.NatureProps[%s] is nil", srcUser.name, tostring(targetDefElement)))
    return 0
  end
  if nil == CommonFun.NatureProps[srcAtkElement4] then
    logger.error(string.format("CommonFun.NatureProps[%s] is nil", tostring(srcAtkElement4)))
    return 0
  end
  elementInc8 = srcUser:GetProperty(CommonFun.NatureProps[targetDefElement][1])
  elementRed8 = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement8][2])
  elementAtk8 = srcUser:GetProperty(CommonFun.NatureProps[srcAtkElement8][3])
  if nil == elementAtk8 then
    elementAtk8 = 0
  end
  local result8 = 1 + elementAtk8 - elementRed8
  if result8 <= 0.1 then
    result8 = 0.1
  end
  local elementparam21 = result1
  local elementparam22 = result2
  local elementparam23 = result3
  local elementparam24 = result4
  local elementparam28 = result8
  local A1 = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (damChangePer + EquipDamage) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.GetElementRate(srcUser, srcAtkElement1, targetUser, targetDefElement, params, damageParam) * elementparam21 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  local A2 = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (damChangePer + EquipDamage) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.GetElementRate(srcUser, srcAtkElement2, targetUser, targetDefElement, params, damageParam) * elementparam22 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  local A3 = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (damChangePer + EquipDamage) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.GetElementRate(srcUser, srcAtkElement3, targetUser, targetDefElement, params, damageParam) * elementparam23 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  local A4 = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (damChangePer + EquipDamage) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.GetElementRate(srcUser, srcAtkElement4, targetUser, targetDefElement, params, damageParam) * elementparam24 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  local A8 = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (damChangePer + EquipDamage) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.GetElementRate(srcUser, srcAtkElement8, targetUser, targetDefElement, params, damageParam) * elementparam28 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  local skilllv_1 = srcUser:GetLernedSkillLevel(1163)
  local skilllv_2 = srcUser:GetLernedSkillLevel(5003)
  local A5 = 0
  if 6 <= skilllv_1 then
    local fireball = 0
    local waterball = 0
    local windball = 0
    local earthball = 0
    local ghostball = 0
    if srcUser:HasBuffID(116830) then
      fireball = 1
      ghostball = ghostball + 1
    end
    if srcUser:HasBuffID(116831) then
      waterball = 1
      ghostball = ghostball + 1
    end
    if srcUser:HasBuffID(116832) then
      windball = 1
      ghostball = ghostball + 1
    end
    if srcUser:HasBuffID(116833) then
      earthball = 1
      ghostball = ghostball + 1
    end
    A5 = (A1 * windball + A2 * earthball + A3 * waterball + A4 * fireball + A8 * ghostball * skilllv_2 * 0.05) * (skilllv_1 - 5) * 0.02
  end
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * (damChangePer + EquipDamage) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2) + A5
  if A <= 1 then
    return 1
  end
  if CommonFun.IsInRate(RuneDamage1, srcUser:GetRandom()) then
    return (A - A5) * RuneDamage + A5, CommonFun.DamageType.Crit
  end
  return A
end

function CommonFun.calcDamage_37(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local Num1 = srcUser:GetRunePoint(22050)
  local RuneDamage = Num1 * 0.1 + 1
  local RuneRate = 0
  if 0 < Num1 then
    RuneRate = Luk / 3
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Ghost = 1
  local skilllv_qn = srcUser:GetLernedSkillLevel(3110)
  if srcUser:HasBuffID(125130) then
    Ghost = 1 + skilllv_qn * 0.06
  end
  local DamageRatio = 1
  if srcUser:HasBuffID(80001090) then
    DamageRatio = 1.1
  end
  local Num1 = srcUser:GetRunePoint(23030)
  local RuneDamage2 = Num1 * 0.05 + 1
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * DamageRatio * RuneDamage2 * Ghost
  if A <= 1 then
    return 1
  end
  if CommonFun.IsInRate(RuneRate, srcUser:GetRandom()) then
    return A * RuneDamage, CommonFun.DamageType.Crit
  end
  return A
end

function CommonFun.calcDamage_38(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local Num1 = srcUser:GetRunePoint(22120)
  local RuneRate = 0
  if 0 < Num1 then
    RuneRate = 8
  end
  local RuneDamage = Num1 * 0.1 + 1
  local Num2 = srcUser:GetRunePoint(22160)
  local Num3 = srcUser:GetRunePoint(22161)
  local RuneDamage1 = (Num2 + Num3) * 0.1 + 1
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42110) then
    BaseLvDamage = IBaseLv * 15
  end
  if srcUser:HasBuffID(42120) then
    BaseLvDamage = IBaseLv * 15
  end
  local taozhuang1 = 1
  if srcUser:HasBuffID(91000470) or srcUser:HasBuffID(91000770) or srcUser:HasBuffID(91001490) or srcUser:HasBuffID(91001500) then
    taozhuang1 = 1.15
  end
  if srcUser:HasBuffID(90004514) then
    taozhuang1 = taozhuang1 + 0.15
  end
  local Ring1 = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  if Ring1 == 63440 or Ring1 == 163440 then
    taozhuang1 = RefineLv * 0.01 + taozhuang1
  end
  local GemValue = srcUser:GetGemValue(82072)
  local GemDam = 1 + GemValue / 100000
  local SnowBeast = 1
  if srcUser:HasBuffID(53980) then
    SnowBeast = 1.1
  end
  if srcUser:HasBuffID(53980) and srcUser:HasBuffID(80002350) then
    SnowBeast = SnowBeast + 0.02
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2) + damChangePer1) * RuneDamage1 * taozhuang1 * GemDam * SnowBeast + BaseLvDamage
  if A <= 1 then
    return 1
  end
  if CommonFun.IsInRate(RuneRate, srcUser:GetRandom()) then
    return A * RuneDamage, CommonFun.DamageType.Crit
  end
  return A
end

function CommonFun.calcDamage_39(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local Num1 = srcUser:GetRunePoint(22041)
  local Num2 = srcUser:GetRunePoint(22042)
  local Num3 = srcUser:GetRunePoint(22043)
  local Num4 = srcUser:GetRunePoint(223009)
  local Num5 = srcUser:GetRunePoint(223010)
  local Num6 = srcUser:GetRunePoint(223011)
  local RuneDamage = (Num1 + Num2 + Num3 + Num4 + Num5 + Num6) * 0.5
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local skilllv_ly = srcUser:GetLernedSkillLevel(3122)
  local skilllv_ly1 = srcUser:GetLernedSkillLevel(1955)
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local GemValue = srcUser:GetGemValue(21151)
  local GemDam = 1 + GemValue / 100000
  local Fifth = 1
  if srcUser:HasBuffID(90004794) then
    Fifth = Fifth + 0.1
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * RuneDamage * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 * (1 + skilllv_ly * 0.06 + skilllv_ly1 * 0.06) * GemDam - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * Fifth
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_40(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 5 * Str
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local WeaponType = srcUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Black = 1
  local skilllv_qihei = srcUser:GetLernedSkillLevel(194)
  if targetUser:GetBuffActive(95500) then
    Black = 1 + 0.15 * skilllv_qihei
  end
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) * Black - Vit2 * (1 + VitPer2)
  local Num1 = srcUser:GetRunePoint(31006)
  local Num2 = srcUser:GetRunePoint(31007)
  local Num3 = srcUser:GetRunePoint(31008)
  local Num4 = srcUser:GetRunePoint(31009)
  local Num5 = srcUser:GetRunePoint(31010)
  local RuneDamage = Num1 * 0.05 + Num2 * 0.1 + Num3 * 0.1 + Num4 * 0.05 + Num5 * 0.1 + 1
  local Buff = srcUser:HasBuffID(24441)
  local huali = 1
  if Buff == true and srcUser:HasBuffID(90001903) then
    huali = 1.25
  elseif Buff == true then
    huali = 1.1
  end
  local Num6 = srcUser:GetRunePoint(32001)
  local Num7 = srcUser:GetRunePoint(32002)
  local RuneDamage2 = 1
  if targetUser:HasBuffID(95491) or targetUser:HasBuffID(95493) then
    RuneDamage2 = Num6 * 0.1 + Num7 * 0.05 + 1
  end
  if A <= 1 then
    return 1
  end
  local ErDaoDam = 0
  if 10 < skilllv_1 then
    ErDaoDam = (skilllv_1 - 10) * 0.05
    skilllv_1 = 10
  end
  local NextAtk = 1
  if bits2[CommonFun.AttrEffect.NextAttackIncrease] == 1 then
    NextAtk = 2
  end
  local skilllv_eh = srcUser:GetLernedSkillLevel(1106)
  local erGem = srcUser:GetGemValue(31091)
  local erDamGem = srcUser:GetGemValue(31092)
  if WeaponType == 250 and CommonFun.IsInRate(skilllv_1 * 5 + erGem / 1000, srcUser:GetRandom()) then
    if CommonFun.IsInRate(skilllv_eh * 12, srcUser:GetRandom()) and srcUser.isServerCall then
      srcUser:AddBuff(116051, targetUser:GetGuid())
      srcUser:AddBuff(116052, targetUser:GetGuid())
      srcUser:AddBuff(116053, targetUser:GetGuid())
    end
    return A * (2 + ErDaoDam) * (1 + erDamGem / 100000) * NextAtk * huali * RuneDamage * RuneDamage2, CommonFun.DamageType.ErLianJi
  end
  return A * huali * RuneDamage2 * NextAtk
end

function CommonFun.calcDamage_41(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) + damChangePer1 - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  if bits2[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_42(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Weapon = srcUser:GetEquipedID(7)
  local B = 1
  if Weapon == 40738 or Weapon == 140738 then
    B = 2
  end
  local weaponRefineLv_2 = srcUser:GetEquipedRefineLv(7)
  local zidu = 0
  if srcUser:HasBuffID(90001313) then
    zidu = weaponRefineLv_2 * 0.05
  end
  local Num1 = srcUser:GetRunePoint(32014)
  local Num2 = srcUser:GetRunePoint(32015)
  local Num3 = srcUser:GetRunePoint(32016)
  local Num4 = srcUser:GetRunePoint(32017)
  local Num5 = srcUser:GetRunePoint(32018)
  local RuneDamage = Num1 * 0.05 + Num2 * 0.05 + Num3 * 0.05 + Num4 * 0.05 + Num5 * 0.05 + 1
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + zidu) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) + damChangePer1 - Vit2 * (1 + VitPer2)) * B * RuneDamage
  if A <= 1 then
    return 1
  end
  if bits2[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_43(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local A = (AtkFinal * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_50(srcUser, targetUser, params, damageParam, logger)
  local Str1 = srcUser:GetProperty("Str")
  local Num1 = srcUser:GetRunePoint(51013)
  local RuneDamage = Num1 * 0.05 + 1
  local Str = Str1 * RuneDamage
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk1 = srcUser:GetProperty("Atk")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local Num1 = srcUser:GetRunePoint(52013)
  local Num2 = srcUser:GetRunePoint(52014)
  local Num3 = srcUser:GetRunePoint(52015)
  local Num4 = srcUser:GetRunePoint(52016)
  local Num5 = srcUser:GetRunePoint(52017)
  local Num6 = srcUser:GetRunePoint(52018)
  local RuneDamage1 = (Num1 + Num2 + Num3 + Num4 + Num5 + Num6) * 0.07
  local Atk = Atk1 + RuneDamage1 * MAtk * (1 + MAtkPer)
  local AtkPer = srcUser:GetProperty("AtkPer")
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 5 * Str
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local Refine = srcUser:GetProperty("Refine")
  local fromid = targetUser:GetBuffFromID(45000120)
  local guid = srcUser:GetGuid()
  local BUffDam = 1
  if fromid == guid then
    BUffDam = 1.3
  end
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local race2 = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    race2 = 2
  end
  local DefAttr2 = targetUser:GetProperty("DefAttr")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str1 * 2 + math.floor(Str1 * Str1 / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local BaseAtk1 = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk1) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local zhufu = 1
  if srcUser:HasBuffID(129040) or srcUser:HasBuffID(129041) then
    local skilllv_zf = srcUser:GetLernedSkillLevel(3610)
    local GemValue = srcUser:GetGemValue(51161)
    zhufu = 1 + skilllv_zf * 0.02 + GemValue / 100000
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * BUffDam * zhufu
  if A <= 1 then
    return 1
  end
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 5904 then
    local skilllv_sg = srcUser:GetLernedSkillLevel(5900)
    A = A * (1 + skilllv_sg * 0.1)
  end
  if race2 == 3 or DefAttr2 == 9 or DefAttr2 == 7 or srcUser:HasBuffID(20510031) and srcUser:HasBuffID(22000520) or DefAttr2 == 7 and srcUser:HasBuffID(22000520) then
    return A * (1 + math.min(skilllv_1, 10) * 0.05)
  end
  return A
end

function CommonFun.calcDamage_60(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local skilllv_1 = srcUser:GetLernedSkillLevel(266)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + skilllv_1 * 15) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_80(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local Numxp = srcUser:GetRunePoint(82001)
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + (3 + 0.3 * Numxp) * Int
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local Num1 = srcUser:GetBuffLayer(90000952)
  local Num2 = srcUser:GetBuffLayer(90000953)
  local Num3 = srcUser:GetBuffLayer(90000954)
  local Num24 = 0
  local RefineLv2 = srcUser:GetEquipedRefineLv(2)
  if srcUser:HasBuffID(90000959) then
    Num24 = Num24 + RefineLv2 * 0.01
  end
  local Num26 = 0
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRing.id == 42126 or equipRing.id == 142126 then
    Num26 = Num26 + equipRing.refinelv * 0.01 + 0.1
  end
  if (equipRing.id == 42126 or equipRing.id == 142126) and equipRing.refinelv >= 15 then
    Num26 = Num26 + 0.05
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id == 42126 or equipRingSD.id == 142126 then
    Num26 = Num26 + (equipRingSD.refinelv * 0.01 + 0.1) * equipRingSD.quench_per / 100
  end
  if (equipRingSD.id == 42126 or equipRingSD.id == 142126) and equipRingSD.refinelv >= 15 then
    Num26 = Num26 + 0.05 * equipRingSD.quench_per / 100
  end
  local Num4 = srcUser:GetBuffLayer(90000942)
  local Num5 = srcUser:GetBuffLayer(90000944)
  local Num25 = 0
  local RefineLv4 = srcUser:GetEquipedRefineLv(4)
  if srcUser:HasBuffID(90000949) and 10 <= RefineLv4 then
    Num25 = 1
  end
  local Num27 = 0
  local equipRingshoes = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  if equipRingshoes.id == 43587 or equipRingshoes.id == 143587 then
    if equipRingshoes.refinelv < 5 then
      Num27 = Num27 + 10
    elseif equipRingshoes.refinelv >= 5 and equipRingshoes.refinelv < 10 then
      Num27 = Num27 + 10 + 5
    elseif equipRingshoes.refinelv >= 10 and equipRingshoes.refinelv < 15 then
      Num27 = Num27 + 10 + 5 + 5
    elseif equipRingshoes.refinelv >= 15 then
      Num27 = Num27 + 10 + 5 + 5 + 5
    end
  end
  local equipRingSDshoes = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  if equipRingSDshoes.id == 43587 or equipRingSDshoes.id == 143587 then
    if equipRingSDshoes.refinelv < 5 then
      Num27 = Num27 + 10 * equipRingSDshoes.quench_per / 100
    elseif equipRingSDshoes.refinelv >= 5 and equipRingSDshoes.refinelv < 10 then
      Num27 = Num27 + 15 * equipRingSDshoes.quench_per / 100
    elseif equipRingSDshoes.refinelv >= 10 and equipRingSDshoes.refinelv < 15 then
      Num27 = Num27 + 20 * equipRingSDshoes.quench_per / 100
    elseif equipRingSDshoes.refinelv >= 15 then
      Num27 = Num27 + 25 * equipRingSDshoes.quench_per / 100
    end
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1324)
  local CriDam = 0
  if 0 < skilllv_1 and skilllv_1 <= 5 then
    CriDam = 0.1
  elseif 5 < skilllv_1 then
    CriDam = 0.1 + (skilllv_1 - 5) * 0.05
  end
  local Num_bs = srcUser:GetRunePoint(82024)
  local GemValue1 = srcUser:GetGemValue(82101)
  local GemValue2 = srcUser:GetGemValue(82102)
  local RuneDamage = 1 + CriDam + 0.03 * Num1 + 0.03 * Num2 + 0.04 * Num3 + 0.05 * Num_bs + GemValue2 / 100000 + Num24 + Num26
  local RuneDamage1 = 0
  if 0 < Num4 + Num5 + skilllv_1 + Num25 + Num27 then
    RuneDamage1 = skilllv_1 + Luk / 3 + Num4 * 5 + Num5 * 5 + GemValue1 / 1000 + Num25 * 5 + Num27
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk + NormalAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2718 then
    local Num = srcUser:GetBuffLayer(137570)
    local count = params.hitedCount
    if count == 1 then
      A = A * (1 + Num * 0.5)
    end
  end
  if MDef2 <= 0 and (srcUser:HasBuffID(42360) or srcUser:HasBuffID(43110) or srcUser:HasBuffLayer(43110, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(41670) or srcUser:HasBuffID(42240)) then
    RuneDamage1 = 100
  end
  local damageType = CommonFun.DamageType.Normal
  if CommonFun.IsInRate(RuneDamage1, srcUser:GetRandom()) then
    A = A * RuneDamage
    damageType = CommonFun.DamageType.Crit
  end
  if srcUser:HasBuffID(137540) and skillID == 2718 then
    local skilllv_an = srcUser:GetLernedSkillLevel(2704)
    A = A * (1 + skilllv_an * 0.2)
    damageType = CommonFun.DamageType.Crit
  end
  if A <= 1 then
    return 1
  end
  return A, damageType
end

function CommonFun.calcDamage_100(srcUser, targetUser, params, damageParam, logger)
  local Atk = srcUser:GetProperty("Atk")
  local damChangePer = damageParam.damChangePer
  local A = Atk * damChangePer
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_101(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * (1 + RefineLv * 0.05)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_120(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_121(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_122(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local Hp = srcUser:GetProperty("Hp")
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Num1 = srcUser:GetBuffLayer(154021)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 79300 or skillID == 79301 then
    local targetid = targetUser:GetGuid()
    local distance = srcUser:GetDistance(targetid)
    if distance <= 2 then
      A = A * 2
    end
  end
  if skillID == 79304 then
    A = A * (1 + Hp / MaxHp) * (1 + Num1 * 0.1)
  end
  if skillID == 79306 then
    A = A * (1 + Num1 * 0.3)
  end
  if skillID == 79314 then
    local chantDam = srcUser:GetChantBeDamage()
    A = A + chantDam * 10
  end
  if skillID == 79322 then
    local Num2 = targetUser:GetBuffLayer(154080)
    A = A * (1 + Num2 * 0.3)
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_123(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 4511 then
    local skilllv_mj = srcUser:GetLernedSkillLevel(4512)
    local skilllv_fy = srcUser:GetLernedSkillLevel(4511)
    damChangePer = (1.9 + 0.6 * skilllv_fy) * (3 + skilllv_mj)
  end
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2)
  if skillID == 4500 or skillID == 4501 then
    local MaxHp = srcUser:GetProperty("MaxHp")
    local skilllv = srcUser:GetLernedSkillLevel(4502)
    local MaxHpDam = 0
    if 0 < skilllv then
      MaxHpDam = MaxHp / damChangePer * (0.1 + skilllv * 0.07)
    end
    A = ((AtkFinal + MaxHpDam) * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2)
  end
  local skill_abs = srcUser:GetLernedSkillLevel(4521)
  if 0 < skill_abs and targetUser:GetBuffEffectByType("AbsorbDamage") ~= nil then
    A = A * (1 + skill_abs * 0.1)
  end
  local skilllv_luk = srcUser:GetLernedSkillLevel(4520)
  local Rate = 10 + skilllv_luk * 2
  if 0 < skilllv_luk and CommonFun.IsInRate(Rate, srcUser:GetRandom()) and skillID ~= 4528 and skillID ~= 4530 then
    local skilllv_zs = srcUser:GetLernedSkillLevel(4522)
    if 0 < skilllv_zs and srcUser.isServerCall then
      srcUser:AddBuff(154270, targetUser:GetGuid())
    end
    A = A * 2
    return A, CommonFun.DamageType.Crit
  end
  if skillID == 4528 then
    local Skilllv_1 = srcUser:GetBoKiSkillLv(4506)
    local Skilllv_3 = srcUser:GetBoKiSkillLv(4507)
    damChangePer = Skilllv_1 * 2
    A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2)) * (1 + Skilllv_3 * 0.1)
  end
  if skillID == 4530 then
    local Skilllv_2 = srcUser:GetBoKiSkillLv(4514)
    damChangePer = Skilllv_2 * 5
    A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2)
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_124(srcUser, targetUser, params, damageParam, logger)
  local damChangePer = damageParam.damChangePer
  local A = damChangePer
  return A
end

function CommonFun.calcDamage_125(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 79338 and targetUser:HasBuffID(155031) then
    A = 0
  end
  if A <= 1 then
    return 1
  end
  if targetUser:GetNpcID() == 300101 or targetUser:GetNpcID() == 301100 or targetUser:GetNpcID() == 301101 or targetUser:GetNpcID() == 301102 then
    A = 0
  end
  if targetUser:GetNpcID() == 301200 or targetUser:GetNpcID() == 301201 or targetUser:GetNpcID() == 301202 or targetUser:GetNpcID() == 301203 or targetUser:GetNpcID() == 301204 or targetUser:GetNpcID() == 301205 or targetUser:GetNpcID() == 301206 then
    A = 1
  end
  return A
end

function CommonFun.calcDamage_126(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 79342 then
    local targetid = targetUser:GetGuid()
    local distance = srcUser:GetDistance(targetid)
    if distance <= 7 then
      A = 0
    end
  end
  if skillID == 23113 then
    local targetid = targetUser:GetGuid()
    local distance = srcUser:GetDistance(targetid)
    if distance <= 5 then
      return 0, CommonFun.DamageType.Miss
    end
  end
  if A <= 1 then
    return 0
  end
  return A
end

function CommonFun.calcDamage_127(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local MaxHp2 = targetUser:GetProperty("MaxHp")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2) + MaxHp2 * damChangePer1 / 100
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 23051 and srcUser.isServerCall then
    srcUser:AddBuff(156800, targetUser:GetGuid())
    srcUser:AddBuff(156801, targetUser:GetGuid())
  end
  return A
end

function CommonFun.calcDamage_6101(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local skilllv_1 = srcUser:GetLernedSkillLevel(266)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1479)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + skilllv_1 * 15 + skilllv_2 * 15) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42180) then
    BaseLvDamage = IBaseLv * 20
  end
  if srcUser:HasBuffID(42210) then
    BaseLvDamage = IBaseLv * 20
  end
  if srcUser:HasBuffID(43790) or srcUser:HasBuffID(44000) or srcUser:HasBuffID(43580) then
    BaseLvDamage = IBaseLv * 50
  end
  local num, numMax = srcUser:GetCartNums()
  local Num1 = srcUser:GetRunePoint(61006)
  local Num2 = srcUser:GetRunePoint(61007)
  local Num3 = srcUser:GetRunePoint(61008)
  local Num4 = srcUser:GetRunePoint(61009)
  local Num5 = srcUser:GetRunePoint(61010)
  local RuneDamage = (Num1 * 0.005 + Num2 * 0.01 + Num3 * 0.01 + Num4 * 0.005 + Num5 * 0.01) * numMax + 1
  local Num6 = srcUser:GetRunePoint(130010)
  local Num7 = srcUser:GetRunePoint(143027)
  local RuneDamage2 = Num6 * 0.1 + Num7 * 0.06 + 1
  local Numjs = srcUser:GetRunePoint(143024)
  local MoveSpd = srcUser:GetProperty("MoveSpd")
  local MoveRatio = 1 + (math.max(MoveSpd, 1) - 1) * 0.2 * Numjs
  local GemValue1 = srcUser:GetGemValue(61082)
  local GemValue2 = srcUser:GetGemValue(143022)
  local GemValue3 = srcUser:GetGemValue(143062)
  local GemDam = 1 + GemValue1 / 100000 + GemValue2 / 100000 + GemValue3 / 100000
  if srcUser:HasBuffID(21430100) and srcUser:HasBuffID(96150) then
    DefReduc = 1
  end
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 4400 or skillID == 4429 then
    local skilllv_stc = srcUser:GetLernedSkillLevel(1478)
    local skilllv_ljf = srcUser:GetLernedSkillLevel(4400)
    local GemValueNew = srcUser:GetGemValue(143141)
    damChangePer = (skilllv_stc * 0.5 + 2.5) * (skilllv_ljf * 0.05 + 0.5) * (1 + GemValueNew / 100000)
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage * RuneDamage2 * MoveRatio * GemDam + BaseLvDamage
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  local beike = 0
  if srcUser:HasBuffID(90000677) then
    if 10 <= RefineLv7 and RefineLv7 < 15 then
      beike = (RefineLv7 - 10) * 0.02
    elseif 15 <= RefineLv7 then
      beike = (RefineLv7 - 10) * 0.02 + 0.05
    end
  end
  if srcUser:HasBuffID(41920) and 5 <= RefineLv7 then
    beike = (RefineLv7 - 5) * 0.02
  end
  if Weapon == 41835 or Weapon == 141835 or Weapon == 41867 or Weapon == 141867 then
    return A * (1.15 + beike)
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_6102(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(62050)
  local RuneDamage1 = Num1 * 0.05 + 1
  local skilllv_1 = srcUser:GetLernedSkillLevel(272)
  local carda = 1
  if srcUser:HasBuffID(53400) then
    carda = carda + 0.15
  end
  if srcUser:HasBuffID(56120) then
    carda = carda + 0.15
  end
  local GemValue = srcUser:GetGemValue(61051)
  local GemDam = 1 + GemValue / 100000
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + skilllv_1 * 0.6) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage1 * carda * GemDam
  if Weapon == 41814 or Weapon == 141814 or Weapon == 41848 or Weapon == 141848 or Weapon == 41870 or Weapon == 141870 then
    local CriRandom = 10
    local DexRatio = 0
    local CriRatio = 1
    local RefineRatio = 1
    if 90 <= Dex and (Weapon == 41814 or Weapon == 141814) then
      DexRatio = 0.2
    elseif 90 <= Dex and (Weapon == 41848 or Weapon == 141848) then
      DexRatio = 0.3
    elseif 90 <= Dex and (Weapon == 41870 or Weapon == 141870) then
      DexRatio = 0.3
    end
    if srcUser:HasBuffID(90001873) and 240 <= Str then
      DexRatio = DexRatio + 0.3
    end
    if srcUser:HasBuffID(41950) and 240 <= Str then
      DexRatio = DexRatio + 0.3
    end
    if 5 <= RefineLv and RefineLv < 10 then
      RefineRatio = 1.1
    elseif 10 <= RefineLv and RefineLv < 15 then
      RefineRatio = 1.3
    elseif 15 <= RefineLv then
      RefineRatio = 1.6
    end
    if srcUser:HasBuffID(41950) then
      CriRandom = CriRandom + 10
    end
    if srcUser:HasBuffID(90004424) then
      CriRandom = CriRandom + 10
    end
    if CommonFun.IsInRate(CriRandom, srcUser:GetRandom()) and (Weapon == 41848 or Weapon == 141848 or Weapon == 41870 or Weapon == 141870) then
      CriRatio = 1.5
    end
    if CriRatio == 1 then
      return A * (RefineRatio + DexRatio) * CriRatio
    else
      return A * (RefineRatio + DexRatio) * CriRatio, CommonFun.DamageType.Crit
    end
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_6103(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local skilllv_1 = srcUser:GetLernedSkillLevel(266)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + skilllv_1 * 15) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42180) then
    BaseLvDamage = IBaseLv * 20
  end
  if srcUser:HasBuffID(42210) then
    BaseLvDamage = IBaseLv * 20
  end
  local num, numMax = srcUser:GetCartNums()
  local Num1 = srcUser:GetRunePoint(62008)
  local Num2 = srcUser:GetRunePoint(62009)
  local Num3 = srcUser:GetRunePoint(62010)
  local Num4 = srcUser:GetRunePoint(62011)
  local Num5 = srcUser:GetRunePoint(62012)
  local RuneDamage = (Num1 * 0.01 + Num2 * 0.005 + Num3 * 0.005 + Num4 * 0.005 + Num5 * 0.005) * numMax + 1
  local tianben = 1
  if srcUser:HasBuffID(41940) then
    tianben = 1.1
  end
  local GemValue = srcUser:GetGemValue(61081)
  local GemDam = 1 + GemValue / 100000
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage * tianben * GemDam + BaseLvDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_6104(srcUser, targetUser, params, damageParam, logger)
  local BaseLv = srcUser.BaseLv
  local HealEncPer = srcUser:GetProperty("HealEncPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local enemy = srcUser:IsEnemy(targetUser)
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local Master = srcUser:GetMasterUser()
  local RuneDamage = 1
  if Master ~= nil then
    local Num1 = Master:GetRunePoint(130050)
    RuneDamage = 1 + 0.15 * Num1
  end
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local BeHealEncPer2 = targetUser:GetProperty("BeHealEncPer")
  local race2 = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    race2 = 2
  end
  local DefAttr2 = targetUser:GetProperty("DefAttr")
  local AttrEffect = targetUser:GetProperty("AttrEffect2")
  local bits = CommonFun.getBits(AttrEffect)
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local A = ((math.floor(BaseLv + MAtk / 100) * damChangePer + 100) * (1 + HealEncPer) * (1 + BeHealEncPer2) + damChangePer1) * -1 * RuneDamage
  local HealtoDam = targetUser:GetBuffLevel(129100)
  local DamRatio = 1
  if targetUser:HasBuffID(129100) then
    DamRatio = -0.1 * HealtoDam
  end
  local HealReduce = targetUser:GetBuffLevel(136500)
  if targetUser:HasBuffID(136500) then
    DamRatio = 1 - (0.2 + 0.03 * HealReduce)
  end
  if enemy then
    if DefAttr2 == 9 then
      return A / 2 * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 * -1 * (1 + MDamIncrease)
    else
      return 0, 0
    end
  elseif DefAttr2 == 9 or bits[CommonFun.AttrEffect.PoisinDamNoUse] == 1 then
    return -1
  else
    return A * DamRatio
  end
end

function CommonFun.calcDamage_6105(srcUser, targetUser, params, damageParam, logger)
  local MAtk = srcUser:GetProperty("MAtk")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local skilllv = srcUser:GetLernedSkillLevel(445)
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local MAtkFinal = MAtk * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Num1 = srcUser:GetRunePoint(130100)
  local RuneDamage = Num1 * 0.1 + 1
  local Master = CommonFun.getNpcMasterUser(srcUser)
  local Num2 = 0
  if Master ~= nil then
    local Weapon_1 = Master:GetEquipedID(7)
    if Weapon_1 == 41543 or Weapon_1 == 141543 or Weapon_1 == 41544 or Weapon_1 == 141544 then
      Num2 = 0.75
    end
    local WeaponRefineLv = Master:GetEquipedRefineLv(7)
    if Weapon_1 == 41543 or Weapon_1 == 141543 or Weapon_1 == 41544 or Weapon_1 == 141544 then
      Num2 = Num2 + WeaponRefineLv * 0.35
    end
  end
  if Master ~= nil and (Master:HasBuffID(91000150) or Master:HasBuffID(91001110)) then
    Num2 = Num2 + 1.5
  end
  local Num3 = 1
  if Master ~= nil and Master:HasBuffID(90002181) then
    Num3 = Num3 + 0.15
  end
  if Master ~= nil and Master:HasBuffID(90002193) then
    Num3 = Num3 + 0.15
  end
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) * (1 - RefineMDamReduc) * (damChangePer + Num2) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2) + damChangePer1) * RuneDamage * Num3
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_6106(srcUser, targetUser, params, damageParam, logger)
  local MAtk = srcUser:GetProperty("MAtk")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local skilllv = srcUser:GetLernedSkillLevel(445)
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local MAtkFinal = MAtk * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = MAtkFinal * MDefReduc * (1 - MDamReduc2) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_6301(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local WeaponType = srcUser:GetEquipedWeaponType()
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(62060)
  local Num2 = srcUser:GetRunePoint(62061)
  local Num3 = srcUser:GetRunePoint(62062)
  local Num4 = srcUser:GetRunePoint(62063)
  local Num5 = srcUser:GetRunePoint(62064)
  local Num6 = srcUser:GetRunePoint(62070)
  local RuneDamage = 0.4 * (Num1 + Num2 + Num3 + Num4 + Num5) + 0.05 * Num6
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_6302(srcUser, targetUser, params, damageParam, logger)
  local Str1 = srcUser:GetProperty("Str")
  local Num1 = srcUser:GetRunePoint(62080)
  local RuneDamage = Num1 * 0.01 + 1
  local Str = Str1 * RuneDamage
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local WeaponType = srcUser:GetEquipedWeaponType()
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(62090)
  local Num2 = srcUser:GetRunePoint(62091)
  local Num3 = srcUser:GetRunePoint(62092)
  local Num4 = srcUser:GetRunePoint(62100)
  local RuneDamage = (Num1 + Num2 + Num3) * 0.05 + Num4 * 0.03
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_6401(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local MaxHp = targetUser:GetProperty("MaxHp")
  local damChangePer = damageParam.damChangePer
  local Num = srcUser:GetRunePoint(64020)
  local mapid, maptype = srcUser:GetMapInfo()
  local pvpRatio = 1
  if maptype == 2 or maptype == 4 then
    local GemValue = srcUser:GetGemValue(61012)
    pvpRatio = 0.25 * (1 + GemValue / 100000)
  end
  local A = -MaxHp * (damChangePer * (1 + Int / 100) * (1 + 0.05 * Num) * pvpRatio)
  local AttrEffect = targetUser:GetProperty("AttrEffect2")
  local bits = CommonFun.getBits(AttrEffect)
  if bits[CommonFun.AttrEffect2.BeMagicMachine] ~= 1 and targetUser:HasBuffID(132350) == false then
    A = 0
  end
  local HealtoDam = targetUser:GetBuffLevel(129100)
  local DamRatio = 1
  if targetUser:HasBuffID(129100) then
    DamRatio = -0.1 * HealtoDam
  end
  local HealReduce = targetUser:GetBuffLevel(136500)
  if targetUser:HasBuffID(136500) then
    DamRatio = 1 - (0.2 + 0.03 * HealReduce)
  end
  return A * DamRatio
end

function CommonFun.calcDamage_6402(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Sp = srcUser:GetProperty("Sp")
  local Hp = srcUser:GetProperty("Hp")
  local Vit = srcUser:GetProperty("Vit")
  local mapid, maptype = srcUser:GetMapInfo()
  local pvpRatio = 1
  if maptype == 2 or maptype == 4 then
    pvpRatio = 0.25
  end
  local Wrench = 1
  local Ring7 = srcUser:GetEquipedID(7)
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if Ring7 == 41556 or Ring7 == 141556 then
    Wrench = Wrench + RefineLv7 * 0.02
  end
  if srcUser:HasBuffID(22880) then
    Wrench = Wrench + RefineLv7 * 0.02
  end
  local Fifth = 0
  if srcUser:HasBuffID(90004864) then
    Fifth = 10
  end
  if srcUser:HasBuffID(55790) then
    Wrench = 0.1 + Wrench
  end
  local Num = srcUser:GetRunePoint(64040)
  local RuneDamage = 1 + Num * 0.05
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (Sp / 100 + math.min(Hp / 5000 * pvpRatio, 200) + Vit / 10 + Fifth) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Wrench * RuneDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_6405(srcUser, targetUser, params, damageParam, logger)
  local Master = CommonFun.getNpcMasterUser(srcUser)
  if Master == nil and srcUser:GetNpcID() ~= 0 then
    return 0
  end
  local Str = Master:GetProperty("Str")
  local Dex = Master:GetProperty("Dex")
  local Luk = Master:GetProperty("Luk")
  local Atk = Master:GetProperty("Atk")
  local AtkPer = Master:GetProperty("AtkPer")
  local DamIncrease = Master:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = Master:GetProperty("IgnoreDef")
  local IgnoreDef2 = Master:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = Master:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(Master, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local Weapon = Master:GetEquipedID(7)
  local RefineLv = Master:GetEquipedRefineLv(7)
  local raceparam = CommonFun.CalcRaceParam(Master, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(Master, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(Master, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(Master, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(Master, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(Master, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(Master, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(Master, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(Master, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(Master, targetUser, params)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Sp = Master:GetProperty("Sp")
  local Hp = Master:GetProperty("Hp")
  local Vit = Master:GetProperty("Vit")
  local mapid, maptype = Master:GetMapInfo()
  local pvpRatio = 1
  if maptype == 2 or maptype == 4 then
    pvpRatio = 0.25
  end
  local Wrench = 1
  local Ring7 = Master:GetEquipedID(7)
  local RefineLv7 = Master:GetEquipedRefineLv(7)
  if Ring7 == 41556 or Ring7 == 141556 then
    Wrench = Wrench + RefineLv7 * 0.02
  end
  if Master:HasBuffID(22880) then
    Wrench = Wrench + RefineLv7 * 0.02
  end
  local Fifth = 0
  if Master:HasBuffID(90004864) then
    Fifth = 10
  end
  if Master:HasBuffID(55790) then
    Wrench = 0.1 + Wrench
  end
  local Num = Master:GetRunePoint(64040)
  local RuneDamage = 1 + Num * 0.05
  local skilllv_zb = Master:GetLernedSkillLevel(1284)
  local skilllv_jq = Master:GetLernedSkillLevel(4309)
  damChangePer = 0.1 * skilllv_zb * (1 + skilllv_jq * 0.2)
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (Sp / 100 + math.min(Hp / 5000 * pvpRatio, 200) + Vit / 10 + Fifth) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Wrench * RuneDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_6403(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Master = CommonFun.getNpcMasterUser(srcUser)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(43580) then
    BaseLvDamage = IBaseLv * 50
  end
  local XpNum = srcUser:GetBuffLayer(117960)
  local Num = srcUser:GetRunePoint(64090)
  local RuneDamage = 1
  if Master ~= nil and srcUser:GetNpcID() ~= 0 then
    Num = Master:GetRunePoint(64090)
    XpNum = Master:GetBuffLayer(117960)
  end
  RuneDamage = (1 + Num * 0.1) * (1 + Num * XpNum * 0.02)
  local GemValue = srcUser:GetGemValue(61091)
  local GemDam = 1 + GemValue / 100000
  local ktz = 1
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 4300 then
    local skilllv_ktz = srcUser:GetLernedSkillLevel(4300)
    damChangePer = 10.4
    ktz = 1 + skilllv_ktz * 1
  end
  local recursion = 1
  if srcUser:HasBuffID(132430) and skillID ~= 4300 then
    local skilllv_dg = srcUser:GetLernedSkillLevel(4308)
    local skilllv_dg2 = srcUser:GetLernedSkillLevel(4322)
    recursion = 1 + skilllv_dg * 0.03 + skilllv_dg2 * 0.02
  end
  local guozai = 1
  local fromid = targetUser:GetBuffFromID(1006051)
  local guid = srcUser:GetGuid()
  local skilllv_guozai = srcUser:GetLernedSkillLevel(5603)
  if Master ~= nil and srcUser:GetNpcID() ~= 0 then
    skilllv_guozai = Master:GetLernedSkillLevel(5603)
  end
  local layer_guozai = targetUser:GetBuffLayer(1006051)
  if 1 <= layer_guozai then
    guozai = 1 + skilllv_guozai * 0.01 * layer_guozai
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + Dex / 30) * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage * GemDam * ktz * recursion * guozai + BaseLvDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_6404(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Master = CommonFun.getNpcMasterUser(srcUser)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local sizeCorrection = 1
  if nil ~= CommonFun.Shape then
    if CommonFun.Shape.S == targetUser.shape then
      sizeCorrection = 1.5
    elseif CommonFun.Shape.M == targetUser.shape then
      sizeCorrection = 1
    elseif CommonFun.Shape.L == targetUser.shape then
      sizeCorrection = 1
    end
  end
  if nil ~= CommonFun.Shape and CommonFun.Shape.L == targetUser.shape and srcUser:HasBuffID(90004414) then
    sizeCorrection = sizeCorrection + 0.15
  end
  local huimie = 1
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(90000647) then
    if RefineLv7 < 15 then
      huimie = RefineLv7 * 0.02 + 1 + 0.05
    elseif 15 <= RefineLv7 then
      huimie = RefineLv7 * 0.02 + 1 + 0.05 + 0.1
    end
  end
  if srcUser:HasBuffID(41940) then
    if RefineLv7 < 15 then
      huimie = RefineLv7 * 0.02 + 1 + 0.05
    elseif 15 <= RefineLv7 then
      huimie = RefineLv7 * 0.02 + 1 + 0.05 + 0.1
    end
  end
  local Num = srcUser:GetRunePoint(64070)
  local RuneDamage = 1 + Num * 0.1
  local Card = 1
  if srcUser:HasBuffID(53310) then
    if 10 <= RefineLv7 then
      Card = Card + 0.1
    else
      Card = Card + 0.05
    end
  end
  local GemValue = srcUser:GetGemValue(61001)
  local GemDam = 1 + GemValue / 100000
  if Master ~= nil and srcUser:GetNpcID() ~= 0 then
    RefineLv7 = Master:GetEquipedRefineLv(7)
    if Master:HasBuffID(90000647) then
      if RefineLv7 < 15 then
        huimie = RefineLv7 * 0.02 + 1 + 0.05
      elseif 15 <= RefineLv7 then
        huimie = RefineLv7 * 0.02 + 1 + 0.05 + 0.1
      end
    end
    if Master:HasBuffID(41940) then
      if RefineLv7 < 15 then
        huimie = RefineLv7 * 0.02 + 1 + 0.05
      elseif 15 <= RefineLv7 then
        huimie = RefineLv7 * 0.02 + 1 + 0.05 + 0.1
      end
    end
    Num = Master:GetRunePoint(64070)
    RuneDamage = 1 + Num * 0.1
    if Master:HasBuffID(53310) then
      if 10 <= RefineLv7 then
        Card = Card + 0.1
      else
        Card = Card + 0.05
      end
    end
  end
  local Num_dy = srcUser:GetBuffLayer(20610121)
  Num_dy = Num_dy + 1
  local recursion = 1
  local skilllv_dg = srcUser:GetLernedSkillLevel(4308)
  local skilllv_dg2 = srcUser:GetLernedSkillLevel(4322)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if srcUser:HasBuffID(132431) and skillID == 1288 then
    recursion = 1 + skilllv_dg * 0.03 + skilllv_dg2 * 0.02
  end
  local Master = srcUser:GetMasterUser()
  if skillID == 4310 then
    local skilllv_jn = srcUser:GetLernedSkillLevel(1288)
    local skilllv_gz = srcUser:GetLernedSkillLevel(4310)
    if Master ~= nil then
      skilllv_jn = Master:GetLernedSkillLevel(1288)
      skilllv_gz = Master:GetLernedSkillLevel(4310)
    end
    Num_dy = 1
    local DamGem = srcUser:GetGemValue(61161)
    damChangePer = (skilllv_jn * 1.1 + 9.6) * (skilllv_gz * 0.05 + 0.5) * (1 + DamGem / 100000)
    if srcUser:HasBuffID(56460) or srcUser:HasBuffID(56470) then
      damChangePer = damChangePer * 1.3
    end
    if srcUser:HasBuffID(132432) then
      recursion = 1 + skilllv_dg * 0.03 + skilllv_dg2 * 0.02
    end
  end
  local guozai = 1
  local fromid = targetUser:GetBuffFromID(1006050)
  local guid = srcUser:GetGuid()
  local skilllv_guozai = srcUser:GetLernedSkillLevel(5603)
  if Master ~= nil then
    skilllv_guozai = Master:GetLernedSkillLevel(5603)
  end
  local layer_guozai = targetUser:GetBuffLayer(1006050)
  if 1 <= layer_guozai then
    guozai = 1 + skilllv_guozai * 0.01 * layer_guozai
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * sizeCorrection * huimie * RuneDamage * Card * GemDam * Num_dy * recursion * guozai
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_1101(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local skilllv_3 = srcUser:GetLernedSkillLevel(damageParam.skill3_id)
  local damChangePer2 = damageParam.damChangePer2
  local damChangePer3 = damageParam.damChangePer3
  local damChangePer4 = damageParam.damChangePer4
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local AtkFinal = Atk * (1 + AtkPer)
  local DefFinal = CommonFun.CalcDef(srcUser, targetUser) * (1 + DefPer2)
  local div = AtkFinal + DefFinal * (1 - IgnoreDef)
  div = div ~= 0 and div or 1
  local skilllv_3_dam = 0
  if skilllv_3 <= 5 then
    skilllv_3_dam = skilllv_3 * 20
  else
    skilllv_3_dam = (skilllv_3 - 5) * Int + 100
  end
  local A = AtkFinal * AtkFinal / div * (1 - DamReduc2) * damChangePer2 * (1 + DamIncrease) * (1 - RefineDamReduc) + skilllv_1 * damChangePer3 + damChangePer4 + skilllv_3_dam
  return A * raceparam * bodyparam * bossparam * elementparam
end

function CommonFun.calcDamage_1102(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local skilllv_fumo = srcUser:GetLernedSkillLevel(1263)
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local Num = srcUser:GetRunePoint(14060)
  local MAtk_fumo = 0
  local MAtkGem = srcUser:GetGemValue(143011)
  MAtk_fumo = MAtk * (1 + MAtkPer) * MAtkGem / 100000
  if srcUser:HasBuffID(117630) then
    MAtk_fumo = MAtk * (1 + MAtkPer) * skilllv_fumo * 0.1 * (1 + Num / 20)
  end
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk + MAtk_fumo) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42190) then
    BaseLvDamage = IBaseLv * 20
  end
  if srcUser:HasBuffID(42200) then
    BaseLvDamage = IBaseLv * 20
  end
  local GemValue1 = srcUser:GetGemValue(11041)
  local GemValue2 = srcUser:GetGemValue(143012)
  local MidGemValue = srcUser:GetGemValue(11042)
  local GemDam = 1 + GemValue1 / 100000 + GemValue2 / 100000
  local MidGemDam = 1
  if CommonFun.Shape.M == targetUser.shape then
    MidGemDam = 1 + MidGemValue / 100000
  end
  if srcUser:HasBuffID(21430100) and srcUser:HasBuffID(96150) then
    DefReduc = 1
  end
  local anyz = 1
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 3007 or skillID == 4401 then
    local skilllv_anyz = srcUser:GetLernedSkillLevel(3007)
    local skilllv_anyz2 = srcUser:GetLernedSkillLevel(4401)
    local skilllv_anyz3 = srcUser:GetLernedSkillLevel(4428)
    if skilllv_1 <= 5 then
      damChangePer = 1 + skilllv_1 * 0.1
      damChangePer1 = 50 + (skilllv_1 - 1) * 25
    elseif 5 < skilllv_1 and skilllv_1 <= 10 then
      damChangePer = 1 + skilllv_1 * 0.1
      damChangePer1 = 150
    else
      damChangePer = 2 + (skilllv_1 - 10) * 0.05
      damChangePer1 = 150
    end
    anyz = (1 + (skilllv_anyz + skilllv_anyz2) * 0.05) * (1 + skilllv_anyz3 * 0.04)
  end
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - ShortRangeDamReduc2) * GemDam * MidGemDam + damChangePer1 - Vit2 * (1 + VitPer2) + BaseLvDamage
  if A <= 1 then
    return 1
  end
  local Buff = srcUser:HasBuffID(80000550)
  local Weapon = srcUser:GetEquipedID(7)
  local B = 1
  if CommonFun.Shape.M == targetUser.shape and (Weapon == 40308 or Weapon == 140308) then
    B = 1.5
  end
  if CommonFun.Shape.M == targetUser.shape and (Weapon == 40359 or Weapon == 140359) then
    B = 1.5
  end
  local fuwen = 1
  if srcUser:HasBuffID(20110100) then
    fuwen = 2
  end
  local Num1 = srcUser:GetRunePoint(11001)
  local Num2 = srcUser:GetRunePoint(11004)
  local Num3 = srcUser:GetRunePoint(11005)
  local Num4 = srcUser:GetRunePoint(11006)
  local Num5 = srcUser:GetRunePoint(11012)
  local Num6 = srcUser:GetRunePoint(11014)
  local Num7 = srcUser:GetRunePoint(11015)
  local Num8 = srcUser:GetRunePoint(11018)
  local Num9 = srcUser:GetRunePoint(11019)
  local Num10 = srcUser:GetRunePoint(11025)
  local RuneDamage = (Num1 + Num2 + Num3 + Num4 + Num5 + Num6 + Num7 + Num8 + Num9 + Num10) * 0.1 + 1
  if bits[CommonFun.AttrEffect.KuangJiDam] == 1 and 10 <= skilllv_1 and Buff == true then
    return (A + Str * 20 * fuwen) * 1.5 * RuneDamage * (1 - RefineDamReduc) * anyz
  elseif (Weapon == 40308 or Weapon == 140308) and 10 <= skilllv_1 and Buff == true then
    return (A + Str * 20 * fuwen) * 2 * B * RuneDamage * (1 - RefineDamReduc) * anyz
  elseif (Weapon == 40359 or Weapon == 140359) and 10 <= skilllv_1 and Buff == true then
    return (A + Str * 20 * fuwen) * 2 * B * RuneDamage * (1 - RefineDamReduc) * anyz
  elseif bits[CommonFun.AttrEffect.KuangJiDam] == 1 and 10 <= skilllv_1 then
    return A * 1.5 * RuneDamage * (1 - RefineDamReduc) * anyz
  elseif (Weapon == 40308 or Weapon == 140308) and 10 <= skilllv_1 then
    return A * 2 * B * RuneDamage * (1 - RefineDamReduc) * anyz
  elseif (Weapon == 40359 or Weapon == 140359) and 10 <= skilllv_1 then
    return A * 2 * B * RuneDamage * (1 - RefineDamReduc) * anyz
  elseif Buff == true then
    return (A + Str * 20 * fuwen) * RuneDamage * (1 - RefineDamReduc) * anyz
  end
  return A * RuneDamage * (1 - RefineDamReduc) * anyz
end

function CommonFun.calcDamage_1103(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local Buff = srcUser:HasBuffID(80001190)
  if Buff == true then
    return A * 1.5
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_1201(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local sizeCorrection = 1
  if nil ~= CommonFun.Shape then
    if CommonFun.Shape.S == targetUser.shape then
      sizeCorrection = 1
    elseif CommonFun.Shape.M == targetUser.shape then
      if srcUser:HasBuffID(91000170) or srcUser:HasBuffID(91000540) or srcUser:HasBuffID(91001530) or srcUser:HasBuffID(91001531) then
        sizeCorrection = 2.2
      elseif srcUser:HasBuffID(90001983) then
        sizeCorrection = 2.6
      else
        sizeCorrection = 2
      end
    elseif CommonFun.Shape.L == targetUser.shape then
      if srcUser:HasBuffID(41721) then
        sizeCorrection = 5.1
      elseif srcUser:HasBuffID(90001173) then
        sizeCorrection = 5.1
      elseif srcUser:HasBuffID(90001172) then
        sizeCorrection = 4.35
      elseif srcUser:HasBuffID(90001171) then
        sizeCorrection = 3.75
      elseif srcUser:HasBuffID(90001170) then
        sizeCorrection = 3.3000000000000003
      else
        sizeCorrection = 3
      end
    end
  end
  local Sign = 1
  local Num1 = targetUser:GetBuffLayer(117660)
  local fromid = targetUser:GetBuffFromID(117660)
  local guid = srcUser:GetGuid()
  local skilllv_1 = srcUser:GetLernedSkillLevel(1267)
  skilllv_1 = math.min(skilllv_1, 5)
  local GemValue = srcUser:GetGemValue(11131)
  if fromid == guid then
    Sign = 1 + (skilllv_1 * 0.01 + 0.02 + GemValue / 100000) * Num1
  end
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42190) then
    BaseLvDamage = IBaseLv * 20
  end
  local GemValue = srcUser:GetGemValue(11081)
  local GemDam = 1
  if CommonFun.Shape.L == targetUser.shape then
    GemDam = 1 + GemValue / 100000
  end
  local skilllv_ha = srcUser:GetLernedSkillLevel(3005)
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits2 = CommonFun.getBits(StateEffect)
  local Heian = 1
  if bits2[CommonFun.StateEffect.Dark] == 1 then
    Heian = 1 + skilllv_ha * 0.04
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) * GemDam - Vit2 * (1 + VitPer2)) * sizeCorrection * Sign * Heian + BaseLvDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_1202(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local HumanRes = targetUser:GetProperty("DemiHumanResPer")
  local count = params.hitedCount
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local countDam = 0.1
  if 10 < skilllv_1 then
    countDam = 0.3
  end
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + countDam * count) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local B = 0
  local Buff = targetUser:HasBuffID(80000240)
  local Weapon = srcUser:GetEquipedID(7)
  if Buff == true then
    B = HumanRes * 100 * 20
  end
  if A - B <= 1 then
    return 1
  end
  local guaiwuhujiM = 1
  if CommonFun.Shape.M == targetUser.shape and srcUser:HasBuffID(90001163) then
    guaiwuhujiM = 1.1
  end
  if CommonFun.Shape.M == targetUser.shape and (Weapon == 40359 or Weapon == 140359) then
    guaiwuhujiM = 1.1
  end
  if bits[CommonFun.AttrEffect.GuaiWuHuJiDam] == 1 and 10 <= skilllv_1 then
    return (A - B) * 1.3 * guaiwuhujiM
  elseif (Weapon == 40308 or Weapon == 140308) and 10 <= skilllv_1 then
    return (A - B) * 2 * guaiwuhujiM
  elseif (Weapon == 40359 or Weapon == 140359) and 10 <= skilllv_1 then
    return (A - B) * 2 * guaiwuhujiM
  end
  return (A - B) * guaiwuhujiM
end

function CommonFun.calcDamage_1203(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(11021)
  local RuneDamage = 1
  if CommonFun.Shape.M == targetUser.shape then
    RuneDamage = 0.03 * Num1 + 1
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_1204(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(12100)
  local RuneDamage = Num1 * 0.15 + 1
  local GemValue = srcUser:GetGemValue(11013)
  local GemDam = 1 + GemValue / 100000
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage * GemDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_1205(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local MRefine = srcUser:GetProperty("MRefine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local skilllv_1 = srcUser:GetLernedSkillLevel(362)
  local Skilldamage = skilllv_1 * 0.3
  local EquipDamage = 0
  local RefineDamage = 0
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  if srcUser:HasBuffID(40400) then
    EquipDamage = 2
    RefineDamage = 0.3 * RefineLv
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRing.id == 42583 or equipRing.id == 142583 then
    EquipDamage = 2
    RefineDamage = 0.3 * equipRing.refinelv
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRingSD.id == 42583 or equipRingSD.id == 142583 then
    EquipDamage = 2
    RefineDamage = 0.3 * equipRingSD.refinelv * equipRingSD.quench_per / 100
  end
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + Skilldamage + EquipDamage + RefineDamage) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if srcUser:HasBuffID(90000965) then
    A = A * 1.1
  end
  if srcUser:HasBuffID(90000969) then
    A = A * 1.2 / 1.1
  end
  local equipRingarmour = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingarmour.id == 42088 or equipRingarmour.id == 142088 then
    A = A * 1.2
  end
  local equipRingSDarmour = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSDarmour.id == 42088 or equipRingSDarmour.id == 142088 then
    A = A * (1 + 0.2 * equipRingSDarmour.quench_per / 100)
  end
  if A <= 1 then
    A = 1
  end
  local srcAtkElement = 6
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local B = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (damChangePer + Skilldamage + EquipDamage + RefineDamage) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  if B <= 1 then
    B = 1
  end
  local Num1 = srcUser:GetRunePoint(70140)
  local RuneDamage = 1 + 0.1 * Num1
  local GemValue = srcUser:GetGemValue(72082)
  local GemDam = 1 + GemValue / 100000
  local C = (A + B) * RuneDamage * GemDam
  if srcUser:HasBuffID(40380) and srcUser:HasBuffID(40400) then
    C = (A + B) * RuneDamage * 1.5 * GemDam
  end
  if srcUser:HasBuffID(41770) and srcUser:HasBuffID(40400) then
    C = (A + B) * RuneDamage * 1.5 * GemDam
  end
  if srcUser:HasBuffID(40380) and srcUser:HasBuffID(43300) then
    C = (A + B) * RuneDamage * 1.5 * GemDam
  end
  if srcUser:HasBuffID(41770) and srcUser:HasBuffID(43300) then
    C = (A + B) * RuneDamage * 1.5 * GemDam
  end
  if equipRingSD.id ~= 0 then
    if srcUser:HasBuffID(40380) and srcUser:HasBuffLayer(43300, EBUFFERLAYER_SHADOW) then
      C = (A + B) * RuneDamage * 1.5 * GemDam
    end
    if srcUser:HasBuffID(41770) and srcUser:HasBuffLayer(43300, EBUFFERLAYER_SHADOW) then
      C = (A + B) * RuneDamage * 1.5 * GemDam
    end
  end
  return C
end

function CommonFun.calcDamage_1206(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local Sign = 1
  local Num1 = targetUser:GetBuffLayer(117660)
  local fromid = targetUser:GetBuffFromID(117660)
  local guid = srcUser:GetGuid()
  local skilllv_1 = srcUser:GetLernedSkillLevel(1267)
  skilllv_1 = math.min(skilllv_1, 5)
  local GemValue = srcUser:GetGemValue(11131)
  if fromid == guid then
    Sign = 1 + (skilllv_1 * 0.01 + 0.02 + GemValue / 100000) * Num1
  end
  local skilllv_ha = srcUser:GetLernedSkillLevel(3005)
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits2 = CommonFun.getBits(StateEffect)
  local Heian = 1
  if bits2[CommonFun.StateEffect.Dark] == 1 then
    Heian = 1 + skilllv_ha * 0.04
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Sign * Heian
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_1207(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local targetid = targetUser:GetGuid()
  local distance = srcUser:GetDistance(targetid)
  local skilllv_1 = srcUser:GetLernedSkillLevel(601)
  local Num1 = srcUser:GetRunePoint(13020)
  local DisDam = 1
  DisDam = 1 + distance * 0.05 * Num1
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * DisDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_1301(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local WeaponType = srcUser:GetEquipedWeaponType()
  local BaseLv = srcUser.BaseLv
  local Refine = srcUser:GetProperty("Refine")
  local damChangePer = damageParam.damChangePer
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = (Atk - BaseAtk) * (1 + AtkPer)
  local sizeCorrection = 1
  if nil ~= CommonFun.Shape then
    if CommonFun.Shape.S == targetUser.shape then
      sizeCorrection = 1.3
    elseif CommonFun.Shape.M == targetUser.shape then
      sizeCorrection = 1
    elseif CommonFun.Shape.L == targetUser.shape then
      sizeCorrection = 0.8
    end
  end
  local WeaponType_value = 0
  if WeaponType == 170 then
    WeaponType_value = 2
  else
    WeaponType_value = 0.5
  end
  local Weapon = srcUser:GetEquipedID(7)
  local calcfbzq = 1
  if Weapon == 40041 or Weapon == 140041 then
    calcfbzq = 1.1
  end
  if Weapon == 40055 or Weapon == 140055 then
    calcfbzq = calcfbzq + 0.15
  end
  local Sign = 1
  local Num1 = targetUser:GetBuffLayer(117660)
  local fromid = targetUser:GetBuffFromID(117660)
  local guid = srcUser:GetGuid()
  local skilllv_1 = srcUser:GetLernedSkillLevel(1267)
  skilllv_1 = math.min(skilllv_1, 5)
  local GemValue = srcUser:GetGemValue(11131)
  if fromid == guid then
    Sign = 1 + (skilllv_1 * 0.01 + 0.02 + GemValue / 100000) * Num1
  end
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local GemValue = srcUser:GetGemValue(11072)
  local GemDam = 1 + GemValue / 100000
  local skilllv_ha = srcUser:GetLernedSkillLevel(3005)
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits2 = CommonFun.getBits(StateEffect)
  local Heian = 1
  if bits2[CommonFun.StateEffect.Dark] == 1 then
    Heian = 1 + skilllv_ha * 0.04
  end
  local A = (((Str / 4) ^ 2 + WeaponType_value * AtkFinal * elementparam * bodyparam) * damChangePer + Refine * 15 + BaseLv * 15) * raceparam * bossparam * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) * (1 - DamReduc2) * sizeCorrection * elementparam2 * bossparam2 * calcfbzq * Sign * GemDam * Heian
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_1302(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local WeaponType = srcUser:GetEquipedWeaponType()
  local BaseLv = srcUser.BaseLv
  local Refine = srcUser:GetProperty("Refine")
  local damChangePer = damageParam.damChangePer
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = (Atk - BaseAtk) * (1 + AtkPer)
  local sizeCorrection = 1
  if nil ~= CommonFun.Shape then
    if CommonFun.Shape.S == targetUser.shape then
      sizeCorrection = 1.3
    elseif CommonFun.Shape.M == targetUser.shape then
      sizeCorrection = 1
    elseif CommonFun.Shape.L == targetUser.shape then
      sizeCorrection = 0.8
    end
  end
  local WeaponType_value = 0
  if WeaponType == 170 then
    WeaponType_value = 2
  else
    WeaponType_value = 0.5
  end
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (((Str / 4) ^ 2 + WeaponType_value * AtkFinal * elementparam * bodyparam) * damChangePer + Refine * 15 + BaseLv * 5) * raceparam * bossparam * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) * (1 - DamReduc2) * sizeCorrection * elementparam2 * bossparam2
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_1401(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) * elementparam * elementparam2 + BaseMAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser, params)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local Vit = srcUser:GetProperty("Vit")
  local VitRatio = 1 + Vit / 1000
  local HpFire = 1
  if srcUser:HasBuffID(80220) or srcUser:HasBuffID(80223) then
    HpFire = 1.2
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1260)
  local Ride = 1
  if srcUser:HasEquipFeature(1) then
    Ride = 1 + skilllv_1 * 0.05
  end
  local Dragon = 1
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(41200) then
    Dragon = 1 + RefineLv7 * 0.01
  end
  local Dragon1 = 0
  if srcUser:HasBuffID(41200) and 15 <= RefineLv7 then
    Dragon1 = 1
  end
  if srcUser:HasBuffID(41740) then
    Dragon = 1 + RefineLv7 * 0.01
  end
  if srcUser:HasBuffID(41740) and 15 <= RefineLv7 then
    Dragon1 = 2
  end
  local Numxp = srcUser:GetRunePoint(14020)
  local RuneDamage = 1 + Numxp * 0.06
  local card = 1
  if srcUser:HasBuffID(52580) then
    card = 1.1
  end
  local GemValue = srcUser:GetGemValue(11001)
  local GemDam = 1 + GemValue / 100000
  local Sign = 1
  local Num1 = targetUser:GetBuffLayer(117660)
  local fromid = targetUser:GetBuffFromID(117660)
  local guid = srcUser:GetGuid()
  local skilllv_1 = srcUser:GetLernedSkillLevel(1267)
  skilllv_1 = math.min(skilllv_1, 5)
  local GemValue = srcUser:GetGemValue(11131)
  if fromid == guid then
    Sign = 1 + (skilllv_1 * 0.01 + 0.02 + GemValue / 100000) * Num1
  end
  local A = (((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine + MRefine) * (damChangePer + Dragon1) * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * HpFire * VitRatio * Ride * Dragon * RuneDamage * card * GemDam * Sign
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 3008 or skillID == 3015 then
    local skilllv_hlx = srcUser:GetLernedSkillLevel(1261)
    local skilllv_slx = srcUser:GetLernedSkillLevel(1272)
    local damChangePer_hlx = skilllv_hlx * 0.5 + 6.6
    local damChangePer_slx = skilllv_slx * 0.5 + 6.6
    local hlx = damageParam.hlx
    local slx = damageParam.slx
    local Dam_hlx = (((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine + MRefine) * (damChangePer_hlx + Dragon1) * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * HpFire * VitRatio * Ride * Dragon * RuneDamage * card * GemDam * Sign
    local Dam_slx = (((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine + MRefine) * (damChangePer_slx + Dragon1) * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * HpFire * VitRatio * Ride * Dragon * RuneDamage * card * GemDam * Sign
    if skilllv_hlx < 1 then
      Dam_hlx = 0
    end
    if skilllv_slx < 1 then
      Dam_slx = 0
    end
    local skilllv_ml = srcUser:GetLernedSkillLevel(3008)
    local GemValue_lx = srcUser:GetGemValue(11161)
    local Dam_alx = 0
    if 0 < GemValue_lx and hlx == 0 and slx == 0 then
      Dam_alx = (((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine + MRefine) * (damChangePer_hlx + Dragon1) * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * HpFire * VitRatio * Ride * Dragon * RuneDamage * card * GemDam * Sign
    end
    A = (Dam_hlx * hlx + Dam_slx * slx) * (skilllv_ml * 0.06 + 0.2) + Dam_alx * GemValue_lx / 100000
  end
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  local GemState = srcUser:GetGemValue(11002)
  local skilllv_ha = srcUser:GetLernedSkillLevel(3005)
  if bits[CommonFun.StateEffect.Burn] == 1 or bits[CommonFun.StateEffect.Freeze] == 1 then
    A = A * (1 + GemState / 100000)
  end
  if bits[CommonFun.StateEffect.Dark] == 1 then
    A = A * (1 + skilllv_ha * 0.04)
  end
  local enemy = srcUser:IsEnemy(targetUser)
  if enemy == false then
    return 0, CommonFun.DamageType.None
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_1402(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Sign = 1
  local Num1 = targetUser:GetBuffLayer(117660)
  local fromid = targetUser:GetBuffFromID(117660)
  local guid = srcUser:GetGuid()
  local skilllv_1 = srcUser:GetLernedSkillLevel(1267)
  skilllv_1 = math.min(skilllv_1, 5)
  local GemValue = srcUser:GetGemValue(11131)
  local Fifth = 0
  if srcUser:HasBuffID(90002003) then
    Fifth = 0.01
  end
  if fromid == guid then
    Sign = 1 + (skilllv_1 * 0.01 + 0.02 + GemValue / 100000 + Fifth) * Num1
  end
  local skilllv_ha = srcUser:GetLernedSkillLevel(3005)
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits2 = CommonFun.getBits(StateEffect)
  local Heian = 1
  if bits2[CommonFun.StateEffect.Dark] == 1 then
    Heian = 1 + skilllv_ha * 0.04
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Sign * Heian
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1266 then
    local Num = srcUser:GetRunePoint(14040)
    local RuneDamage = 1 + Num * 0.06
    local calcfbzq = 1
    local RefineLv = srcUser:GetEquipedRefineLv(7)
    if 10 <= RefineLv and srcUser:HasBuffID(90002003) then
      calcfbzq = calcfbzq + 0.15
    end
    local GemValue = srcUser:GetGemValue(11071)
    local GemDam = 1 + GemValue / 100000
    A = A * RuneDamage * calcfbzq * GemDam
  end
  if skillID == 3006 then
    local targetRace = targetUser.race
    if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
    elseif srcUser:HasBuffID(49320) then
      targetRace = 2
    end
    local skilllv_ch = srcUser:GetLernedSkillLevel(3021)
    local ch = 1
    if targetRace == 2 then
      ch = 1.2 + skilllv_ch * 0.05
    end
    local sizeCorrection = 1
    if nil ~= CommonFun.Shape and CommonFun.Shape.L == targetUser.shape and srcUser:HasBuffID(90004184) then
      sizeCorrection = 1.5
    end
    A = A * ch * sizeCorrection
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_1501(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_2103(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local Num1 = srcUser:GetRunePoint(22018)
  local RuneRate = Num1 * 8
  local RuneDamage = Num1 * 0.1 + 1
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local enemy = srcUser:IsEnemy(targetUser)
  local race2 = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    race2 = 2
  end
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local damChangePer2 = damageParam.damChangePer2
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42110) then
    BaseLvDamage = IBaseLv * 15
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 + damChangePer2 + BaseLvDamage
  if CommonFun.IsInRate(RuneRate, srcUser:GetRandom()) then
    if race2 == 5 then
      return A * (1 + damChangePer1) * RuneDamage
    else
      return A * RuneDamage
    end
  elseif race2 == 5 then
    return A * (1 + damChangePer1)
  else
    return A
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_2201(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2 * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42110) then
    BaseLvDamage = IBaseLv * 15
  end
  local Num1 = srcUser:GetRunePoint(223006)
  local RuneDamage = Num1 * 0.1 + 1
  local A = ((MAtkFinal * DefReduc * (1 - DamReduc2) + MRefine) * (1 - RefineDamReduc) * damChangePer - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + MDamIncrease) * RuneDamage + BaseLvDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_2301(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2 * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2
  local Num1 = targetUser:GetBuffLayer(85140)
  local Num2 = targetUser:GetBuffLayer(85141)
  local Num = math.max(Num1, Num2)
  local A = ((MAtkFinal * (1 - MDamReduc2) * damChangePer + 50 + MRefine) * (1 - RefineMDamReduc) * damChangePer1 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + MDamIncrease) * (1 + Num * 0.8)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_2302(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Num1 = srcUser:GetBuffLayer(42000226)
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2) + damChangePer1 * math.pow(2, Num1) * (1 - RefineMDamReduc)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_2303(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Num1 = srcUser:GetRunePoint(24040)
  local RuneDamage = 1 + Num1 * 0.05
  local card = 1
  if srcUser:HasBuffID(52550) then
    card = 1.1
  end
  local GemValue = srcUser:GetGemValue(21131)
  local GemValue_jy = srcUser:GetGemValue(21132)
  local GemDam = 1 + GemValue / 100000
  if srcUser:HasBuffID(20210130) then
    MDefReduc = 1
  end
  local Ghost = 1
  local skilllv_qn = srcUser:GetLernedSkillLevel(3110)
  if srcUser:HasBuffID(125130) then
    Ghost = 1 + skilllv_qn * 0.06
  end
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * card * RuneDamage * GemDam * Ghost
  if (skillID == 5000 or skillID == 1167) and targetUser:HasBuffID(116810) then
    A = A * (2 + GemValue_jy / 100000)
  end
  if skillID == 5000 then
    local DamageRatio = 1
    if srcUser:HasBuffID(80001090) then
      DamageRatio = 1.1
    end
    local Num2 = srcUser:GetRunePoint(23030)
    local RuneDamage2 = Num2 * 0.05 + 1
    A = A * DamageRatio * RuneDamage2
    local Num3 = srcUser:GetRunePoint(22050)
    local RuneDamage3 = Num3 * 0.1 + 1
    local RuneRate = 0
    if 0 < Num3 then
      RuneRate = Luk / 3
    end
    if targetUser:GetNpcID() ~= 0 then
      A = A * 1.5
    end
    if CommonFun.IsInRate(RuneRate, srcUser:GetRandom()) then
      return A * RuneDamage3, CommonFun.DamageType.Crit
    end
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_2304(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local target_Hp = targetUser:GetProperty("Hp")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Num1 = srcUser:GetRunePoint(24070)
  local RuneDamage = Num1 * 4
  if targetUser.boss == true or targetUser.mini == true or targetUser:HasBuffID(160000) then
    target_Hp = 0
  end
  local A = target_Hp * MDefReduc * (1 - MDamReduc2) * (damChangePer + RuneDamage) / 100 * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_2305(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1941 then
    local skilllv_smz = srcUser:GetLernedSkillLevel(1915)
    local skilllv_ljp = srcUser:GetLernedSkillLevel(1913)
    local index = params.hitedIndex
    local JumpRatio = math.pow(0.85 + skilllv_ljp * 0.005, index - 1)
    damChangePer = (6.8 + 0.7 * skilllv_smz) * JumpRatio
  end
  local GemValue_nian = srcUser:GetGemValue(21162)
  if skillID == 1164 and damChangePer == 0 and srcUser:HasBuffID(1000031) then
    local skill_ys = srcUser:GetLernedSkillLevel(1164)
    damChangePer = (0.7 * skill_ys + 6.8) * (1 + GemValue_nian / 100000)
  end
  if skillID == 5004 then
    local skill_ys = srcUser:GetLernedSkillLevel(1164)
    damChangePer = (0.7 * skill_ys + 6.8) * 4
  end
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  local Num1 = srcUser:GetRunePoint(24010)
  local Num2 = srcUser:GetRunePoint(223015)
  local RuneDamage = 1 + (Num1 + Num2) * 0.04
  local GemValue = srcUser:GetGemValue(21031)
  local GemDam = 1
  if targetDefElement ~= 1 and targetDefElement ~= 2 and targetDefElement ~= 3 and targetDefElement ~= 4 then
    GemDam = 1 + GemValue / 100000
  end
  A = A * RuneDamage * GemDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_2306(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local index = params.hitedIndex
  local Num1 = srcUser:GetRunePoint(24020)
  local Num2 = srcUser:GetRunePoint(223016)
  local RuneDamage = (Num1 + Num2) * 0.03 + 1.1
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local index_fs = srcUser:GetTargetNumLimit(1165)
  local index_xd = srcUser:GetTargetNumLimit(1913)
  if srcUser:HasBuffID(22000560) then
    index = math.max(index_fs, index_xd)
  end
  local JumpRatio = math.pow(RuneDamage, index)
  local DamGem = srcUser:GetGemValue(21011)
  local Fifth = 1
  if srcUser:HasBuffID(90004764) then
    Fifth = Fifth + 0.1
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * JumpRatio * (1 + DamGem / 100000) * Fifth
  if skillID == 75200 then
    RuneDamage = 1.1
    A = math.pow(RuneDamage, index) * damChangePer * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam)
  end
  if skillID == 79134 then
    local Hp = targetUser:GetProperty("Hp")
    local GetNpcID = targetUser:GetNpcID()
    if GetNpcID == 310001 or GetNpcID == 310002 or GetNpcID == 310008 or GetNpcID == 310009 or GetNpcID == 310011 or GetNpcID == 310012 or GetNpcID == 310018 or GetNpcID == 310019 then
      A = A + Hp * 0.02
    end
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_2307(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = 0
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local skilllv_1 = srcUser:GetLernedSkillLevel(800)
  if skilllv_1 == 1 then
    damChangePer = 2.8
  elseif skilllv_1 == 2 then
    damChangePer = 6.720000000000001
  elseif skilllv_1 == 3 then
    damChangePer = 8.64
  elseif skilllv_1 == 3 then
    damChangePer = 8.64
  elseif skilllv_1 == 4 then
    damChangePer = 15.84
  elseif skilllv_1 == 5 then
    damChangePer = 18.72
  elseif skilllv_1 == 6 then
    damChangePer = 30
  elseif skilllv_1 == 7 then
    damChangePer = 34.0
  elseif skilllv_1 == 8 then
    damChangePer = 38.0
  end
  local GemValue1 = srcUser:GetGemValue(21001)
  local GemValue2 = srcUser:GetGemValue(21002)
  local GemDam = 1 + GemValue2 / 100000
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * (damChangePer * GemValue1 / 100000) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam) * GemDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_3101(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Hiding = srcUser:GetProperty("Hiding")
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  local Num1 = srcUser:GetRunePoint(31001)
  local Num2 = srcUser:GetRunePoint(31002)
  local Num3 = srcUser:GetRunePoint(31003)
  local Num4 = srcUser:GetRunePoint(31004)
  local Num5 = srcUser:GetRunePoint(31005)
  local RuneDamage = Num1 * 0.05 + Num2 * 0.1 + Num3 * 0.05 + Num4 * 0.05 + Num5 * 0.05 + 1
  local Num6 = srcUser:GetRunePoint(90120)
  local RuneDamage2 = 0.1 * Num6 + 1
  if Hiding == 1 or bits[CommonFun.AttrEffect.HideStrengthEffect] == 1 then
    if bits2[CommonFun.AttrEffect.Hualiduanjian] == 1 then
      return A * 2 * 1.5 * RuneDamage * RuneDamage2
    else
      return A * 2 * RuneDamage * RuneDamage2
    end
  elseif bits2[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_3102(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local StateEffect2 = targetUser:GetProperty("StateEffect")
  local bits2 = CommonFun.getBits(StateEffect2)
  local AttrEffect3 = srcUser:GetProperty("AttrEffect")
  local bits3 = CommonFun.getBits(AttrEffect3)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Weapon = srcUser:GetEquipedID(7)
  local B = 1
  if Weapon == 40738 or Weapon == 140738 then
    B = 2
  end
  local weaponRefineLv_2 = srcUser:GetEquipedRefineLv(7)
  local zidu = 0
  if srcUser:HasBuffID(90001313) then
    zidu = weaponRefineLv_2 * 0.1
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + zidu) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * B
  if A <= 1 then
    return 1
  end
  local C = 1.25
  if srcUser:HasBuffID(90001040) then
    C = 1.3
  end
  if srcUser:HasBuffID(90001046) then
    C = 1.4000000000000001
  end
  local Num1 = srcUser:GetRunePoint(31021)
  local Num2 = srcUser:GetRunePoint(31022)
  local Num3 = srcUser:GetRunePoint(31023)
  local RuneDamage = Num1 * 0.1 + Num2 * 0.05 + Num3 * 0.05 + 1
  if bits[CommonFun.AttrEffect.DuRenAndWuYingDam] == 1 and bits2[CommonFun.StateEffect.Poison] == 1 and bits3[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 2 * C * 1.5 * RuneDamage
  elseif bits[CommonFun.AttrEffect.DuRenAndWuYingDam] == 1 and bits2[CommonFun.StateEffect.Poison] == 1 then
    return A * 2 * C * RuneDamage
  elseif bits[CommonFun.AttrEffect.DuRenAndWuYingDam] == 1 and bits3[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * C * 1.5
  elseif bits2[CommonFun.StateEffect.Poison] == 1 and bits3[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 2 * 1.5 * RuneDamage
  elseif bits[CommonFun.AttrEffect.DuRenAndWuYingDam] == 1 then
    return A * C
  elseif bits2[CommonFun.StateEffect.Poison] == 1 then
    return A * 2 * RuneDamage
  elseif bits3[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_3103(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42160) then
    BaseLvDamage = IBaseLv * 20
  end
  if srcUser:HasBuffID(42170) then
    BaseLvDamage = IBaseLv * 20
  end
  local card = 1
  if srcUser:HasBuffID(80012130) then
    card = 1.05
  end
  local shamo = 0
  local RefineLv1 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(90001293) and 15 <= RefineLv1 then
    shamo = 1
  end
  if srcUser:HasBuffID(41850) and 15 <= RefineLv1 then
    shamo = 1
  end
  local Wing = srcUser:GetEquipedID(11)
  local RefineLv = srcUser:GetEquipedRefineLv(11)
  local time = 1
  if Wing == 45249 then
    time = 1 + RefineLv / 100
  end
  local Num1 = srcUser:GetRunePoint(33010)
  local RuneDamage = Num1 * 0.03
  local DefReduc2 = math.min(1, DefReduc + RuneDamage)
  local szGem = srcUser:GetGemValue(31051)
  local ytGem = srcUser:GetGemValue(31052)
  local A = ((AtkFinal * DefReduc2 * (1 - DamReduc2) + Refine) * (damChangePer + card + shamo) * (1 + skilllv_1 * 0.2) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * time * card * (1 + ytGem / 100000) + BaseLvDamage
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1111 then
    local skilllv_yintou = srcUser:GetLernedSkillLevel(181)
    local skilllv_shizi = srcUser:GetLernedSkillLevel(1111)
    local damChangePer = 2.4
    if skilllv_yintou <= 10 then
      damChangePer = 2 + 0.4 * skilllv_yintou
    elseif 10 < skilllv_yintou then
      damChangePer = 6 + 0.2 * (skilllv_yintou - 10)
    end
    if srcUser:HasBuffID(53380) then
      card = card + 0.15
    end
    if srcUser:HasBuffID(116043) and srcUser:HasBuffID(90004314) then
      card = card + 0.15
    end
    A = ((AtkFinal * DefReduc2 * (1 - DamReduc2) + Refine) * (damChangePer + card + shamo) * (1 + skilllv_1 * 0.2) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * time * card * (0.8 + 0.4 * skilllv_shizi) * (1 + ytGem / 100000) * (1 + szGem / 100000)
  end
  if A <= 1 then
    return 1
  end
  if bits[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_3104(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local Hp2 = targetUser:GetProperty("Hp")
  local MaxHp2 = targetUser:GetProperty("MaxHp")
  local damChangePer = damageParam.damChangePer
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  if Hp2 <= MaxHp2 * 0.3 then
    if bits[CommonFun.AttrEffect.Hualiduanjian] == 1 then
      return A * 2 * 1.5
    else
      return A * 2
    end
  elseif bits[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_3105(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser, params)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(32060)
  local Num2 = srcUser:GetRunePoint(32080)
  local RuneDamage1 = 0.2 * Num1 + 1
  local RuneDamage2 = 6 * Num2
  local Bracelet = srcUser:GetEquipedID(1)
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local LuckKnifeRatio = 1
  if 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Bracelet == 61506 or Bracelet == 161506) then
    LuckKnifeRatio = 1.15
  end
  local RefineLv1 = srcUser:GetEquipedRefineLv(1)
  if 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Bracelet == 61506 or Bracelet == 161506) and 10 <= RefineLv1 and RefineLv1 < 15 and srcUser:HasBuffID(90001863) then
    LuckKnifeRatio = LuckKnifeRatio + 0.02
  elseif 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Bracelet == 61506 or Bracelet == 161506) and 15 <= RefineLv1 and srcUser:HasBuffID(90001863) then
    LuckKnifeRatio = LuckKnifeRatio + 0.06
  end
  if 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Bracelet == 42593 or Bracelet == 142593) then
    LuckKnifeRatio = 1.15
  end
  if 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Bracelet == 42593 or Bracelet == 142593) and 10 <= RefineLv1 and RefineLv1 < 15 then
    LuckKnifeRatio = LuckKnifeRatio + 0.02
  elseif 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Bracelet == 42593 or Bracelet == 142593) and 15 <= RefineLv1 then
    LuckKnifeRatio = LuckKnifeRatio + 0.06
  end
  if 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Bracelet == 42593 or Bracelet == 142593) and 8 <= RefineLv1 then
    LuckKnifeRatio = LuckKnifeRatio + (RefineLv1 - 8) * 0.01
  end
  if 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Bracelet == 42624 or Bracelet == 142624 or Bracelet == 42625 or Bracelet == 142625 or Bracelet == 42626 or Bracelet == 142626) and RefineLv1 < 10 then
    LuckKnifeRatio = LuckKnifeRatio + 0.1
  elseif 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Bracelet == 42624 or Bracelet == 142624 or Bracelet == 42625 or Bracelet == 142625 or Bracelet == 42626 or Bracelet == 142626) and 10 <= RefineLv1 and RefineLv1 < 15 then
    LuckKnifeRatio = LuckKnifeRatio + 0.1 + 0.04
  elseif 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Bracelet == 42624 or Bracelet == 142624 or Bracelet == 42625 or Bracelet == 142625 or Bracelet == 42626 or Bracelet == 142626) and 15 <= RefineLv1 then
    LuckKnifeRatio = LuckKnifeRatio + 0.1 + 0.04 + 0.04
  end
  local RefineLv4 = srcUser:GetEquipedRefineLv(4)
  local Weapon4 = srcUser:GetEquipedID(4)
  if 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Weapon4 == 43619 or Weapon4 == 143619 or Weapon4 == 43620 or Weapon4 == 143620 or Weapon4 == 43621 or Weapon4 == 143621) and RefineLv4 < 12 then
    LuckKnifeRatio = LuckKnifeRatio + 0.02
  elseif 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Weapon4 == 43619 or Weapon4 == 143619 or Weapon4 == 43620 or Weapon4 == 143620 or Weapon4 == 43621 or Weapon4 == 143621) and 12 <= RefineLv4 and RefineLv4 < 15 then
    LuckKnifeRatio = LuckKnifeRatio + 0.02 + 0.02
  elseif 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Weapon4 == 43619 or Weapon4 == 143619 or Weapon4 == 43620 or Weapon4 == 143620 or Weapon4 == 43621 or Weapon4 == 143621) and 15 <= RefineLv4 then
    LuckKnifeRatio = LuckKnifeRatio + 0.02 + 0.02 + 0.02
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv5 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv6 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 0
  if 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Ring1 == 44010 or Ring1 == 144010) and 12 <= RefineLv5 and 4 <= order1 then
    a = 0.04
  end
  if 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Ring2 == 44010 or Ring2 == 144010) and 12 <= RefineLv6 and 4 <= order2 then
    b = 0.04
  end
  if 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Ring1 == 44052 or Ring1 == 44052) and 12 <= RefineLv5 then
    a = 0.04
  end
  if 15 <= RefineLv and (Weapon == 140715 or Weapon == 40715 or Weapon == 40803 or Weapon == 140803) and (Ring2 == 44052 or Ring2 == 144052) and 12 <= RefineLv6 then
    b = 0.04
  end
  LuckKnifeRatio = LuckKnifeRatio + a + b
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  local skilllv_1 = srcUser:GetLernedSkillLevel(1108)
  local Fear = 1
  local WeaponType = srcUser:GetEquipedWeaponType()
  if 10 < skilllv_1 and WeaponType == 250 then
    Fear = Fear + (skilllv_1 - 10) * 0.03
  end
  if bits[CommonFun.StateEffect.Fear] == 1 and 1 <= skilllv_1 then
    Fear = Fear + math.min(skilllv_1, 10) * 0.03
  end
  local xlGem = srcUser:GetGemValue(31062)
  local shehun = 1
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 3906 then
    local skilllv_xl = srcUser:GetLernedSkillLevel(188)
    local skilllv_shb = srcUser:GetLernedSkillLevel(3906)
    damChangePer = 1.2 + 0.8 * skilllv_xl
    damChangePer1 = math.min(skilllv_xl, 10)
    local Num = srcUser:GetBuffLayer(130503)
    local DamGem = srcUser:GetGemValue(31161)
    shehun = (1 + skilllv_shb * 0.03) * (1 + DamGem / 100000 * Num)
  end
  if Int <= 0 then
    Int = 1
  end
  local rand_a = math.floor(Int * Int / 100 * 5 * RuneDamage1)
  local rand_b = math.floor(Int * Int / 100 * 50 * RuneDamage1)
  local Fifth = math.random(rand_a, rand_b)
  if srcUser:HasBuffID(90004844) then
    Fifth = rand_b
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer + Int * Int / 100 * (5 * damChangePer1 + 20 + RuneDamage2) + Fifth - Vit2 * (1 + VitPer2)) * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) * LuckKnifeRatio * Fear * (1 + xlGem / 100000) * shehun
  if A <= 1 then
    return 1
  end
  if bits[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  local xinling = 0
  if srcUser:HasBuffID(90001973) and 10 <= RefineLv7 then
    xinling = xinling + 0.2
  end
  if srcUser:HasBuffID(90001977) then
    xinling = xinling + 0.05
  end
  if srcUser:HasBuffID(90001977) and 5 <= RefineLv7 then
    xinling = xinling + 0.05
  end
  if srcUser:HasBuffID(90001977) and 15 <= RefineLv7 then
    xinling = xinling + 0.1
  end
  local Clever = 0
  if srcUser:HasBuffID(22870) then
    if RefineLv7 < 5 then
      Clever = Clever + 0.25
    elseif 5 <= RefineLv7 and RefineLv7 < 10 then
      Clever = Clever + 0.25 + 0.05
    elseif 10 <= RefineLv7 and RefineLv7 < 15 then
      Clever = Clever + 0.25 + 0.05 + 0.2
    elseif 15 <= RefineLv7 then
      Clever = Clever + 0.25 + 0.05 + 0.2 + 0.1
    end
  end
  if Weapon == 40715 or Weapon == 140715 or Weapon == 40803 or Weapon == 140803 then
    return A * (1.2 + xinling + Clever)
  end
  return A
end

function CommonFun.calcDamage_3106(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - ShortRangeDamReduc2) + damChangePer1) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  local Num1 = srcUser:GetRunePoint(31016)
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  local a = Num1 * 10
  if bits[CommonFun.StateEffect.Poison] == 1 and CommonFun.IsInRate(a, srcUser:GetRandom()) and bits2[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 2 * 1.5, CommonFun.DamageType.Crit
  elseif bits[CommonFun.StateEffect.Poison] == 1 and CommonFun.IsInRate(a, srcUser:GetRandom()) then
    return A * 2, CommonFun.DamageType.Crit
  elseif bits2[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_3201(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42170) then
    BaseLvDamage = IBaseLv * 20
  end
  local Num1 = srcUser:GetRunePoint(32026)
  local Num2 = srcUser:GetRunePoint(32027)
  local Num3 = srcUser:GetRunePoint(32028)
  local Num4 = srcUser:GetRunePoint(32029)
  local Num5 = srcUser:GetRunePoint(32030)
  local RuneDamage = Num1 * 0.1 + Num2 * 0.05 + Num3 * 0.05 + Num4 * 0.1 + Num5 * 0.05 + 1
  local Num6 = srcUser:GetRunePoint(32019)
  local Num7 = srcUser:GetRunePoint(32020)
  local Num8 = srcUser:GetRunePoint(32021)
  local Num9 = srcUser:GetRunePoint(32022)
  local Num10 = srcUser:GetRunePoint(32023)
  local RuneDamage2 = Num6 * 0.2 + Num7 * 0.2 + Num8 * 0.4 + Num9 * 0.2 + Num10 * 0.4 + 1
  local RuneRate = (Num6 + Num7 + Num8 + Num9 + Num10) * 5
  local DamGem = srcUser:GetGemValue(31101)
  local A = (((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) + damChangePer1) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * RuneDamage * (1 + DamGem / 100000) + BaseLvDamage
  if A <= 1 then
    return 1
  end
  local B = 1
  if bits[CommonFun.AttrEffect.DuRenAndWuYingDam] == 1 and srcUser:HasBuffID(90001044) and srcUser:HasBuffID(90001047) then
    B = 2
  elseif bits[CommonFun.AttrEffect.DuRenAndWuYingDam] == 1 and srcUser:HasBuffID(90001044) then
    B = 1.8
  elseif bits[CommonFun.AttrEffect.DuRenAndWuYingDam] == 1 then
    B = 1.5
  end
  local C = 1
  if bits2[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    C = 1.5
  end
  if CommonFun.IsInRate(RuneRate, srcUser:GetRandom()) then
    return A * B * C * RuneDamage2, CommonFun.DamageType.Crit
  end
  return A * B * C
end

function CommonFun.calcDamage_3202(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(32006)
  local Num2 = srcUser:GetRunePoint(32007)
  local Num3 = srcUser:GetRunePoint(32008)
  local Num4 = srcUser:GetRunePoint(32009)
  local RuneDamage = Num1 * 0.05 + Num2 * 0.1 + Num3 * 0.1 + Num4 * 0.05 + 1
  local A = (((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) + damChangePer1) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * RuneDamage
  if A <= 1 then
    return 1
  end
  if bits2[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_3301(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local StateEffect2 = targetUser:GetProperty("StateEffect")
  local bits2 = CommonFun.getBits(StateEffect2)
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - ShortRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  local Num1 = srcUser:GetRunePoint(32120)
  local a = 0
  if 0 < Num1 then
    a = 20
  end
  local RuneDamage = Num1 * 0.1 + 1
  if bits[CommonFun.AttrEffect.HeiAnDam] == 1 and bits2[CommonFun.AttrEffect.Hualiduanjian] == 1 and CommonFun.IsInRate(a, srcUser:GetRandom()) then
    return A * 1.5 * 1.5 * RuneDamage, CommonFun.DamageType.Crit
  elseif bits[CommonFun.AttrEffect.HeiAnDam] == 1 and CommonFun.IsInRate(a, srcUser:GetRandom()) then
    return A * 1.5 * RuneDamage, CommonFun.DamageType.Crit
  elseif bits2[CommonFun.AttrEffect.Hualiduanjian] == 1 and CommonFun.IsInRate(a, srcUser:GetRandom()) then
    return A * 1.5 * RuneDamage, CommonFun.DamageType.Crit
  elseif CommonFun.IsInRate(a, srcUser:GetRandom()) then
    return A * RuneDamage, CommonFun.DamageType.Crit
  elseif bits[CommonFun.AttrEffect.HeiAnDam] == 1 then
    return A * 1.5
  elseif bits2[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_3401(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local WeaponType = srcUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local NormalAtkDam = 0
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local skilllv_xueren = srcUser:GetLernedSkillLevel(6100)
  if skillID == 6104 then
    local xiaodao = srcUser:GetBuffLayer(1011001)
    damChangePer = skilllv_xueren * 0.1 * xiaodao
    NormalAtkDam = srcUser:GetProperty("NormalAtkDam")
  end
  local NormalEnd = 1 + NormalAtkDam
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * NormalEnd
  if skillID == 1104 then
    local Num1 = srcUser:GetRunePoint(34010)
    local Num2 = srcUser:GetBuffLayer(116080)
    A = A * (1 + Num1 * 0.01 * Num2)
  end
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect2)
  if bits[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    A = A * 1.5
  end
  if skillID == 6104 then
    local WeaponType = srcUser:GetEquipedWeaponType()
    local Cri = srcUser:GetProperty("Cri")
    local CriRes2 = targetUser:GetProperty("CriRes")
    local CriDamPer = srcUser:GetProperty("CriDamPer")
    local CriDefPer2 = targetUser:GetProperty("CriDefPer")
    local skilllv_xueren1 = srcUser:GetLernedSkillLevel(6101)
    local Rate = 0
    if 1 <= skilllv_xueren1 then
      Rate = (Cri - CriRes2) * (0.15 + skilllv_xueren1 * 0.03)
    end
    if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
      A = ((AtkFinal * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * NormalEnd
      return A * (1.5 + CriDamPer - CriDefPer2), CommonFun.DamageType.Crit
    end
  end
  return A
end

function CommonFun.calcDamage_3402(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local WeaponType = srcUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local Num1 = srcUser:GetBuffLayer(116080)
  local Numxp = srcUser:GetRunePoint(34020)
  local Point = 1 + Num1 * (0.2 + Numxp * 0.03)
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  local luoqi = 1
  if srcUser:HasBuffID(90001038) then
    if 5 <= RefineLv7 and RefineLv7 < 10 then
      luoqi = 1.05
    elseif 10 <= RefineLv7 and RefineLv7 < 15 then
      luoqi = 1.1
    elseif 15 <= RefineLv7 then
      luoqi = 1.2
    end
  end
  if srcUser:HasBuffID(41860) then
    if 5 <= RefineLv7 and RefineLv7 < 10 then
      luoqi = 1.05
    elseif 10 <= RefineLv7 and RefineLv7 < 15 then
      luoqi = 1.1
    elseif 15 <= RefineLv7 then
      luoqi = 1.2
    end
  end
  local RefineLv3 = srcUser:GetEquipedRefineLv(3)
  if srcUser:HasBuffID(90001963) and 5 < RefineLv3 then
    luoqi = luoqi + (RefineLv3 - 5) * 0.01
  end
  if srcUser:HasBuffID(90001038) and srcUser:HasBuffID(40420) then
    luoqi = luoqi + 0.05
  end
  if srcUser:HasBuffID(41860) and srcUser:HasBuffID(40420) then
    luoqi = luoqi + 0.05
  end
  if srcUser:HasBuffID(90004324) then
    luoqi = luoqi + 0.15
  end
  local GemValue = srcUser:GetGemValue(31131)
  local GemDam = 1 + GemValue / 100000
  if srcUser:HasBuffID(20310130) then
    DefReduc = 1
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Point * luoqi * GemDam
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect2)
  if bits[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_3501(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local Hp2 = targetUser:GetProperty("Hp")
  local MaxHp2 = targetUser:GetProperty("MaxHp")
  local damChangePer = damageParam.damChangePer
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser, params)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local skilllv = srcUser:GetLernedSkillLevel(3909)
  local Num = srcUser:GetBuffLayer(130503)
  local skilllv_1 = srcUser:GetLernedSkillLevel(3926)
  local ratio = skilllv_1 * 0.04 + 1
  local GemValue = srcUser:GetGemValue(31142)
  local GemDam = 1 + GemValue / 100000
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 3929 then
    damChangePer = 10 + 2 * skilllv
    Num = 0
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + skilllv * Num * 0.3) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * ratio * GemDam
  if A <= 1 then
    return 1
  end
  if srcUser:HasBuffID(90004334) then
    local Cri = srcUser:GetProperty("Cri")
    local CriRes2 = targetUser:GetProperty("CriRes")
    local Rate = (Cri - CriRes2) / 3
    Rate = math.max(Rate, 0)
    if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
      return A * 1.5, CommonFun.DamageType.Crit
    end
  end
  if bits[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_3502(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local Hp2 = targetUser:GetProperty("Hp")
  local MaxHp2 = targetUser:GetProperty("MaxHp")
  local damChangePer = damageParam.damChangePer
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  if bits[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_4101(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42130) then
    BaseLvDamage = IBaseLv * 15
  end
  local targetid = targetUser:GetGuid()
  local distance = srcUser:GetDistance(targetid)
  local skilllv_1 = srcUser:GetLernedSkillLevel(133)
  local DisDam = 1
  if 10 < skilllv_1 then
    DisDam = 1 + distance / 7.5 * (skilllv_1 - 10) * 0.1
    if srcUser:HasBuffID(131080) then
      DisDam = 1 + (skilllv_1 - 10) * 0.1
    end
    DisDam = math.min(DisDam, 2)
  end
  local profressionID = srcUser:GetProfressionID()
  if srcUser:HasBuffID(56712) and (profressionID == 42 or profressionID == 43 or profressionID == 44 or profressionID == 45) then
    DisDam = DisDam + distance / 7.5 * 0.1
  end
  local A = (((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) + damChangePer1) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * DisDam + BaseLvDamage
  if A <= 1 then
    return 1
  end
  if bits[CommonFun.AttrEffect.ErLianDam] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_4102(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local Weapon = srcUser:GetEquipedID(7)
  local B = 1
  if Weapon == 41232 or Weapon == 141232 then
    B = 2
  end
  local Num1 = srcUser:GetRunePoint(41016)
  local Num2 = srcUser:GetRunePoint(41017)
  local Num3 = srcUser:GetRunePoint(41018)
  local Num4 = srcUser:GetRunePoint(41019)
  local Num5 = srcUser:GetRunePoint(41020)
  local RuneDamage1 = Num1 * 0.05 + Num2 * 0.05 + Num3 * 0.05 + Num4 * 0.05 + Num5 * 0.05 + 1
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  local A = (((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) + damChangePer1) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * B * RuneDamage1
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_4103(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser, params)
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42130) then
    BaseLvDamage = IBaseLv * 15
  end
  local Num1 = srcUser:GetRunePoint(41001)
  local Num2 = srcUser:GetRunePoint(41002)
  local Num3 = srcUser:GetRunePoint(41003)
  local Num4 = srcUser:GetRunePoint(41004)
  local Num_srwn = srcUser:GetRunePoint(102006)
  local RuneDamage = Num1 * 0.05 + Num2 * 0.1 + Num3 * 0.05 + Num4 * 0.05 + Num_srwn * 0.05 + 1
  local Rate = 0
  local Num1 = srcUser:GetRunePoint(41007)
  local SkillAttr = srcUser:GetCurSkillAtkAttr()
  if SkillAttr == 4 and 0 < Num1 then
    Rate = 10
  end
  local card1 = 1
  local RefineLv1 = srcUser:GetEquipedRefineLv(7)
  local CardNum = srcUser:GetEquipCardNum(7, 24053)
  if srcUser:HasBuffID(52410) then
    card1 = RefineLv1 * 0.02 * CardNum + 1
  end
  if srcUser:HasBuffID(53350) then
    card1 = card1 + 0.1
  end
  local uniform = 1
  local Ring1 = srcUser:GetEquipedID(2)
  if Ring1 == 42083 or Ring1 == 142083 then
    uniform = 1.1
  end
  local RefineLv2 = srcUser:GetEquipedRefineLv(2)
  if srcUser:HasBuffID(90002413) and 5 < RefineLv2 then
    uniform = (RefineLv2 - 5) * 0.01 + uniform
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRing.id == 42104 or equipRing.id == 142104 then
    uniform = 1.1
  end
  if (equipRing.id == 42104 or equipRing.id == 142104) and 5 < equipRing.refinelv then
    uniform = (equipRing.refinelv - 5) * 0.01 + uniform
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id == 42104 or equipRingSD.id == 142104 then
    uniform = 1 + 0.1 * equipRingSD.quench_per / 100
  end
  if (equipRingSD.id == 42104 or equipRingSD.id == 142104) and 5 < equipRingSD.refinelv then
    uniform = (equipRingSD.refinelv - 5) * 0.01 * equipRingSD.quench_per / 100 + uniform
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * RuneDamage * card1 * uniform + BaseLvDamage
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1246 then
    local skilllv_Arrow = srcUser:GetLernedSkillLevel(1246)
    local skilllv_Rain = srcUser:GetLernedSkillLevel(121)
    local damChangePer = 0.75
    if skilllv_Rain <= 10 then
      damChangePer = 0.75 + (skilllv_Rain - 1) * 0.15
    elseif 10 < skilllv_Rain then
      damChangePer = 2.1 + (skilllv_Rain - 10) * 0.3
    end
    local GemValue = srcUser:GetGemValue(41062)
    local GemDam = 1 + GemValue / 100000
    local Fifth = 1
    if srcUser:HasBuffID(90004244) and srcUser:HasBuffID(131080) then
      Fifth = Fifth + 0.15
    end
    A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * RuneDamage * card1 * (skilllv_Arrow * 0.2 + 1.6) * GemDam * Fifth
  end
  if skillID == 1384 or skillID == 1433 or skillID == 72600 then
    local skilllv_wn = srcUser:GetLernedSkillLevel(1384)
    local skilllv_sr = srcUser:GetLernedSkillLevel(1433)
    local skill_all = skilllv_wn + skilllv_sr
    local skilllv_Rain = srcUser:GetLernedSkillLevel(121)
    local damChangePer = 0.75
    if skilllv_Rain <= 10 then
      damChangePer = 0.75 + (skilllv_Rain - 1) * 0.15
    elseif 10 < skilllv_Rain then
      damChangePer = 2.1 + (skilllv_Rain - 10) * 0.3
    end
    local RefineLv = srcUser:GetEquipedRefineLv(7)
    local beisi = 1
    local Ring1 = srcUser:GetEquipedID(7)
    if Ring1 == 63109 or Ring1 == 163109 or Ring1 == 62820 or Ring1 == 162820 then
      beisi = 1 + RefineLv * 0.02
    end
    if Ring1 == 62844 or Ring1 == 162844 or Ring1 == 63144 or Ring1 == 163144 then
      beisi = 1 + RefineLv * 0.02
    end
    local Num_kfby = srcUser:GetRunePoint(102040)
    local GemValue1 = srcUser:GetGemValue(102001)
    local GemValue2 = srcUser:GetGemValue(112001)
    local GemDam = 1 + GemValue1 / 100000 + GemValue2 / 100000
    A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * RuneDamage * card1 * uniform * (skill_all * 0.04 + 0.5) * beisi * (1 + Num_kfby * 0.06) * GemDam
  end
  if A <= 1 then
    return 1
  end
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    return A * 1.5, CommonFun.DamageType.Crit
  end
  return A
end

function CommonFun.calcDamage_4201(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local Num1 = srcUser:GetRunePoint(42016)
  local Num2 = srcUser:GetRunePoint(42018)
  local Num3 = srcUser:GetRunePoint(42019)
  local Num4 = srcUser:GetRunePoint(42020)
  local Num5 = srcUser:GetRunePoint(42021)
  local RuneDamage = Num1 * 0.05 + Num2 * 0.05 + Num3 * 0.05 + Num4 * 0.05 + Num5 * 0.1 + 1
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * RuneDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_4202(srcUser, targetUser, params, damageParam, logger)
  local BaseLv = srcUser.BaseLv
  local Dex = srcUser:GetProperty("Dex")
  local Int = srcUser:GetProperty("Int")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local skilllv_2 = srcUser:GetLernedSkillLevel(damageParam.skill2_id)
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits2 = CommonFun.getBits(StateEffect)
  local Num6 = srcUser:GetRunePoint(42050)
  local RuneDamage2 = 1
  if bits2[CommonFun.StateEffect.NoMove] == 1 then
    RuneDamage2 = 1 + Num6 * 0.1
  end
  local suit = 1
  if (srcUser:HasBuffID(90000773) or srcUser:HasBuffID(42480) or srcUser:HasBuffLayer(42480, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(90001005) or srcUser:HasBuffID(43000) or srcUser:HasBuffLayer(43000, EBUFFERLAYER_SHADOW)) then
    suit = 1.1
  end
  local RefineLv2 = srcUser:GetEquipedRefineLv(2)
  if srcUser:HasBuffID(90000777) then
    if 10 <= RefineLv2 and RefineLv2 < 15 then
      suit = suit + (RefineLv2 - 10) * 0.02
    elseif 15 <= RefineLv2 then
      suit = suit + (RefineLv2 - 10) * 0.02 + 0.05
    end
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRing.id == 42092 or equipRing.id == 142092 then
    suit = suit + equipRing.refinelv * 0.02
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id == 42092 or equipRingSD.id == 142092 then
    suit = suit + equipRingSD.refinelv * 0.02 * equipRingSD.quench_per / 100
  end
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(90000999) then
    if 10 <= RefineLv7 and RefineLv7 < 15 then
      suit = suit + 0.08
    elseif 15 <= RefineLv7 then
      suit = suit + 0.08 + 0.12
    end
  end
  if srcUser:HasBuffID(41812) then
    if 5 <= RefineLv7 and RefineLv7 < 10 then
      suit = suit + 0.05
    elseif 10 <= RefineLv7 and RefineLv7 < 15 then
      suit = suit + 0.05 + 0.1
    elseif 15 <= RefineLv7 then
      suit = suit + 0.05 + 0.1 + 0.15
    end
  end
  if srcUser:HasBuffID(90004274) then
    suit = suit + 0.1
  end
  local RefineLv5 = srcUser:GetEquipedRefineLv(5)
  local RefineLv6 = srcUser:GetEquipedRefineLv(6)
  local Ring1 = srcUser:GetEquipedID(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  if srcUser:HasBuffID(90001009) and (Ring1 == 44006 or Ring1 == 144006) and 10 <= order1 then
    a = RefineLv5 * 0.01
  end
  if srcUser:HasBuffID(90001009) and (Ring2 == 44006 or Ring2 == 144006) and 10 <= order2 then
    b = RefineLv6 * 0.01
  end
  local equipRing5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRing5.id == 44050 or equipRing5.id == 144050 then
    a = equipRing5.refinelv * 0.02
  end
  local equipRingSD5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRingSD5.id == 44050 or equipRingSD5.id == 144050 then
    a = equipRingSD5.refinelv * 0.02 * equipRingSD5.quench_per / 100
  end
  local equipRing6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRing6.id == 44050 or equipRing6.id == 144050 then
    b = equipRing6.refinelv * 0.02
  end
  local equipRingSD6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRingSD6.id == 44050 or equipRingSD6.id == 144050 then
    b = equipRingSD6.refinelv * 0.02 * equipRingSD6.quench_per / 100
  end
  suit = suit + a + b
  local Angel = 1
  if srcUser:HasBuffID(90001014) then
    local RefineLv = srcUser:GetEquipedRefineLv(7)
    suit = suit + 0.02 * RefineLv
  end
  local Num7 = srcUser:GetRunePoint(42060)
  local RuneDamage3 = 1 + Num7 * 0.03 * skilllv_1
  local Refine = srcUser:GetProperty("Refine")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local skilllv_add = srcUser:GetLernedSkillLevel(116)
  local atk_add = 0
  if 5 < skilllv_add then
    atk_add = (Atk * (1 + AtkPer) + Refine) * ((skilllv_add - 5) * 0.05)
  end
  local skilllv_trap = srcUser:GetLernedSkillLevel(1248)
  local GemValue = srcUser:GetGemValue(41011)
  local trap = 1 + skilllv_trap * 0.02 + GemValue / 100000
  local GemValueyj = srcUser:GetGemValue(41101)
  local Leiqu = 1
  if srcUser:GetFromSkill() == 815001 then
    local GemValuelq = srcUser:GetGemValue(41122)
    Leiqu = 1 + GemValuelq / 100000
  end
  local A = ((Dex * (3 + BaseLv / 100) * (1 + Int / 35) + atk_add) * damChangePer + (skilllv_1 * 20 + GemValueyj / 1000) * RuneDamage3) * DefReduc * (1 + MDamIncrease) * (1 - RefineMDamReduc) * (1 - MDamReduc2) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 * raceparam * bossparam * RuneDamage2 * suit * trap * Leiqu
  if A <= 1 then
    return 1
  end
  local Num1 = srcUser:GetRunePoint(42031)
  local Num2 = srcUser:GetRunePoint(42032)
  local Num3 = srcUser:GetRunePoint(42033)
  local Num4 = srcUser:GetRunePoint(42034)
  local Num5 = srcUser:GetRunePoint(42035)
  local RuneDamage = Num1 * 0.1 + Num2 * 0.05 + Num3 * 0.05 + Num4 * 0.1 + Num5 * 0.05 + 1
  if bits[CommonFun.AttrEffect.TriggerTrapMark] == 1 then
    return A * (1 + skilllv_2 * 0.1) * RuneDamage
  end
  return A
end

function CommonFun.calcDamage_4203(srcUser, targetUser, params, damageParam, logger)
  local BaseLv = srcUser.BaseLv
  local Dex = srcUser:GetProperty("Dex")
  local Int = srcUser:GetProperty("Int")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local skilllv_2 = srcUser:GetLernedSkillLevel(damageParam.skill2_id)
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local suit = 1
  if (srcUser:HasBuffID(90000773) or srcUser:HasBuffID(42480) or srcUser:HasBuffLayer(42480, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(90001005) or srcUser:HasBuffID(43000) or srcUser:HasBuffLayer(43000, EBUFFERLAYER_SHADOW)) then
    suit = 1.1
  end
  local RefineLv2 = srcUser:GetEquipedRefineLv(2)
  if srcUser:HasBuffID(90000777) then
    if 10 <= RefineLv2 and RefineLv2 < 15 then
      suit = suit + (RefineLv2 - 10) * 0.02
    elseif 15 <= RefineLv2 then
      suit = suit + (RefineLv2 - 10) * 0.02 + 0.05
    end
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRing.id == 42092 or equipRing.id == 142092 then
    suit = suit + equipRing.refinelv * 0.02
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id == 42092 or equipRingSD.id == 142092 then
    suit = suit + equipRingSD.refinelv * 0.02 * equipRingSD.quench_per / 100
  end
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(90000999) then
    if 10 <= RefineLv7 and RefineLv7 < 15 then
      suit = suit + 0.08
    elseif 15 <= RefineLv7 then
      suit = suit + 0.08 + 0.12
    end
  end
  if srcUser:HasBuffID(41812) then
    if 5 <= RefineLv7 and RefineLv7 < 10 then
      suit = suit + 0.05
    elseif 10 <= RefineLv7 and RefineLv7 < 15 then
      suit = suit + 0.05 + 0.1
    elseif 15 <= RefineLv7 then
      suit = suit + 0.05 + 0.1 + 0.15
    end
  end
  if srcUser:HasBuffID(90004274) then
    suit = suit + 0.1
  end
  local RefineLv5 = srcUser:GetEquipedRefineLv(5)
  local RefineLv6 = srcUser:GetEquipedRefineLv(6)
  local Ring1 = srcUser:GetEquipedID(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  if srcUser:HasBuffID(90001009) and (Ring1 == 44006 or Ring1 == 144006) and 10 <= order1 then
    a = RefineLv5 * 0.01
  end
  if srcUser:HasBuffID(90001009) and (Ring2 == 44006 or Ring2 == 144006) and 10 <= order2 then
    b = RefineLv6 * 0.01
  end
  local equipRing5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRing5.id == 44050 or equipRing5.id == 144050 then
    a = equipRing5.refinelv * 0.02
  end
  local equipRingSD5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRingSD5.id == 44050 or equipRingSD5.id == 144050 then
    a = equipRingSD5.refinelv * 0.02 * equipRingSD5.quench_per / 100
  end
  local equipRing6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRing6.id == 44050 or equipRing6.id == 144050 then
    b = equipRing6.refinelv * 0.02
  end
  local equipRingSD6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRingSD6.id == 44050 or equipRingSD6.id == 144050 then
    b = equipRingSD6.refinelv * 0.02 * equipRingSD6.quench_per / 100
  end
  suit = suit + a + b
  local Angel = 1
  if srcUser:HasBuffID(90001014) then
    local RefineLv = srcUser:GetEquipedRefineLv(7)
    suit = suit + 0.02 * RefineLv
  end
  local Num7 = srcUser:GetRunePoint(42060)
  local RuneDamage3 = 1 + Num7 * 0.03 * skilllv_1
  local skilllv_trap = srcUser:GetLernedSkillLevel(1248)
  local GemValue = srcUser:GetGemValue(41011)
  local trap = 1 + skilllv_trap * 0.02 + GemValue / 100000
  local NumDj = srcUser:GetRunePoint(44080)
  local RuneDj = 1 + NumDj * 0.08
  local GemValueyj = srcUser:GetGemValue(41101)
  local Leiqu = 1
  if srcUser:GetFromSkill() == 815001 then
    local GemValuelq = srcUser:GetGemValue(41122)
    Leiqu = 1 + GemValuelq / 100000
  end
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local Atk_add = 0
  if srcUser:HasBuffID(56480) or srcUser:HasBuffID(56490) then
    Atk_add = Atk * (1 + AtkPer) * 0.2
  end
  local A = ((Dex * (3 + BaseLv / 100) * (1 + Int / 35) + Atk_add) * damChangePer + (skilllv_1 * 20 + GemValueyj / 1000) * RuneDamage3) * DefReduc * (1 + MDamIncrease) * (1 - RefineMDamReduc) * (1 - MDamReduc2) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 * raceparam * bossparam * suit * trap * RuneDj * Leiqu
  if A <= 1 then
    return 1
  end
  local Num1 = srcUser:GetRunePoint(42031)
  local Num2 = srcUser:GetRunePoint(42032)
  local Num3 = srcUser:GetRunePoint(42033)
  local Num4 = srcUser:GetRunePoint(42034)
  local Num5 = srcUser:GetRunePoint(42035)
  local RuneDamage = Num1 * 0.1 + Num2 * 0.05 + Num3 * 0.05 + Num4 * 0.1 + Num5 * 0.05 + 1
  if bits[CommonFun.AttrEffect.TriggerTrapMark] == 1 then
    return A * (1 + skilllv_2 * 0.1) * RuneDamage
  end
  return A
end

function CommonFun.calcDamage_4301(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local Num1 = srcUser:GetRunePoint(42110)
  local RuneDamage = 1 + Num1 * 0.1
  local card1 = 1
  local RefineLv1 = srcUser:GetEquipedRefineLv(7)
  local CardNum = srcUser:GetEquipCardNum(7, 24053)
  if srcUser:HasBuffID(52410) then
    card1 = RefineLv1 * 0.02 * CardNum + 1
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * RuneDamage * card1
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_4401(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local hunter = 0
  local Forest = 1
  local Ring7 = srcUser:GetEquipedID(7)
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if (Ring7 == 41246 or Ring7 == 141246) and 8 < RefineLv7 then
    hunter = hunter + (RefineLv7 - 8) * 0.1
  end
  if srcUser:HasBuffID(91000430) then
    hunter = hunter + 0.5
  end
  if (Ring7 == 41246 or Ring7 == 141246) and 15 <= RefineLv7 then
    Forest = Forest + 0.1
  end
  if srcUser:HasBuffID(42330) then
    Forest = Forest + 0.15
  end
  if srcUser:HasBuffID(42330) and srcUser:HasBuffID(90002083) then
    Forest = Forest + 0.15
  end
  local Num = srcUser:GetRunePoint(44050)
  local Num2 = srcUser:GetRunePoint(44060)
  local RuneDamage = 1 + Num * 0.05
  local Num3 = 0
  local RefineLv3 = srcUser:GetEquipedRefineLv(3)
  if srcUser:HasBuffID(42350) and 10 <= RefineLv3 then
    Num3 = Num3 + 5
  end
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local meteor = 1
  if skillID == 4001 then
    local deadshoot = srcUser:GetLernedSkillLevel(1245)
    damChangePer = deadshoot * 0.4 + 2.4
    local skilllv_1 = srcUser:GetLernedSkillLevel(4001)
    local skilllv_2 = srcUser:GetLernedSkillLevel(4020)
    meteor = (1 + skilllv_1 * 0.05) * (1 + skilllv_2 * 0.05)
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + hunter) * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * Forest * RuneDamage * meteor
  local Cri = srcUser:GetProperty("Cri")
  local CriRes2 = targetUser:GetProperty("CriRes")
  local CriDamPer = srcUser:GetProperty("CriDamPer")
  local CriDefPer2 = targetUser:GetProperty("CriDefPer")
  local GemValue1 = srcUser:GetGemValue(41091)
  local GemValue2 = srcUser:GetGemValue(41092)
  local Rate = (Cri + GemValue1 / 1000 - CriRes2) / 3 + Num2 * 3 + Num3
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    A = ((AtkFinal * (1 - DamReduc2) + Refine) * (damChangePer + hunter) * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * Forest * RuneDamage * meteor
    return A * (1.5 + CriDamPer - CriDefPer2 + GemValue2 / 100000), CommonFun.DamageType.Crit
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_4501(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_4502(srcUser, targetUser, params, damageParam, logger)
  local BaseLv = srcUser.BaseLv
  local Dex = srcUser:GetProperty("Dex")
  local Int = srcUser:GetProperty("Int")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local suit = 1
  if (srcUser:HasBuffID(90000773) or srcUser:HasBuffID(42480) or srcUser:HasBuffLayer(42480, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(90001005) or srcUser:HasBuffID(43000) or srcUser:HasBuffLayer(43000, EBUFFERLAYER_SHADOW)) then
    suit = 1.1
  end
  local RefineLv2 = srcUser:GetEquipedRefineLv(2)
  if srcUser:HasBuffID(90000777) then
    if 10 <= RefineLv2 and RefineLv2 < 15 then
      suit = suit + (RefineLv2 - 10) * 0.02
    elseif 15 <= RefineLv2 then
      suit = suit + (RefineLv2 - 10) * 0.02 + 0.05
    end
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRing.id == 42092 or equipRing.id == 142092 then
    suit = suit + equipRing.refinelv * 0.02
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id == 42092 or equipRingSD.id == 142092 then
    suit = suit + equipRingSD.refinelv * 0.02 * equipRingSD.quench_per / 100
  end
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(90000999) then
    if 10 <= RefineLv7 and RefineLv7 < 15 then
      suit = suit + 0.08
    elseif 15 <= RefineLv7 then
      suit = suit + 0.08 + 0.12
    end
  end
  if srcUser:HasBuffID(41812) then
    if 5 <= RefineLv7 and RefineLv7 < 10 then
      suit = suit + 0.05
    elseif 10 <= RefineLv7 and RefineLv7 < 15 then
      suit = suit + 0.05 + 0.1
    elseif 15 <= RefineLv7 then
      suit = suit + 0.05 + 0.1 + 0.15
    end
  end
  if srcUser:HasBuffID(90004274) then
    suit = suit + 0.1
  end
  local RefineLv5 = srcUser:GetEquipedRefineLv(5)
  local RefineLv6 = srcUser:GetEquipedRefineLv(6)
  local Ring1 = srcUser:GetEquipedID(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  if srcUser:HasBuffID(90001009) and (Ring1 == 44006 or Ring1 == 144006) and 10 <= order1 then
    a = RefineLv5 * 0.01
  end
  if srcUser:HasBuffID(90001009) and (Ring2 == 44006 or Ring2 == 144006) and 10 <= order2 then
    b = RefineLv6 * 0.01
  end
  local equipRing5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRing5.id == 44050 or equipRing5.id == 144050 then
    a = equipRing5.refinelv * 0.02
  end
  local equipRingSD5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRingSD5.id == 44050 or equipRingSD5.id == 144050 then
    a = equipRingSD5.refinelv * 0.02 * equipRingSD5.quench_per / 100
  end
  local equipRing6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRing6.id == 44050 or equipRing6.id == 144050 then
    b = equipRing6.refinelv * 0.02
  end
  local equipRingSD6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRingSD6.id == 44050 or equipRingSD6.id == 144050 then
    b = equipRingSD6.refinelv * 0.02 * equipRingSD6.quench_per / 100
  end
  suit = suit + a + b
  local Angel = 1
  if srcUser:HasBuffID(90001014) then
    local RefineLv = srcUser:GetEquipedRefineLv(7)
    suit = suit + 0.02 * RefineLv
  end
  local Num7 = srcUser:GetRunePoint(42060)
  local RuneDamage3 = 1 + Num7 * 0.03 * skilllv_1
  local skilllv_trap = srcUser:GetLernedSkillLevel(1248)
  local GemValue = srcUser:GetGemValue(41011)
  local trap = 1 + skilllv_trap * 0.02 + GemValue / 100000
  local GemValueyj = srcUser:GetGemValue(41101)
  local GemNew = srcUser:GetGemValue(41151)
  local GemDamNew = 1 + GemNew / 100000
  local RangeDam = srcUser:GetProperty("RangeDam")
  local A = (Dex * (3 + BaseLv / 100) * (1 + Int / 35) * damChangePer + (skilllv_1 * 20 + GemValueyj / 1000) * RuneDamage3) * DefReduc * (1 + MDamIncrease) * (1 - RefineMDamReduc) * (1 - MDamReduc2) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 * raceparam * bossparam * suit * trap * GemDamNew * (1 + RangeDam)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_4503(srcUser, targetUser, params, damageParam, logger)
  local BaseLv = srcUser.BaseLv
  local Dex = srcUser:GetProperty("Dex")
  local Int = srcUser:GetProperty("Int")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local skilllv_2 = srcUser:GetLernedSkillLevel(damageParam.skill2_id)
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local suit = 1
  if (srcUser:HasBuffID(90000773) or srcUser:HasBuffID(42480) or srcUser:HasBuffLayer(42480, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(90001005) or srcUser:HasBuffID(43000) or srcUser:HasBuffLayer(43000, EBUFFERLAYER_SHADOW)) then
    suit = 1.1
  end
  local RefineLv2 = srcUser:GetEquipedRefineLv(2)
  if srcUser:HasBuffID(90000777) then
    if 10 <= RefineLv2 and RefineLv2 < 15 then
      suit = suit + (RefineLv2 - 10) * 0.02
    elseif 15 <= RefineLv2 then
      suit = suit + (RefineLv2 - 10) * 0.02 + 0.05
    end
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRing.id == 42092 or equipRing.id == 142092 then
    suit = suit + equipRing.refinelv * 0.02
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id == 42092 or equipRingSD.id == 142092 then
    suit = suit + equipRingSD.refinelv * 0.02 * equipRingSD.quench_per / 100
  end
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(90000999) then
    if 10 <= RefineLv7 and RefineLv7 < 15 then
      suit = suit + 0.08
    elseif 15 <= RefineLv7 then
      suit = suit + 0.08 + 0.12
    end
  end
  if srcUser:HasBuffID(41812) then
    if 5 <= RefineLv7 and RefineLv7 < 10 then
      suit = suit + 0.05
    elseif 10 <= RefineLv7 and RefineLv7 < 15 then
      suit = suit + 0.05 + 0.1
    elseif 15 <= RefineLv7 then
      suit = suit + 0.05 + 0.1 + 0.15
    end
  end
  if srcUser:HasBuffID(90004274) then
    suit = suit + 0.1
  end
  local RefineLv5 = srcUser:GetEquipedRefineLv(5)
  local RefineLv6 = srcUser:GetEquipedRefineLv(6)
  local Ring1 = srcUser:GetEquipedID(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  if srcUser:HasBuffID(90001009) and (Ring1 == 44006 or Ring1 == 144006) and 10 <= order1 then
    a = RefineLv5 * 0.01
  end
  if srcUser:HasBuffID(90001009) and (Ring2 == 44006 or Ring2 == 144006) and 10 <= order2 then
    b = RefineLv6 * 0.01
  end
  local equipRing5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRing5.id == 44050 or equipRing5.id == 144050 then
    a = equipRing5.refinelv * 0.02
  end
  local equipRingSD5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRingSD5.id == 44050 or equipRingSD5.id == 144050 then
    a = equipRingSD5.refinelv * 0.02 * equipRingSD5.quench_per / 100
  end
  local equipRing6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRing6.id == 44050 or equipRing6.id == 144050 then
    b = equipRing6.refinelv * 0.02
  end
  local equipRingSD6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRingSD6.id == 44050 or equipRingSD6.id == 144050 then
    b = equipRingSD6.refinelv * 0.02 * equipRingSD6.quench_per / 100
  end
  suit = suit + a + b
  local Angel = 1
  if srcUser:HasBuffID(90001014) then
    local RefineLv = srcUser:GetEquipedRefineLv(7)
    suit = suit + 0.02 * RefineLv
  end
  local Num7 = srcUser:GetRunePoint(42060)
  local RuneDamage3 = 1 + Num7 * 0.03 * skilllv_1
  local skilllv_trap = srcUser:GetLernedSkillLevel(1248)
  local GemValue = srcUser:GetGemValue(41011)
  local trap = 1 + skilllv_trap * 0.02 + GemValue / 100000
  local GemValueyj = srcUser:GetGemValue(41101)
  local Leiqu = 1
  if srcUser:GetFromSkill() == 815001 then
    local GemValuelq = srcUser:GetGemValue(41122)
    Leiqu = 1 + GemValuelq / 100000
  end
  local skilllv_qhua = srcUser:GetLernedSkillLevel(4024)
  local qhua = 1 + 0.04 * skilllv_qhua
  local RangeDam = srcUser:GetProperty("RangeDam")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local Atk_add = 0
  if srcUser:HasBuffID(56480) or srcUser:HasBuffID(56490) then
    Atk_add = Atk * (1 + AtkPer) * 0.2
  end
  local A = ((Dex * (3 + BaseLv / 100) * (1 + Int / 35) + Atk_add) * damChangePer + (skilllv_1 * 20 + GemValueyj / 1000) * RuneDamage3) * DefReduc * (1 + MDamIncrease) * (1 - RefineMDamReduc) * (1 - MDamReduc2) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 * raceparam * bossparam * suit * trap * Leiqu * qhua * (1 + RangeDam)
  if A <= 1 then
    return 1
  end
  local Num1 = srcUser:GetRunePoint(42031)
  local Num2 = srcUser:GetRunePoint(42032)
  local Num3 = srcUser:GetRunePoint(42033)
  local Num4 = srcUser:GetRunePoint(42034)
  local Num5 = srcUser:GetRunePoint(42035)
  local RuneDamage = Num1 * 0.1 + Num2 * 0.05 + Num3 * 0.05 + Num4 * 0.1 + Num5 * 0.05 + 1
  if bits[CommonFun.AttrEffect.TriggerTrapMark] == 1 then
    return A * (1 + skilllv_2 * 0.1) * RuneDamage
  end
  return A
end

function CommonFun.calcDamage_5101(srcUser, targetUser, params, damageParam, logger)
  local BaseLv = srcUser.BaseLv
  local Int = srcUser:GetProperty("Int")
  local HolyAtk = srcUser:GetProperty("HolyAtk")
  local HealEncPer = srcUser:GetProperty("HealEncPer")
  local enemy = srcUser:IsEnemy(targetUser)
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local skilllv_1 = srcUser:GetLernedSkillLevel(50034)
  local skilllv_2 = srcUser:GetLernedSkillLevel(50035)
  local Num1 = srcUser:GetRunePoint(51001)
  local Num2 = srcUser:GetRunePoint(51011)
  local RuneDamage = Num1 * 0.02 + Num2 * 0.02 + 1
  local c = 1
  if srcUser:HasBuffID(51580) then
    c = 1.1
  end
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local Angel = 1
  if srcUser:HasBuffID(40430) then
    Angel = 1 + RefineLv / 100
  end
  if srcUser:HasBuffID(90001813) then
    if 5 <= RefineLv and RefineLv < 10 then
      Angel = Angel + 0.03
    elseif 10 <= RefineLv then
      Angel = Angel + 0.03 + 0.07
    end
  end
  if srcUser:HasBuffID(90001816) then
    if 5 <= RefineLv and RefineLv < 10 then
      Angel = Angel + 0.02
    elseif 10 <= RefineLv then
      Angel = Angel + 0.02 + 0.03
    end
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRing.id == 42579 or equipRing.id == 142579 then
    if 5 > equipRing.refinelv then
      Angel = Angel + equipRing.refinelv / 100
    elseif 5 <= equipRing.refinelv and 10 > equipRing.refinelv then
      Angel = Angel + 0.05 + equipRing.refinelv / 100
    elseif 10 <= equipRing.refinelv then
      Angel = Angel + 0.05 + 0.1 + equipRing.refinelv / 100
    end
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRingSD.id == 42579 or equipRingSD.id == 142579 then
    if 5 > equipRingSD.refinelv then
      Angel = Angel + equipRingSD.refinelv / 100 * equipRingSD.quench_per / 100
    elseif 5 <= equipRingSD.refinelv and 10 > equipRingSD.refinelv then
      Angel = Angel + (0.05 + equipRingSD.refinelv / 100) * equipRingSD.quench_per / 100
    elseif 10 <= equipRingSD.refinelv then
      Angel = Angel + (0.15000000000000002 + equipRingSD.refinelv / 100) * equipRingSD.quench_per / 100
    end
  end
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local BeHealEncPer2 = targetUser:GetProperty("BeHealEncPer")
  local race2 = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    race2 = 2
  end
  local DefAttr2 = targetUser:GetProperty("DefAttr")
  local AttrEffect = targetUser:GetProperty("AttrEffect2")
  local bits = CommonFun.getBits(AttrEffect)
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local A = ((math.floor((BaseLv + Int) / 10) * damChangePer + 100 + skilllv_1 * 50 + skilllv_2 * 50 + MAtk * (1 + MAtkPer) * 0.5) * (1 + HealEncPer) * (1 + BeHealEncPer2) + damChangePer1) * -1 * (1 + HolyAtk) * RuneDamage * c * Angel
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 11 then
    local BaseLv = srcUser.BaseLv
    A = (100 + BaseLv * 5 + skilllv_1 * 200 + skilllv_2 * 200) * (1 + HealEncPer) * (1 + BeHealEncPer2) * -1 * (1 + HolyAtk)
  end
  if skillID == 1224 or skillID == 5905 then
    local skilllv_3 = srcUser:GetLernedSkillLevel(144)
    local damChangePer = 4
    if skilllv_3 <= 10 then
      damChangePer = 4 + skilllv_3 * 8
    elseif 10 < skilllv_3 then
      damChangePer = 64 + skilllv_3 * 2
    end
    local MaxHp = targetUser:GetProperty("MaxHp")
    local Hp = targetUser:GetProperty("Hp")
    local Num = srcUser:GetRunePoint(54030)
    local RuneDamage1 = (MaxHp - Hp) * 0.02 * Num
    local healper = 1
    if skillID == 5905 then
      RuneDamage1 = 0
      local skilllv_sg = srcUser:GetLernedSkillLevel(5900)
      healper = skilllv_sg * 0.2 + 1.5
    end
    local GemValue = srcUser:GetGemValue(51011)
    local GemDam = 1 + GemValue / 100000
    A = (math.floor((BaseLv + Int) / 10) * damChangePer + 100 + skilllv_1 * 50 + skilllv_2 * 50 + MAtk * (1 + MAtkPer) * 0.5) * damChangePer1 * (1 + HealEncPer) * (1 + BeHealEncPer2) * -1 * (1 + HolyAtk) * RuneDamage * c * Angel * GemDam * healper - RuneDamage1 * (1 + BeHealEncPer2)
  end
  if targetUser:HasBuffID(41100050) then
    local MaxHp = targetUser:GetProperty("MaxHp")
    local Hp = targetUser:GetProperty("Hp")
    local Num1 = targetUser:GetBuffLayer(41100050)
    if Hp < MaxHp * (0.15 * Num1) then
      A = A * 3
    end
  end
  local RateNum = 0
  local profressionID = srcUser:GetProfressionID()
  if srcUser:HasBuffID(35381) and (profressionID == 51 or profressionID == 52 or profressionID == 53 or profressionID == 54 or profressionID == 55 or profressionID == 615) then
    RateNum = 15
  end
  local HealtoDam = targetUser:GetBuffLevel(129100)
  local DamRatio = 1
  if targetUser:HasBuffID(129100) then
    DamRatio = -0.1 * HealtoDam
  end
  if skillID == 1224 and srcUser:HasBuffID(22000530) then
    DamRatio = 1
    if 0 < A then
      A = 0
    end
  end
  local HealReduce = targetUser:GetBuffLevel(136500)
  if targetUser:HasBuffID(136500) then
    DamRatio = 1 - (0.2 + 0.03 * HealReduce)
  end
  if enemy then
    if DefAttr2 == 9 then
      return A / 2 * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 * -1 * (1 + MDamIncrease)
    else
      return 0, 0
    end
  elseif DefAttr2 == 9 or bits[CommonFun.AttrEffect.PoisinDamNoUse] == 1 then
    return -1
  elseif CommonFun.IsInRate(RateNum, srcUser:GetRandom()) then
    return A * 2 * DamRatio
  else
    return A * DamRatio
  end
end

function CommonFun.calcDamage_5102(srcUser, targetUser, params, damageParam, logger)
  local BaseLv = srcUser.BaseLv
  local Int = srcUser:GetProperty("Int")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local DefAttr2 = targetUser:GetProperty("DefAttr")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local ElementRate = CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam)
  if srcAtkElement == 6 and targetDefElement == 7 then
    local GemValue = srcUser:GetGemValue(51022)
    ElementRate = ElementRate + GemValue / 100000
  end
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local A = (BaseLv + Int + damChangePer) * ElementRate * elementparam2 * (1 + MDamIncrease)
  local race2 = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    race2 = 2
  end
  if race2 == 3 then
    local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
    local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
    local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
    local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
    local MAtk = srcUser:GetProperty("MAtk")
    local MAtkPer = srcUser:GetProperty("MAtkPer")
    local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
    local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
    local MRefine = srcUser:GetProperty("MRefine")
    local BaseMAtk = Int + math.floor(Int * Int / 100)
    local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
    local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
    local Num0 = srcUser:GetRunePoint(52180)
    local RuneDamage0 = Num0
    A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * (damChangePer1 + RuneDamage0) * (1 + MDamIncrease) * ElementRate * elementparam2
  end
  if A <= 1 then
    A = 1
  end
  local Num1 = srcUser:GetRunePoint(51014)
  local Num2 = srcUser:GetRunePoint(51018)
  local Num3 = srcUser:GetRunePoint(52027)
  local RuneDamage = (Num1 + Num2 + Num3) * 0.07
  if targetUser.isServerCall and 0 < RuneDamage then
    if DefAttr2 == CommonFun.Nature.Undead then
      srcUser:DoExtraDamage(A * -1 * RuneDamage)
    else
      srcUser:DoExtraDamage(A * -1 * RuneDamage * 0.5)
    end
  end
  return A
end

function CommonFun.calcDamage_5103(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local Luk = srcUser:GetProperty("Luk")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local enemy = srcUser:IsEnemy(targetUser)
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local ElementRate = CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam)
  if srcAtkElement == 6 and targetDefElement == 7 then
    local GemValue = srcUser:GetGemValue(51022)
    ElementRate = ElementRate + GemValue / 100000
  end
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local race2 = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    race2 = 2
  end
  local DefAttr2 = targetUser:GetProperty("DefAttr")
  local AttrEffect = srcUser:GetProperty("AttrEffect2")
  local bits = CommonFun.getBits(AttrEffect)
  local damChangePer = damageParam.damChangePer
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42110) then
    BaseLvDamage = IBaseLv * 20
  end
  local Num1 = srcUser:GetRunePoint(52037)
  local RuneDamage = Num1 * 0.3
  local qumo = 1
  if bits[CommonFun.AttrEffect2.Shiziqumo] == 1 then
    qumo = 1.2
  end
  local Weapon = srcUser:GetEquipedID(7)
  local B = 0
  if Weapon == 41521 or Weapon == 141521 or Weapon == 41568 or Weapon == 141568 then
    B = Luk * 50
  end
  local weaponRefineLv = srcUser:GetEquipedRefineLv(7)
  if (srcUser:HasBuffID(90001413) or srcUser:HasBuffID(41980)) and 12 <= weaponRefineLv then
    B = B * 2
  end
  if srcUser:HasBuffID(90001413) then
    qumo = weaponRefineLv * 0.01 + qumo
  end
  if srcUser:HasBuffID(41980) then
    qumo = weaponRefineLv * 0.01 + qumo
  end
  local weaponRefineLv2 = srcUser:GetEquipedRefineLv(1)
  if srcUser:HasBuffID(90001423) then
    qumo = weaponRefineLv2 * 0.01 + qumo
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRing.id == 42582 or equipRing.id == 142582 then
    qumo = equipRing.refinelv * 0.01 + qumo
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRingSD.id == 42582 or equipRingSD.id == 142582 then
    qumo = equipRingSD.refinelv * 0.01 * equipRingSD.quench_per / 100 + qumo
  end
  if srcUser:HasBuffID(90004454) then
    qumo = qumo + 0.1
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(160)
  local SkillPer = 0
  if 10 < skilllv_1 then
    SkillPer = (skilllv_1 - 10) * 0.1
  end
  local GemValue1 = srcUser:GetGemValue(51092)
  local GemDam = 1 + GemValue1 / 100000
  local RangeDam = srcUser:GetProperty("RangeDam")
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * (damChangePer + RuneDamage + SkillPer) + B * MDefReduc * (1 - MDamReduc2) * (1 - RefineMDamReduc) - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + MDamIncrease) * ElementRate * elementparam2 * qumo * GemDam * (1 + RangeDam) + BaseLvDamage
  if A <= 1 then
    return 1
  end
  local Num2 = srcUser:GetRunePoint(52030)
  local GemValue = srcUser:GetGemValue(51091)
  if race2 == 3 or DefAttr2 == 9 or race2 == 2 and srcUser:GetBuffActive(90003444) then
    return A
  elseif 0 < Num2 or 0 < GemValue then
    return A * (Num2 * 0.25 + GemValue / 100000)
  else
    return 0, 0
  end
end

function CommonFun.calcDamage_5104(srcUser, targetUser, params, damageParam, logger)
  local BaseLv = srcUser.BaseLv
  local Int = srcUser:GetProperty("Int")
  local HolyAtk = srcUser:GetProperty("HolyAtk")
  local HealEncPer = srcUser:GetProperty("HealEncPer")
  local enemy = srcUser:IsEnemy(targetUser)
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local Num1 = srcUser:GetRunePoint(51010)
  local RuneDamage = Num1 * 0.15 + 1
  local Num2 = srcUser:GetRunePoint(53020)
  local RuneDamage1 = Num2 * 0.02 + 1
  local c = 1
  if srcUser:HasBuffID(51580) then
    c = 1.1
  end
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local BeHealEncPer2 = targetUser:GetProperty("BeHealEncPer")
  local race2 = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    race2 = 2
  end
  local AttrEffect2 = targetUser:GetProperty("AttrEffect")
  local DefAttr2 = targetUser:GetProperty("DefAttr")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local A = damChangePer1 * (1 + HealEncPer) * (1 + BeHealEncPer2) * -1 * (1 + HolyAtk) * RuneDamage * c * RuneDamage1
  if targetUser:HasBuffID(41100050) then
    local MaxHp = targetUser:GetProperty("MaxHp")
    local Hp = targetUser:GetProperty("Hp")
    local Num1 = targetUser:GetRunePoint(70110)
    if Hp < MaxHp * (0.15 * Num1) then
      A = A * 3
    end
  end
  local HealtoDam = targetUser:GetBuffLevel(129100)
  local DamRatio = 1
  if targetUser:HasBuffID(129100) then
    DamRatio = -0.1 * HealtoDam
  end
  local HealReduce = targetUser:GetBuffLevel(136500)
  if targetUser:HasBuffID(136500) then
    DamRatio = 1 - (0.2 + 0.03 * HealReduce)
  end
  if targetUser:GetNpcID() == 40021 and enemy ~= true then
    local MaxHp_GVG = targetUser:GetProperty("MaxHp")
    return -MaxHp_GVG / 300
  end
  if enemy then
    if race2 == 3 or DefAttr2 == 9 then
      return A / 2 * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 * -1 * (1 + MDamIncrease)
    else
      return 0, 0
    end
  elseif race2 == 3 or DefAttr2 == 9 then
    return -1
  else
    return A * DamRatio
  end
end

function CommonFun.calcDamage_5105(srcUser, targetUser, params, damageParam, logger)
  local BaseLv = srcUser.BaseLv
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  local Luk = srcUser:GetProperty("Luk")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local ElementRate = CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam)
  if srcAtkElement == 6 and targetDefElement == 7 then
    local GemValue = srcUser:GetGemValue(51022)
    ElementRate = ElementRate + GemValue / 100000
  end
  local enemy = srcUser:IsEnemy(targetUser)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local race2 = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    race2 = 2
  end
  local DefAttr2 = targetUser:GetProperty("DefAttr")
  local damChangePer = damageParam.damChangePer
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Weapon = srcUser:GetEquipedID(7)
  local B = 0
  if Weapon == 41521 or Weapon == 141521 or Weapon == 41568 or Weapon == 141568 then
    B = Luk * 50
  end
  local WeaponRefineLv = srcUser:GetEquipedRefineLv(7)
  if (srcUser:HasBuffID(90001413) or srcUser:HasBuffID(41980)) and 15 <= WeaponRefineLv then
    B = B * 2
  end
  local GemValue = srcUser:GetGemValue(51112)
  local GemDam = 1 + GemValue / 100000
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(43720) or srcUser:HasBuffID(43930) or srcUser:HasBuffID(43510) then
    BaseLvDamage = IBaseLv * 60
  end
  local RangeDam = srcUser:GetProperty("RangeDam")
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * BaseLv / 50 + B * MDefReduc * (1 - MDamReduc2) * (1 - RefineMDamReduc) - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + MDamIncrease) * ElementRate * elementparam2 * GemDam * (1 + RangeDam) + BaseLvDamage
  if srcUser:HasBuffID(52140) then
    A = A * 1.05
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_5106(srcUser, targetUser, params, damageParam, logger)
  local BaseLv = srcUser.BaseLv
  local Int = srcUser:GetProperty("Int")
  local HealEncPer = srcUser:GetProperty("HealEncPer")
  local enemy = srcUser:IsEnemy(targetUser)
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local BeHealEncPer2 = targetUser:GetProperty("BeHealEncPer")
  local race2 = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    race2 = 2
  end
  local DefAttr2 = targetUser:GetProperty("DefAttr")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  if damChangePer1 == nil then
    damChangePer1 = 0
  end
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local A = ((math.floor((BaseLv + Int) / 10) * damChangePer + 100) * (1 + HealEncPer) * (1 + BeHealEncPer2) + damChangePer1) * -1
  if 0 <= A then
    return -1
  end
  return A
end

function CommonFun.calcDamage_5401(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Num = srcUser:GetRunePoint(54080)
  local RuneDamage = 1 + Num * 0.05
  local A = (((AtkFinal + MAtkFinal) * (1 - DamReduc2) + Refine + MRefine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage
  if srcUser:HasBuffID(56440) or srcUser:HasBuffID(56450) then
    A = A * 1.3
  end
  local Cri = srcUser:GetProperty("Cri")
  local CriRes2 = targetUser:GetProperty("CriRes")
  local CriDamPer = srcUser:GetProperty("CriDamPer")
  local CriDefPer2 = targetUser:GetProperty("CriDefPer")
  local Rate = Cri - CriRes2
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) and srcUser:HasBuffID(56450) then
    return A * (1.5 + CriDamPer - CriDefPer2), CommonFun.DamageType.Crit
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_5402(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local ElementRate = CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam)
  if srcAtkElement == 6 and targetDefElement == 7 then
    local GemValue = srcUser:GetGemValue(51022)
    ElementRate = ElementRate + GemValue / 100000
  end
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Trial1 = 0
  local Trial2 = 1
  local Ring1 = srcUser:GetEquipedID(7)
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  local Ring2 = srcUser:GetEquipedID(2)
  local RefineLv2 = srcUser:GetEquipedRefineLv(2)
  local Ring3 = srcUser:GetEquipedID(4)
  local RefineLv4 = srcUser:GetEquipedRefineLv(4)
  if (Ring1 == 41526 or Ring1 == 141526) and 5 < RefineLv7 then
    Trial1 = Trial1 + (RefineLv7 - 5) * 0.2
  end
  if (Ring2 == 42076 or Ring2 == 142076) and 10 <= RefineLv2 then
    Trial1 = Trial1 + 1
  end
  if (Ring1 == 41565 or Ring1 == 141565) and 5 < RefineLv7 then
    Trial1 = Trial1 + (RefineLv7 - 5) * 0.2
  end
  if srcUser:HasBuffID(90002053) and 5 <= RefineLv2 then
    Trial1 = Trial1 + 0.5
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRing.id == 42101 or equipRing.id == 142101 then
    if 5 <= equipRing.refinelv and 10 > equipRing.refinelv then
      Trial1 = Trial1 + 0.5
    elseif 10 <= equipRing.refinelv and equipRing.refinelv < 15 then
      Trial1 = Trial1 + 1 + 0.5
    elseif equipRing.refinelv >= 15 then
      Trial1 = Trial1 + 1 + 0.5 + 1.5
    end
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id == 42101 or equipRingSD.id == 142101 then
    if 5 <= equipRingSD.refinelv and 10 > equipRingSD.refinelv then
      Trial1 = Trial1 + 0.5 * equipRingSD.quench_per / 100
    elseif 10 <= equipRingSD.refinelv and equipRingSD.refinelv < 15 then
      Trial1 = Trial1 + 1.5 * equipRingSD.quench_per / 100
    elseif equipRingSD.refinelv >= 15 then
      Trial1 = Trial1 + 3.0 * equipRingSD.quench_per / 100
    end
  end
  if Ring3 == 43552 or Ring3 == 143552 then
    if 10 <= RefineLv4 and RefineLv4 < 15 then
      Trial1 = Trial1 + 0.5
    elseif 15 <= RefineLv4 then
      Trial1 = Trial1 + 1 + 0.5
    end
  end
  local equipRingshoes = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  if equipRingshoes.id == 43578 or equipRingshoes.id == 143578 then
    if 10 <= equipRingshoes.refinelv and equipRingshoes.refinelv < 15 then
      Trial1 = Trial1 + 0.5
    elseif equipRingshoes.refinelv >= 15 then
      Trial1 = Trial1 + 1 + 0.5
    end
  end
  local equipRingSDshoes = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  if equipRingSDshoes.id == 43578 or equipRingSDshoes.id == 143578 then
    if 10 <= equipRingSDshoes.refinelv and equipRingSDshoes.refinelv < 15 then
      Trial1 = Trial1 + 0.5 * equipRingSDshoes.quench_per / 100
    elseif equipRingSDshoes.refinelv >= 15 then
      Trial1 = Trial1 + 1.5 * equipRingSDshoes.quench_per / 100
    end
  end
  if srcUser:HasBuffID(91000410) or srcUser:HasBuffID(91000690) or srcUser:HasBuffID(91001140) then
    Trial2 = 1.1
  end
  if srcUser:HasBuffID(91001150) then
    Trial2 = 1.15
  end
  if srcUser:HasBuffID(91001640) or srcUser:HasBuffID(91001641) or srcUser:HasBuffID(91001642) then
    Trial2 = 1.1
  end
  if srcUser:HasBuffID(91001643) then
    Trial2 = 1.15
  end
  local Num = srcUser:GetRunePoint(54050)
  local RuneDamage = 1 + Num * 0.06
  local GemValue1 = srcUser:GetGemValue(51003)
  local GemValue2 = srcUser:GetGemValue(51061)
  local GemDam = 1 + GemValue1 / 100000 + GemValue2 / 100000
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (damChangePer + Trial1) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * ElementRate * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * Trial2 * RuneDamage * GemDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_5403(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local DamGem = srcUser:GetGemValue(51131)
  local HealEncPer = srcUser:GetProperty("HealEncPer")
  local HealDam = 1
  if srcUser:HasBuffID(20510130) then
    HealDam = 1 + HealEncPer
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (DamGem / 100000) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * HealDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_7201(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  local WeaponType = srcUser:GetEquipedWeaponType()
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local MRefine = srcUser:GetProperty("MRefine")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local Num1 = srcUser:GetRunePoint(70020)
  local RuneDamage = 1 + 0.1 * Num1
  local skilllv_1 = srcUser:GetLernedSkillLevel(362)
  local Skilldamage = skilllv_1 * 0.2
  local EquipDamage = 0
  local RefineDamage = 0
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(40380) then
    EquipDamage = 1
    RefineDamage = 0.3 * RefineLv
  end
  local EquipDamage_1 = 0
  if srcUser:HasBuffID(90001253) then
    EquipDamage_1 = 0.5
  end
  if srcUser:HasBuffID(41770) then
    EquipDamage = EquipDamage + 1.5
    RefineDamage = RefineDamage + 0.3 * RefineLv
  end
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42190) then
    BaseLvDamage = IBaseLv * 20
  end
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + Skilldamage + EquipDamage + RefineDamage + EquipDamage_1) * (1 + DamIncrease - ShortRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    A = 1
  end
  local srcAtkElement = 6
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local B = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (damChangePer + Skilldamage + EquipDamage + RefineDamage) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  if B <= 1 then
    B = 1
  end
  local C = (A + B) * RuneDamage + BaseLvDamage
  local WeaponType = srcUser:GetEquipedWeaponType()
  if WeaponType ~= 170 then
    C = C * 0.5
  end
  return C
end

function CommonFun.calcDamage_7202(srcUser, targetUser, params, damageParam, logger)
  local damChangePer = damageParam.damChangePer
  local A = damChangePer
  return A
end

function CommonFun.calcDamage_7401(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local Vit = srcUser:GetProperty("Vit")
  local Def = srcUser:GetProperty("Def")
  local DefPer = srcUser:GetProperty("DefPer")
  local BaseAtk = Vit * Vit * Def * (1 + DefPer) / 10000
  local AtkFinal = BaseAtk * bodyparam * elementparam * elementparam2 * raceparam * bossparam * bossparam2
  local skilllv_1 = srcUser:GetLernedSkillLevel(1181)
  local Sheild = skilllv_1 * 0.01 + 1
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local GemValue = srcUser:GetGemValue(72071)
  local GemDam = 1 + GemValue / 100000
  local MoveSpd = srcUser:GetProperty("MoveSpd")
  local GemValue_cf = srcUser:GetGemValue(72122)
  local MoveRatio = 0
  if srcUser:HasBuffID(116690) then
    MoveRatio = (math.max(MoveSpd, 1) - 1) / 0.1 * GemValue_cf / 100000
  end
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) * (damChangePer + MoveRatio) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Sheild * GemDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_7402(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  local WeaponType = srcUser:GetEquipedWeaponType()
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local MRefine = srcUser:GetProperty("MRefine")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local HpAtk = 0
  local Hp = srcUser:GetProperty("Hp")
  if srcUser:HasBuffID(56420) and srcUser:HasBuffID(56430) == false then
    HpAtk = math.min(Hp * 0.05, Atk * (1 + AtkPer))
  elseif srcUser:HasBuffID(56430) then
    HpAtk = math.min(Hp * 0.05, Atk * (1 + AtkPer) + MAtk * (1 + MAtkPer))
  end
  local AtkFinal = (((Atk - BaseAtk) * (1 + AtkPer) + HpAtk) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Najia = 0
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  if srcUser:HasBuffID(90001267) then
    Najia = 1 + RefineLv / 100 * 20
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRing.id == 42583 or equipRing.id == 142583 then
    Najia = 1 + equipRing.refinelv / 100 * 20
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRingSD.id == 42583 or equipRingSD.id == 142583 then
    Najia = 1 + equipRingSD.refinelv / 100 * 20 * equipRingSD.quench_per / 100
  end
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local gsz = 1
  local Fifth = 1
  local skilllv_xsz = srcUser:GetLernedSkillLevel(1182)
  if skillID == 3808 then
    local skilllv_xsz = srcUser:GetLernedSkillLevel(1182)
    local skilllv_gsz = srcUser:GetLernedSkillLevel(3808)
    damChangePer = 5.2 + skilllv_xsz * 0.8
    local GemValue = srcUser:GetGemValue(72151)
    local GemDam = 1 + GemValue / 100000
    gsz = (1 + skilllv_gsz * 0.05) * GemDam
    if srcUser:HasBuffID(90004234) then
      Fifth = Fifth + 0.15
    end
  end
  if skillID == 5400 or skillID == 5404 then
    damChangePer = 4.6 + skilllv_xsz * 1.4
  end
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) * elementparam * elementparam2 + BaseMAtk) * raceparam * bossparam * bossparam2
  local A = ((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + Najia) * (1 + DamIncrease - ShortRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    A = 1
  end
  local Num = srcUser:GetRunePoint(74030)
  local RuneDamage = 1 + Num * 0.07
  local Card = 1
  if srcUser:HasBuffID(52790) then
    Card = 1.1
  end
  local EquipDamage = 1
  if srcUser:HasBuffID(41770) then
    EquipDamage = EquipDamage + 0.3
  end
  if srcUser:HasBuffID(90001253) and srcUser:HasBuffID(90001267) then
    EquipDamage = EquipDamage + 0.1
  end
  if srcUser:HasBuffID(41770) and srcUser:HasBuffID(90001267) then
    EquipDamage = EquipDamage + 0.1
  end
  if srcUser:HasBuffID(90001253) and srcUser:HasBuffID(43300) then
    EquipDamage = EquipDamage + 0.1
  end
  if srcUser:HasBuffID(41770) and srcUser:HasBuffID(43300) then
    EquipDamage = EquipDamage + 0.1
  end
  if equipRingSD.id ~= 0 then
    if srcUser:HasBuffID(90001253) and srcUser:HasBuffLayer(43300, EBUFFERLAYER_SHADOW) then
      EquipDamage = EquipDamage + 0.1
    end
    if srcUser:HasBuffID(41770) and srcUser:HasBuffLayer(43300, EBUFFERLAYER_SHADOW) then
      EquipDamage = EquipDamage + 0.1
    end
  end
  local equipRingarmour = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingarmour.id == 42088 or equipRingarmour.id == 142088 then
    EquipDamage = EquipDamage + 0.1
  end
  local equipRingSDarmour = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSDarmour.id == 42088 or equipRingSDarmour.id == 142088 then
    EquipDamage = EquipDamage + 0.1 * equipRingSDarmour.quench_per / 100
  end
  local RefineLv_wq = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(40380) or srcUser:HasBuffID(41770) then
    EquipDamage = EquipDamage + 0.02 * RefineLv_wq
  end
  local GemValue = srcUser:GetGemValue(72041)
  local GemDam = 1 + GemValue / 100000
  local cj = 1
  local hasbuff = false
  if srcUser.isServerCall then
    hasbuff = srcUser:GetBuffActive(130071)
  else
    hasbuff = srcUser:HasBuffID(130071)
  end
  if hasbuff == true then
    local skilllv_qh = srcUser:GetLernedSkillLevel(3828)
    cj = 1.3 + skilllv_qh * 0.06
    if srcUser.isServerCall then
      srcUser:AddBuff(130072, srcUser:GetGuid())
    end
  end
  local zhanji = 1
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local HolyEquip = 1
  if Weapon == 40319 or Weapon == 140319 then
    HolyEquip = 1 + 0.05 * RefineLv
  end
  if Weapon == 40360 or Weapon == 140360 then
    HolyEquip = 1 + 0.05 * RefineLv
  end
  if skillID == 5400 or skillID == 5404 then
    local skilllv_zhanji = srcUser:GetLernedSkillLevel(5400)
    local skilllv_zhanji3 = srcUser:GetLernedSkillLevel(5403)
    local count = params.hitedCount
    local CriDamPer = srcUser:GetProperty("CriDamPer")
    local Cri = srcUser:GetProperty("Cri")
    local EquipASPD = srcUser:GetProperty("EquipASPD")
    local AtkSpd = srcUser:GetProperty("AtkSpd")
    zhanji = (0.8 + 0.04 * skilllv_zhanji) * (math.floor((CriDamPer * 100 + Cri + (AtkSpd - 1) * 50) / 5) * skilllv_zhanji3 * 0.001 + 1) * (count * 0.05 + 0.95)
  end
  local Result = A * RuneDamage * Card * EquipDamage * GemDam * gsz * cj * Fifth * zhanji
  if (srcUser:HasBuffID(115090) or srcUser:HasBuffID(115091)) and skillID == 5404 then
    elementparam = 5
    local Hp = srcUser:GetProperty("Hp")
    local MaxHp = srcUser:GetProperty("MaxHp")
    local skilllv_1 = srcUser:GetLernedSkillLevel(361)
    local Hp_ratio = 1
    if srcUser:HasBuffID(22001140) then
      Hp_ratio = 1 + (MaxHp - Hp) / (3 * MaxHp)
    end
    local mapid, maptype = srcUser:GetMapInfo()
    local pvpRatio = 1
    if maptype == 2 or maptype == 4 then
      pvpRatio = 0.25
    end
    local dam = 0
    if srcUser:HasBuffID(90004914) then
      DefReduc = 1
    end
    if 5 < skilllv_1 then
      dam = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (skilllv_1 - 5) * 0.3 * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2)) * HolyEquip
    end
    if Hp > MaxHp * 0.09 then
      local DamGem = srcUser:GetGemValue(72161)
      local Fifth = 1
      if srcUser:HasBuffID(90004914) then
        Fifth = 1.15
      end
      Result = (MaxHp * 0.09 * (1 + math.max((skilllv_1 - 1) * 0.1, 0.4)) * pvpRatio * (1 - RefineDamReduc) + dam) * (1 + DamGem / 100000) * Fifth * Hp_ratio
    end
  end
  return Result
end

function CommonFun.calcDamage_8000(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local BaseLv = targetUser.BaseLv
  local WeaponType = srcUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local Refine = srcUser:GetProperty("Refine")
  local damChangePer = damageParam.damChangePer
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local AtkFinal = math.floor(BaseLv, BaseLv * 3) * damChangePer
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (1 + DamIncrease) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_7203(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Vit = srcUser:GetProperty("Vit")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local shield = srcUser:GetEquipedID(1)
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(70040)
  local RuneDamage = 1 + 0.1 * Num1
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local VDDamage = Vit / 150 + Dex / 200 + RefineLv / 15
  if VDDamage <= 0 then
    VDDamage = 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1181)
  local Sheild = skilllv_1 * 0.01 + 1
  local GemValue = srcUser:GetGemValue(72111)
  local GemDam = 1 + GemValue / 100000
  local RefineLvH = srcUser:GetEquipedRefineLv(2)
  local huangjiazhanjia = 0
  if 10 <= RefineLvH and srcUser:HasBuffID(90002013) then
    huangjiazhanjia = 0.15
  end
  local RefineLvJ = srcUser:GetEquipedRefineLv(1)
  local jingdun = 0
  if shield == 42508 or shield == 142508 then
    jingdun = jingdun + 0.15
  end
  if 10 <= RefineLvJ and srcUser:HasBuffID(90002033) then
    jingdun = jingdun + 0.1
  end
  if 5 <= RefineLvJ and srcUser:HasBuffID(90002027) then
    jingdun = jingdun + 0.05
  end
  local Nirvana = 0
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRing.id == 42581 or equipRing.id == 142581 then
    if 5 > equipRing.refinelv then
      Nirvana = Nirvana + 0.15
    elseif 5 <= equipRing.refinelv and 10 > equipRing.refinelv then
      Nirvana = Nirvana + 0.15 + 0.05
    elseif 10 <= equipRing.refinelv then
      Nirvana = Nirvana + 0.15 + 0.05 + 0.1
    end
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRingSD.id == 42581 or equipRingSD.id == 142581 then
    if 5 > equipRingSD.refinelv then
      Nirvana = Nirvana + 0.15 * equipRingSD.quench_per / 100
    elseif 5 <= equipRingSD.refinelv and 10 > equipRingSD.refinelv then
      Nirvana = Nirvana + 0.2 * equipRingSD.quench_per / 100
    elseif 10 <= equipRingSD.refinelv then
      Nirvana = Nirvana + 0.30000000000000004 * equipRingSD.quench_per / 100
    end
  end
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(43800) or srcUser:HasBuffID(44010) or srcUser:HasBuffID(43590) then
    BaseLvDamage = IBaseLv * 50
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + VDDamage) * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * RuneDamage * Sheild * GemDam * (1 + huangjiazhanjia + jingdun + Nirvana) + BaseLvDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_7204(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Vit = srcUser:GetProperty("Vit")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local shield = srcUser:GetEquipedID(1)
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local skilllv_1 = srcUser:GetLernedSkillLevel(352)
  local TopAtk = 0
  if 5 < skilllv_1 then
    TopAtk = (Atk * (1 + AtkPer) + Refine) * (skilllv_1 - 5) / 10
  end
  local BaseAtk = Vit * 8 + math.floor(Vit * Vit / 100) * 4 + math.floor(Dex / 5) + math.floor(Luk / 5) + RefineLv * RefineLv * 2 + TopAtk
  local AtkFinal = BaseAtk * elementparam * elementparam2 * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(70100)
  local RuneDamage = 1 + 0.05 * Num1
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local VDDamage = Vit / 150 + Dex / 200 + RefineLv / 15
  if VDDamage <= 0 then
    VDDamage = 0
  end
  local skilllv_2 = srcUser:GetLernedSkillLevel(1181)
  local Sheild = skilllv_2 * 0.01 + 1
  local GemValue = srcUser:GetGemValue(72092)
  local GemDam = 1 + GemValue / 100000
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local shenp = 1
  if skillID == 3805 then
    if skilllv_1 <= 5 then
      damChangePer = 3 + skilllv_1 * 0.6
    else
      damChangePer = 6
    end
    local skilllv_sp = srcUser:GetLernedSkillLevel(3805)
    local skilllv_db = srcUser:GetLernedSkillLevel(3804)
    shenp = 1 + skilllv_sp * 0.1
    VDDamage = VDDamage + skilllv_db * 0.05 * RefineLv
  end
  local RefineLvH = srcUser:GetEquipedRefineLv(2)
  local huangjiazhanjia = 0
  if 10 <= RefineLvH and srcUser:HasBuffID(90002013) then
    huangjiazhanjia = 0.15
  end
  local RefineLvJ = srcUser:GetEquipedRefineLv(1)
  local jingdun = 0
  if shield == 42508 or shield == 142508 then
    jingdun = jingdun + 0.15
  end
  if 10 <= RefineLvJ and srcUser:HasBuffID(90002033) then
    jingdun = jingdun + 0.1
  end
  if 5 <= RefineLvJ and srcUser:HasBuffID(90002027) then
    jingdun = jingdun + 0.05
  end
  local Nirvana = 0
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRing.id == 42581 or equipRing.id == 142581 then
    if 5 > equipRing.refinelv then
      Nirvana = Nirvana + 0.15
    elseif 5 <= equipRing.refinelv and 10 > equipRing.refinelv then
      Nirvana = Nirvana + 0.15 + 0.05
    elseif 10 <= equipRing.refinelv then
      Nirvana = Nirvana + 0.15 + 0.05 + 0.1
    end
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRingSD.id == 42581 or equipRingSD.id == 142581 then
    if 5 > equipRingSD.refinelv then
      Nirvana = Nirvana + 0.15 * equipRingSD.quench_per / 100
    elseif 5 <= equipRingSD.refinelv and 10 > equipRingSD.refinelv then
      Nirvana = Nirvana + 0.2 * equipRingSD.quench_per / 100
    elseif 10 <= equipRingSD.refinelv then
      Nirvana = Nirvana + 0.30000000000000004 * equipRingSD.quench_per / 100
    end
  end
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) * (damChangePer + VDDamage) * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * RuneDamage * Sheild * GemDam * shenp * (1 + huangjiazhanjia + jingdun + Nirvana)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_7205(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Vit = srcUser:GetProperty("Vit")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local shield = srcUser:GetEquipedID(1)
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local VDDamage = Vit / 150 + Dex / 200 + RefineLv / 15
  if VDDamage <= 0 then
    VDDamage = 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1181)
  local Sheild = skilllv_1 * 0.01 + 1
  local RefineLvH = srcUser:GetEquipedRefineLv(2)
  local huangjiazhanjia = 0
  if 10 <= RefineLvH and srcUser:HasBuffID(90002013) then
    huangjiazhanjia = 0.15
  end
  local RefineLvJ = srcUser:GetEquipedRefineLv(1)
  local jingdun = 0
  if shield == 42508 or shield == 142508 then
    jingdun = jingdun + 0.15
  end
  if 10 <= RefineLvJ and srcUser:HasBuffID(90002033) then
    jingdun = jingdun + 0.1
  end
  if 5 <= RefineLvJ and srcUser:HasBuffID(90002027) then
    jingdun = jingdun + 0.05
  end
  local Nirvana = 0
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRing.id == 42581 or equipRing.id == 142581 then
    if 5 > equipRing.refinelv then
      Nirvana = Nirvana + 0.15
    elseif 5 <= equipRing.refinelv and 10 > equipRing.refinelv then
      Nirvana = Nirvana + 0.15 + 0.05
    elseif 10 <= equipRing.refinelv then
      Nirvana = Nirvana + 0.15 + 0.05 + 0.1
    end
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRingSD.id == 42581 or equipRingSD.id == 142581 then
    if 5 > equipRingSD.refinelv then
      Nirvana = Nirvana + 0.15 * equipRingSD.quench_per / 100
    elseif 5 <= equipRingSD.refinelv and 10 > equipRingSD.refinelv then
      Nirvana = Nirvana + 0.2 * equipRingSD.quench_per / 100
    elseif 10 <= equipRingSD.refinelv then
      Nirvana = Nirvana + 0.30000000000000004 * equipRingSD.quench_per / 100
    end
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + VDDamage) * (1 + DamIncrease - ShortRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * Sheild * (1 + huangjiazhanjia + jingdun + Nirvana)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_7501(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Vit = srcUser:GetProperty("Vit")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local shield = srcUser:GetEquipedID(1)
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1181)
  local Sheild = skilllv_1 * 0.01 + 1
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local skilllv_db = srcUser:GetLernedSkillLevel(3804)
  local VDDamage = skilllv_db * 0.05 * RefineLv
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + VDDamage) * (1 + DamIncrease - ShortRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * Sheild
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_7502(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local HealEncPer = srcUser:GetProperty("HealEncPer")
  local BeHealEncPer2 = targetUser:GetProperty("BeHealEncPer")
  local skilllv = srcUser:GetLernedSkillLevel(3806)
  local A = (Int * (skilllv * 8 + 20) + MAtk * (1 + MAtkPer)) * (1 + HealEncPer) * (1 + BeHealEncPer2) * -1
  local HealtoDam = targetUser:GetBuffLevel(129100)
  local DamRatio = 1
  if targetUser:HasBuffID(129100) then
    DamRatio = -0.1 * HealtoDam
  end
  local HealReduce = targetUser:GetBuffLevel(136500)
  if targetUser:HasBuffID(136500) then
    DamRatio = 1 - (0.2 + 0.03 * HealReduce)
  end
  if targetUser:HasBuffID(41100050) then
    local MaxHp = targetUser:GetProperty("MaxHp")
    local Hp = targetUser:GetProperty("Hp")
    local Num1 = targetUser:GetRunePoint(70110)
    if Hp < MaxHp * (0.15 * Num1) then
      A = A * 3
    end
  end
  return A * DamRatio
end

function CommonFun.calcDamage_8001(srcUser, targetUser, params, damageParam, logger)
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = MaxHp * damChangePer + damChangePer1
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_7503(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Vit = srcUser:GetProperty("Vit")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local shield = srcUser:GetEquipedID(1)
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Num = srcUser:GetBuffLayer(130090)
  local skilllv = srcUser:GetLernedSkillLevel(3827)
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + Num * skilllv * 0.7) * (1 + DamIncrease - ShortRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local Fifth = 1
  if targetDefElement ~= 7 and srcUser:GetBuffActive(90004914) then
    Fifth = Fifth + 0.15
  end
  A = A * Fifth
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8002(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local BaseLv = targetUser.BaseLv
  local WeaponType = srcUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local Refine = srcUser:GetProperty("Refine")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local AtkFinal = math.random(BaseLv * 10, BaseLv * 16) * damChangePer + math.random(500, 1500) * damChangePer1
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (1 + DamIncrease) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8003(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = (Atk * (1 + AtkPer) * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) + damChangePer1) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  if bits[CommonFun.AttrEffect.ErLianDam] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_8004(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = (Atk * (1 + AtkPer) * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  if bits[CommonFun.AttrEffect.NormalSkillDam] == 1 then
    return A * 1.3
  end
  return A
end

function CommonFun.calcDamage_8005(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = (Atk * (1 + AtkPer) * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease) + damChangePer1) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)
  return A, CommonFun.DamageType.Normal
end

function CommonFun.calcDamage_8006(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  local skilllv_1 = srcUser:GetLernedSkillLevel(103140)
  local Rate = skilllv_1 * 5 + 30
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    return A * 1.5
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8007(srcUser, targetUser, params, damageParam, logger)
  local A = 111111
  return A, CommonFun.DamageType.Normal
end

function CommonFun.calcDamage_8008(srcUser, targetUser, params, damageParam, logger)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = MaxHp * 0.25
  return A, CommonFun.DamageType.Normal
end

function CommonFun.calcDamage_8009(srcUser, targetUser, params, damageParam, logger)
  local Hp = targetUser:GetProperty("Hp")
  local A = Hp
  if targetUser:GetNpcID() ~= 59128 then
    A = 1
  end
  return A, CommonFun.DamageType.Normal
end

function CommonFun.calcDamage_8010(srcUser, targetUser, params, damageParam, logger)
  local damChangePer = damageParam.damChangePer
  local Num = srcUser:GetBuffLayer(120420)
  local Ratio = 1
  if srcUser:HasBuffID(120500) then
    Ratio = 0.7
  elseif srcUser:HasBuffID(120520) then
    Ratio = 0.5
  end
  if targetUser:HasBuffID(120470) then
    Ratio = 0
  end
  local A = 3333 * damChangePer * math.max(Num * 10, 1) * Ratio
  return A, CommonFun.DamageType.Normal
end

function CommonFun.calcDamage_8011(srcUser, targetUser, params, damageParam, logger)
  local damChangePer = damageParam.damChangePer
  local Num = srcUser:GetBuffLayer(120410)
  local Ratio = 1
  if srcUser:HasBuffID(120490) then
    Ratio = 0.7
  elseif srcUser:HasBuffID(120510) then
    Ratio = 0.5
  end
  if targetUser:HasBuffID(120480) then
    Ratio = 0
  end
  local A = 3333 * damChangePer * math.max(Num * 10, 1) * Ratio
  return A, CommonFun.DamageType.Normal
end

function CommonFun.calcDamage_8012(srcUser, targetUser, params, damageParam, logger)
  local damChangePer = damageParam.damChangePer
  local A = 1000 * damChangePer
  return A, CommonFun.DamageType.Normal
end

function CommonFun.calcDamage_8013(srcUser, targetUser, params, damageParam, logger)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = MaxHp * 0.333
  if targetUser:GetNpcID() ~= 59126 then
    A = 1
  end
  return A, CommonFun.DamageType.Normal
end

function CommonFun.calcDamage_8014(srcUser, targetUser, params, damageParam, logger)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local count = params.hitedCount
  local A = math.floor(MaxHp * 2.5 / count)
  return A, CommonFun.DamageType.Normal
end

function CommonFun.calcDamage_8015(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Luk2 = targetUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local damChangePer = damageParam.damChangePer
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if enemy == false then
    return 0, CommonFun.DamageType.None
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8016(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Dex = srcUser:GetProperty("Dex")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 24354 then
    local Num = srcUser:GetBuffLayer(11620)
    damChangePer = damChangePer * (1 + Num)
  end
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8020(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local BaseLv = targetUser.BaseLv
  local WeaponType = srcUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local Refine = srcUser:GetProperty("Refine")
  local damChangePer = damageParam.damChangePer
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local AtkFinal = math.floor(BaseLv, BaseLv * 3) * damChangePer
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (1 + DamIncrease) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8021(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local BaseLv = targetUser.BaseLv
  local WeaponType = srcUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local Refine = srcUser:GetProperty("Refine")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local AtkFinal = math.random(BaseLv * 10, BaseLv * 16) * damChangePer + math.random(500, 1500) * damChangePer1
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if targetUser:GetNpcID() ~= 56008 and targetUser:GetNpcID() ~= 56009 and skillID == 40032 then
    AtkFinal = 0
  end
  if targetUser:GetNpcID() ~= 56010 and targetUser:GetNpcID() ~= 56011 and skillID == 40034 then
    AtkFinal = 0
  end
  if targetUser:GetNpcID() ~= 56012 and targetUser:GetNpcID() ~= 56013 and skillID == 40036 then
    AtkFinal = 0
  end
  local A = AtkFinal
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8030(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp = srcUser:GetProperty("Hp")
  local HpPerRatio = 1
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local count = params.hitedCount
  local CountDam = 1 / count ^ 0.6
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * CountDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8031(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp = srcUser:GetProperty("Hp")
  local HpPerRatio = 1
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 71850 and Hp < 0.8 * MaxHp then
    HpPerRatio = 2
  end
  if skillID == 71860 and Hp < 0.5 * MaxHp then
    HpPerRatio = 2
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam) * HpPerRatio
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8032(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = (Atk * (1 + AtkPer) * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local count = params.hitedCount
  local CountDam = math.max(1 - 0.08 * count, 0.2)
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * CountDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8033(srcUser, targetUser, params, damageParam, logger)
  local damChangePer = damageParam.damChangePer
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local A = damChangePer * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8034(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local Num1 = targetUser:GetBuffLayer(162800)
  A = (Num1 * 3 + 1) * A
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8035(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local moneng = srcUser:GetBuffLayer(163250)
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam) * (moneng * 0.5 + 1)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8036(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  if damChangePer1 == nil then
    damChangePer1 = 0
  end
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2) + damChangePer1
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8037(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local skilllv_1 = srcUser:GetLernedSkillLevel(127)
  local atk_add = 0
  if 10 < skilllv_1 and (skillID == 300 or skillID == 113) then
    atk_add = Dex * ((skilllv_1 - 10) * 0.5)
  end
  local NormalAtk = 0
  if skillID == 300 or skillID == 113 then
    local NormalAtkAttr = srcUser:GetProperty("NormalAtk")
    NormalAtk = NormalAtkAttr + 3 * Dex
  end
  local Kuangbao = 1
  if srcUser:HasBuffID(6730) then
    Kuangbao = 2
  end
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk + atk_add) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) + damChangePer1 * Kuangbao
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8038(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  if damChangePer1 == nil then
    damChangePer1 = 0
  end
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2) + damChangePer1
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8039(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  if damChangePer1 == nil then
    damChangePer1 = 0
  end
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local xiqu = srcUser:GetBuffLayer(163700)
  if xiqu == 50 then
    return 999999
  end
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (damChangePer + xiqu * 0.3) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2) + damChangePer1 * xiqu
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8040(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  if damChangePer1 == nil then
    damChangePer1 = 0
  end
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local chongneng = srcUser:GetBuffLayer(166010)
  if chongneng == 3 then
    return 999999
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2) + damChangePer1) * (1 + chongneng * 0.2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8041(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local targetid = targetUser:GetGuid()
  local distance = srcUser:GetDistance(targetid)
  if distance <= 1 then
    distance = 1
  end
  if 10 <= distance then
    distance = 10
  end
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - distance / 12) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8042(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local jiangshi = srcUser:GetBuffLayer(166420)
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam) * (jiangshi * 0.1 + 1)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8043(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local skilllv_1 = srcUser:GetLernedSkillLevel(127)
  local atk_add = 0
  if 10 < skilllv_1 and (skillID == 300 or skillID == 113) then
    atk_add = Dex * ((skilllv_1 - 10) * 0.5)
  end
  local NormalAtk = 0
  if skillID == 300 or skillID == 113 then
    local NormalAtkAttr = srcUser:GetProperty("NormalAtk")
    NormalAtk = NormalAtkAttr + 3 * Dex
  end
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk + atk_add) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local panjuan = srcUser:GetBuffLayer(173620)
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2) + damChangePer1) * (1 - panjuan * 0.19)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8044(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = 0
  if enemy then
    A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  end
  return A
end

function CommonFun.calcDamage_8045(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam)
  if A <= 1 then
    return 1
  end
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  if bits[CommonFun.StateEffect.Burn] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_8046(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Num1 = srcUser:GetBuffLayer(174823)
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * (damChangePer * math.pow(2, Num1)) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8047(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = (Atk * (1 + AtkPer) * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local count = params.hitedCount
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) / count
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8048(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local count = params.hitedCount
  if count <= 0 then
    count = 1
  end
  local CountDam = 1 / count ^ 0.75
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2) + MaxHp) * CountDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8049(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  if damChangePer1 == nil then
    damChangePer1 = 0
  end
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Num1 = targetUser:GetBuffLayer(174940)
  local Num2 = 2 ^ Num1
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2) + damChangePer1) * Num2
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8050(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Num1 = targetUser:GetBuffLayer(177930)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 25636 then
    Num1 = math.min(3, Num1)
  end
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (damChangePer + Num1 * damChangePer1) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8051(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  local WeaponType = srcUser:GetEquipedWeaponType()
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local MRefine = srcUser:GetProperty("MRefine")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) * elementparam * elementparam2 + BaseMAtk) * raceparam * bossparam * bossparam2
  local A = ((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - ShortRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    A = 1
  end
  local enemy = srcUser:IsEnemy(targetUser)
  if enemy == false then
    return 0, CommonFun.DamageType.None
  end
  return A
end

function CommonFun.calcDamage_8052(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  local WeaponType = srcUser:GetEquipedWeaponType()
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local MRefine = srcUser:GetProperty("MRefine")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local targetid = targetUser:GetGuid()
  local distance = srcUser:GetDistance(targetid)
  local DisDam = 1 - distance / 15 * 0.8
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) * elementparam * elementparam2 + BaseMAtk) * raceparam * bossparam * bossparam2
  local A = (((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * DisDam
  if A <= 1 then
    A = 1
  end
  return A
end

function CommonFun.calcDamage_8053(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  local WeaponType = srcUser:GetEquipedWeaponType()
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local MRefine = srcUser:GetProperty("MRefine")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local count = params.hitedCount
  if count <= 1 then
    count = 1
  end
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) * elementparam * elementparam2 + BaseMAtk) * raceparam * bossparam * bossparam2
  local A = (((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) / count
  if A <= 1 then
    A = 1
  end
  return A
end

function CommonFun.calcDamage_8201(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local Sp = targetUser:GetProperty("Sp")
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk + Sp) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Num_js = srcUser:GetRunePoint(82020)
  local RuneDamage = 1 + Num_js * 0.1
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local JSSZ = 1
  if 15 <= RefineLv and srcUser:HasBuffID(90002133) then
    JSSZ = 1.15
  end
  if srcUser:HasBuffID(42710) then
    JSSZ = JSSZ + RefineLv * 0.01
  end
  if 15 <= RefineLv and srcUser:HasBuffID(42710) then
    JSSZ = JSSZ + 0.15
  end
  if srcUser:HasBuffID(90004574) then
    JSSZ = JSSZ + 0.15
  end
  local GemValue = srcUser:GetGemValue(82041)
  local GemDam = 1 + GemValue / 100000
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * RuneDamage * JSSZ * GemDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8202(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local skilllv_ele = srcUser:GetLernedSkillLevel(1333)
  local ElementNpc = srcUser:getCurElementElfID()
  if skillID == 1330 and ElementNpc == 580030 then
    A = A * (1 + skilllv_ele * 0.03)
  end
  if skillID == 1328 then
    local Num_xc = srcUser:GetRunePoint(82031)
    local GemValue1 = srcUser:GetGemValue(82022)
    local GemValue2 = srcUser:GetGemValue(82052)
    local GemDam = 1 + GemValue1 / 100000 + GemValue2 / 100000
    A = A * (1 + Num_xc * 0.08) * GemDam
    if ElementNpc == 580020 then
      A = A * (1 + skilllv_ele * 0.01)
    end
    local RefineLv = srcUser:GetEquipedRefineLv(7)
    local Ring1 = srcUser:GetEquipedID(7)
    if Ring1 == 63433 or Ring1 == 163433 then
      A = A * (RefineLv * 0.02 + 1)
    end
    if Ring1 == 63444 or Ring1 == 163444 then
      A = A * (RefineLv * 0.02 + 1)
    end
  end
  if skillID == 1305 then
    local Num_dz = srcUser:GetRunePoint(82002)
    A = A * (1 + Num_dz * 0.1)
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8203(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Num_shand = srcUser:GetRunePoint(82028)
  local RuneDamage = 1 + Num_shand * 0.08
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * RuneDamage
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local B = (MAtkFinal * DefReduc * (1 - DamReduc2) + MRefine) * (1 - RefineDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  local skilllv_ele = srcUser:GetLernedSkillLevel(1333)
  local ElementNpc = srcUser:getCurElementElfID()
  local elementRatio = 1
  if ElementNpc == 580040 then
    elementRatio = 1 + skilllv_ele * 0.01
  end
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits2 = CommonFun.getBits(StateEffect)
  local Num_yaz = srcUser:GetRunePoint(82029)
  local RuneDamage2 = 1
  local GemValue1 = srcUser:GetGemValue(82031)
  local GemDam = 1 + GemValue1 / 100000
  if bits2[CommonFun.StateEffect.Freeze] == 1 then
    local GemValue2 = srcUser:GetGemValue(82032)
    RuneDamage2 = 1 + Num_yaz * 0.2 + GemValue2 / 100000
  end
  local C = (A + B) * elementRatio * RuneDamage2 * GemDam
  if C <= 1 then
    return 1
  end
  return C
end

function CommonFun.calcDamage_8204(srcUser, targetUser, params, damageParam, logger)
  local Master = CommonFun.getNpcMasterUser(srcUser)
  if Master == nil and srcUser:GetNpcID() ~= 0 then
    return 0
  end
  local Int = Master:GetProperty("Int")
  local MAtk = Master:GetProperty("MAtk")
  local MAtkPer = Master:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = Master:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local skilllv_ele = Master:GetLernedSkillLevel(1333)
  local skilllv_ele2 = Master:GetLernedSkillLevel(1334)
  local Final = (1 + 0.05 * skilllv_ele) * (1 + 0.1 * skilllv_ele2)
  local Num_hp = Master:GetRunePoint(82025)
  local RuneDamage = 1 + Num_hp * 0.1
  local GemValue = Master:GetGemValue(82111)
  local GemDam = 1 + GemValue / 100000
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 * Final * RuneDamage * GemDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_8205(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = 5
  local ElementNpc = srcUser:getCurElementElfID()
  if ElementNpc == 580010 then
    srcAtkElement = 4
  elseif ElementNpc == 580020 then
    srcAtkElement = 3
  elseif ElementNpc == 580030 then
    srcAtkElement = 2
  elseif ElementNpc == 580040 then
    srcAtkElement = 1
  end
  local targetDefElement = targetUser:GetProperty("DefAttr")
  if nil == CommonFun.NatureProps[srcAtkElement] or nil == CommonFun.NatureProps[targetDefElement] or nil == targetDefElement then
    return 0
  end
  local elementRed = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement][2])
  local elementAtk = srcUser:GetProperty(CommonFun.NatureProps[srcAtkElement][3])
  if nil == elementAtk then
    elementAtk = 0
  end
  local elementparam2 = 1 + elementAtk - elementRed
  local mapid, maptype = srcUser:GetMapInfo()
  if maptype == 2 or maptype == 4 then
    local B = elementRed - elementAtk
    B = B < -1 and -1 or 1 < B and 1 or B
    B = math.floor(B * 1000) / 1000
    B = B + 0.3 * (1 - math.sin(B * 3.14 / 2))
    elementparam2 = 1 - B
  end
  if elementparam2 <= 0.1 then
    elementparam2 = 0.1
  end
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Num_js = srcUser:GetRunePoint(82033)
  local GemValue = srcUser:GetGemValue(82082)
  local GemDam = 1 + GemValue / 100000
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + Num_js * 0.08) * (1 + RangeDam) * GemDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_9000(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local count = params.hitedCount
  if count <= 1 then
    count = 1
  end
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) / count
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_9001(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local count = params.hitedCount
  if count <= 1 then
    count = 1
  end
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * count
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_9002(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local count = params.hitedCount
  if count <= 1 then
    count = 1
  end
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) / count
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_9003(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local count = params.hitedCount
  if count <= 1 then
    count = 1
  end
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) / count
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_9004(srcUser, targetUser, params, damageParam, logger)
  local Hp = targetUser:GetProperty("Hp")
  local Weapon = srcUser:GetEquipedID(7)
  local targetRace = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    targetRace = 2
  end
  local enemy = srcUser:IsEnemy(targetUser)
  local A = Hp - 1
  if enemy then
    if targetRace == 3 and (Weapon == 41815 or Weapon == 141815) then
      if targetUser.boss == true or targetUser.mini == true then
        return 0, 0
      else
        return A
      end
    elseif targetRace == 1 and (Weapon == 41836 or Weapon == 141836) then
      if targetUser.boss == true or targetUser.mini == true then
        return 0, 0
      else
        return A
      end
    else
      return 0, 0
    end
  else
    return 0, 0
  end
  return 0, 0
end

function CommonFun.calcDamage_9005(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local BaseLv = srcUser.BaseLv
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local count = params.hitedCount
  if count <= 1 then
    count = 1
  end
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2)) / count
  if A <= 1 then
    return 1, CommonFun.DamageType.Normal_Sp
  end
  return A, CommonFun.DamageType.Normal_Sp
end

function CommonFun.calcDamage_9006(srcUser, targetUser, params, damageParam, logger)
  local BaseLv = srcUser.BaseLv
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local B = 0
  local Num1 = srcUser:GetBuffLayer(24522)
  local weapon = srcUser:GetEquipedID(7)
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  if weapon == 40020 or weapon == 140020 then
    if 2 <= RefineLv and RefineLv < 4 then
      B = 0.05
    elseif 4 <= RefineLv and RefineLv < 6 then
      B = 0.1
    elseif 6 <= RefineLv and RefineLv < 8 then
      B = 0.15
    elseif 8 <= RefineLv and RefineLv < 10 then
      B = 0.2
    elseif 10 <= RefineLv and RefineLv < 12 then
      B = 0.25
    elseif 12 <= RefineLv and RefineLv < 14 then
      B = 0.3
    elseif 14 <= RefineLv and RefineLv < 16 then
      B = 0.35
    elseif 16 <= RefineLv and RefineLv < 18 then
      B = 0.4
    elseif 18 <= RefineLv and RefineLv < 20 then
      B = 0.45
    elseif RefineLv == 20 then
      B = 0.5
    end
  end
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local A = math.max(1, BaseLv * Num1 * damChangePer * (1 + B)) * elementparam * elementparam2 * raceparam * bossparam * bossparam2 * (1 - DamReduc2) * (1 - RefineDamReduc) * (1 + DamIncrease)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_9010(srcUser, targetUser, params, damageParam, logger)
  if targetUser:GetNpcID() == 0 then
    local TargetAppleNum = targetUser:GetAppleNum()
    if targetUser:HasBuffID(200020) or targetUser:HasBuffID(200021) then
      return 1, CommonFun.DamageType.Normal
    elseif TargetAppleNum == 0 then
      return 0, CommonFun.DamageType.Normal
    elseif targetUser:HasBuffID(200070) then
      return math.ceil(TargetAppleNum / 4)
    else
      return math.ceil(TargetAppleNum / 2)
    end
  else
    local A = 100
    local SelfAppleNum = srcUser:GetAppleNum()
    if 5 < SelfAppleNum then
      A = 100 * ((SelfAppleNum - 5) * 0.1 + 1)
    end
    return A
  end
end

function CommonFun.calcDamage_9011(srcUser, targetUser, params, damageParam, logger)
  local damageParam = damageParam.damChangePer
  if damageParam == 0 then
    return 0, CommonFun.DamageType.Miss
  end
  if targetUser:GetNpcID() == 0 then
    local TargetAppleNum = targetUser:GetAppleNum()
    if TargetAppleNum <= 1 or targetUser:HasBuffID(200020) or targetUser:HasBuffID(200021) then
      return 0, CommonFun.DamageType.Miss
    elseif CommonFun.IsInRate(damageParam / 2, srcUser:GetRandom()) and targetUser:HasBuffID(200070) then
      return 1
    elseif CommonFun.IsInRate(damageParam, srcUser:GetRandom()) then
      return 1
    else
      return 0, CommonFun.DamageType.Miss
    end
  else
    return 0, CommonFun.DamageType.Miss
  end
end

function CommonFun.calcDamage_9012(srcUser, targetUser, params, damageParam, logger)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = -MaxHp * 0.03
  return A
end

function CommonFun.calcDamage_9013(srcUser, targetUser, params, damageParam, logger)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = MaxHp * 0.2
  return A
end

function CommonFun.calcDamage_9014(srcUser, targetUser, params, damageParam, logger)
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local Refine = srcUser:GetProperty("Refine")
  local CriDamPer = srcUser:GetProperty("CriDamPer")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local A = (Atk * (1 + AtkPer) + Refine) * (1.5 + CriDamPer) * (1 - RefineDamReduc) * damChangePer
  return A
end

function CommonFun.calcDamage_9015(srcUser, targetUser, params, damageParam, logger)
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local Refine = srcUser:GetProperty("Refine")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MRefine = srcUser:GetProperty("MRefine")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local A = (Atk * (1 + AtkPer) + Refine + MAtk * (1 + MAtkPer) + MRefine) * (1 - RefineDamReduc) * damChangePer
  return A
end

function CommonFun.calcDamage_9016(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local count = params.hitedCount
  if count <= 1 then
    count = 1
  end
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * count
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_9017(srcUser, targetUser, params, damageParam, logger)
  if targetUser:GetNpcID() == 0 then
    local TargetAppleNum = targetUser:GetAppleNum()
    return TargetAppleNum
  else
    return 500
  end
end

function CommonFun.calcDamage_9018(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement1 = 1
  local elementInc1 = 0
  local elementRed1 = 0
  local targetDefElement = targetUser:GetProperty("DefAttr")
  if nil == targetDefElement then
    logger.error(string.format("%s targetDefElement is nil", targetUser.name))
    return 0
  end
  if nil == CommonFun.NatureProps[targetDefElement] then
    logger.error(string.format("%s CommonFun.NatureProps[%s] is nil", srcUser.name, tostring(targetDefElement)))
    return 0
  end
  if nil == CommonFun.NatureProps[srcAtkElement1] then
    logger.error(string.format("CommonFun.NatureProps[%s] is nil", tostring(srcAtkElement1)))
    return 0
  end
  elementInc1 = srcUser:GetProperty(CommonFun.NatureProps[targetDefElement][1])
  elementRed1 = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement1][2])
  elementAtk1 = srcUser:GetProperty(CommonFun.NatureProps[srcAtkElement1][3])
  if nil == elementAtk1 then
    elementAtk1 = 0
  end
  local result1 = 1 + elementAtk1 - elementRed1
  if result1 <= 0.1 then
    result1 = 0.1
  end
  local srcAtkElement3 = 3
  local elementInc3 = 0
  local elementRed3 = 0
  local targetDefElement = targetUser:GetProperty("DefAttr")
  if nil == targetDefElement then
    logger.error(string.format("%s targetDefElement is nil", targetUser.name))
    return 0
  end
  if nil == CommonFun.NatureProps[targetDefElement] then
    logger.error(string.format("%s CommonFun.NatureProps[%s] is nil", srcUser.name, tostring(targetDefElement)))
    return 0
  end
  if nil == CommonFun.NatureProps[srcAtkElement3] then
    logger.error(string.format("CommonFun.NatureProps[%s] is nil", tostring(srcAtkElement3)))
    return 0
  end
  elementInc3 = srcUser:GetProperty(CommonFun.NatureProps[targetDefElement][1])
  elementRed3 = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement3][2])
  elementAtk3 = srcUser:GetProperty(CommonFun.NatureProps[srcAtkElement3][3])
  if nil == elementAtk3 then
    elementAtk3 = 0
  end
  local result3 = 1 + elementAtk3 - elementRed3
  if result3 <= 0.1 then
    result3 = 0.1
  end
  local elementparam21 = result1
  local elementparam23 = result3
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A1 = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.GetElementRate(srcUser, srcAtkElement1, targetUser, targetDefElement, params, damageParam) * elementparam21 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  local A3 = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.GetElementRate(srcUser, srcAtkElement3, targetUser, targetDefElement, params, damageParam) * elementparam23 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  local A = A1 + A3
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_9201(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 3 * Dex
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 469 then
    AtkFinal = ((Atk - BaseAtk + NormalAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  end
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local BaseLvDamage = 0
  if skillID == 468 then
    local IBaseLv = srcUser.BaseLv
    if srcUser:HasBuffID(42130) then
      BaseLvDamage = IBaseLv * 15
    end
  end
  local targetid = targetUser:GetGuid()
  local distance = srcUser:GetDistance(targetid)
  local skilllv_1 = srcUser:GetLernedSkillLevel(478)
  local DisDam = 1
  if 10 < skilllv_1 then
    DisDam = 1 + distance / 7.5 * (skilllv_1 - 10) * 0.1
    DisDam = math.min(DisDam, 2)
  end
  local fromid = targetUser:GetBuffFromID(116470)
  local guid = srcUser:GetGuid()
  local BUffDam = 1
  local skilllv_1 = srcUser:GetLernedSkillLevel(1147)
  local GemBiaoji = srcUser:GetGemValue(91121)
  local Numxp = srcUser:GetRunePoint(94080)
  if fromid == guid or skillID == 4228 and fromid ~= 0 then
    BUffDam = 1 + skilllv_1 * 0.02 + Numxp * 0.02 + GemBiaoji / 100000
  end
  local GemValue = srcUser:GetGemValue(91052)
  local GemDam = 1
  if skillID == 468 or skillID == 4203 or skillID == 4228 then
    GemDam = 1 + GemValue / 100000
  end
  if skillID == 4203 or skillID == 4228 then
    local skilllv_er = srcUser:GetLernedSkillLevel(468)
    local skilllv_duo = srcUser:GetLernedSkillLevel(4203)
    local skilllv_xjn = srcUser:GetLernedSkillLevel(4222)
    damChangePer = (0.3 * skilllv_er + 2.4) * (0.5 + skilllv_duo * 0.03) * (1 + skilllv_xjn * 0.04)
    if skillID == 4228 then
      damChangePer = damChangePer * 0.8
    end
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * DisDam * BUffDam * GemDam + BaseLvDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_9202(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 5 * Str
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local WeaponType = srcUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(damageParam.skill1_id)
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Enemy = 1
  local skilllv_1 = srcUser:GetLernedSkillLevel(1145)
  if 0 < skilllv_1 and 1 >= srcUser:GetRangeEnemy(3) then
    Enemy = 1 + skilllv_1 * 0.03
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Enemy
  local Buff = srcUser:HasBuffID(24441)
  local huali = 1
  if Buff == true and srcUser:HasBuffID(90001903) then
    huali = 1.25
  elseif Buff == true then
    huali = 1.1
  end
  local Num1 = srcUser:GetRunePoint(90170)
  local RuneDamage = Num1 * 0.06 + 1
  if A <= 1 then
    return 1
  end
  local WeaponType = srcUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(179)
  local ErDaoDam = 0
  if 10 < skilllv_1 then
    ErDaoDam = (skilllv_1 - 10) * 0.05
    skilllv_1 = 10
  end
  if WeaponType == 250 and CommonFun.IsInRate(skilllv_1 * 5, srcUser:GetRandom()) then
    return A * (2 + ErDaoDam) * huali * RuneDamage, CommonFun.DamageType.ErLianJi
  end
  return A * huali
end

function CommonFun.calcDamage_9203(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local skilllv_1 = srcUser:GetLernedSkillLevel(468)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local Num1 = srcUser:GetRunePoint(90050)
  local RuneDamage = Num1 * 0.08 + 1
  local Num2 = 1
  local WeaponRefineLv = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(90001633) then
    Num2 = WeaponRefineLv * 0.03 + 1
  end
  if srcUser:HasBuffID(90001635) then
    Num2 = Num2 + 0.1
  end
  if srcUser:HasBuffID(41880) then
    Num2 = WeaponRefineLv * 0.03 + Num2
  end
  if srcUser:HasBuffID(41880) then
    Num2 = Num2 + 0.2
  end
  local Master = CommonFun.getNpcMasterUser(srcUser)
  if Master ~= nil and srcUser:GetNpcID() ~= 0 then
    local WeaponRefineLvMaster = Master:GetEquipedRefineLv(7)
    if Master:HasBuffID(90001633) then
      Num2 = WeaponRefineLvMaster * 0.03 + 1
    end
    if Master:HasBuffID(90001635) then
      Num2 = Num2 + 0.1
    end
    if Master:HasBuffID(41880) then
      Num2 = WeaponRefineLvMaster * 0.03 + Num2
    end
    if Master:HasBuffID(41880) then
      Num2 = Num2 + 0.2
    end
  end
  local fromid = targetUser:GetBuffFromID(116470)
  local guid = srcUser:GetGuid()
  local BUffDam = 1
  local skilllv_dead = srcUser:GetLernedSkillLevel(1147)
  local GemBiaoji = srcUser:GetGemValue(91121)
  local Numxp = srcUser:GetRunePoint(94080)
  if fromid == guid or skillID == 4228 and fromid ~= 0 then
    BUffDam = 1 + skilllv_dead * 0.02 + Numxp * 0.02 + GemBiaoji / 100000
  end
  local GemValue = srcUser:GetGemValue(91082)
  local GemDam = 1 + GemValue / 100000
  local targetid = targetUser:GetGuid()
  local distance = srcUser:GetDistance(targetid)
  local skilllv_cy = srcUser:GetLernedSkillLevel(478)
  local DisDam = 1
  if 10 < skilllv_cy then
    DisDam = 1 + distance / 7.5 * (skilllv_cy - 10) * 0.1
    DisDam = math.min(DisDam, 2)
  end
  if skillID == 476 then
    damChangePer = damChangePer + skilllv_1 * 0.1
  end
  if skillID == 4203 or skillID == 4228 then
    local skilllv_san = srcUser:GetLernedSkillLevel(476)
    local skilllv_duo = srcUser:GetLernedSkillLevel(4203)
    local skilllv_xjn = srcUser:GetLernedSkillLevel(4222)
    if skilllv_san <= 10 then
      damChangePer = (0.3 * skilllv_san + 4.2 + skilllv_1 * 0.1) * (1 + skilllv_duo * 0.05) * (1 + skilllv_xjn * 0.04)
    else
      damChangePer = ((skilllv_san - 10) * 0.6 + 7.2 + skilllv_1 * 0.1) * (1 + skilllv_duo * 0.05) * (1 + skilllv_xjn * 0.04)
    end
    if skillID == 4228 then
      damChangePer = damChangePer * 0.8
    end
  end
  local JumpRatio = 1
  if skillID == 5800 then
    local skilllv_san = srcUser:GetLernedSkillLevel(476)
    local skilllv_liansuo = srcUser:GetLernedSkillLevel(5800)
    local index = params.hitedIndex
    if skilllv_san <= 10 then
      damChangePer = (0.3 * skilllv_san + 4.2 + skilllv_1 * 0.1) * (skilllv_liansuo * 0.02 + 1)
    else
      damChangePer = ((skilllv_san - 10) * 0.6 + 7.2 + skilllv_1 * 0.1) * (skilllv_liansuo * 0.02 + 1)
    end
    JumpRatio = math.pow(0.8, index - 1)
  end
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(43740) or srcUser:HasBuffID(43950) or srcUser:HasBuffID(43530) then
    BaseLvDamage = IBaseLv * 50
  end
  local A = (((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) * RuneDamage - Vit2 * (1 + VitPer2)) * Num2 * BUffDam * GemDam + BaseLvDamage) * DisDam * JumpRatio
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_9204(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local Hp2 = targetUser:GetProperty("Hp")
  local MaxHp2 = targetUser:GetProperty("MaxHp")
  local damChangePer = damageParam.damChangePer
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 481 then
    local Num1 = srcUser:GetRunePoint(90060)
    local RuneDamage1 = Num1 * 0.2 + 1
    A = A * RuneDamage1
  end
  if skillID == 483 then
    local Num2 = srcUser:GetRunePoint(90100)
    local RuneDamage2 = Num2 * 0.1 + 1
    A = A * RuneDamage2
  end
  if skillID == 487 and srcUser:HasBuffID(40672) then
    A = A * 1.5
  end
  if A <= 1 then
    return 1
  end
  if bits[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_9205(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local Hp2 = targetUser:GetProperty("Hp")
  local MaxHp2 = targetUser:GetProperty("MaxHp")
  local damChangePer = damageParam.damChangePer
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(90080)
  local RuneDamage = Num1 * 0.08 + 1
  local kerd = 1
  if srcUser:HasBuffID(40672) then
    kerd = 1.5
  end
  local yake2 = 1
  if srcUser:HasBuffID(90002160) then
    yake2 = 1.15
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Weapon = srcUser:GetEquipedID(7)
  local targetRace = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    targetRace = 2
  end
  local Hand = 1
  if targetRace == 2 and (Weapon == 40744 or Weapon == 140744 or Weapon == 40745 or Weapon == 140745) then
    if 10 <= RefineLv and RefineLv < 15 then
      Hand = 1.05
    elseif 15 <= RefineLv then
      Hand = 1.15
    end
  end
  if targetRace == 2 and srcUser:HasBuffID(90002161) and 5 <= RefineLv then
    Hand = Hand + 0.05
  end
  if srcUser:HasBuffID(22920) then
    yake2 = 1.15 + RefineLv * 0.01
  end
  if targetRace == 2 and srcUser:HasBuffID(22920) then
    if 5 <= RefineLv and RefineLv < 10 then
      Hand = Hand + 0.05
    elseif 10 <= RefineLv and RefineLv < 15 then
      Hand = Hand + 0.05 + 0.05
    elseif 15 <= RefineLv then
      Hand = Hand + 0.05 + 0.05 + 0.1
    end
  end
  local yake = 0
  if targetRace == 2 and srcUser:HasBuffID(24380) and (srcUser:HasBuffID(40690) or srcUser:HasBuffID(22920)) then
    yake = 0.5
  end
  if targetRace == 2 and srcUser:HasBuffID(42490) and (srcUser:HasBuffID(40690) or srcUser:HasBuffID(22920)) then
    yake = 0.5
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id ~= 0 and targetRace == 2 and srcUser:HasBuffLayer(42490, EBUFFERLAYER_SHADOW) and (srcUser:HasBuffID(40690) or srcUser:HasBuffID(22920)) then
    yake = 0.5
  end
  local Enemy = 1
  local skilllv_1 = srcUser:GetLernedSkillLevel(1145)
  if 0 < skilllv_1 and 1 >= srcUser:GetRangeEnemy(3) then
    Enemy = 1 + skilllv_1 * 0.03
    if srcUser:HasBuffID(20910080) then
      DefReduc = 1
      RefineDamReduc = 0
    end
  end
  local GemValue = srcUser:GetGemValue(91041)
  local GemDam = 1 + GemValue / 100000
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local yx = 1
  if skillID == 4210 then
    local skilllv_bc = srcUser:GetLernedSkillLevel(480)
    local skilllv_yx = srcUser:GetLernedSkillLevel(4210)
    damChangePer = skilllv_bc * 0.6 + 3
    local skilllv_xjn = srcUser:GetLernedSkillLevel(4224)
    local ShadowNum = srcUser:GetPetCount("ShadowNpc")
    yx = (1 + skilllv_yx * 0.05) * (1 + skilllv_xjn * 0.05 * ShadowNum)
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + yake) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) * RuneDamage - Vit2 * (1 + VitPer2)) * kerd * Hand * Enemy * yake2 * GemDam * yx
  if A <= 1 then
    return 1
  end
  local Hiding = srcUser:GetProperty("Hiding")
  if bits[CommonFun.AttrEffect.Hualiduanjian] == 1 and (Hiding == 1 or bits[CommonFun.AttrEffect.HideStrengthEffect] == 1) then
    return A * 1.5 * 2
  elseif Hiding == 1 or bits[CommonFun.AttrEffect.HideStrengthEffect] == 1 then
    return A * 2
  elseif bits[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_9206(srcUser, targetUser, params, damageParam, logger)
  local A = 0
  return A, CommonFun.DamageType.Normal
end

function CommonFun.calcDamage_9401(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local Hp2 = targetUser:GetProperty("Hp")
  local MaxHp2 = targetUser:GetProperty("MaxHp")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local Int2 = targetUser:GetProperty("Int")
  local Numxp = srcUser:GetRunePoint(94050)
  local RuneDamage = 1 + Numxp * 0.1
  local A = (((AtkFinal + Int2 * damChangePer1) * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2)) * RuneDamage
  if bits[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  return A
end

function CommonFun.calcDamage_10201(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local skilllv_1 = srcUser:GetLernedSkillLevel(127)
  local atk_add = 0
  if 10 < skilllv_1 and (skillID == 1410 or skillID == 1446) then
    atk_add = Dex * ((skilllv_1 - 10) * 0.5)
  end
  local NormalAtkAttr = srcUser:GetProperty("NormalAtk")
  local NormalAtk = NormalAtkAttr + 3 * Dex
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk + atk_add) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local targetid = targetUser:GetGuid()
  local distance = srcUser:GetDistance(targetid)
  local skilllv_1 = srcUser:GetLernedSkillLevel(133)
  local DisDam = 1
  if 10 < skilllv_1 and skillID == 1446 then
    DisDam = 1 + distance / 7.5 * (skilllv_1 - 10) * 0.1
    if srcUser:HasBuffID(131080) then
      DisDam = 1 + (skilllv_1 - 10) * 0.1
    end
    DisDam = math.min(DisDam, 2)
  end
  local Injured = 1
  if bits[CommonFun.AttrEffect.NormalSkillDam] == 1 then
    Injured = 1.3
  end
  local Num1 = srcUser:GetRunePoint(103030)
  local RuneDamage = Num1 * 0.01 + 1
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * DisDam * Injured * RuneDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_11201(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local skilllv_1 = srcUser:GetLernedSkillLevel(127)
  local atk_add = 0
  if 10 < skilllv_1 and (skillID == 1360 or skillID == 1397) then
    atk_add = Dex * ((skilllv_1 - 10) * 0.5)
  end
  local NormalAtkAttr = srcUser:GetProperty("NormalAtk")
  local NormalAtk = NormalAtkAttr + 3 * Dex
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk + atk_add) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local targetid = targetUser:GetGuid()
  local distance = srcUser:GetDistance(targetid)
  local skilllv_1 = srcUser:GetLernedSkillLevel(133)
  local DisDam = 1
  if 10 < skilllv_1 and skillID == 1397 then
    DisDam = 1 + distance / 7.5 * (skilllv_1 - 10) * 0.1
    if srcUser:HasBuffID(131080) then
      DisDam = 1 + (skilllv_1 - 10) * 0.1
    end
    DisDam = math.min(DisDam, 2)
  end
  local Injured = 1
  if bits[CommonFun.AttrEffect.NormalSkillDam] == 1 then
    Injured = 1.3
  end
  local Num1 = srcUser:GetRunePoint(103030)
  local RuneDamage = Num1 * 0.01 + 1
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * DisDam * Injured * RuneDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_11202(srcUser, targetUser, params, damageParam, logger)
  local BaseLv = srcUser.BaseLv
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) + BaseAtk) * raceparam * bossparam * bossparam2
  local Refine = srcUser:GetProperty("Refine")
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local zdGem1 = srcUser:GetGemValue(102091)
  local zdGem2 = srcUser:GetGemValue(112091)
  local zdGem3 = srcUser:GetGemValue(102121)
  local zdGem4 = srcUser:GetGemValue(112121)
  local GemDam1 = 1 + zdGem1 / 100000 + zdGem2 / 100000 + zdGem3 / 100000 + zdGem4 / 100000
  local lyGem1 = srcUser:GetGemValue(102092)
  local lyGem2 = srcUser:GetGemValue(112092)
  local GemDam2 = lyGem1 / 100000 + lyGem2 / 100000
  local RangeDam = srcUser:GetProperty("RangeDam")
  local A = (AtkFinal * MDefReduc * (1 - MDamReduc2) + Refine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 * GemDam1 * (1 + RangeDam)
  if A <= 1 then
    return 1
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1387)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1436)
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  if bits[CommonFun.AttrEffect.TriggerTrapMark] == 1 then
    return A * (1 + (skilllv_1 + skilllv_2) * 0.2 + GemDam2)
  end
  return A
end

function CommonFun.calcDamage_11203(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local RuneDamage = 1
  local BaseLvDamage = 0
  if skillID == 1364 or skillID == 1414 then
    local Num1 = srcUser:GetRunePoint(102015)
    local Num2 = srcUser:GetRunePoint(112007)
    RuneDamage = 1 + (Num1 + Num2) * 0.08
    local IBaseLv = srcUser.BaseLv
    if srcUser:HasBuffID(42140) then
      BaseLvDamage = IBaseLv * 15
    end
    if srcUser:HasBuffID(42150) then
      BaseLvDamage = IBaseLv * 15
    end
  end
  local AtkSp = 0
  local GemDam = 1
  if skillID == 1373 or skillID == 1423 then
    local Num3 = srcUser:GetRunePoint(102026)
    local Num4 = srcUser:GetRunePoint(102027)
    local Sp = srcUser:GetProperty("Sp")
    RuneDamage = 1 + Num3 * 0.06
    AtkSp = math.floor(Sp / 10) * Num4
    local skilllv_1 = srcUser:GetLernedSkillLevel(1388)
    local skilllv_2 = srcUser:GetLernedSkillLevel(1437)
    local GemValue1 = srcUser:GetGemValue(102061)
    local GemValue2 = srcUser:GetGemValue(112061)
    GemDam = (1 + GemValue1 / 100000 + GemValue2 / 100000) * (1 + 0.1 * (skilllv_1 + skilllv_2))
  end
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + AtkSp) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage * GemDam + BaseLvDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_11204(srcUser, targetUser, params, damageParam, logger)
  local BaseLv = srcUser.BaseLv
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) + BaseAtk) * raceparam * bossparam * bossparam2
  local Refine = srcUser:GetProperty("Refine")
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = (AtkFinal * MDefReduc * (1 - MDamReduc2) + Refine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2
  if A <= 1 then
    return 1
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1388)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1437)
  A = A * (1 + 0.05 * (skilllv_1 + skilllv_2))
  return A
end

function CommonFun.calcDamage_11501(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local Layer = targetUser:GetBuffLayer(128020)
  local Ratio = 1
  if Layer ~= 0 then
    Ratio = math.pow(1.2, Layer)
  end
  local skilllv_qh1 = srcUser:GetLernedSkillLevel(3421)
  local skilllv_qh2 = srcUser:GetLernedSkillLevel(3521)
  local skill_up = 1 + skilllv_qh1 * 0.05 + skilllv_qh2 * 0.05
  local GemValue1 = srcUser:GetGemValue(102151)
  local GemValue2 = srcUser:GetGemValue(112151)
  local GemDam = 1 + GemValue1 / 100000 + GemValue2 / 100000
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Ratio * skill_up * GemDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_12201(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local Num1 = srcUser:GetBuffLayer(100500)
  Num1 = math.min(Num1, 5)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 6000 and srcUser:HasBuffID(1010030) then
    Num1 = Num1 + 1
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(322)
  local Num2 = Num1 * skilllv_1 * 0.01 + 1
  local Num_xp = srcUser:GetRunePoint(120130)
  local GemValue = srcUser:GetGemValue(122043)
  local GemDam = 1 + GemValue / 100000
  if skillID == 299 then
    local skilllv_tanz = srcUser:GetLernedSkillLevel(321)
    if skilllv_tanz <= 5 then
      damChangePer = 0.5 + 0.5 * skilllv_tanz
    elseif 5 < skilllv_tanz then
      damChangePer = (skilllv_tanz - 5) * 0.2 + 3
    end
  end
  if skillID == 6000 then
    local skilllv_tanz1 = srcUser:GetLernedSkillLevel(321)
    local skilllv_sanmo = srcUser:GetLernedSkillLevel(6000)
    if skilllv_tanz1 <= 5 then
      damChangePer = (0.5 + 0.5 * skilllv_tanz1) * (1 + skilllv_sanmo * 0.4)
    elseif 5 < skilllv_tanz1 then
      damChangePer = ((skilllv_tanz1 - 5) * 0.2 + 3) * (1 + skilllv_sanmo * 0.4)
    end
  end
  local sanmo = 1
  if srcUser:HasBuffID(1010020) then
    local xishu = srcUser:GetBuffLayer(1010020)
    local skill_sanmo = srcUser:GetLernedSkillLevel(6001)
    sanmo = 1 + xishu * skill_sanmo * 0.01
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Num1 * Num2 * (1 + Num_xp * 0.1) * GemDam * sanmo
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_12202(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local Sp = srcUser:GetProperty("Sp")
  local MaxSp = srcUser:GetProperty("MaxSp")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local DamSpike = srcUser:GetProperty("DamSpike")
  local DamReduc = targetUser:GetProperty("DamReduc")
  local PvP_DamReduc = targetUser:GetProperty("DamReduc")
  local mapid, maptype = srcUser:GetMapInfo()
  if (maptype == 2 or maptype == 4) and targetUser:GetNpcID() == 0 then
    PvP_DamReduc = PvP_DamReduc < -1 and -1 or 1 < PvP_DamReduc and 1 or PvP_DamReduc
    PvP_DamReduc = math.floor(PvP_DamReduc * 1000) / 1000
    PvP_DamReduc = 0.4 * (1 - math.sin(PvP_DamReduc * 3.14 / 2))
  else
    PvP_DamReduc = 0
  end
  DamReduc = DamReduc + PvP_DamReduc
  ReduceLv = CommonFun.calcSpikeLv(srcUser, targetUser)
  local SkillDamReduc = CommonFun.calcSkillDamReduc(srcUser, targetUser)
  local DamReduc2 = 1 - (1 + 0.009 * ReduceLv + DamSpike - DamReduc) * SkillDamReduc
  local skilllv = srcUser:GetLernedSkillLevel(306)
  if 5 < skilllv then
    DamReduc2 = 1 - (1 + 0.009 * ReduceLv + DamSpike - math.max(DamReduc - 0.06 * (skilllv - 5), 0))
  end
  if 0.9 <= DamReduc2 then
    DamReduc2 = 0.9
  end
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local Num1 = srcUser:GetRunePoint(120100)
  local RuneDamage = Num1 * 0.6
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42220) then
    BaseLvDamage = IBaseLv * 40
  end
  local a = 0
  local b = 0
  local c = 0
  local d = 0
  local Equip1 = srcUser:GetEquipedID(7)
  local Equip3 = srcUser:GetEquipedID(5)
  local Equip4 = srcUser:GetEquipedID(6)
  if Equip1 == 62508 or Equip1 == 162508 then
    a = 5
  end
  if Equip1 == 62540 or Equip1 == 162540 then
    a = 5
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRing.id == 42089 or equipRing.id == 142089 then
    b = 2
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id == 42089 or equipRingSD.id == 142089 then
    b = 2 * equipRingSD.quench_per / 100
  end
  if Equip3 == 44003 or Equip3 == 144003 then
    c = 1.5
  end
  if Equip4 == 44003 or Equip4 == 144003 then
    d = 1.5
  end
  local equipRing5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRing5.id == 44047 or equipRing5.id == 144047 then
    c = 2
  end
  local equipRingSD5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRingSD5.id == 44047 or equipRingSD5.id == 144047 then
    c = 2 * equipRingSD5.quench_per / 100
  end
  local equipRing6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRing6.id == 44047 or equipRing6.id == 144047 then
    d = 2
  end
  local equipRingSD6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRingSD6.id == 44047 or equipRingSD6.id == 144047 then
    d = 2 * equipRingSD6.quench_per / 100
  end
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local BaseAtk1 = Str * 4 + math.floor(Str * Str / 100) * 2 + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk1) * raceparam * bossparam * bossparam2
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local GemDam = 1
  if Sp < MaxSp * 0.3 then
    GemValue = srcUser:GetGemValue(122131)
    GemDam = 1 + GemValue / 100000
  end
  local potian = 1
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 3303 or skillID == 819 then
    local skilllv_potian = srcUser:GetLernedSkillLevel(3303)
    local skilllv_fuw = srcUser:GetLernedSkillLevel(819)
    local skilllv_lz = srcUser:GetLernedSkillLevel(3329)
    local Num_lz = srcUser:GetBuffLayer(100500)
    local lz = 1
    if 1 <= skilllv_lz then
      lz = 1 + Num_lz * skilllv_lz * 0.002
    end
    damChangePer = 4 * skilllv
    damChangePer1 = 5 * skilllv
    potian = (math.max(skilllv_potian, skilllv_fuw) * 0.05 + 0.5) * lz
  end
  local A = (((AtkFinal * (1 - DamReduc2) + Refine) * (damChangePer + Sp / 100 + RuneDamage + a + b + c + d) + 2500 + 500 * damChangePer1) * (1 + DamIncrease - ShortRangeDamReduc2) * (1 - RefineDamReduc) * GemDam + BaseLvDamage) * potian
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_12203(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local Sp = srcUser:GetProperty("Sp")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefFinal = (Def2 - Vit2) * (1 + DefPer2) + Vit2 * (1 + VitPer2)
  if 800 <= DefFinal then
    DefFinal = 800
  end
  local Num_xp = srcUser:GetRunePoint(120220)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local GemValue = srcUser:GetGemValue(122102)
  local GemDam = 1 + GemValue / 100000
  local A = (AtkFinal * (1 - DamReduc2) + Refine) * (2 + 1.5 * damChangePer + DefFinal / 120) * (1 + DamIncrease - ShortRangeDamReduc2) * (1 - RefineDamReduc) * (1 + Num_xp * 0.1) * GemDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_12204(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42210) then
    BaseLvDamage = IBaseLv * 20
  end
  if srcUser:HasBuffID(42220) then
    BaseLvDamage = IBaseLv * 20
  end
  local Num1 = srcUser:GetRunePoint(120110)
  local RuneDamage = 1 + Num1 * 0.1
  local GemValue = srcUser:GetGemValue(122082)
  local GemDam = 1 + GemValue / 100000
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local taka = 1
  if srcUser:HasBuffID(42720) then
    taka = taka + 0.1 + RefineLv * 0.02
  end
  if srcUser:HasBuffID(47990) then
    taka = taka + RefineLv * 0.02
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage * GemDam * taka + BaseLvDamage
  if A <= 1 then
    return 1
  end
  if srcUser:HasBuffID(24890) then
    return A * 1.15
  elseif srcUser:HasBuffID(24910) then
    return A * 1.1
  end
  return A
end

function CommonFun.calcDamage_12205(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Vit = srcUser:GetProperty("Vit")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(120230)
  local RuneDamage = 1 + Num1 * 0.05
  local VitDamage = Vit / 150
  if VitDamage <= 0 then
    VitDamage = 0
  end
  local Fifth = 1
  if srcUser:HasBuffID(90004584) then
    Fifth = Fifth + 0.15
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + VitDamage) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage * Fifth
  if A <= 1 then
    return 1
  end
  if srcUser:HasBuffID(24910) then
    return A * 1.1
  end
  return A
end

function CommonFun.calcDamage_12206(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(120150)
  local RuneDamage = Num1 * 0.05 + 1
  local Fifth = 1
  if srcUser:HasBuffID(90004584) then
    Fifth = Fifth + 0.15
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage * Fifth
  if A <= 1 then
    return 1
  end
  if srcUser:HasBuffID(24910) then
    return A * 1.15
  end
  return A
end

function CommonFun.calcDamage_12207(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(120260)
  local RuneDamage = Num1 * 0.05 + 1
  local Num2 = 1
  if srcUser:HasBuffID(90001513) then
    Num2 = 1.3
  end
  local Fifth = 1
  if srcUser:HasBuffID(90004584) then
    Fifth = Fifth + 0.15
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage * Num2 * Fifth
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_12208(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(120240)
  local RuneDamage = Num1 * 0.05 + 1
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_12401(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1201 and (srcUser:HasBuffID(117010) or srcUser:HasBuffID(117011) and srcUser:HasBuffID(90004374)) then
    A = A * 1.5
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_12402(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local shanguang = 1
  if srcUser:HasBuffID(90001953) then
    shanguang = 1.05
  end
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  local miquan = 0
  if srcUser:HasBuffID(90001953) then
    if RefineLv7 < 10 then
      miquan = RefineLv7 * 0.1
    elseif 10 <= RefineLv7 and RefineLv7 < 15 then
      miquan = RefineLv7 * 0.1 + 0.4
    elseif 15 <= RefineLv7 then
      miquan = RefineLv7 * 0.1 + 0.4 + 0.8
    end
  end
  local Num = srcUser:GetRunePoint(124020)
  local RuneDamage = 1 + Num * 0.1
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + miquan) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * shanguang * RuneDamage
  if A <= 1 then
    return 1
  end
  if srcUser:HasBuffID(117020) or srcUser:HasBuffID(117022) and srcUser:HasBuffID(90004374) then
    A = A * 2
  end
  return A
end

function CommonFun.calcDamage_12403(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local Numxp = srcUser:GetRunePoint(124030)
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp = srcUser:GetProperty("Hp")
  local HpPerRatio = 1 + (1 - Hp / MaxHp) * (1 + 0.3 * Numxp)
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local jianding = 0
  if srcUser:HasBuffID(90000939) then
    jianding = 0.5
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRing.id == 42089 or equipRing.id == 142089 then
    jianding = 0.5 + equipRing.refinelv * 0.2
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id == 42089 or equipRingSD.id == 142089 then
    jianding = (0.5 + equipRingSD.refinelv * 0.2) * equipRingSD.quench_per / 100
  end
  local Ring7 = srcUser:GetEquipedID(7)
  if Ring7 == 62515 or Ring7 == 162515 then
    jianding = jianding + 1
  end
  if Ring7 == 62541 or Ring7 == 162541 then
    jianding = jianding + 1
  end
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  local bawang = 1
  if (Ring7 == 62515 or Ring7 == 162515) and 0 < RefineLv7 then
    bawang = (RefineLv7 - 0) * 0.01 + 1
  end
  if (Ring7 == 62541 or Ring7 == 162541) and 0 < RefineLv7 then
    bawang = (RefineLv7 - 0) * 0.01 + 1
  end
  if (Ring7 == 62541 or Ring7 == 162541 or Ring7 == 62515 or Ring7 == 162515) and (srcUser:HasBuffID(90000939) or srcUser:HasBuffID(42450) or srcUser:HasBuffLayer(42450, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(90001943) or srcUser:HasBuffID(42970) or srcUser:HasBuffLayer(42970, EBUFFERLAYER_SHADOW)) then
    bawang = bawang + 0.05
  end
  local dabawang = 0
  if Ring7 == 62515 or Ring7 == 162515 then
    if 5 <= RefineLv7 and RefineLv7 < 10 then
      dabawang = 0.05
    elseif 10 <= RefineLv7 and RefineLv7 < 15 then
      dabawang = 0.1
    elseif 15 <= RefineLv7 then
      dabawang = 0.2
    end
  end
  if Ring7 == 62541 or Ring7 == 162541 then
    if 5 <= RefineLv7 and RefineLv7 < 10 then
      dabawang = 0.05
    elseif 10 <= RefineLv7 and RefineLv7 < 15 then
      dabawang = 0.1
    elseif 15 <= RefineLv7 then
      dabawang = 0.2
    end
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  if (Ring1 == 44003 or Ring1 == 144003) and 10 <= RefineLv1 and RefineLv1 < 15 and srcUser:HasBuffID(90001943) and 4 <= order1 then
    a = 0.05
  elseif (Ring1 == 44003 or Ring1 == 144003) and 15 <= RefineLv1 and srcUser:HasBuffID(90001943) and 4 <= order1 then
    a = 0.15
  end
  if (Ring2 == 44003 or Ring2 == 144003) and 10 <= RefineLv2 and RefineLv2 < 15 and srcUser:HasBuffID(90001943) and 4 <= order2 then
    b = 0.05
  elseif (Ring2 == 44003 or Ring2 == 144003) and 15 <= RefineLv2 and srcUser:HasBuffID(90001943) and 4 <= order2 then
    b = 0.15
  end
  local equipRing5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRing5.id == 44047 or equipRing5.id == 144047 then
    if equipRing5.refinelv >= 10 and equipRing5.refinelv < 15 then
      a = 0.05
    elseif equipRing5.refinelv >= 15 then
      a = 0.15
    end
  end
  local equipRingSD5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRingSD5.id == 44047 or equipRingSD5.id == 144047 then
    if equipRingSD5.refinelv >= 10 and equipRingSD5.refinelv < 15 then
      a = 0.05 * equipRingSD5.quench_per / 100
    elseif equipRingSD5.refinelv >= 15 then
      a = 0.15 * equipRingSD5.quench_per / 100
    end
  end
  local equipRing6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRing6.id == 44047 or equipRing6.id == 144047 then
    if equipRing6.refinelv >= 10 and equipRing6.refinelv < 15 then
      b = 0.05
    elseif equipRing6.refinelv >= 15 then
      b = 0.15
    end
  end
  local equipRingSD6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRingSD6.id == 44047 or equipRingSD6.id == 144047 then
    if equipRingSD6.refinelv >= 10 and equipRingSD6.refinelv < 15 then
      b = 0.05 * equipRingSD6.quench_per / 100
    elseif equipRingSD6.refinelv >= 15 then
      b = 0.15 * equipRingSD6.quench_per / 100
    end
  end
  local sizeCorrection = 1
  if nil ~= CommonFun.Shape then
    if CommonFun.Shape.S == targetUser.shape then
      sizeCorrection = 1 + a + b
    elseif CommonFun.Shape.M == targetUser.shape then
      sizeCorrection = 1
    elseif CommonFun.Shape.L == targetUser.shape then
      sizeCorrection = 1 + a + b
    end
  end
  local Num = srcUser:GetRunePoint(124040)
  local RuneDamage = 1 + Num * 0.06
  local GemValue = srcUser:GetGemValue(122051)
  local GemDam = 1 + GemValue / 100000
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + jianding) * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * HpPerRatio * sizeCorrection * bawang * RuneDamage * GemDam
  if A <= 1 then
    return 1
  end
  if srcUser:HasBuffID(117020) or srcUser:HasBuffID(117023) and srcUser:HasBuffID(90004374) then
    A = A * (2 + dabawang)
  end
  return A
end

function CommonFun.calcDamage_12404(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * (1 + Dex / 100)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_12405(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Num1 = srcUser:GetBuffLayer(100500)
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  local bawang2 = 1
  if srcUser:HasBuffID(90002061) then
    bawang2 = (RefineLv7 - 0) * 0.02 + 1
  end
  if srcUser:HasBuffID(41910) then
    bawang2 = (RefineLv7 - 0) * 0.02 + 1
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + damChangePer1 * Num1) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * bawang2
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_12501(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser, params)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 3311 then
    local skilllv_dx = srcUser:GetLernedSkillLevel(3328)
    local Fifth = 1
    if srcUser:HasBuffID(90004584) then
      Fifth = Fifth + 0.15
    end
    A = A * (1 + skilllv_dx * 0.06) * Fifth
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_13201(srcUser, targetUser, params, damageParam, logger)
  local Str1 = srcUser:GetProperty("Str")
  local Num1 = srcUser:GetRunePoint(130110)
  local RuneDamage = Num1 * 0.03 + 1
  local Str = Str1 * RuneDamage
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 5 * Str
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str1 * 2 + math.floor(Str1 * Str1 / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local BaseAtk1 = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk1) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local WeaponType = srcUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(179)
  if WeaponType == 250 and CommonFun.IsInRate(skilllv_1 * 5, srcUser:GetRandom()) then
    return A * 2, CommonFun.DamageType.ErLianJi
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_13202(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local B = 0
  local skilllv_1 = srcUser:GetLernedSkillLevel(425)
  if 1 <= skilllv_1 then
    local srcAtkElement = 4
    local targetDefElement = targetUser:GetProperty("DefAttr")
    local Int = srcUser:GetProperty("Int")
    local MAtk = srcUser:GetProperty("MAtk")
    local MAtkPer = srcUser:GetProperty("MAtkPer")
    local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
    local BaseMAtk = Int + math.floor(Int * Int / 100)
    local MDef2 = targetUser:GetProperty("MDef")
    local MDefPer2 = targetUser:GetProperty("MDefPer")
    local Vit2 = targetUser:GetProperty("Vit")
    local VitPer2 = targetUser:GetProperty("VitPer")
    local Int2 = targetUser:GetProperty("Int")
    local IntPer2 = targetUser:GetProperty("IntPer")
    local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
    local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
    local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
    local MRefine = srcUser:GetProperty("MRefine")
    local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam
    local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
    B = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (skilllv_1 * 0.3 + 0.5) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  end
  if B <= 1 then
    B = 0
  end
  local Num1 = srcUser:GetRunePoint(130260)
  local RuneDamage1 = Num1 * 0.1
  local Num2 = srcUser:GetRunePoint(130170)
  local RuneDamage2 = 0
  if srcUser:IsBeingPresent(600010) == true then
    RuneDamage2 = Num2 * 0.03
  end
  local aerde = 1
  local weaponRefineLv = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(40610) or srcUser:HasBuffID(42000) then
    aerde = weaponRefineLv * 0.05 + 1
  end
  local Int8 = srcUser:GetProperty("Int")
  local Str8 = srcUser:GetProperty("Str")
  local Vit8 = srcUser:GetProperty("Vit")
  if srcUser:HasBuffID(90001883) and 119 <= Int8 and 119 <= Str8 then
    aerde = aerde + 0.1
  end
  if srcUser:HasBuffID(42000) and 119 <= Int8 and 119 <= Str8 then
    aerde = aerde + 0.1
  end
  if A + B <= 1 then
    return 1
  end
  return (A + B) * (1 + RuneDamage1 + RuneDamage2) * aerde
end

function CommonFun.calcDamage_13203(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) * elementparam * elementparam2 + BaseMAtk) * raceparam
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(130160)
  local RuneDamage1 = Num1 * 0.05
  local Num2 = srcUser:GetRunePoint(130170)
  local RuneDamage2 = 0
  if srcUser:IsBeingPresent(600010) == true then
    RuneDamage2 = Num2 * 0.03
  end
  local aerde1 = 1
  local weaponRefineLv = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(40610) or srcUser:HasBuffID(42000) then
    aerde1 = weaponRefineLv * 0.02 + 1
  end
  local Int8 = srcUser:GetProperty("Int")
  local Str8 = srcUser:GetProperty("Str")
  local Vit8 = srcUser:GetProperty("Vit")
  if srcUser:HasBuffID(90001883) and 119 <= Int8 and 119 <= Str8 then
    aerde1 = aerde1 + 0.05
  end
  if srcUser:HasBuffID(42000) and 119 <= Int8 and 119 <= Str8 then
    aerde1 = aerde1 + 0.05
  end
  local A = (((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer + (MAtkFinal * DefReduc * (1 - DamReduc2) + MRefine) * damChangePer1) * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * (1 + RuneDamage1 + RuneDamage2) * aerde1
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_13204(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) * elementparam * elementparam2 + BaseMAtk) * raceparam
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local Num1 = srcUser:GetRunePoint(130210)
  local RuneDamage1 = Num1 * 0.08 + 1
  local aerde2 = 0
  local weaponRefineLv = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(40610) or srcUser:HasBuffID(42000) then
    aerde2 = weaponRefineLv * 0.3
  end
  local Int8 = srcUser:GetProperty("Int")
  local Str8 = srcUser:GetProperty("Str")
  local Vit8 = srcUser:GetProperty("Vit")
  if srcUser:HasBuffID(90001883) and 119 <= Int8 and 119 <= Str8 then
    aerde2 = aerde2 + 0.75
  end
  if srcUser:HasBuffID(42000) and 119 <= Int8 and 119 <= Str8 then
    aerde2 = aerde2 + 0.75
  end
  local aerde3 = 1
  if srcUser:HasBuffID(91000300) then
    aerde3 = 0.15 + aerde3
  end
  if srcUser:HasBuffID(91000710) then
    aerde3 = 0.15 + aerde3
  end
  if srcUser:HasBuffID(91001520) or srcUser:HasBuffID(91001521) then
    aerde3 = 0.15 + aerde3
  end
  if srcUser:HasBuffID(90002203) then
    aerde3 = 0.05 + aerde3
  end
  if srcUser:HasBuffID(43390) then
    aerde3 = 0.05 + aerde3
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRingSD.id ~= 0 and srcUser:HasBuffLayer(43390, EBUFFERLAYER_SHADOW) then
    aerde3 = aerde3 + 0.05 * equipRingSD.quench_per / 100
  end
  local Num2 = srcUser:GetRunePoint(130170)
  local RuneDamage2 = 1
  if srcUser:IsBeingPresent(600010) == true then
    RuneDamage2 = Num2 * 0.02 + 1
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(411)
  local VitRatio = 0
  local Num3 = srcUser:GetRunePoint(133010)
  local GemValue = srcUser:GetGemValue(132012)
  if targetUser:GetNpcID() ~= 0 then
    local MaxHp2 = targetUser:GetProperty("MaxHp")
    Vit2 = math.min(math.floor(math.sqrt(MaxHp2 / 10000)) + 30, 350)
  end
  local jinyintizhi = 0
  local skilllv_jiyin = srcUser:GetLernedSkillLevel(431)
  if 0 <= skilllv_jiyin then
    jinyintizhi = skilllv_jiyin * 10
  end
  Vit2 = Vit2 + Num3 * 10 + GemValue / 1000 + jinyintizhi
  if 0 < Vit2 and Vit2 <= 180 then
    VitRatio = Vit2 / 45 * (1 + skilllv_1 / 40)
  elseif 180 < Vit2 and Vit2 <= 280 then
    VitRatio = Vit2 / 40 * (1 + skilllv_1 / 35)
  elseif 280 < Vit2 then
    VitRatio = Vit2 / 35 * (1 + skilllv_1 / 35)
  end
  local Fire = 1
  local skilllv_2 = srcUser:GetLernedSkillLevel(1121)
  local Numxp = srcUser:GetRunePoint(134010)
  local RuneFire = Numxp * 0.04
  if targetUser:HasBuffID(116204) then
    Fire = skilllv_2 * 0.04 + 1 + RuneFire
  end
  local A = (((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine + MRefine) * (damChangePer + VitRatio + aerde2) * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage1 * aerde3 * RuneDamage2 * Fire
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local skilllv_3 = srcUser:GetLernedSkillLevel(422)
  if skillID == 1122 then
    local damChangePer = 2.8
    if skilllv_3 <= 10 then
      damChangePer = 2.8 + 0.8 * skilllv_3
    elseif 10 < skilllv_3 then
      damChangePer = 10.8 + 0.3 * (skilllv_3 - 10)
    end
    local Numxp = srcUser:GetRunePoint(134090)
    local RuneDamageFire = 1 + Numxp * 0.06
    A = (((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine + MRefine) * (damChangePer + VitRatio + aerde2) * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage1 * aerde3 * RuneDamage2 * Fire * RuneDamageFire
  end
  if skillID == 3706 then
    local damChangePer = 2.8
    if skilllv_3 <= 10 then
      damChangePer = 2.8 + 0.8 * skilllv_3
    elseif 10 < skilllv_3 then
      damChangePer = 10.8 + 0.3 * (skilllv_3 - 10)
    end
    local skilllv_4 = srcUser:GetLernedSkillLevel(3706)
    local LeadRatio = skilllv_4 * 0.05 + 0.3
    local skilllv_chj = srcUser:GetLernedSkillLevel(3724)
    local layer = srcUser:GetBuffLayer(129600)
    local chj = 1 + layer * skilllv_chj * 0.01
    A = (((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine + MRefine) * (damChangePer + VitRatio + aerde2) * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage1 * aerde3 * RuneDamage2 * Fire * LeadRatio * chj
  end
  local skilllv_yj = srcUser:GetLernedSkillLevel(1135)
  local GemValue = srcUser:GetGemValue(132132)
  local random_yj = srcUser:GetRandom()
  local Final_ran = (90 + random_yj * (skilllv_yj * 0.15 + 0.35 + GemValue / 100000)) / 100
  if Final_ran <= 1 and srcUser:HasBuffID(21320100) then
    Final_ran = 1
  end
  if 0 < skilllv_yj then
    A = A * Final_ran
    if 1 < Final_ran then
      return A, CommonFun.DamageType.Crit
    end
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_13205(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local damChangePer2 = damageParam.damChangePer2
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42180) then
    BaseLvDamage = IBaseLv * 20
  end
  if srcUser:HasBuffID(42210) then
    BaseLvDamage = IBaseLv * 20
  end
  local Num1 = srcUser:GetRunePoint(130020)
  local RuneDamage1 = Num1 * 0.3
  local Redhandbag = 1
  local Ring1 = srcUser:GetEquipedID(1)
  if Ring1 == 42551 or Ring1 == 142551 then
    Redhandbag = 1.15
  end
  local RefineLv1 = srcUser:GetEquipedRefineLv(1)
  if 5 <= RefineLv1 and srcUser:HasBuffID(90002213) then
    Redhandbag = Redhandbag + 0.1
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if (equipRing.id == 42592 or equipRing.id == 142592) and 5 <= equipRing.refinelv then
    Redhandbag = Redhandbag + 0.15 + 0.15
  elseif equipRing.id == 42592 or equipRing.id == 142592 then
    Redhandbag = Redhandbag + 0.15
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if (equipRingSD.id == 42592 or equipRingSD.id == 142592) and 5 <= equipRingSD.refinelv then
    Redhandbag = Redhandbag + 0.3 * equipRingSD.quench_per / 100
  elseif equipRingSD.id == 42592 or equipRingSD.id == 142592 then
    Redhandbag = Redhandbag + 0.15 * equipRingSD.quench_per / 100
  end
  local GemValue = srcUser:GetGemValue(132101)
  local GemDam = 1 + GemValue / 100000
  local A = (((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + RuneDamage1) + damChangePer1 * DefReduc * (1 - DamReduc2)) * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * damChangePer2 * Redhandbag * GemDam + BaseLvDamage
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local Redhandbag1 = 1
  local Ring1 = srcUser:GetEquipedID(1)
  if Ring1 == 42551 or Ring1 == 142551 then
    Redhandbag1 = 1.15
  end
  local RefineLv1 = srcUser:GetEquipedRefineLv(1)
  if 5 <= RefineLv1 and srcUser:HasBuffID(90002213) then
    Redhandbag1 = Redhandbag1 + 0.1
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if (equipRing.id == 42592 or equipRing.id == 142592) and 5 <= equipRing.refinelv then
    Redhandbag1 = Redhandbag1 + 0.15 + 0.15
  elseif equipRing.id == 42592 or equipRing.id == 142592 then
    Redhandbag1 = Redhandbag1 + 0.15
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if (equipRingSD.id == 42592 or equipRingSD.id == 142592) and 5 <= equipRingSD.refinelv then
    Redhandbag1 = Redhandbag1 + 0.3 * equipRingSD.quench_per / 100
  elseif equipRingSD.id == 42592 or equipRingSD.id == 142592 then
    Redhandbag1 = Redhandbag1 + 0.15 * equipRingSD.quench_per / 100
  end
  if skillID == 415 then
    local Num2 = srcUser:GetRunePoint(130080)
    local RuneDamage2 = Num2 * 0.1 + 1
    A = A * RuneDamage2 * Redhandbag1
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_13206(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local kuangbao = 0
  if srcUser:HasBuffID(1003031) then
    local skilllv_diyu = srcUser:GetLernedSkillLevel(5303)
    kuangbao = 0.05 * skilllv_diyu
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local skilllv_1 = srcUser:GetLernedSkillLevel(428)
  local Num1 = srcUser:GetRunePoint(130140)
  local RuneDamage1 = Num1 * 0.05 + 1
  local skilllv_2 = srcUser:GetLernedSkillLevel(417)
  local life = 1
  if srcUser:HasBuffID(104050) then
    life = 1 + 0.02 * skilllv_2
  end
  local skilllv_3 = srcUser:GetLernedSkillLevel(1126)
  if srcUser:HasBuffID(116221) then
    life = life + 0.03 * skilllv_3
  end
  local pomieNum1 = 1
  if srcUser:HasBuffID(42010) then
    pomieNum1 = 1.15
  end
  local GemValue = srcUser:GetGemValue(132041)
  local GemValue2 = srcUser:GetGemValue(132121)
  local GemDam = 1 + GemValue / 100000 + GemValue2 / 100000
  local skilllv_zw = srcUser:GetLernedSkillLevel(3704)
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + skilllv_1 * 0.1) * (1 - RefineDamReduc) * (1 + DamIncrease + kuangbao - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage1 * life * pomieNum1 * GemDam * (1 + skilllv_zw * 0.02)
  if targetUser:HasBuffID(20610050) and targetUser:HasBuffID(117860) or targetUser:HasBuffID(20610050) and targetUser:HasBuffID(184020) then
    return 0, CommonFun.DamageType.Miss
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_13401(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local GemValue = srcUser:GetGemValue(132081)
  local GemDam = 1 + GemValue / 100000
  local A = ((AtkFinal * MDefReduc * (1 - MDamReduc2) + Refine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) - Vit2 * (1 + VitPer2)) * GemDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_13402(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local skilllv_1 = srcUser:GetLernedSkillLevel(266)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + skilllv_1 * 15) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local Numxp = srcUser:GetRunePoint(134040)
  local RuneDamage = 1 + Numxp * 0.1
  local Redhandbag = 1
  local RefineLv1 = srcUser:GetEquipedRefineLv(1)
  if 10 <= RefineLv1 and srcUser:HasBuffID(90002213) then
    Redhandbag = Redhandbag + 0.15
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if (equipRing.id == 42592 or equipRing.id == 142592) and 10 <= equipRing.refinelv then
    Redhandbag = Redhandbag + 0.15
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if (equipRingSD.id == 42592 or equipRingSD.id == 142592) and 10 <= equipRingSD.refinelv then
    Redhandbag = Redhandbag + 0.15 * equipRingSD.quench_per / 100
  end
  local GemValue = srcUser:GetGemValue(132091)
  local GemDam = 1 + GemValue / 100000
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + Int / 20) * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage * Redhandbag * GemDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_13403(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1133 then
    AtkPer = 0
  end
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local GemValue = srcUser:GetGemValue(132032)
  local GemDam = 1 + GemValue / 100000
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) * GemDam - Vit2 * (1 + VitPer2)
  local Redhandbag3 = 1
  local Ring1 = srcUser:GetEquipedID(1)
  if Ring1 == 42551 or Ring1 == 142551 then
    Redhandbag3 = 1.15
  end
  local RefineLv1 = srcUser:GetEquipedRefineLv(1)
  if 10 <= RefineLv1 and srcUser:HasBuffID(90002213) then
    Redhandbag3 = Redhandbag3 + 0.15
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if (equipRing.id == 42592 or equipRing.id == 142592) and 10 <= equipRing.refinelv then
    Redhandbag3 = Redhandbag3 + 0.15 + 0.15
  elseif equipRing.id == 42592 or equipRing.id == 142592 then
    Redhandbag3 = Redhandbag3 + 0.15
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if (equipRingSD.id == 42592 or equipRingSD.id == 142592) and 10 <= equipRingSD.refinelv then
    Redhandbag3 = Redhandbag3 + 0.3 * equipRingSD.quench_per / 100
  elseif equipRingSD.id == 42592 or equipRingSD.id == 142592 then
    Redhandbag3 = Redhandbag3 + 0.15 * equipRingSD.quench_per / 100
  end
  if skillID == 1124 then
    local Numxp = srcUser:GetRunePoint(134060)
    local RuneDamage = 1 + Numxp * 0.08
    local skilllv_zw = srcUser:GetLernedSkillLevel(3704)
    A = A * Redhandbag3 * RuneDamage * (1 + skilllv_zw * 0.02)
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_14301(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 5 * Str
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_14302(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 3 * Int
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local Num1 = srcUser:GetBuffLayer(90000952)
  local Num2 = srcUser:GetBuffLayer(90000953)
  local Num3 = srcUser:GetBuffLayer(90000954)
  local Num24 = 0
  local RefineLv2 = srcUser:GetEquipedRefineLv(2)
  if srcUser:HasBuffID(90000959) then
    Num24 = Num24 + RefineLv2 * 0.01
  end
  local Num26 = 0
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRing.id == 42126 or equipRing.id == 142126 then
    Num26 = Num26 + equipRing.refinelv * 0.01 + 0.1
  end
  if (equipRing.id == 42126 or equipRing.id == 142126) and equipRing.refinelv >= 15 then
    Num26 = Num26 + 0.05
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id == 42126 or equipRingSD.id == 142126 then
    Num26 = Num26 + (equipRingSD.refinelv * 0.01 + 0.1) * equipRingSD.quench_per / 100
  end
  if (equipRingSD.id == 42126 or equipRingSD.id == 142126) and equipRingSD.refinelv >= 15 then
    Num26 = Num26 + 0.05 * equipRingSD.quench_per / 100
  end
  local Num4 = srcUser:GetBuffLayer(90000942)
  local Num5 = srcUser:GetBuffLayer(90000944)
  local Num25 = 0
  local RefineLv4 = srcUser:GetEquipedRefineLv(4)
  if srcUser:HasBuffID(90000949) and 10 <= RefineLv4 then
    Num25 = 1
  end
  local Num27 = 0
  local equipRingshoes = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  if equipRingshoes.id == 43587 or equipRingshoes.id == 143587 then
    if equipRingshoes.refinelv < 5 then
      Num27 = Num27 + 10
    elseif equipRingshoes.refinelv >= 5 and equipRingshoes.refinelv < 10 then
      Num27 = Num27 + 10 + 5
    elseif equipRingshoes.refinelv >= 10 and equipRingshoes.refinelv < 15 then
      Num27 = Num27 + 10 + 5 + 5
    elseif equipRingshoes.refinelv >= 15 then
      Num27 = Num27 + 10 + 5 + 5 + 5
    end
  end
  local equipRingSDshoes = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  if equipRingSDshoes.id == 43587 or equipRingSDshoes.id == 143587 then
    if equipRingSDshoes.refinelv < 5 then
      Num27 = Num27 + 10 * equipRingSDshoes.quench_per / 100
    elseif equipRingSDshoes.refinelv >= 5 and equipRingSDshoes.refinelv < 10 then
      Num27 = Num27 + 15 * equipRingSDshoes.quench_per / 100
    elseif equipRingSDshoes.refinelv >= 10 and equipRingSDshoes.refinelv < 15 then
      Num27 = Num27 + 20 * equipRingSDshoes.quench_per / 100
    elseif equipRingSDshoes.refinelv >= 15 then
      Num27 = Num27 + 25 * equipRingSDshoes.quench_per / 100
    end
  end
  local RuneDamage = 1 + 0.03 * Num1 + 0.03 * Num2 + 0.04 * Num3 + Num24 + Num26
  local RuneDamage1 = 0
  if 0 < Num4 + Num5 + Num25 + Num27 then
    RuneDamage1 = Luk / 3 + Num4 * 5 + Num5 * 5 + Num25 * 5 + Num27
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk + NormalAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  if A <= 1 then
    return 1
  end
  if CommonFun.IsInRate(RuneDamage1, srcUser:GetRandom()) then
    return A * RuneDamage, CommonFun.DamageType.Crit
  end
  return A
end

function CommonFun.calcDamage_14303(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local CardNum = srcUser:GetEquipCardNum(7, 23048)
  local CardNum2 = srcUser:GetEquipCardNum(7, 24664)
  CardNum = CardNum + CardNum2
  local CardXR = CardNum * 0.25 + 1
  local Num1 = srcUser:GetRunePoint(143018)
  local RuneDamage = 1 + Num1 * 0.06
  local GemValue1 = srcUser:GetGemValue(143041)
  local GemValue2 = srcUser:GetGemValue(143042)
  local GemValue3 = srcUser:GetGemValue(143043)
  local GemDam = 1 + GemValue3 / 100000
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 4402 then
    local skilllv_lb = srcUser:GetLernedSkillLevel(1499)
    local skilllv_sd = srcUser:GetLernedSkillLevel(4402)
    damChangePer = (skilllv_lb * 1.8 + 4.2) * (1 + skilllv_sd * 0.05)
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam) * RuneDamage * GemDam * CardXR
  local Num2 = srcUser:GetRunePoint(143017)
  local RuneRate = 0
  if 0 < Num2 then
    RuneRate = 40
  end
  if CommonFun.IsInRate(RuneRate + GemValue1 / 1000, srcUser:GetRandom()) then
    return A * (1 + 0.18 * Num2 + GemValue2 / 100000), CommonFun.DamageType.Crit
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_14304(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local RangeDam = srcUser:GetProperty("RangeDam")
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local count = params.hitedCount
  local Num1 = srcUser:GetRunePoint(143020)
  local RuneDamage = 1 + Num1 * 0.06
  local GemValue = srcUser:GetGemValue(143092)
  local GemDam = 1 + GemValue / 100000
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) / count * RuneDamage * GemDam * (1 + RangeDam)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_15101(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) + damChangePer1 - Vit2 * (1 + VitPer2)
  local Agi = srcUser:GetProperty("Agi")
  local CriRate = math.min(Agi / 3 + 5, 100)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 4107 then
    CriRate = 0
  end
  local shadow = 1
  if srcUser:GetTempSkillSlaveID() == 806612 then
    local GemNew = srcUser:GetGemValue(153142)
    shadow = 1 + GemNew / 100000
  end
  if A <= 1 then
    return 1
  end
  if CommonFun.IsInRate(CriRate, srcUser:GetRandom()) then
    return A * 1.5 * shadow, CommonFun.DamageType.Crit
  end
  return A * shadow
end

function CommonFun.calcDamage_15102(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local Hp = srcUser:GetProperty("Hp")
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Num_sm = srcUser:GetRunePoint(153037)
  local skilllv_1 = srcUser:GetLernedSkillLevel(1638)
  local HpDamage = 0
  local mapid, maptype = srcUser:GetMapInfo()
  local pvpRatio = 1
  if maptype == 2 or maptype == 4 then
    pvpRatio = 0.25
  end
  local Fifth = 0
  if srcUser:HasBuffID(90004604) then
    Fifth = Fifth + 0.14
  end
  if 0 < skilllv_1 then
    HpDamage = (Hp * (skilllv_1 * 0.016 + 0.04 + Fifth) + MaxHp * Num_sm * 0.015) / damChangePer * pvpRatio
  end
  local AtkFinal = (((Atk - BaseAtk) * (1 + AtkPer) + HpDamage) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1617 then
    local Num = srcUser:GetRunePoint(153020)
    local RuneDam = 1 + Num * 0.07
    local GemBaishu = srcUser:GetGemValue(153071)
    A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * RuneDam * (1 + GemBaishu / 100000)
  end
  local ValueCri = srcUser:GetGemValue(153041)
  local ValueCriDam = srcUser:GetGemValue(153042)
  local Agi = srcUser:GetProperty("Agi")
  local CriRate = math.min(Agi / 3 + 5 + ValueCri / 1000, 100)
  local shadow = 1
  if srcUser:GetTempSkillSlaveID() == 806612 then
    local GemNew = srcUser:GetGemValue(153142)
    shadow = 1 + GemNew / 100000
  end
  if A <= 1 then
    return 1
  end
  if CommonFun.IsInRate(CriRate, srcUser:GetRandom()) then
    return A * (1.5 + ValueCriDam / 100000) * shadow, CommonFun.DamageType.Crit
  end
  return A * shadow
end

function CommonFun.calcDamage_15103(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local Hp = srcUser:GetProperty("Hp")
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Num_sm = srcUser:GetRunePoint(153037)
  local skilllv_1 = srcUser:GetLernedSkillLevel(1638)
  local HpDamage = 0
  local mapid, maptype = srcUser:GetMapInfo()
  local pvpRatio = 1
  if maptype == 2 or maptype == 4 then
    pvpRatio = 0.25
  end
  local Fifth = 0
  if srcUser:HasBuffID(90004604) then
    Fifth = Fifth + 0.14
  end
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if 0 < skilllv_1 and skillID == 1651 then
    local skilllv_ft = srcUser:GetLernedSkillLevel(1625)
    local skilllv_ps = srcUser:GetLernedSkillLevel(1644)
    damChangePer = skilllv_ft * 0.6 + 2.8
    HpDamage = (Hp * (skilllv_1 * 0.016 + 0.04 + Fifth) + MaxHp * Num_sm * 0.015) / damChangePer * pvpRatio
  elseif 0 < skilllv_1 then
    HpDamage = (Hp * (skilllv_1 * 0.016 + 0.04 + Fifth) + MaxHp * Num_sm * 0.015) / damChangePer * pvpRatio
  end
  local AtkFinal = (((Atk - BaseAtk) * (1 + AtkPer) + HpDamage) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local Num = srcUser:GetRunePoint(153031)
  local RuneDam = 1 + Num * 0.06
  local WFoxtail = 1
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  local Ring7 = srcUser:GetEquipedID(7)
  if (Ring7 == 44301 or Ring7 == 144301) and srcUser:HasBuffID(90002583) then
    WFoxtail = WFoxtail + RefineLv7 * 0.02
  end
  if Ring7 == 44302 or Ring7 == 144302 then
    WFoxtail = WFoxtail + RefineLv7 * 0.02
  end
  if Ring7 == 44310 or Ring7 == 144310 then
    WFoxtail = WFoxtail + RefineLv7 * 0.02
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * RuneDam * WFoxtail
  if skillID == 1651 then
    local skilllv_ft = srcUser:GetLernedSkillLevel(1625)
    local skilllv_ps = srcUser:GetLernedSkillLevel(1644)
    local skill_zr = srcUser:GetLernedSkillLevel(4127)
    local zr = 1
    if srcUser:HasBuffID(131580) then
      zr = 1 + skill_zr * 0.05
    end
    local shucai = srcUser:GetBuffLayer(123350)
    local skill_sc = srcUser:GetLernedSkillLevel(1662)
    local sc_dam = 1 + skill_sc * shucai * 0.04
    damChangePer = (skilllv_ft * 0.6 + 2.8) * zr * sc_dam
    A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * RuneDam * (skilllv_ps * 0.05 + 0.25) * WFoxtail
  end
  if skillID == 1637 then
    local Num_yz = srcUser:GetRunePoint(153039)
    local RuneDam_yz = 1 + Num_yz * 0.08
    local GemYezhu = srcUser:GetGemValue(153081)
    local MFoxtail = 1
    local RefineLv7 = srcUser:GetEquipedRefineLv(7)
    local Ring7 = srcUser:GetEquipedID(7)
    if srcUser:HasBuffID(90002597) then
      MFoxtail = MFoxtail + RefineLv7 * 0.02
    end
    if Ring7 == 44310 or Ring7 == 144310 then
      MFoxtail = MFoxtail + RefineLv7 * 0.02
    end
    if srcUser:HasBuffID(57230) and targetUser:HasBuffID(131602) then
      damChangePer = damChangePer * 1.3
    end
    A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - LongRangeDamReduc2) * (1 - RefineDamReduc) - Vit2 * (1 + VitPer2)) * RuneDam_yz * (1 + GemYezhu / 100000) * MFoxtail
  end
  local ValueCri = srcUser:GetGemValue(153041)
  local ValueCriDam = srcUser:GetGemValue(153042)
  local Agi = srcUser:GetProperty("Agi")
  local CriRate = math.min(Agi / 7 + ValueCri / 1000, 100)
  local shadow = 1
  if srcUser:GetTempSkillSlaveID() == 806612 then
    local GemNew = srcUser:GetGemValue(153142)
    shadow = 1 + GemNew / 100000
  end
  if A <= 1 then
    return 1
  end
  if CommonFun.IsInRate(CriRate, srcUser:GetRandom()) and srcUser:HasBuffID(21530070) then
    return A * (1.5 + ValueCriDam / 100000) * shadow, CommonFun.DamageType.Crit
  end
  return A * shadow
end

function CommonFun.calcDamage_15201(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Num = srcUser:GetRunePoint(153015)
  local RuneDam = 1 + Num * 0.07
  local GemMihout = srcUser:GetGemValue(153111)
  local GemDam = 1 + GemMihout / 100000
  local skilllv_1 = srcUser:GetLernedSkillLevel(1635)
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + skilllv_1 * 0.015) * RuneDam * GemDam
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1650 then
    local skilllv_gj = srcUser:GetLernedSkillLevel(1612)
    local skilllv_jtl = srcUser:GetLernedSkillLevel(1642)
    local skill_zr = srcUser:GetLernedSkillLevel(4127)
    local zr = 1
    if srcUser:HasBuffID(131580) then
      zr = 1 + skill_zr * 0.05
    end
    local shucai = srcUser:GetBuffLayer(123350)
    local skill_sc = srcUser:GetLernedSkillLevel(1662)
    local sc_dam = 1 + skill_sc * shucai * 0.04
    damChangePer = (skilllv_gj * 0.6 + 3.6) * zr * sc_dam
    A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + skilllv_1 * 0.015) * RuneDam * GemDam * (skilllv_jtl * 0.05 + 0.15)
  end
  local Agi = srcUser:GetProperty("Agi")
  local CriRate = math.min(Agi / 3 + 5, 100)
  if A <= 1 then
    return 1
  end
  if CommonFun.IsInRate(CriRate, srcUser:GetRandom()) then
    return A * 1.5, CommonFun.DamageType.Crit
  end
  if srcUser:HasBuffID(131571) then
    local skilllv_dd = srcUser:GetLernedSkillLevel(4113)
    local GemNew = srcUser:GetGemValue(153151)
    local Luk = srcUser:GetProperty("Luk")
    local Fifth = 0
    if srcUser:HasBuffID(90004594) then
      Fifth = 0.15
    end
    return A * (1 + skilllv_dd * 0.05 + GemNew / 100000 + Luk / 300 + Fifth), CommonFun.DamageType.Crit
  end
  return A
end

function CommonFun.calcDamage_15202(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Num_sf = 0
  if targetUser:HasBuffID(123240) then
    Num_sf = srcUser:GetRunePoint(153044)
  end
  local Num = srcUser:GetRunePoint(153030)
  local RuneDam = 1 + Num * 0.06 + Num_sf * 0.05
  local skilllv_1 = srcUser:GetLernedSkillLevel(1635)
  local RefineLv5 = srcUser:GetEquipedRefineLv(5)
  local RefineLv6 = srcUser:GetEquipedRefineLv(6)
  local Ring1 = srcUser:GetEquipedID(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local Talisman = 0
  if (Ring1 == 44065 or Ring1 == 144065) and 4 <= order1 then
    a = RefineLv5 * 0.07
  end
  if (Ring2 == 44065 or Ring2 == 144065) and 4 <= order2 then
    b = RefineLv6 * 0.07
  end
  local equipRing5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if (equipRing5.id == 44066 or equipRing5.id == 144066) and equipRing5.refinelv >= 15 then
    a = equipRing5.refinelv * 0.07 + 0.25
  elseif equipRing5.id == 44066 or equipRing5.id == 144066 then
    a = equipRing5.refinelv * 0.07
  end
  local equipRingSD5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if (equipRingSD5.id == 44066 or equipRingSD5.id == 144066) and equipRingSD5.refinelv >= 15 then
    a = (equipRingSD5.refinelv * 0.07 + 0.25) * equipRingSD5.quench_per / 100
  elseif equipRingSD5.id == 44066 or equipRingSD5.id == 144066 then
    a = equipRingSD5.refinelv * 0.07 * equipRingSD5.quench_per / 100
  end
  local equipRing6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if (equipRing6.id == 44066 or equipRing6.id == 144066) and equipRing6.refinelv >= 15 then
    b = equipRing6.refinelv * 0.07 + 0.25
  elseif equipRing6.id == 44066 or equipRing6.id == 144066 then
    b = equipRing6.refinelv * 0.07
  end
  local equipRingSD6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if (equipRingSD6.id == 44066 or equipRingSD6.id == 144066) and equipRingSD6.refinelv >= 15 then
    b = (equipRingSD6.refinelv * 0.07 + 0.25) * equipRingSD6.quench_per / 100
  elseif equipRingSD6.id == 44066 or equipRingSD6.id == 144066 then
    b = equipRingSD6.refinelv * 0.07 * equipRingSD6.quench_per / 100
  end
  Talisman = Talisman + a + b
  local Foxtail = 1
  if (srcUser:HasBuffID(42810) or srcUser:HasBuffID(42940)) and (srcUser:HasBuffID(42770) or srcUser:HasBuffID(43140) or srcUser:HasBuffLayer(43140, EBUFFERLAYER_SHADOW)) then
    Foxtail = Foxtail + 0.15
  end
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  local Ring7 = srcUser:GetEquipedID(7)
  if (Ring7 == 44300 or Ring7 == 144300) and srcUser:HasBuffID(90002563) then
    Foxtail = Foxtail + RefineLv7 * 0.02
  end
  if Ring7 == 44303 or Ring7 == 144303 then
    Foxtail = Foxtail + RefineLv7 * 0.02
  end
  if Ring7 == 44309 or Ring7 == 144309 then
    Foxtail = Foxtail + RefineLv7 * 0.02
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * (damChangePer + Talisman) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam) * (1 + skilllv_1 * 0.015) * RuneDam * Foxtail
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1652 then
    local skilllv_mbh = srcUser:GetLernedSkillLevel(1614)
    local skill_zr = srcUser:GetLernedSkillLevel(4127)
    local zr = 1
    if srcUser:HasBuffID(131580) then
      zr = 1 + skill_zr * 0.05
    end
    local shucai = srcUser:GetBuffLayer(123350)
    local skill_sc = srcUser:GetLernedSkillLevel(1662)
    local sc_dam = 1 + skill_sc * shucai * 0.04
    damChangePer = (skilllv_mbh * 0.2 + 2.4) * sc_dam
    local GemMFD = srcUser:GetGemValue(153021)
    A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * (damChangePer + Talisman) * zr * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam) * (1 + skilllv_1 * 0.015) * RuneDam * (GemMFD / 100000) * Foxtail
  end
  if srcUser:HasBuffID(131571) then
    local skilllv_dd = srcUser:GetLernedSkillLevel(4113)
    local GemNew = srcUser:GetGemValue(153151)
    local Luk = srcUser:GetProperty("Luk")
    local Fifth = 0
    if srcUser:HasBuffID(90004594) then
      Fifth = 0.15
    end
    return A * (1 + skilllv_dd * 0.05 + GemNew / 100000 + Luk / 300 + Fifth), CommonFun.DamageType.Crit
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_15301(srcUser, targetUser, params, damageParam, logger)
  local BaseLv = srcUser.BaseLv
  local Int = srcUser:GetProperty("Int")
  local HealEncPer = srcUser:GetProperty("HealEncPer")
  local BeHealEncPer2 = targetUser:GetProperty("BeHealEncPer")
  local damChangePer = damageParam.damChangePer
  local Num = srcUser:GetRunePoint(153033)
  local A = -1 * math.floor((BaseLv / 50 + 1) * Int * damChangePer * (1 + HealEncPer) * (1 + BeHealEncPer2)) * (1 + Num * 0.05)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1630 then
    local skilllv_1 = srcUser:GetLernedSkillLevel(1621)
    local skilllv_2 = srcUser:GetLernedSkillLevel(1630)
    skilllv_2 = math.min(skilllv_2, 5)
    A = -1 * math.floor((BaseLv / 50 + 1) * Int * (skilllv_1 * 3 + 11) * (1 + HealEncPer) * (1 + BeHealEncPer2)) * (1 + skilllv_2 * 0.1) * (1 + Num * 0.05)
  end
  local HealtoDam = targetUser:GetBuffLevel(129100)
  local DamRatio = 1
  if targetUser:HasBuffID(129100) then
    DamRatio = -0.1 * HealtoDam
  end
  local HealReduce = targetUser:GetBuffLevel(136500)
  if targetUser:HasBuffID(136500) then
    DamRatio = 1 - (0.2 + 0.03 * HealReduce)
  end
  local RateNum = 0
  if srcUser:HasBuffID(90004614) then
    RateNum = 15
  end
  if CommonFun.IsInRate(RateNum, srcUser:GetRandom()) then
    return A * 2 * DamRatio, CommonFun.DamageType.Crit
  else
    return A * DamRatio
  end
end

function CommonFun.calcDamage_15401(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local skilllv = srcUser:GetLernedSkillLevel(4121)
  local Num = targetUser:GetBuffLayer(131650)
  local Ratio = 1 + skilllv * 0.03 * Num
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * Ratio
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.CalcSuckBlood(srcUser, damage, skillid)
  local skillParams = Table_Skill[skillid]
  if skillParams == nil or skillParams.Logic_Param == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(42130)
  local RuneDamage = 0.01 * Num1
  local skilllv_1 = srcUser:GetLernedSkillLevel(1168)
  local GemValue = srcUser:GetGemValue(41082)
  if skillParams.Logic_Param.isSuckSkill then
    if math.floor(skillid / 1000) == 130 and skillid % 100 <= 5 then
      return damage * (0.15 + RuneDamage + GemValue / 100000)
    end
    if math.floor(skillid / 1000) == 130 and skillid % 100 > 5 then
      return damage * (0.3 + RuneDamage + GemValue / 100000)
    end
    if math.floor(skillid / 1000) == 1168 then
      return damage * (0.25 + math.min(skilllv_1, 5) * 0.05)
    end
    if math.floor(skillid / 1000) == 810 then
      local GemValue = srcUser:GetGemValue(51132)
      local HealEncPer = srcUser:GetProperty("HealEncPer")
      local HealDam = 1
      if srcUser:HasBuffID(20510130) then
        HealDam = 1 + HealEncPer
      end
      return damage * GemValue / 100000 * HealDam
    end
    if skillid == 73210002 then
      return damage
    end
    if skillid == 73580001 then
      return damage
    end
    if skillid == 78440001 then
      return damage
    end
    if skillid == 77360001 then
      return damage * 20
    end
    if skillid == 78945001 then
      return damage * 20
    end
    if skillid == 79012001 then
      return damage * 10
    end
    if math.floor(skillid / 1000) == 81013 then
      return damage * 0.5
    end
    if math.floor(skillid / 1000) == 2441 then
      local skilllv = srcUser:GetLernedSkillLevel(2451)
      return damage * skilllv * 0.02
    end
    if math.floor(skillid / 1000) == 2637 or math.floor(skillid / 1000) == 2639 then
      local skilllv = srcUser:GetLernedSkillLevel(2620)
      return damage * skilllv * 0.005
    end
    if math.floor(skillid / 1000) == 2080 and srcUser:HasBuffID(51400) then
      return damage * 0.05
    end
  end
  return 0
end

function CommonFun.calcDamage_16001(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local Num1 = srcUser:GetRunePoint(203024)
  local Num2 = srcUser:GetRunePoint(11023)
  local Num3 = srcUser:GetRunePoint(11024)
  local Num4 = srcUser:GetRunePoint(12004)
  local Num5 = srcUser:GetRunePoint(12011)
  local RuneDamage = (Num1 + Num2 + Num3 + Num4 + Num5) * 0.03
  local AtkPer1 = srcUser:GetProperty("AtkPer")
  local AtkPer = AtkPer1 + RuneDamage
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 5 * Str
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Agi = srcUser:GetProperty("Agi")
  local WeaponType = srcUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(1701)
  local Refine = srcUser:GetProperty("Refine")
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  local Weapon = srcUser:GetEquipedID(7)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local Num6 = srcUser:GetRunePoint(203003)
  local liehuo = 1 + Num6 * 0.05
  local SkillRealDam = 0
  if skilllv_1 <= 10 then
    SkillRealDam = skilllv_1 * 20 * liehuo
  else
    SkillRealDam = 200 * liehuo
  end
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk + NormalAtk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local HolyEquip = 1
  if Weapon == 40319 or Weapon == 140319 then
    HolyEquip = 1 + 0.05 * RefineLv
  end
  if Weapon == 40360 or Weapon == 140360 then
    HolyEquip = 1 + 0.05 * RefineLv
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine + SkillRealDam) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * HolyEquip
  if bits[CommonFun.StateEffect.Dizzy] == 1 and (Weapon == 40322 or Weapon == 140322) then
    return A * 1.5
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16002(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1700)
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1715)
  local skilllv_3 = srcUser:GetLernedSkillLevel(1701)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local Num3 = srcUser:GetRunePoint(203004)
  local Num4 = srcUser:GetRunePoint(203003)
  local liehuo = 1 + Num4 * 0.05
  local srcAtkElement = 4
  local ElementRate = CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam)
  if nil == CommonFun.NatureProps[srcAtkElement] or nil == CommonFun.NatureProps[targetDefElement] or nil == targetDefElement then
    return 0
  end
  local FireAtk = srcUser:GetProperty("FireAtk")
  local ele = ElementRate * (1 + FireAtk)
  local SkillRealDam = Num3 * skilllv_3 * 20 * liehuo * ele
  local liehuojian = 1
  if skilllv_3 <= 10 then
    liehuojian = skilllv_3 * 0.005 + 1
  else
    liehuojian = 1.05
  end
  local baiyan = CommonFun.ShapeCorrection(srcUser, targetUser)
  local skilllv_baiyan = srcUser:GetLernedSkillLevel(1738)
  if 1 <= skilllv_baiyan then
    baiyan = 1
  end
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * baiyan * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42190) then
    BaseLvDamage = IBaseLv * 20
  end
  if srcUser:HasBuffID(42200) then
    BaseLvDamage = IBaseLv * 20
  end
  local GemValue1 = srcUser:GetGemValue(11041)
  local GemValue2 = srcUser:GetGemValue(143012)
  local MidGemValue = srcUser:GetGemValue(11042)
  local GemDam = 1 + GemValue1 / 100000 + GemValue2 / 100000
  local MidGemDam = 1
  if CommonFun.Shape.M == targetUser.shape then
    MidGemDam = 1 + MidGemValue / 100000
  end
  if srcUser:HasBuffID(21430100) and srcUser:HasBuffID(96150) then
    DefReduc = 1
  end
  local anyz = 1
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1725 then
    local skilllv_anyz = srcUser:GetLernedSkillLevel(1725)
    if skilllv_1 <= 5 then
      damChangePer = 1 + skilllv_1 * 0.1
      damChangePer1 = 50 + (skilllv_1 - 1) * 25
    elseif 5 < skilllv_1 and skilllv_1 <= 10 then
      damChangePer = 1 + skilllv_1 * 0.1
      damChangePer1 = 150
    else
      damChangePer = 2 + (skilllv_1 - 10) * 0.05
      damChangePer1 = 150
    end
    anyz = 1 + skilllv_anyz * 0.1
  end
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 + DamIncrease - ShortRangeDamReduc2) * GemDam * MidGemDam + damChangePer1 - Vit2 * (1 + VitPer2) + BaseLvDamage
  if A <= 1 then
    return 1
  end
  local Buff = srcUser:HasBuffID(80000550)
  local Weapon = srcUser:GetEquipedID(7)
  local B = 1
  if CommonFun.Shape.M == targetUser.shape and (Weapon == 40308 or Weapon == 140308) then
    B = 1.5
  end
  if CommonFun.Shape.M == targetUser.shape and (Weapon == 40359 or Weapon == 140359) then
    B = 1.5
  end
  if CommonFun.Shape.M == targetUser.shape and (Weapon == 40382 or Weapon == 140382) then
    B = 1.5
  end
  if CommonFun.Shape.M == targetUser.shape and (Weapon == 40383 or Weapon == 140383) then
    B = 1.5
  end
  local fuwen = 1
  if srcUser:HasBuffID(20110100) then
    fuwen = 2
  end
  local Num1 = srcUser:GetRunePoint(203002)
  local RuneDamage = Num1 * 0.1 + 1
  local KuangJiDao = 0
  if bits[CommonFun.AttrEffect.KuangJiDam] == 1 then
    KuangJiDao = 0.5
  elseif Weapon == 40308 or Weapon == 140308 then
    KuangJiDao = 1
  elseif Weapon == 40359 or Weapon == 140359 then
    KuangJiDao = 1
  end
  local Flames = 0
  if Weapon == 40382 or Weapon == 140382 then
    Flames = 1
  elseif Weapon == 40383 or Weapon == 140383 then
    Flames = 2
  end
  local Yaodao = 0
  if Buff == true then
    Yaodao = 1
  end
  local dengji = 0
  if 10 <= skilllv_1 then
    dengji = 1
  end
  local Sign = 1
  local Num1 = targetUser:GetBuffLayer(183540)
  local fromid = targetUser:GetBuffFromID(183540)
  local guid = srcUser:GetGuid()
  local skilllv_1 = srcUser:GetLernedSkillLevel(1747)
  local GemValue = srcUser:GetGemValue(11131)
  if fromid == guid then
    Sign = 1 + (skilllv_1 * 0.01 + 0.02 + GemValue / 100000) * Num1
  end
  A = (A + Str * 20 * fuwen * Yaodao + SkillRealDam) * B * (1 + dengji * KuangJiDao) * (1 + Flames) * RuneDamage * (1 - RefineDamReduc) * anyz * liehuojian * Sign
  return A
end

function CommonFun.calcDamage_16003(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local baiyan = CommonFun.ShapeCorrection(srcUser, targetUser)
  local skilllv_baiyan = srcUser:GetLernedSkillLevel(1738)
  if 1 <= skilllv_baiyan then
    baiyan = 1
  end
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * baiyan * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) * elementparam * elementparam2 + BaseMAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local Vit = srcUser:GetProperty("Vit")
  local VitRatio = 1 + Vit / 1000
  local HpFire = 1
  if srcUser:HasBuffID(80220) or srcUser:HasBuffID(80223) then
    HpFire = 1.2
  end
  local Dragon = 1
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(41200) then
    Dragon = 1 + RefineLv7 * 0.01
  end
  local Dragon1 = 0
  if srcUser:HasBuffID(41200) and 15 <= RefineLv7 then
    Dragon1 = 1
  end
  if srcUser:HasBuffID(43430) then
    Dragon = 1 + RefineLv7 * 0.02
  end
  if srcUser:HasBuffID(43430) then
    Dragon1 = 1
  end
  if srcUser:HasBuffID(41740) then
    Dragon = 1 + RefineLv7 * 0.01
  end
  if srcUser:HasBuffID(41740) and 15 <= RefineLv7 then
    Dragon1 = 2
  end
  if srcUser:HasBuffID(43440) then
    Dragon = 1 + RefineLv7 * 0.02
  end
  if srcUser:HasBuffID(43440) then
    Dragon1 = 2
  end
  local Numxp = srcUser:GetRunePoint(203013)
  local RuneDamage = 1 + Numxp * 0.06
  local card = 1
  if srcUser:HasBuffID(52580) then
    card = 1.1
  end
  local GemValue = srcUser:GetGemValue(11001)
  local GemDam = 1 + GemValue / 100000
  local Sign = 1
  local Num1 = targetUser:GetBuffLayer(183540)
  local fromid = targetUser:GetBuffFromID(183540)
  local guid = srcUser:GetGuid()
  local skilllv_1 = srcUser:GetLernedSkillLevel(1747)
  local GemValue = srcUser:GetGemValue(11131)
  if fromid == guid then
    Sign = 1 + (skilllv_1 * 0.01 + 0.02 + GemValue / 100000) * Num1
  end
  damChangePer = damChangePer + Dragon1
  local skilllv_shzl = srcUser:GetLernedSkillLevel(1714)
  local shanhuang = 0
  if 1 <= skilllv_shzl then
    shanhuang = 0.5
  end
  local skilllv_shz = srcUser:GetLernedSkillLevel(1713)
  local skilllv_ctd = srcUser:GetLernedSkillLevel(1727)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1713 and damageParam.elementparam == 6 then
    damChangePer = (skilllv_shz * 0.5 + 6.6 + Dragon1) * shanhuang
  end
  if skillID == 1727 then
    damChangePer = (skilllv_shz * 0.5 + 6.6 + Dragon1) * (skilllv_ctd * 0.08 + 1)
    if damageParam.elementparam == 6 then
      damChangePer = damChangePer * shanhuang
    end
  end
  local A = (((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine + MRefine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * HpFire * VitRatio * Dragon * RuneDamage * card * GemDam * Sign
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  local GemState = srcUser:GetGemValue(11002)
  if bits[CommonFun.StateEffect.Burn] == 1 or bits[CommonFun.StateEffect.Freeze] == 1 then
    A = A * (1 + GemState / 100000)
  end
  local enemy = srcUser:IsEnemy(targetUser)
  if enemy == false then
    return 0, CommonFun.DamageType.None
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16101(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local Num1 = srcUser:GetRunePoint(213011)
  local Num2 = srcUser:GetRunePoint(11023)
  local Num3 = srcUser:GetRunePoint(11024)
  local Num4 = srcUser:GetRunePoint(12004)
  local Num5 = srcUser:GetRunePoint(12011)
  local RuneDamage = (Num1 + Num2 + Num3 + Num4 + Num5) * 0.03
  local AtkPer1 = srcUser:GetProperty("AtkPer")
  local AtkPer = AtkPer1 + RuneDamage
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 5 * Str
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Agi = srcUser:GetProperty("Agi")
  local WeaponType = srcUser:GetEquipedWeaponType()
  local skilllv_1 = srcUser:GetLernedSkillLevel(1701)
  local Refine = srcUser:GetProperty("Refine")
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  local Weapon = srcUser:GetEquipedID(7)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk + NormalAtk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if bits[CommonFun.StateEffect.Dizzy] == 1 and (Weapon == 40322 or Weapon == 140322) then
    return A * 1.5
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16102(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local Num = srcUser:GetRunePoint(213010)
  local RuneDamage = 1 + Num * 0.1
  local GemValue = srcUser:GetGemValue(61091)
  local GemDam = 1 + GemValue / 100000
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local recursion = 1
  if srcUser:HasBuffID(184080) then
    local skilllv_dg = srcUser:GetLernedSkillLevel(1825)
    local skilllv_dg2 = srcUser:GetLernedSkillLevel(1829)
    recursion = 1 + skilllv_dg * 0.03 + skilllv_dg2 * 0.02
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (damChangePer + Dex / 30) * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage * GemDam * recursion
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16103(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local sizeCorrection = 1
  if nil ~= CommonFun.Shape then
    if CommonFun.Shape.S == targetUser.shape then
      sizeCorrection = 1.5
    elseif CommonFun.Shape.M == targetUser.shape then
      sizeCorrection = 1
    elseif CommonFun.Shape.L == targetUser.shape then
      sizeCorrection = 0.75
    end
  end
  if nil ~= CommonFun.Shape and CommonFun.Shape.L == targetUser.shape and srcUser:HasBuffID(90004784) then
    sizeCorrection = sizeCorrection + 0.25
  end
  local huimie = 1
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(90000647) then
    if RefineLv7 < 15 then
      huimie = RefineLv7 * 0.01 + 1 + 0.05
    elseif 15 <= RefineLv7 then
      huimie = RefineLv7 * 0.01 + 1 + 0.05 + 0.1
    end
  end
  if srcUser:HasBuffID(90002657) then
    huimie = RefineLv7 * 0.01 + 1 + 0.15
  end
  if srcUser:HasBuffID(41940) then
    if RefineLv7 < 15 then
      huimie = RefineLv7 * 0.01 + 1 + 0.05
    elseif 15 <= RefineLv7 then
      huimie = RefineLv7 * 0.01 + 1 + 0.05 + 0.1
    end
  end
  if srcUser:HasBuffID(43480) then
    huimie = RefineLv7 * 0.02 + 1 + 0.15
  end
  local Num = srcUser:GetRunePoint(213015)
  local RuneDamage = 1 + Num * 0.1
  local Card = 1
  if srcUser:HasBuffID(53310) then
    if 10 <= RefineLv7 then
      Card = Card + 0.1
    else
      Card = Card + 0.05
    end
  end
  local GemValue = srcUser:GetGemValue(61001)
  local GemDam = 1 + GemValue / 100000
  local Num_dy = srcUser:GetBuffLayer(20610121)
  Num_dy = Num_dy + 1
  local recursion = 1
  local skilllv_dg = srcUser:GetLernedSkillLevel(1825)
  local skilllv_dg2 = srcUser:GetLernedSkillLevel(1829)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if srcUser:HasBuffID(184081) and skillID == 1812 then
    recursion = 1 + skilllv_dg * 0.03 + skilllv_dg2 * 0.02
  end
  if skillID == 1820 then
    local skilllv_jn = srcUser:GetLernedSkillLevel(1812)
    local skilllv_gz = srcUser:GetLernedSkillLevel(1820)
    Num_dy = 1
    damChangePer = (skilllv_jn * 1.1 + 9.6) * (skilllv_gz * 0.06 + 0.6)
    if srcUser:HasBuffID(184082) then
      recursion = 1 + skilllv_dg * 0.03 + skilllv_dg2 * 0.02
    end
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * sizeCorrection * huimie * RuneDamage * Card * GemDam * Num_dy * recursion
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16104(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local Num = srcUser:GetRunePoint(213009)
  local RuneDamage = 1 + Num * 0.1
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * RuneDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16105(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local skilllv_lyq = srcUser:GetLernedSkillLevel(1806)
  local skilllv_ylq = srcUser:GetLernedSkillLevel(1812)
  local Num1 = srcUser:GetRunePoint(213010)
  local RuneDamage1 = 1 + Num1 * 0.1
  local GemValue1 = srcUser:GetGemValue(61091)
  local GemDam1 = 1 + GemValue1 / 100000
  local beilv_lyq = 2.5
  if skilllv_lyq <= 5 and 0 < skilllv_lyq then
    beilv_lyq = skilllv_lyq * 0.8 + 4.4
  else
    beilv_lyq = (skilllv_lyq - 5) * 0.6 + 8.4
  end
  local damChangePer_lyq = beilv_lyq * GemDam1 * RuneDamage1
  local sizeCorrection = 1
  if nil ~= CommonFun.Shape then
    if CommonFun.Shape.S == targetUser.shape then
      sizeCorrection = 1.5
    elseif CommonFun.Shape.M == targetUser.shape then
      sizeCorrection = 1
    elseif CommonFun.Shape.L == targetUser.shape then
      sizeCorrection = 0.75
    end
  end
  local huimie = 1
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(90000647) then
    if RefineLv7 < 15 then
      huimie = RefineLv7 * 0.01 + 1 + 0.05
    elseif 15 <= RefineLv7 then
      huimie = RefineLv7 * 0.01 + 1 + 0.05 + 0.1
    end
  end
  if srcUser:HasBuffID(90002657) then
    huimie = RefineLv7 * 0.01 + 1 + 0.15
  end
  if srcUser:HasBuffID(41940) then
    if RefineLv7 < 15 then
      huimie = RefineLv7 * 0.01 + 1 + 0.05
    elseif 15 <= RefineLv7 then
      huimie = RefineLv7 * 0.01 + 1 + 0.05 + 0.1
    end
  end
  if srcUser:HasBuffID(43480) then
    huimie = RefineLv7 * 0.02 + 1 + 0.15
  end
  local Num = srcUser:GetRunePoint(213015)
  local RuneDamage = 1 + Num * 0.1
  local Card = 1
  if srcUser:HasBuffID(53310) then
    if 10 <= RefineLv7 then
      Card = Card + 0.1
    else
      Card = Card + 0.05
    end
  end
  local GemValue = srcUser:GetGemValue(61001)
  local GemDam = 1 + GemValue / 100000
  local beilv_ylq = 10.7
  if 0 < skilllv_ylq then
    beilv_ylq = skilllv_ylq * 0.9 + 9.8
  end
  local damChangePer_ylq = beilv_ylq * sizeCorrection * huimie * RuneDamage * Card * GemDam
  local A = 1
  local MaxHp = targetUser:GetProperty("MaxHp")
  local Hp = targetUser:GetProperty("Hp")
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1809 then
    local HpPerRatio = 1 + (1 - Hp / MaxHp) * 1
    A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (damChangePer_ylq + damChangePer_lyq) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * HpPerRatio
  end
  if skillID == 1835 then
    A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (damChangePer_ylq + damChangePer_lyq) * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)
    local skilllv_ylq = srcUser:GetLernedSkillLevel(1837)
    local HpPer = skilllv_ylq * 0.03
    if HpPer >= Hp / MaxHp then
      if targetUser:GetNpcID() == 0 then
        return 99999999
      else
        return A
      end
    end
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16106(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser, params)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local Sp = srcUser:GetProperty("Sp")
  local Hp = srcUser:GetProperty("Hp")
  local Vit = srcUser:GetProperty("Vit")
  local mapid, maptype = srcUser:GetMapInfo()
  local pvpRatio = 1
  if maptype == 2 or maptype == 4 then
    pvpRatio = 0.25
  end
  local Wrench = 1
  local Ring7 = srcUser:GetEquipedID(7)
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if Ring7 == 41556 or Ring7 == 141556 then
    Wrench = Wrench + RefineLv7 * 0.02
  end
  if srcUser:HasBuffID(22880) then
    Wrench = Wrench + RefineLv7 * 0.02
  end
  local Fifth = 0
  if srcUser:HasBuffID(90004864) then
    Fifth = 10
  end
  if srcUser:HasBuffID(55790) then
    Wrench = 0.1 + Wrench
  end
  local Num = srcUser:GetRunePoint(64040)
  local RuneDamage = 1 + Num * 0.05
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1822 then
    local skilllv_zb = srcUser:GetLernedSkillLevel(1817)
    local skilllv_jq = srcUser:GetLernedSkillLevel(1822)
    damChangePer = 0.1 * skilllv_zb * (1 + skilllv_jq * 0.3)
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (Sp / 100 + math.min(Hp / 5000 * pvpRatio, 200) + Vit / 10 + Fifth) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Wrench * RuneDamage
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16301(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 5 * Str
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local damChangePer = damageParam.damChangePer
  local Agi = srcUser:GetProperty("Agi")
  local AgiRune = srcUser:GetRunePoint(163012)
  local AgiDam = 1 + math.floor(Agi / 10) * AgiRune * 0.004
  local Famous = 1
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(44360) then
    Famous = Famous * (RefineLv7 * 0.01 + 1)
  end
  if srcUser:HasBuffID(44370) then
    Famous = Famous * (RefineLv7 * 0.03 + 1)
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * AgiDam * Famous
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2013 then
    local Rune = srcUser:GetRunePoint(163021)
    A = A * (1 + Rune * 0.05)
  end
  local GemValue = srcUser:GetGemValue(163072)
  if skillID == 2056 then
    local NormalAtkDam = srcUser:GetProperty("NormalAtkDam")
    local NormalAtkRes = targetUser:GetProperty("NormalAtkRes")
    local NormalEnd = 1 + NormalAtkDam - NormalAtkRes
    NormalEnd = math.max(NormalEnd, 0.1)
    A = A * math.max(GemValue / 100000, 1) * NormalEnd
    local targetid = targetUser:GetGuid()
    local distance = srcUser:GetDistance(targetid)
    if 3.5 <= distance then
      A = A * 2
    end
    local Cri = srcUser:GetProperty("Cri")
    local CriRes2 = targetUser:GetProperty("CriRes")
    local CriDamPer = srcUser:GetProperty("CriDamPer")
    local CriDefPer2 = targetUser:GetProperty("CriDefPer")
    local Rate = Cri - CriRes2
    if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
      A = ((AtkFinal * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2)) * AgiDam * Famous * math.max(GemValue / 100000, 1) * NormalEnd
      if 3.5 <= distance then
        A = A * 2
      end
      return math.max(A * (1.5 + CriDamPer - CriDefPer2), 1), CommonFun.DamageType.Crit
    end
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16302(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser, params)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local damChangePer = damageParam.damChangePer
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2024 then
    local Hiding = targetUser:GetProperty("Hiding")
    local GemValue = srcUser:GetGemValue(163151)
    local GemDam = 1 + GemValue / 100000
    A = A * GemDam
    if Hiding == 1 then
      A = A * 2
    end
  end
  if skillID == 2018 then
    local skilll = srcUser:GetLernedSkillLevel(2039)
    damChangePer = skilll * 1.5
    A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
    local Rune = srcUser:GetRunePoint(163044)
    local GemValue = srcUser:GetGemValue(163042)
    local GemDam = 1 + GemValue / 100000
    A = A * (1 + Rune * 0.08) * GemDam
    if srcUser:HasBuffID(21630080) then
      local Cri = srcUser:GetProperty("Cri")
      local CriRes2 = targetUser:GetProperty("CriRes")
      local CriDamPer = srcUser:GetProperty("CriDamPer")
      local CriDefPer2 = targetUser:GetProperty("CriDefPer")
      local Rate = Cri - CriRes2
      if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
        return A * (1.5 + CriDamPer - CriDefPer2), CommonFun.DamageType.Crit
      end
    end
  end
  if skillID == 2035 then
    local GemValue = srcUser:GetGemValue(163121)
    local GemDam = 1 + GemValue / 100000
    A = A * GemDam
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16303(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser, params)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local damChangePer = damageParam.damChangePer
  local NumDam = 1
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2041 then
    local count = params.hitedCount
    local Rune = srcUser:GetRunePoint(163038)
    local GemValue = srcUser:GetGemValue(163051)
    local GemDam = 1 + GemValue / 100000
    local GemValueNum = srcUser:GetGemValue(163052)
    local GemNum = GemValueNum / 100000
    if srcUser:HasBuffID(21630050) and srcUser:GetRangeEnemy(3) == 0 then
      GemDam = GemDam * 1.3
    end
    NumDam = (1 + math.max(count - 1, 0) * (0.1 + GemNum)) * (1 + Rune * 0.06) * GemDam
    local RefineLv7 = srcUser:GetEquipedRefineLv(7)
    if srcUser:HasBuffID(44400) then
      NumDam = NumDam * (RefineLv7 * 0.01 + 1)
    end
    if srcUser:HasBuffID(44410) then
      NumDam = NumDam * (RefineLv7 * 0.02 + 1)
    end
    if srcUser:HasBuffID(55100) then
      NumDam = NumDam + 0.01 * math.floor(Dex / 10)
    end
  end
  if skillID == 2055 or skillID == 2080 then
    local count = params.hitedCount
    local Rune = srcUser:GetRunePoint(163038)
    local GemValue = srcUser:GetGemValue(163051)
    local GemDam = 1 + GemValue / 100000
    local GemValueNum = srcUser:GetGemValue(163052)
    local GemNum = GemValueNum / 100000
    if srcUser:HasBuffID(21630050) and srcUser:GetRangeEnemy(3) == 0 then
      GemDam = GemDam * 1.3
    end
    NumDam = (1 + math.max(count - 1, 0) * (0.1 + GemNum)) * (1 + Rune * 0.06) * GemDam
    local RefineLv7 = srcUser:GetEquipedRefineLv(7)
    if srcUser:HasBuffID(44400) then
      NumDam = NumDam * (RefineLv7 * 0.01 + 1)
    end
    if srcUser:HasBuffID(44410) then
      NumDam = NumDam * (RefineLv7 * 0.02 + 1)
    end
    if srcUser:HasBuffID(55100) then
      NumDam = NumDam + 0.01 * math.floor(Dex / 10)
    end
    if srcUser:HasBuffID(90004644) then
      NumDam = NumDam + 0.1
    end
    local skilllv1 = srcUser:GetLernedSkillLevel(2041)
    local skilllv2 = srcUser:GetLernedSkillLevel(2055)
    local skilllv3 = srcUser:GetLernedSkillLevel(2076)
    local Master = srcUser:GetMasterUser()
    if Master ~= nil then
      skilllv1 = Master:GetLernedSkillLevel(2041)
      skilllv2 = Master:GetLernedSkillLevel(2055)
      skilllv3 = Master:GetLernedSkillLevel(2076)
    end
    damChangePer = (skilllv1 * 0.5 + 5.7) * (1 + skilllv2 * 0.03) * (1 + skilllv3 * 0.04)
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * NumDam
  if skillID == 2029 then
    local Rune = srcUser:GetRunePoint(163014)
    local GemValue = srcUser:GetGemValue(163141)
    local GemDam = 1 + GemValue / 100000
    local Burn = 1
    local StateEffect = targetUser:GetProperty("StateEffect")
    local bits = CommonFun.getBits(StateEffect)
    local GemState = srcUser:GetGemValue(163142)
    if bits[CommonFun.StateEffect.Burn] == 1 then
      Burn = 1 + GemState / 100000
    end
    A = A * (1 + Rune * 0.06) * GemDam * Burn
  end
  if skillID == 2020 then
    local GemValue = srcUser:GetGemValue(163112)
    local GemDam = 1 + GemValue / 100000
    A = A * GemDam
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16304(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local skilllv = srcUser:GetLernedSkillLevel(2028)
  local Sp = srcUser:GetProperty("Sp")
  local Mskilllv = 0
  local MSp = 0
  local Master = srcUser:GetMasterUser()
  if Master ~= nil then
    Mskilllv = Master:GetLernedSkillLevel(2028)
    MSp = Master:GetProperty("Sp")
  end
  local NinjaDam = 1
  if 10 < skilllv or 10 < Mskilllv then
    MDamReduc2 = MDamReduc2 - (math.max(skilllv, Mskilllv) - 10) * math.max(Sp, MSp) / 100 * 5.0E-4
  end
  if targetUser:HasBuffID(133290) then
    local GemValue2 = srcUser:GetGemValue(163002)
    NinjaDam = NinjaDam * (1 + GemValue2 / 100000)
  end
  local CardTLS = 1
  if srcUser:HasBuffID(55110) then
    CardTLS = 1.06
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * NinjaDam * (1 + RangeDam) * CardTLS
  if skillID == 2906 or skillID == 2907 or skillID == 2908 or skillID == 2909 then
    local GemValue = srcUser:GetGemValue(163001)
    damChangePer = GemValue / 100000
    A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * NinjaDam * (1 + RangeDam) * CardTLS
  end
  if skillID == 2033 then
    local Rune = srcUser:GetRunePoint(163018)
    A = A * (1 + Rune * 0.06)
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16305(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local skilllv = srcUser:GetLernedSkillLevel(2028)
  local Sp = srcUser:GetProperty("Sp")
  local Mskilllv = 0
  local MSp = 0
  local Master = srcUser:GetMasterUser()
  if Master ~= nil then
    Mskilllv = Master:GetLernedSkillLevel(2028)
    MSp = Master:GetProperty("Sp")
  end
  local NinjaDam = 1
  if 10 < skilllv or 10 < Mskilllv then
    MDamReduc2 = MDamReduc2 - (math.max(skilllv, Mskilllv) - 10) * math.max(Sp, MSp) / 100 * 5.0E-4
  end
  if targetUser:HasBuffID(133290) then
    local GemValue2 = srcUser:GetGemValue(163002)
    NinjaDam = NinjaDam * (1 + GemValue2 / 100000)
  end
  local CardTLS = 1
  if srcUser:HasBuffID(55110) then
    CardTLS = 1.06
  end
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 817 and damChangePer == 0 then
    local skilllv_ajl = srcUser:GetLernedSkillLevel(2044)
    local GemValue_fls = srcUser:GetGemValue(163161)
    damChangePer = (0.6 * skilllv_ajl + 6) * (GemValue_fls / 100000)
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * NinjaDam * (1 + RangeDam) * CardTLS
  if skillID == 2019 or skillID == 817 then
    local Rune = srcUser:GetRunePoint(163036)
    local GemValue = srcUser:GetGemValue(163061)
    local GemDam = 1 + GemValue / 100000
    A = A * (1 + Rune * 0.06) * GemDam
  end
  if skillID == 2045 then
    local GemValue = srcUser:GetGemValue(163101)
    local GemDam = 1 + GemValue / 100000
    if targetUser:HasBuffID(132930) then
      local Rune = srcUser:GetRunePoint(163040)
      A = A * (1.5 + Rune * 0.1) * GemDam
    end
    A = A * GemDam
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16400(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local RangeDam = srcUser:GetProperty("RangeDam")
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Num1 = srcUser:GetRunePoint(223007)
  local RuneDamage = Num1 * 0.05 + 1
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 1940 then
    local skilllv_1 = srcUser:GetLernedSkillLevel(1908)
    damChangePer = skilllv_1 * 2 + 14
    local count = srcUser:GetSkillPhaseCount()
    if 2 <= count then
      damChangePer = damChangePer * 0.2
    end
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 * RuneDamage - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16401(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local Num1 = srcUser:GetRunePoint(223004)
  local RuneRate = 0
  if 0 < Num1 then
    RuneRate = 8
  end
  local RuneDamage = Num1 * 0.1 + 1
  local Num2 = srcUser:GetRunePoint(223013)
  local RuneDamage1 = Num2 * 0.1 + 1
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local damChangePer1 = damageParam.damChangePer1
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local BaseLvDamage = 0
  local IBaseLv = srcUser.BaseLv
  if srcUser:HasBuffID(42110) then
    BaseLvDamage = IBaseLv * 15
  end
  local GemValue = srcUser:GetGemValue(82071)
  local GemDam = 1 + GemValue / 100000
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2) + damChangePer1) * RuneDamage1 * GemDam + BaseLvDamage
  if CommonFun.IsInRate(RuneRate, srcUser:GetRandom()) then
    return A * RuneDamage, CommonFun.DamageType.Crit
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16402(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local skilllv1 = srcUser:GetLernedSkillLevel(1931)
  local skilllv2 = srcUser:GetLernedSkillLevel(1933)
  local damChangePer1 = (skilllv1 * 0.6 + 4.8) * 0.8
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer1 * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16403(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local skilllv1 = srcUser:GetLernedSkillLevel(1932)
  local damChangePer1 = skilllv1 * 1.2 + 12
  local count = srcUser:GetSkillPhaseCount()
  if 2 <= count then
    damChangePer1 = damChangePer1 * 0.2
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer1 * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_16404(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local skilllv1 = srcUser:GetLernedSkillLevel(1910)
  local damChangePer1 = skilllv1 * 1.2
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer1 * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_17301(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 3 * Dex
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2005 then
    local GemValue = srcUser:GetGemValue(173052)
    local GemDam = 1 + GemValue / 100000
    A = A * GemDam
  end
  if skillID == 2200 or skillID == 2199 then
    local WeaponType = srcUser:GetEquipedWeaponType()
    if WeaponType == 320 then
      A = A * 2
    end
  end
  if skillID == 2250 or skillID == 818 then
    local GemValue = srcUser:GetGemValue(173161)
    A = A * (1 + GemValue / 100000)
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_17302(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Agi = srcUser:GetProperty("Agi")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local damChangePer = damageParam.damChangePer
  local Rune = 1
  local Num1 = srcUser:GetRunePoint(173017)
  local Num2 = srcUser:GetRunePoint(173029)
  local Num4 = srcUser:GetRunePoint(173025)
  local GemValue_wm1 = srcUser:GetGemValue(173061)
  local GemValue_wm2 = srcUser:GetGemValue(173062)
  local GemDam_wm = 1 + GemValue_wm1 / 100000 + GemValue_wm2 / 100000 * Agi
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2223 then
    local GemValue = srcUser:GetGemValue(173101)
    local GemDam = 1 + GemValue / 100000
    damChangePer = (damChangePer + Agi / 30) * GemDam
  end
  local Pistol = 1
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  if skillID == 2224 then
    damChangePer = (damChangePer + Agi / 20) * GemDam_wm
    Rune = 1 + Num2 * 0.05
    if srcUser:HasBuffID(45000) then
      Pistol = 1 + RefineLv * 0.01
    end
    if srcUser:HasBuffID(45010) then
      Pistol = 1 + RefineLv * 0.02
    end
  end
  if skillID == 2203 then
    Rune = 1 + Num1 * 0.06
    DefReduc = 1 - (1 - DefReduc) * (1 - Num4 * 0.2)
  end
  if skillID == 2241 then
    local skilllv_wm = srcUser:GetLernedSkillLevel(2224)
    local skilllv_sl = srcUser:GetLernedSkillLevel(2241)
    damChangePer = (0.5 * skilllv_wm + 5 + Agi / 20) * (0.3 + skilllv_sl * 0.01) * GemDam_wm
    Rune = 1 + Num2 * 0.05
    if srcUser:HasBuffID(45000) then
      Pistol = 1 + RefineLv * 0.01
    end
    if srcUser:HasBuffID(45010) then
      Pistol = 1 + RefineLv * 0.02
    end
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Rune * Pistol
  local skilllv = srcUser:GetLernedSkillLevel(2240)
  local DoubleRate = skilllv * 3
  if srcUser:HasBuffID(90004654) then
    DoubleRate = DoubleRate + 20
  end
  if CommonFun.IsInRate(DoubleRate, srcUser:GetRandom()) then
    if srcUser.isServerCall then
      srcUser:AddBuff(133660, srcUser:GetGuid())
    end
    return A * 2, CommonFun.DamageType.Crit
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_17303(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Luk2 = targetUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AttrEffect2 = srcUser:GetProperty("AttrEffect")
  local bits2 = CommonFun.getBits(AttrEffect2)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Dex * 2 + math.floor(Dex * Dex / 100) + math.floor(Str / 5) + math.floor(Luk / 5)
  local skilllv = srcUser:GetLernedSkillLevel(2206)
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local Magic = 0
  local Num4 = srcUser:GetRunePoint(173015)
  if 0 < skilllv then
    Magic = MAtk * (1 + MAtkPer) * (math.min(skilllv, 10) * 0.05 + Num4 * 0.03)
  end
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk + Magic) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local damChangePer = damageParam.damChangePer
  local Rune = 1
  local Num1 = srcUser:GetRunePoint(173018)
  local Num2 = srcUser:GetRunePoint(173035)
  local targetid = targetUser:GetGuid()
  local distance = srcUser:GetDistance(targetid)
  local dis_ratio = 1
  local Num3 = srcUser:GetRunePoint(173031)
  if 0 < Num3 and 1 <= distance then
    dis_ratio = 1 + Num3 * 0.01 * math.floor(distance)
  end
  local Rifle = 1
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2243 then
    local skilllv1 = srcUser:GetLernedSkillLevel(2227)
    local skilllv2 = srcUser:GetLernedSkillLevel(2243)
    local DefParam = Def2 * (1 + DefPer2) / 500
    local ChantTime = srcUser:GetCurChantTime()
    local skilllv_luk = srcUser:GetLernedSkillLevel(2264)
    AtkFinal = AtkFinal + skilllv_luk * Luk * 3
    if srcUser:HasBuffID(45040) then
      Rifle = 1 + RefineLv * 0.01
    end
    if srcUser:HasBuffID(45050) then
      Rifle = 1 + RefineLv * 0.02
    end
    if srcUser:HasBuffID(90004674) then
      Rifle = Rifle + 0.15
    end
    local mapid, maptype = srcUser:GetMapInfo()
    if (maptype == 2 or maptype == 4) and 3000 <= ChantTime then
      local skilllv3 = srcUser:GetLernedSkillLevel(2263)
      local KillRate = (Luk - Luk2) * skilllv3 * 0.01
      if srcUser:HasBuffID(21730040) and srcUser:HasBuffID(133769) then
        KillRate = KillRate + 5
      end
      if srcUser:HasBuffID(45264) or srcUser:HasBuffID(45274) or srcUser:HasBuffID(47364) then
        KillRate = KillRate + 7
      end
      if srcUser:HasBuffID(45265) or srcUser:HasBuffID(45275) then
        KillRate = KillRate * 1.77
      end
    end
    Rune = 1 + Num2 * 0.05
    damChangePer = ((skilllv1 * 0.6 + 12) * (1 + skilllv2 * 0.03) * Rune * Rifle + DefParam) * (1 + math.floor(ChantTime / 1000) * 0.5)
    Rune = 1
    Rifle = 1
    if 4900 <= ChantTime then
      DefReduc = 1
    end
  end
  if skillID == 2205 then
    local GemValue = srcUser:GetGemValue(173151)
    local GemDam = 1 + GemValue / 100000
    Rune = (1 + Num1 * 0.06) * GemDam
  end
  if skillID == 2227 then
    Rune = 1 + Num2 * 0.05
    if srcUser:HasBuffID(45040) then
      Rifle = 1 + RefineLv * 0.01
    end
    if srcUser:HasBuffID(45050) then
      Rifle = 1 + RefineLv * 0.02
    end
    if srcUser:HasBuffID(90004674) then
      Rifle = Rifle + 0.15
    end
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Rune * dis_ratio * Rifle
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_17304(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Dex = srcUser:GetProperty("Dex")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local grenade = 0
  local Rune = 1
  local Num1 = srcUser:GetRunePoint(173012)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2207 then
    local skilllv = srcUser:GetLernedSkillLevel(2207)
    grenade = Dex * (20 + skilllv * 3)
    local GemValue = srcUser:GetGemValue(173121)
    local GemDam = 1 + GemValue / 100000
    Rune = (1 + Num1 * 0.05) * GemDam
  end
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk + grenade) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam) * Rune
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_18301(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local RangeDam = srcUser:GetProperty("RangeDam")
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = 1
  local skilllv_tx = srcUser:GetLernedSkillLevel(2325)
  if 0 < skilllv_tx then
    bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  end
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2 * bodyparam
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local skilllv_xl = srcUser:GetLernedSkillLevel(2303)
  local Num1 = srcUser:GetRunePoint(183014)
  local Num2 = srcUser:GetRunePoint(183015)
  local RealDam = (Luk + Num1 * 10) * skilllv_xl * 20 * (1 + Num2 * 0.05)
  local SoulDam = 1
  local skilllv_soul = srcUser:GetLernedSkillLevel(2330)
  if targetUser:GetBuffEffectByType("PositiveSoul") or targetUser:GetBuffEffectByType("NegativeSoul") then
    SoulDam = 1 + skilllv_soul * 0.06
  end
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2301 then
    local count = params.hitedCount
    local Num = srcUser:GetRunePoint(183009)
    local GemValue = srcUser:GetGemValue(183161)
    damChangePer = damChangePer * (1 + count * 0.5) * (1 + Num * 0.1) * (1 + GemValue / 100000)
  end
  if skillID == 2344 then
    local skilllv_he = srcUser:GetLernedSkillLevel(2365)
    damChangePer = damChangePer * (1 + skilllv_he * 0.05)
  end
  if skillID == 2320 then
    local Num = srcUser:GetRunePoint(183034)
    local GemValue = srcUser:GetGemValue(183101)
    damChangePer = damChangePer * (1 + Num * 0.06) * (1 + GemValue / 100000)
  end
  local A = (((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer + RealDam) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam) * SoulDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_18302(srcUser, targetUser, params, damageParam, logger)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = 1
  local skilllv_tx = srcUser:GetLernedSkillLevel(2325)
  if 0 < skilllv_tx then
    bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  end
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2 * bodyparam
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local skilllv_xl = srcUser:GetLernedSkillLevel(2303)
  local Num1 = srcUser:GetRunePoint(183014)
  local Num2 = srcUser:GetRunePoint(183015)
  local RealDam = (Luk + Num1 * 10) * skilllv_xl * 20 * (1 + Num2 * 0.05)
  local SoulDam = 1
  local skilllv_soul = srcUser:GetLernedSkillLevel(2330)
  if targetUser:GetBuffEffectByType("PositiveSoul") or targetUser:GetBuffEffectByType("NegativeSoul") then
    SoulDam = 1 + skilllv_soul * 0.06
  end
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2323 then
    if nil ~= CommonFun.Shape and CommonFun.Shape.M == targetUser.shape and srcUser.isServerCall then
      srcUser:AddBuff(135080, targetUser:GetGuid())
      srcUser:AddBuff(135340, targetUser:GetGuid())
    end
    local Num = srcUser:GetRunePoint(183026)
    damChangePer = damChangePer * (1 + Num * 0.05)
  end
  if skillID == 2343 then
    local skilllv_asd = srcUser:GetLernedSkillLevel(2323)
    local skilllv_asm = srcUser:GetLernedSkillLevel(2343)
    local skilllv_s = srcUser:GetLernedSkillLevel(2363)
    local skilllv_l = srcUser:GetLernedSkillLevel(2364)
    local ShapeDam = 1
    if nil ~= CommonFun.Shape then
      if CommonFun.Shape.S == targetUser.shape and 0 < skilllv_s then
        if srcUser.isServerCall then
          srcUser:AddBuff(135120, targetUser:GetGuid())
        end
      elseif CommonFun.Shape.L == targetUser.shape then
        local GemValue_l = srcUser:GetGemValue(183091)
        ShapeDam = 1 + skilllv_l * 0.05 + GemValue_l / 100000
      end
    end
    local Num = srcUser:GetRunePoint(183026)
    local LukRatio = Luk / 500
    if srcUser:HasBuffID(21830130) then
      LukRatio = Luk / 300
    end
    damChangePer = (skilllv_asd * 1.1 + 6) * (1 + 0.03 * skilllv_asm) * (1 + LukRatio) * ShapeDam * (1 + Num * 0.05)
  end
  local A = (((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * damChangePer + RealDam) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * SoulDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_19301(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local Int = srcUser:GetProperty("Int")
  local Agi = srcUser:GetProperty("Agi")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 5 * Str
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local MoveSpd = srcUser:GetProperty("MoveSpd")
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2447 or skillID == 2448 then
    local skilllv = srcUser:GetLernedSkillLevel(2445)
    local Value = srcUser:GetGemValue(193071)
    damChangePer = (1.5 * skilllv + 5) * (1 + Value / 100000)
  end
  local Value_Agi = srcUser:GetGemValue(193031)
  local Agi_Dam = 1 + math.floor(Agi / 10) * Value_Agi / 100000
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local skilllv_rh = srcUser:GetLernedSkillLevel(2426)
  if srcUser:HasBuffID(136100) and targetUser:GetNpcID() ~= 0 and skillID ~= 2400 then
    A = A * (1 + skilllv_rh * 0.06)
  end
  if skillID == 2408 then
    local MoveRatio = 1 + (math.max(MoveSpd, 1) - 1)
    local Num = srcUser:GetRunePoint(193004)
    local Value = srcUser:GetGemValue(193141)
    A = A * MoveRatio * (1 + Num * 0.05) * (1 + Value / 100000) * Agi_Dam
  end
  if skillID == 2410 then
    local Num = srcUser:GetRunePoint(193008)
    local Value = srcUser:GetGemValue(193111)
    A = A * (1 + Value / 100000) * Agi_Dam
    if 1.5 <= MoveSpd then
      A = A * (1 + Num * 0.07)
    end
  end
  if skillID == 2412 then
    local Num = srcUser:GetRunePoint(193010)
    A = A * Agi_Dam
    if bits[CommonFun.StateEffect.Dizzy] == 1 then
      A = A * (1 + Num * 0.07)
    end
  end
  if skillID == 2430 then
    local index = params.hitedIndex
    local Num = srcUser:GetRunePoint(193029)
    local RuneDamage = Num * 0.03 + 1
    local JumpRatio = math.pow(RuneDamage, index)
    A = A * JumpRatio * Agi_Dam
  end
  if skillID == 2428 then
    local Num = srcUser:GetRunePoint(193032)
    A = A * (1 + Num * 0.05) * Agi_Dam
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_19302(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Vit = srcUser:GetProperty("Vit")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local skilllv_rh = srcUser:GetLernedSkillLevel(2426)
  if srcUser:HasBuffID(136100) and targetUser:GetNpcID() ~= 0 and skillID ~= 2400 then
    A = A * (1 + skilllv_rh * 0.06)
  end
  if skillID == 2425 then
    local Num = srcUser:GetRunePoint(193024)
    local Value = srcUser:GetGemValue(193041)
    A = A * (1 + Num * 0.06) * (1 + Value / 100000)
  end
  local Grid = srcUser:GetTimeDiskGrid()
  if skillID == 2438 or skillID == 2439 or skillID == 2440 or skillID == 2441 then
    local Fifth = 0
    if srcUser:HasBuffID(90004714) then
      Fifth = 0.05
    end
    if Grid == 1 or Grid == 5 then
      A = A * (1.5 + Fifth)
    elseif Grid == 2 or Grid == 4 then
      A = A * (2 + Fifth * 2)
    elseif Grid == 3 then
      A = A * (3 + Fifth * 4)
    end
  end
  if skillID == 2439 then
    local Point = math.min(math.floor(Vit / 3), math.floor(Str / 3), math.floor(Dex / 3)) / 100
    local skilllv = srcUser:GetLernedSkillLevel(2453)
    local Ratio = 1
    if Grid == 3 and 0 < skilllv then
      Ratio = 1 + skilllv * 0.05
    end
    A = A * (1 + Point) * Ratio
  end
  if skillID == 2441 then
    local Point = math.min(math.floor(Vit / 3), math.floor(Str / 3), math.floor(Dex / 3)) / 100
    A = A * (1 + Point)
  end
  if skillID == 2440 then
    local Hiding = srcUser:GetProperty("Hiding")
    local skilllv = srcUser:GetLernedSkillLevel(2454)
    if Hiding == 1 and 0 < skilllv then
      A = A * (skilllv * 0.05 + 1)
    end
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_60501(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Vit = srcUser:GetProperty("Vit")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local MRefine = srcUser:GetProperty("MRefine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) * elementparam * elementparam2 + BaseMAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local guid = srcUser:GetGuid()
  local Debuff_Layer = targetUser:GetBuffLayerByIDAndFromID(136480, guid)
  local Debuff_Dam = math.pow(2, Debuff_Layer)
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if skillID == 2503 or skillID == 2523 then
    A = ((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine + MRefine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  end
  if skillID == 2515 or skillID == 2524 then
    local skilllv_2 = srcUser:GetLernedSkillLevel(2504)
    damChangePer = skilllv_2 * 2 + 14
    A = (((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine + MRefine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Debuff_Dam
  end
  if skillID == 2516 or skillID == 2525 then
    local skilllv_3 = srcUser:GetLernedSkillLevel(2505)
    damChangePer = skilllv_3 * 2 + 18
    A = (((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine + MRefine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Debuff_Dam
  end
  if skillID == 2517 or skillID == 2526 then
    local skilllv_4 = srcUser:GetLernedSkillLevel(2506)
    damChangePer = skilllv_4 * 2 + 22
    A = (((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine + MRefine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * Debuff_Dam
    local count = params.hitedCount
    if count == 1 then
      local GemValue = srcUser:GetGemValue(201101)
      local GemDam = 1 + GemValue / 100000
      A = A * GemDam
    end
  end
  if skillID == 2511 then
    local GemValue = srcUser:GetGemValue(201151)
    local skilllv = srcUser:GetLernedSkillLevel(2502)
    local Num = srcUser:GetBuffLayer(136400)
    if srcUser:HasBuffID(90004724) then
      A = A * 1.15
    end
    if skilllv < 4 and GemValue ~= 0 then
      A = A * (1 + (100 - Num) * GemValue / 100000)
    elseif 4 <= skilllv and GemValue ~= 0 then
      A = A * (1 + (150 - Num) * GemValue / 100000)
    end
  end
  if skillID == 2522 then
    local skilllv_zny = srcUser:GetLernedSkillLevel(2511)
    damChangePer = 16 + 2 * skilllv_zny
    A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
    local GemValue = srcUser:GetGemValue(201151)
    local skilllv = srcUser:GetLernedSkillLevel(2502)
    local Num = srcUser:GetBuffLayer(136400)
    if skilllv < 4 and GemValue ~= 0 then
      A = A * (1 + (100 - Num) * GemValue / 100000)
    elseif 4 <= skilllv and GemValue ~= 0 then
      A = A * (1 + (150 - Num) * GemValue / 100000)
    end
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_61501(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local skilllv = srcUser:GetLernedSkillLevel(2538)
  local Sp = srcUser:GetProperty("Sp")
  local MaxSp = srcUser:GetProperty("MaxSp")
  local Ratio = 1
  if 0 < skilllv then
    Ratio = 1 + Sp / MaxSp * skilllv * 0.1
  end
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2543 then
    local skilllv_bd = srcUser:GetLernedSkillLevel(2532)
    damChangePer = skilllv_bd * 3.2 + 10
  end
  local GemValue = srcUser:GetGemValue(200101)
  local GemDam = 1 + math.floor(Vit / 10) * GemValue / 100000
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam) * Ratio * GemDam
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_63501(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local Str = srcUser:GetProperty("Str")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk + Str * Vit / 5) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local skilllv_fsp = srcUser:GetLernedSkillLevel(2592)
  local skilllv_lx = srcUser:GetLernedSkillLevel(2598)
  local skilllv_lgp = srcUser:GetLernedSkillLevel(2600)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2592 and damageParam.elementparam == 1 and 1 <= skilllv_lgp and srcUser:HasBuffID(136910) then
    damChangePer = (skilllv_fsp * 2.4 + 12) * skilllv_lgp * 0.1
  end
  if skillID == 2598 and damageParam.elementparam == 4 then
    local GemValue = srcUser:GetGemValue(203101)
    local GemDam = 1 + GemValue / 100000
    local Fifth = 1
    local MaxSp = srcUser:GetProperty("MaxSp")
    local Sp = srcUser:GetProperty("Sp")
    if srcUser:HasBuffID(90004734) and srcUser:HasBuffID(136910) then
      Fifth = Fifth + 0.15 * Sp / MaxSp
    end
    damChangePer = (skilllv_fsp * 2.4 + 12) * (skilllv_lx * 0.02 + 0.3) * GemDam * Fifth
  end
  if skillID == 2598 and damageParam.elementparam == 1 and 1 <= skilllv_lgp and srcUser:HasBuffID(136910) then
    local GemValue = srcUser:GetGemValue(203101)
    local GemDam = 1 + GemValue / 100000
    local Fifth = 1
    local MaxSp = srcUser:GetProperty("MaxSp")
    local Sp = srcUser:GetProperty("Sp")
    if srcUser:HasBuffID(90004734) and srcUser:HasBuffID(136910) then
      Fifth = Fifth + 0.15 * Sp / MaxSp
    end
    damChangePer = (skilllv_fsp * 2.4 + 12) * (skilllv_lx * 0.02 + 0.3) * skilllv_lgp * 0.1 * GemDam * Fifth
  end
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 * (1 + RangeDam) - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  if targetUser:GetNpcID() ~= 0 and (skillID == 2592 or skillID == 2598) then
    A = A * (1 + skilllv_fsp * 0.1)
  end
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_63511(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local AttrEffect = targetUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local LongRangeDamReduc2 = targetUser:GetProperty("LongRangeDamReduc")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = (((Atk - BaseAtk) * (1 + AtkPer) + Vit * Int / 5) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local MaxSp = srcUser:GetProperty("MaxSp")
  local Sp = srcUser:GetProperty("Sp")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - LongRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_100501(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local Int = srcUser:GetProperty("Int")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 5 * Str
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local skilllv_tx = srcUser:GetLernedSkillLevel(2561)
  local Str2 = targetUser:GetProperty("Str")
  local B = (Str + Str2) * (skilllv_tx * 0.01 + 0.03) * AtkFinal * DefReduc * (1 - DamReduc2) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2)
  local Total = A + math.max(B, 0)
  if Total <= 1 then
    return 1
  end
  return Total
end

function CommonFun.calcDamage_100502(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Vit = srcUser:GetProperty("Vit")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local MRefine = srcUser:GetProperty("MRefine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local MoveSpd = srcUser:GetProperty("MoveSpd")
  local MoveSpdRatio = 1
  local skilllv_cs = srcUser:GetLernedSkillLevel(2570)
  MoveSpdRatio = 1 + (math.max(MoveSpd, 1) - 1) * 0.075 * skilllv_cs
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2563 then
    damChangePer = damChangePer + Str / 5
    DefReduc = 1
  end
  if skillID == 2572 then
    local skilllv_rz = srcUser:GetLernedSkillLevel(2563)
    damChangePer = skilllv_rz * 4 + 10 + Str / 5
    DefReduc = 1
  end
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local skilllv_tx = srcUser:GetLernedSkillLevel(2561)
  local Str2 = targetUser:GetProperty("Str")
  local B = (Str + Str2) * (skilllv_tx * 0.01 + 0.03) * AtkFinal * DefReduc * (1 - DamReduc2) * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2)
  if skillID == 2563 or skillID == 2572 then
    B = B * 2
  end
  local Total = (A + math.max(B, 0)) * MoveSpdRatio
  if Total <= 1 then
    return 1
  end
  return Total
end

function CommonFun.calcDamage_100503(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local Int = srcUser:GetProperty("Int")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local NormalAtk = srcUser:GetProperty("NormalAtk")
  NormalAtk = NormalAtk + 5 * Str
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk + NormalAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local NormalAtkDam = srcUser:GetProperty("NormalAtkDam")
  local NormalEnd = 1 + NormalAtkDam
  NormalEnd = math.max(NormalEnd, 0.1)
  local taka = 1
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(47990) then
    taka = taka + RefineLv * 0.02
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * NormalEnd * taka
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_64501(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local Luk = srcUser:GetProperty("Luk")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local Str2 = targetUser:GetProperty("Str")
  local Agi2 = targetUser:GetProperty("Agi")
  local Dex2 = targetUser:GetProperty("Dex")
  local Luk2 = targetUser:GetProperty("Luk")
  local skilllv_bt = srcUser:GetLernedSkillLevel(2622)
  local Luk_Ratio = 1
  if math.min(Str2, Agi2, Vit2, Int2, Dex2, Luk2) == 0 and 0 < skilllv_bt then
    Luk_Ratio = 1 + Luk / 500 * skilllv_bt * 0.1
  end
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2615 or skillID == 2633 then
    local targetid = targetUser:GetGuid()
    local BasicValue = srcUser:GetTarInterferenceValue(targetid)
    damChangePer = damChangePer * (1 + BasicValue / 10 * 0.04)
  end
  if skillID == 2637 or skillID == 2639 then
    local skilllv_jem = srcUser:GetLernedSkillLevel(2612)
    local skilllv_kq = srcUser:GetLernedSkillLevel(2620)
    damChangePer = (3 + skilllv_jem * 1.3) * (1 + skilllv_kq * 0.03)
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * Luk_Ratio
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_65501(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Vit = srcUser:GetProperty("Vit")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local MRefine = srcUser:GetProperty("MRefine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local skilllv_zeny = srcUser:GetLernedSkillLevel(2661)
  local zeny_ratio = 1
  local zeny_num = srcUser:GetZenyNum()
  if 0 < skilllv_zeny and targetUser:GetNpcID() == 0 then
    zeny_ratio = math.min(zeny_num / 100000000, skilllv_zeny * 0.05) + 1
  elseif 0 < skilllv_zeny and targetUser:GetNpcID() ~= 0 then
    zeny_ratio = math.min(zeny_num / 100000000, skilllv_zeny * 0.3) + 1
  end
  local GemValue = srcUser:GetGemValue(205101)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local RefineLv1 = srcUser:GetEquipedRefineLv(1)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local skilllv_ph = srcUser:GetLernedSkillLevel(2652)
  local skilllv_zz = srcUser:GetLernedSkillLevel(2654)
  if skillID == 2652 then
    damChangePer = damChangePer * (1 + RefineLv * GemValue / 100000)
  end
  if skillID == 2654 then
    damChangePer = (skilllv_ph + 10) * (0.8 + 0.04 * skilllv_zz) * (1 + RefineLv * GemValue / 100000)
  end
  if skillID == 2653 then
    damChangePer = damChangePer * (1 + RefineLv1 / 10)
  end
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)) * zeny_ratio
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_66501(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Vit = srcUser:GetProperty("Vit")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local MRefine = srcUser:GetProperty("MRefine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local damChangePer = damageParam.damChangePer
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) * elementparam * elementparam2 + BaseMAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local MoveSpd = srcUser:GetProperty("MoveSpd")
  local GemValue = srcUser:GetGemValue(206101)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if skillID == 2672 and 2 < MoveSpd then
    damChangePer = damChangePer * (1 + GemValue / 100000)
  end
  if skillID == 2679 then
    local skilllv_cz = srcUser:GetLernedSkillLevel(2673)
    damChangePer = (10.5 + 2.3 * skilllv_cz) * 1.5
  end
  if skillID == 2684 then
    local skilllv_yr = srcUser:GetLernedSkillLevel(2672)
    local skilllv_cj = srcUser:GetLernedSkillLevel(2680)
    damChangePer = (4 + 1.1 * skilllv_yr) * (3 + skilllv_cj)
    if 2 < MoveSpd then
      damChangePer = damChangePer * (1 + GemValue / 100000)
    end
  end
  local A = ((AtkFinal + MAtkFinal) * DefReduc * (1 - DamReduc2) + Refine + MRefine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcDamage_67501(srcUser, targetUser, params, damageParam, logger)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local srcAtkElement = CommonFun.GetUserAtkAttr(srcUser, params, damageParam)
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local damChangePer = damageParam.damChangePer
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * raceparam * bossparam * bossparam2
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  if damageParam.elementparam == 10 then
    local skilllv_ds = srcUser:GetLernedSkillLevel(2713)
    damChangePer = skilllv_ds
  end
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * damChangePer * (1 + MDamIncrease) * CommonFun.calcMagicElement(srcUser, targetUser, params, damageParam) * elementparam2 - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + RangeDam)
  if skillID == 2718 then
    local Num = srcUser:GetBuffLayer(137570)
    local count = params.hitedCount
    if count == 1 then
      A = A * (1 + Num * 0.5)
    end
  end
  if skillID == 2706 then
    local GemValue = srcUser:GetGemValue(207141)
    A = A * (1 + GemValue / 100000)
  end
  if A <= 1 then
    return 1
  end
  if srcUser:HasBuffID(137540) then
    local skilllv_an = srcUser:GetLernedSkillLevel(2704)
    return A * (1 + skilllv_an * 0.2), CommonFun.DamageType.Crit
  end
  return A
end

function CommonFun.calcDamage_68501(srcUser, targetUser, params, damageParam, logger)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local Vit = srcUser:GetProperty("Vit")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local Hp2 = targetUser:GetProperty("Hp")
  local MaxHp2 = targetUser:GetProperty("MaxHp")
  local damChangePer = damageParam.damChangePer
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local raceparam = CommonFun.CalcRaceParam(srcUser, targetUser, params, damageParam, logger)
  local bodyparam = CommonFun.CalcBodyParam(srcUser, targetUser, params, damageParam, logger)
  local elementparam = CommonFun.CalcElementParam(srcUser, targetUser, params, damageParam, logger)
  local bossparam = CommonFun.CalcBossParam(srcUser, targetUser, params, damageParam, logger)
  local raceparam2 = CommonFun.CalcRaceParam2(srcUser, targetUser, params, damageParam, logger)
  local bodyparam2 = CommonFun.CalcBodyParam2(srcUser, targetUser, params, damageParam, logger)
  local elementparam2 = CommonFun.CalcElementParam2(srcUser, targetUser, params, damageParam, logger)
  local bossparam2 = CommonFun.CalcBossParam2(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local ShortRangeDamReduc2 = targetUser:GetProperty("ShortRangeDamReduc")
  local skillID, skillLevel = CommonFun.UnmergeSkillID(params.skillIDAndLevel)
  local MaxSp = targetUser:GetProperty("MaxSp")
  if skillID == 2734 then
    AtkFinal = (((Atk - BaseAtk) * (1 + AtkPer) + MaxSp) * CommonFun.ShapeCorrection(srcUser, targetUser) * bodyparam * elementparam * elementparam2 + BaseAtk) * raceparam * bossparam * bossparam2
  end
  if skillID == 2731 or skillID == 2732 or skillID == 2733 or skillID == 2734 or skillID == 2746 then
    local skilllv_bd = srcUser:GetLernedSkillLevel(2745)
    if 0 < skilllv_bd then
      damChangePer = (damChangePer + skilllv_bd * 0.2) * (1 + Vit / 800)
    end
  end
  local Num = srcUser:GetBuffLayer(137710)
  if skillID == 2740 then
    local GemValue = srcUser:GetGemValue(208121)
    damChangePer = damChangePer * (1 + Num * 0.1)
    if srcUser:HasBuffID(137700) then
      damChangePer = damChangePer * (1 + GemValue / 100000)
    end
  end
  local Hp = srcUser:GetProperty("Hp")
  local MaxHp = srcUser:GetProperty("MaxHp")
  if skillID == 2741 then
    local mapid, maptype = srcUser:GetMapInfo()
    local pvpRatio = 1
    if maptype == 2 or maptype == 4 then
      pvpRatio = 0.25
    end
    damChangePer = (damChangePer + Hp * pvpRatio / 50000) * (1 + Num * 0.1)
  end
  local tx_lv = srcUser:GetLernedSkillLevel(2730)
  local NormalAtkDam = srcUser:GetProperty("NormalAtkDam")
  local NormalEnd = 1 + NormalAtkDam
  if 7 <= tx_lv then
    damChangePer = damChangePer * NormalEnd
  end
  if srcUser:HasBuffID(137720) then
    local xm_lv = srcUser:GetLernedSkillLevel(2737)
    if 0.6 <= Hp / MaxHp then
      damChangePer = damChangePer * (1 + 0.05 * xm_lv)
    end
  end
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
  local CriDamPer = srcUser:GetProperty("CriDamPer")
  local CriDefPer2 = targetUser:GetProperty("CriDefPer")
  local fushou = srcUser:GetEquipTypeByPos(1)
  local wuqi = srcUser:GetEquipTypeByPos(7)
  local WeaponNum = 0
  if fushou == 180 or fushou == 250 then
    WeaponNum = WeaponNum + 1
  end
  if wuqi == 180 or wuqi == 250 then
    WeaponNum = WeaponNum + 1
  end
  local Rate = (7 + 4 * tx_lv) * WeaponNum
  if 4 <= tx_lv then
    Rate = (7 + 4 * tx_lv) * WeaponNum + Num * 3
  end
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    A = (AtkFinal * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease - ShortRangeDamReduc2) - Vit2 * (1 + VitPer2)
    return math.max(A * (1.5 + CriDamPer - CriDefPer2), 1), CommonFun.DamageType.Crit
  end
  if A <= 1 then
    return 1
  end
  return A
end

CommonFun.CalcDamageFuncs = {
  [17] = CommonFun.calcDamage_17,
  [18] = CommonFun.calcDamage_18,
  [19] = CommonFun.calcDamage_19,
  [20] = CommonFun.calcDamage_20,
  [21] = CommonFun.calcDamage_21,
  [22] = CommonFun.calcDamage_22,
  [23] = CommonFun.calcDamage_23,
  [24] = CommonFun.calcDamage_24,
  [25] = CommonFun.calcDamage_25,
  [26] = CommonFun.calcDamage_26,
  [27] = CommonFun.calcDamage_27,
  [28] = CommonFun.calcDamage_28,
  [30] = CommonFun.calcDamage_30,
  [31] = CommonFun.calcDamage_31,
  [32] = CommonFun.calcDamage_32,
  [33] = CommonFun.calcDamage_33,
  [34] = CommonFun.calcDamage_34,
  [35] = CommonFun.calcDamage_35,
  [36] = CommonFun.calcDamage_36,
  [37] = CommonFun.calcDamage_37,
  [38] = CommonFun.calcDamage_38,
  [39] = CommonFun.calcDamage_39,
  [40] = CommonFun.calcDamage_40,
  [41] = CommonFun.calcDamage_41,
  [42] = CommonFun.calcDamage_42,
  [43] = CommonFun.calcDamage_43,
  [50] = CommonFun.calcDamage_50,
  [60] = CommonFun.calcDamage_60,
  [80] = CommonFun.calcDamage_80,
  [100] = CommonFun.calcDamage_100,
  [101] = CommonFun.calcDamage_101,
  [120] = CommonFun.calcDamage_120,
  [121] = CommonFun.calcDamage_121,
  [122] = CommonFun.calcDamage_122,
  [123] = CommonFun.calcDamage_123,
  [124] = CommonFun.calcDamage_124,
  [125] = CommonFun.calcDamage_125,
  [126] = CommonFun.calcDamage_126,
  [127] = CommonFun.calcDamage_127,
  [1101] = CommonFun.calcDamage_1101,
  [1102] = CommonFun.calcDamage_1102,
  [1103] = CommonFun.calcDamage_1103,
  [1201] = CommonFun.calcDamage_1201,
  [1202] = CommonFun.calcDamage_1202,
  [1203] = CommonFun.calcDamage_1203,
  [1204] = CommonFun.calcDamage_1204,
  [1205] = CommonFun.calcDamage_1205,
  [1206] = CommonFun.calcDamage_1206,
  [1207] = CommonFun.calcDamage_1207,
  [1301] = CommonFun.calcDamage_1301,
  [1302] = CommonFun.calcDamage_1302,
  [1401] = CommonFun.calcDamage_1401,
  [1402] = CommonFun.calcDamage_1402,
  [1501] = CommonFun.calcDamage_1501,
  [2103] = CommonFun.calcDamage_2103,
  [2201] = CommonFun.calcDamage_2201,
  [2301] = CommonFun.calcDamage_2301,
  [2302] = CommonFun.calcDamage_2302,
  [2303] = CommonFun.calcDamage_2303,
  [2304] = CommonFun.calcDamage_2304,
  [2305] = CommonFun.calcDamage_2305,
  [2306] = CommonFun.calcDamage_2306,
  [2307] = CommonFun.calcDamage_2307,
  [3101] = CommonFun.calcDamage_3101,
  [3102] = CommonFun.calcDamage_3102,
  [3103] = CommonFun.calcDamage_3103,
  [3104] = CommonFun.calcDamage_3104,
  [3105] = CommonFun.calcDamage_3105,
  [3106] = CommonFun.calcDamage_3106,
  [3201] = CommonFun.calcDamage_3201,
  [3202] = CommonFun.calcDamage_3202,
  [3301] = CommonFun.calcDamage_3301,
  [3401] = CommonFun.calcDamage_3401,
  [3402] = CommonFun.calcDamage_3402,
  [3501] = CommonFun.calcDamage_3501,
  [3502] = CommonFun.calcDamage_3502,
  [4101] = CommonFun.calcDamage_4101,
  [4102] = CommonFun.calcDamage_4102,
  [4103] = CommonFun.calcDamage_4103,
  [4201] = CommonFun.calcDamage_4201,
  [4202] = CommonFun.calcDamage_4202,
  [4203] = CommonFun.calcDamage_4203,
  [4301] = CommonFun.calcDamage_4301,
  [4401] = CommonFun.calcDamage_4401,
  [4501] = CommonFun.calcDamage_4501,
  [4502] = CommonFun.calcDamage_4502,
  [4503] = CommonFun.calcDamage_4503,
  [5101] = CommonFun.calcDamage_5101,
  [5102] = CommonFun.calcDamage_5102,
  [5103] = CommonFun.calcDamage_5103,
  [5104] = CommonFun.calcDamage_5104,
  [5105] = CommonFun.calcDamage_5105,
  [5106] = CommonFun.calcDamage_5106,
  [5401] = CommonFun.calcDamage_5401,
  [5402] = CommonFun.calcDamage_5402,
  [5403] = CommonFun.calcDamage_5403,
  [6101] = CommonFun.calcDamage_6101,
  [6102] = CommonFun.calcDamage_6102,
  [6103] = CommonFun.calcDamage_6103,
  [6104] = CommonFun.calcDamage_6104,
  [6105] = CommonFun.calcDamage_6105,
  [6106] = CommonFun.calcDamage_6106,
  [6301] = CommonFun.calcDamage_6301,
  [6302] = CommonFun.calcDamage_6302,
  [6401] = CommonFun.calcDamage_6401,
  [6402] = CommonFun.calcDamage_6402,
  [6403] = CommonFun.calcDamage_6403,
  [6404] = CommonFun.calcDamage_6404,
  [6405] = CommonFun.calcDamage_6405,
  [7201] = CommonFun.calcDamage_7201,
  [7202] = CommonFun.calcDamage_7202,
  [7203] = CommonFun.calcDamage_7203,
  [7204] = CommonFun.calcDamage_7204,
  [7205] = CommonFun.calcDamage_7205,
  [7401] = CommonFun.calcDamage_7401,
  [7402] = CommonFun.calcDamage_7402,
  [7501] = CommonFun.calcDamage_7501,
  [7502] = CommonFun.calcDamage_7502,
  [7503] = CommonFun.calcDamage_7503,
  [8000] = CommonFun.calcDamage_8000,
  [8001] = CommonFun.calcDamage_8001,
  [8002] = CommonFun.calcDamage_8002,
  [8003] = CommonFun.calcDamage_8003,
  [8004] = CommonFun.calcDamage_8004,
  [8005] = CommonFun.calcDamage_8005,
  [8006] = CommonFun.calcDamage_8006,
  [8007] = CommonFun.calcDamage_8007,
  [8008] = CommonFun.calcDamage_8008,
  [8009] = CommonFun.calcDamage_8009,
  [8010] = CommonFun.calcDamage_8010,
  [8011] = CommonFun.calcDamage_8011,
  [8012] = CommonFun.calcDamage_8012,
  [8013] = CommonFun.calcDamage_8013,
  [8014] = CommonFun.calcDamage_8014,
  [8015] = CommonFun.calcDamage_8015,
  [8016] = CommonFun.calcDamage_8016,
  [8020] = CommonFun.calcDamage_8020,
  [8021] = CommonFun.calcDamage_8021,
  [8030] = CommonFun.calcDamage_8030,
  [8031] = CommonFun.calcDamage_8031,
  [8032] = CommonFun.calcDamage_8032,
  [8033] = CommonFun.calcDamage_8033,
  [8034] = CommonFun.calcDamage_8034,
  [8035] = CommonFun.calcDamage_8035,
  [8036] = CommonFun.calcDamage_8036,
  [8037] = CommonFun.calcDamage_8037,
  [8038] = CommonFun.calcDamage_8038,
  [8039] = CommonFun.calcDamage_8039,
  [8040] = CommonFun.calcDamage_8040,
  [8041] = CommonFun.calcDamage_8041,
  [8042] = CommonFun.calcDamage_8042,
  [8043] = CommonFun.calcDamage_8043,
  [8044] = CommonFun.calcDamage_8044,
  [8045] = CommonFun.calcDamage_8045,
  [8046] = CommonFun.calcDamage_8046,
  [8047] = CommonFun.calcDamage_8047,
  [8048] = CommonFun.calcDamage_8048,
  [8049] = CommonFun.calcDamage_8049,
  [8050] = CommonFun.calcDamage_8050,
  [8051] = CommonFun.calcDamage_8051,
  [8052] = CommonFun.calcDamage_8052,
  [8053] = CommonFun.calcDamage_8053,
  [8201] = CommonFun.calcDamage_8201,
  [8202] = CommonFun.calcDamage_8202,
  [8203] = CommonFun.calcDamage_8203,
  [8204] = CommonFun.calcDamage_8204,
  [8205] = CommonFun.calcDamage_8205,
  [9000] = CommonFun.calcDamage_9000,
  [9001] = CommonFun.calcDamage_9001,
  [9002] = CommonFun.calcDamage_9002,
  [9003] = CommonFun.calcDamage_9003,
  [9004] = CommonFun.calcDamage_9004,
  [9005] = CommonFun.calcDamage_9005,
  [9006] = CommonFun.calcDamage_9006,
  [9010] = CommonFun.calcDamage_9010,
  [9011] = CommonFun.calcDamage_9011,
  [9012] = CommonFun.calcDamage_9012,
  [9013] = CommonFun.calcDamage_9013,
  [9014] = CommonFun.calcDamage_9014,
  [9015] = CommonFun.calcDamage_9015,
  [9016] = CommonFun.calcDamage_9016,
  [9017] = CommonFun.calcDamage_9017,
  [9018] = CommonFun.calcDamage_9018,
  [9201] = CommonFun.calcDamage_9201,
  [9202] = CommonFun.calcDamage_9202,
  [9203] = CommonFun.calcDamage_9203,
  [9204] = CommonFun.calcDamage_9204,
  [9205] = CommonFun.calcDamage_9205,
  [9206] = CommonFun.calcDamage_9206,
  [9401] = CommonFun.calcDamage_9401,
  [10201] = CommonFun.calcDamage_10201,
  [11201] = CommonFun.calcDamage_11201,
  [11202] = CommonFun.calcDamage_11202,
  [11203] = CommonFun.calcDamage_11203,
  [11204] = CommonFun.calcDamage_11204,
  [11501] = CommonFun.calcDamage_11501,
  [12201] = CommonFun.calcDamage_12201,
  [12202] = CommonFun.calcDamage_12202,
  [12203] = CommonFun.calcDamage_12203,
  [12204] = CommonFun.calcDamage_12204,
  [12205] = CommonFun.calcDamage_12205,
  [12206] = CommonFun.calcDamage_12206,
  [12207] = CommonFun.calcDamage_12207,
  [12208] = CommonFun.calcDamage_12208,
  [12401] = CommonFun.calcDamage_12401,
  [12402] = CommonFun.calcDamage_12402,
  [12403] = CommonFun.calcDamage_12403,
  [12404] = CommonFun.calcDamage_12404,
  [12405] = CommonFun.calcDamage_12405,
  [12501] = CommonFun.calcDamage_12501,
  [13201] = CommonFun.calcDamage_13201,
  [13202] = CommonFun.calcDamage_13202,
  [13203] = CommonFun.calcDamage_13203,
  [13204] = CommonFun.calcDamage_13204,
  [13205] = CommonFun.calcDamage_13205,
  [13206] = CommonFun.calcDamage_13206,
  [13401] = CommonFun.calcDamage_13401,
  [13402] = CommonFun.calcDamage_13402,
  [13403] = CommonFun.calcDamage_13403,
  [14301] = CommonFun.calcDamage_14301,
  [14302] = CommonFun.calcDamage_14302,
  [14303] = CommonFun.calcDamage_14303,
  [14304] = CommonFun.calcDamage_14304,
  [15101] = CommonFun.calcDamage_15101,
  [15102] = CommonFun.calcDamage_15102,
  [15103] = CommonFun.calcDamage_15103,
  [15201] = CommonFun.calcDamage_15201,
  [15202] = CommonFun.calcDamage_15202,
  [15301] = CommonFun.calcDamage_15301,
  [15401] = CommonFun.calcDamage_15401,
  [16001] = CommonFun.calcDamage_16001,
  [16002] = CommonFun.calcDamage_16002,
  [16003] = CommonFun.calcDamage_16003,
  [16101] = CommonFun.calcDamage_16101,
  [16102] = CommonFun.calcDamage_16102,
  [16103] = CommonFun.calcDamage_16103,
  [16104] = CommonFun.calcDamage_16104,
  [16105] = CommonFun.calcDamage_16105,
  [16106] = CommonFun.calcDamage_16106,
  [16301] = CommonFun.calcDamage_16301,
  [16302] = CommonFun.calcDamage_16302,
  [16303] = CommonFun.calcDamage_16303,
  [16304] = CommonFun.calcDamage_16304,
  [16305] = CommonFun.calcDamage_16305,
  [16400] = CommonFun.calcDamage_16400,
  [16401] = CommonFun.calcDamage_16401,
  [16402] = CommonFun.calcDamage_16402,
  [16403] = CommonFun.calcDamage_16403,
  [16404] = CommonFun.calcDamage_16404,
  [17301] = CommonFun.calcDamage_17301,
  [17302] = CommonFun.calcDamage_17302,
  [17303] = CommonFun.calcDamage_17303,
  [17304] = CommonFun.calcDamage_17304,
  [18301] = CommonFun.calcDamage_18301,
  [18302] = CommonFun.calcDamage_18302,
  [19301] = CommonFun.calcDamage_19301,
  [19302] = CommonFun.calcDamage_19302,
  [60501] = CommonFun.calcDamage_60501,
  [61501] = CommonFun.calcDamage_61501,
  [63501] = CommonFun.calcDamage_63501,
  [63511] = CommonFun.calcDamage_63511,
  [64501] = CommonFun.calcDamage_64501,
  [65501] = CommonFun.calcDamage_65501,
  [66501] = CommonFun.calcDamage_66501,
  [67501] = CommonFun.calcDamage_67501,
  [68501] = CommonFun.calcDamage_68501,
  [100501] = CommonFun.calcDamage_100501,
  [100502] = CommonFun.calcDamage_100502,
  [100503] = CommonFun.calcDamage_100503
}

function CommonFun.calcOdds_1(srcUser)
  return 100
end

function CommonFun.calcOdds_2(srcUser, targetUser)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(126)
  if skilllv_1 <= 0 then
    return 0
  end
  local Hp = targetUser:GetProperty("Hp")
  local MaxHp = targetUser:GetProperty("MaxHp")
  local Num1 = srcUser:GetRunePoint(42001)
  local Num2 = srcUser:GetRunePoint(42002)
  local Num3 = srcUser:GetRunePoint(42003)
  local Num4 = srcUser:GetRunePoint(42004)
  local Num5 = srcUser:GetRunePoint(42005)
  local RuneDamage = Num1 * 2 + Num2 * 1 + Num3 * 1 + Num4 * 1 + Num5 * 2
  local skilllv_2 = srcUser:GetLernedSkillLevel(250)
  local Luk = srcUser:GetProperty("Luk")
  if srcUser:HasBuffID(117466) then
    return 0
  end
  if srcUser:HasBuffID(117419) then
    return 100
  end
  if skilllv_2 <= 5 and Hp <= MaxHp * 0.3 then
    return 5 + Luk / 3 + skilllv_2 * 6 + RuneDamage
  elseif 5 < skilllv_2 and Hp <= MaxHp * 0.5 then
    return 5 + Luk / 3 + 30 + RuneDamage
  end
  local GemValue = srcUser:GetGemValue(41071)
  return 5 + Luk / 3 + RuneDamage + GemValue / 1000
end

function CommonFun.calcTrapNum(srcUser)
  local skilllv_1 = srcUser:GetLernedSkillLevel(142)
  if skilllv_1 <= 0 then
    return 8
  elseif 0 < skilllv_1 and skilllv_1 <= 2 then
    return 9
  elseif 2 < skilllv_1 and skilllv_1 <= 4 then
    return 10
  elseif 4 < skilllv_1 and skilllv_1 <= 6 then
    return 11
  elseif 6 < skilllv_1 and skilllv_1 <= 8 then
    return 12
  else
    return 13
  end
end

function CommonFun.calcOdds_4(srcUser)
  local skilllv_1 = srcUser:GetLernedSkillLevel(183)
  if skilllv_1 <= 0 then
    return 0
  end
  return skilllv_1 * 5 + 25
end

function CommonFun.calcOdds_5(srcUser)
  local Num1 = srcUser:GetRunePoint(22041)
  local Num2 = srcUser:GetRunePoint(22043)
  local Num3 = srcUser:GetRunePoint(223009)
  return Num1 + Num2 + Num3
end

function CommonFun.calcOdds_6(srcUser)
  local Num1 = srcUser:GetRunePoint(52110)
  return Num1 * 3
end

function CommonFun.Inhale(srcUser, targetUser)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:GetNpcID() == 0 then
    local Num1 = targetUser:GetBuffLayer(100500)
    A = 7 * Num1
  elseif targetUser:GetNpcID() ~= 0 then
    if targetUser.boss or targetUser.mini then
      return 0
    elseif CommonFun.IsInRate(10, srcUser:GetRandom()) then
      local BaseLv = targetUser.BaseLv
      A = BaseLv * 2
    end
  end
  return A
end

function CommonFun.StealMoney(srcUser, targetUser)
  local skilllv_1 = srcUser:GetLernedSkillLevel(474)
  local skilllv_2 = srcUser:GetLernedSkillLevel(473)
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Rate = math.min(20, (Dex + Luk) / 10)
  local RateSum = Rate + 5
  local A = skilllv_1 * 0.05 + skilllv_2 * 0.02
  if CommonFun.IsInRate(RateSum, srcUser:GetRandom()) then
    return A
  end
  return 0
end

function CommonFun.RemoveTrap(srcUser, targetUser)
  local skilllv_1 = srcUser:GetLernedSkillLevel(489)
  return skilllv_1
end

function CommonFun.calcOdds_10(srcUser)
  local skilllv_1 = srcUser:GetLernedSkillLevel(1148)
  if skilllv_1 <= 5 then
    return 0
  end
  return skilllv_1 * 10 - 20
end

function CommonFun.calcOdds_11(srcUser)
  local A = 6
  return A
end

function CommonFun.calcOdds_12(srcUser)
  local skilllv_1 = srcUser:GetLernedSkillLevel(3701)
  local Value = srcUser:GetGemValue(132141)
  local A = skilllv_1 * 4 + Value / 1000
  return A
end

function CommonFun.calcOdds_13(srcUser)
  local skilllv_1 = srcUser:GetLernedSkillLevel(4204)
  local A = 0
  local GemNum = 0
  if srcUser:HasBuffID(20910170) then
    GemNum = 1
  end
  if skilllv_1 <= 2 then
    A = 1 + GemNum
  elseif 2 < skilllv_1 then
    A = 2 + GemNum
  end
  return A
end

function CommonFun.calcOdds_14(srcUser)
  local A = 2
  return A
end

function CommonFun.calcOdds_15(srcUser)
  local A = 0
  if srcUser:HasBuffID(22000190) then
    A = 30
  end
  return A
end

function CommonFun.GetFormulaValue(srcUser, targetUser, type)
  if CommonFun.FormulaFuns[type] == nil then
    return 0
  end
  local func = CommonFun.FormulaFuns[type]
  local value = func(srcUser, targetUser)
  return value
end

CommonFun.FormulaFuns = {
  [1] = CommonFun.calcOdds_1,
  [2] = CommonFun.calcOdds_2,
  [3] = CommonFun.calcTrapNum,
  [4] = CommonFun.calcOdds_4,
  [5] = CommonFun.calcOdds_5,
  [6] = CommonFun.calcOdds_6,
  [7] = CommonFun.Inhale,
  [8] = CommonFun.StealMoney,
  [9] = CommonFun.RemoveTrap,
  [10] = CommonFun.calcOdds_10,
  [11] = CommonFun.calcOdds_11,
  [12] = CommonFun.calcOdds_12,
  [13] = CommonFun.calcOdds_13,
  [14] = CommonFun.calcOdds_14,
  [15] = CommonFun.calcOdds_15
}

function CommonFun.CheckBuffListSkill(bufflistskill, buffskill)
  local skillParams = Table_Skill[buffskill]
  if skillParams == nil then
    return false
  end
  if math.floor(skillParams.id / 1000) == 309 or math.floor(skillParams.id / 1000) == 1283 or math.floor(skillParams.id / 1000) == 373 or math.floor(skillParams.id / 1000) == 50031 or math.floor(skillParams.id / 1000) == 175 then
    return false
  end
  if math.floor(skillParams.id / 1000) == 50058 or math.floor(skillParams.id / 1000) == 1606 then
    return false
  end
  if math.floor(skillParams.id / 1000) == 5000 or math.floor(skillParams.id / 1000) == 5100 or math.floor(skillParams.id / 1000) == 5200 or math.floor(skillParams.id / 1000) == 5300 or math.floor(skillParams.id / 1000) == 5400 or math.floor(skillParams.id / 1000) == 5500 or math.floor(skillParams.id / 1000) == 5550 or math.floor(skillParams.id / 1000) == 5600 or math.floor(skillParams.id / 1000) == 5700 or math.floor(skillParams.id / 1000) == 5800 or math.floor(skillParams.id / 1000) == 5900 or math.floor(skillParams.id / 1000) == 6000 or math.floor(skillParams.id / 1000) == 6100 then
    return false
  end
  if skillParams.SkillType ~= "Buff" then
    return false
  end
  if skillParams.Camps ~= "Friend" and skillParams.Camps ~= "Team" then
    return false
  end
  if skillParams.Logic ~= "SkillNone" and skillParams.Logic ~= "SkillSelfRange" then
    return false
  end
  if skillParams.Logic_Param.include_self == 1 and skillParams.Logic_Param.select_target == 1 and skillParams.Logic_Param.team_range == nil and skillParams.Logic_Param.range == nil then
    return false
  end
  return true
end

function CommonFun.CheckCanStolenSkill(skillid)
  local skillParams = Table_Skill[skillid]
  if skillParams == nil then
    return false
  end
  if skillParams.Camps ~= "Enemy" then
    return false
  end
  if skillParams.SkillType ~= "Buff" and skillParams.SkillType ~= "Attack" then
    return false
  end
  if math.floor(skillParams.id / 1000) == 1936 then
    return false
  end
  return true
end

function CommonFun.isNoDebuffType(damageType)
  if damageType == CommonFun.DamageType.None or damageType == CommonFun.DamageType.Miss or damageType == CommonFun.DamageType.Block then
    return true
  end
  if damageType == CommonFun.DamageType.Barrier or damageType == CommonFun.DamageType.AutoBlock or damageType == CommonFun.DamageType.WeaponBlock then
    return true
  end
  if damageType == CommonFun.DamageType.DefMagic then
    return true
  end
  if damageType == CommonFun.DamageType.DefPhysics then
    return true
  end
  return false
end

function CommonFun.Print(...)
  local args = {
    ...
  }
  for i, v in pairs(args) do
    if type(v) == "boolean" then
      io.stdout:write(v and "true" or "false")
    else
      io.stdout:write(v)
    end
  end
  io.stdout:write("\n")
  io.stdout:flush()
end

function CommonFun.calcAttrPoisonRate(srcUser, targetUser)
  local Luk = srcUser:GetProperty("Luk")
  local Vit = targetUser:GetProperty("Vit")
  local Int = targetUser:GetProperty("Int")
  local A = math.min(0.8, Luk * 0.3 / 100)
  local B = math.min(1, (Vit * 0.2 + Int * 0.2) / 100)
  local Rate = 1 + A - B
  if Rate <= 0 then
    Rate = 0
  end
  return Rate
end

function CommonFun.calcAttrBlindRate(srcUser, targetUser)
  local Int = srcUser:GetProperty("Int")
  local Vit = targetUser:GetProperty("Vit")
  local Int2 = targetUser:GetProperty("Int")
  local A = math.min(0.8, Int * 0.3 / 100)
  local B = math.min(1, (Vit * 0.2 + Int2 * 0.2) / 100)
  local Rate = 1 + A - B
  if Rate <= 0 then
    Rate = 0
  end
  return Rate
end

function CommonFun.calcAttrBurnRate(srcUser, targetUser)
  local Int = srcUser:GetProperty("Int")
  local Vit = targetUser:GetProperty("Vit")
  local Agi = targetUser:GetProperty("Agi")
  local A = math.min(0.8, Int * 0.3 / 100)
  local B = math.min(1, (Vit * 0.2 + Agi * 0.2) / 100)
  local Rate = 1 + A - B
  if Rate <= 0 then
    Rate = 0
  end
  return Rate
end

function CommonFun.calcAttrDizzyRate(srcUser, targetUser)
  local Str = srcUser:GetProperty("Str")
  local Vit = targetUser:GetProperty("Vit")
  local Agi = targetUser:GetProperty("Agi")
  local A = math.min(0.6, Str * 0.2 / 100)
  local B = math.min(1, (Vit * 0.2 + Agi * 0.2) / 100)
  local Rate = 1 + A - B
  if Rate <= 0 then
    Rate = 0
  end
  return Rate
end

function CommonFun.calcAttrFreezeRate(srcUser, targetUser)
  local Int = srcUser:GetProperty("Int")
  local Int2 = targetUser:GetProperty("Int")
  local Dex = targetUser:GetProperty("Dex")
  local A = math.min(0.6, Int * 0.2 / 100)
  local B = math.min(1, (Int2 * 0.2 + Dex * 0.2) / 100)
  local Rate = 1 + A - B
  if Rate <= 0 then
    Rate = 0
  end
  return Rate
end

function CommonFun.calcAttrStoneRate(srcUser, targetUser)
  local Int = srcUser:GetProperty("Int")
  local Int2 = targetUser:GetProperty("Int")
  local Dex = targetUser:GetProperty("Dex")
  local A = math.min(0.6, Int * 0.2 / 100)
  local B = math.min(1, (Int2 * 0.2 + Dex * 0.2) / 100)
  local Rate = 1 + A - B
  if Rate <= 0 then
    Rate = 0
  end
  return Rate
end

function CommonFun.calcAttrSleepRate(srcUser, targetUser)
  local Dex = srcUser:GetProperty("Dex")
  local Int = targetUser:GetProperty("Int")
  local Luk = targetUser:GetProperty("Luk")
  local A = math.min(0.6, Dex * 0.2 / 100)
  local B = math.min(1, (Int * 0.2 + Luk * 0.2) / 100)
  local Rate = 1 + A - B
  if Rate <= 0 then
    Rate = 0
  end
  return Rate
end

function CommonFun.calcAttrFearRate(srcUser, targetUser)
  local Dex = srcUser:GetProperty("Dex")
  local Int = targetUser:GetProperty("Int")
  local Luk = targetUser:GetProperty("Luk")
  local A = math.min(0.6, Dex * 0.3 / 100)
  local B = math.min(1, (Int * 0.2 + Luk * 0.2) / 100)
  local Rate = 1 + A - B
  if Rate <= 0 then
    Rate = 0
  end
  return Rate
end

function CommonFun.calcAttrSlowRate(srcUser, targetUser)
  local Agi = srcUser:GetProperty("Agi")
  local Vit = targetUser:GetProperty("Vit")
  local Str = targetUser:GetProperty("Str")
  local A = math.min(0.6, Agi * 0.2 / 100)
  local B = math.min(1, (Vit * 0.2 + Str * 0.2) / 100)
  local Rate = 1 + A - B
  if Rate <= 0 then
    Rate = 0
  end
  return Rate
end

function CommonFun.calcAttrSilenceRate(srcUser, targetUser)
  local Dex = srcUser:GetProperty("Dex")
  local Vit = targetUser:GetProperty("Vit")
  local Str = targetUser:GetProperty("Str")
  local A = math.min(1, Dex * 0.3 / 100)
  local B = math.min(1, (Vit * 0.3 + Str * 0.3) / 100)
  local Rate = 1 + A - B
  if Rate <= 0 then
    Rate = 0
  end
  return Rate
end

function CommonFun.calcAttrCurseRate(srcUser, targetUser)
  local Str = srcUser:GetProperty("Str")
  local Int = targetUser:GetProperty("Int")
  local Dex = targetUser:GetProperty("Dex")
  local A = math.min(1, Str * 0.3 / 100)
  local B = math.min(1, (Int * 0.3 + Dex * 0.3) / 100)
  local Rate = 1 + A - B
  if Rate <= 0 then
    Rate = 0
  end
  return Rate
end

function CommonFun.calcAttrDarkRate(srcUser, targetUser)
  local Str = srcUser:GetProperty("Str")
  local Int = targetUser:GetProperty("Int")
  local Dex = targetUser:GetProperty("Dex")
  local A = math.min(1, Str * 0.3 / 100)
  local B = math.min(1, (Int * 0.2 + Dex * 0.2) / 100)
  local Rate = 1 + A - B
  if Rate <= 0 then
    Rate = 0
  end
  return Rate
end

function CommonFun.calcAttrPoisonTime(srcUser, targetUser)
  local Luk = srcUser:GetProperty("Luk")
  local Vit = targetUser:GetProperty("Vit")
  local StateTimeAtk = srcUser:GetProperty("StateTimeAtk")
  local StateTimeDef2 = targetUser:GetProperty("StateTimeDef")
  local A = math.min(0.8, Luk * 0.2 / 100)
  local B = math.min(1, Vit * 0.4 / 100)
  local Time = 1 + A - B + StateTimeAtk - StateTimeDef2
  if Time <= 0 then
    Time = 0
  end
  return Time
end

function CommonFun.calcAttrBlindTime(srcUser, targetUser)
  local Int = srcUser:GetProperty("Int")
  local Vit = targetUser:GetProperty("Vit")
  local StateTimeAtk = srcUser:GetProperty("StateTimeAtk")
  local StateTimeDef2 = targetUser:GetProperty("StateTimeDef")
  local A = math.min(1, Int * 0.3 / 100)
  local B = math.min(1, Vit * 0.4 / 100)
  local Time = 1 + A - B + StateTimeAtk - StateTimeDef2
  if Time <= 0 then
    Time = 0
  end
  return Time
end

function CommonFun.calcAttrBurnTime(srcUser, targetUser)
  local Int = srcUser:GetProperty("Int")
  local Vit = targetUser:GetProperty("Vit")
  local StateTimeAtk = srcUser:GetProperty("StateTimeAtk")
  local StateTimeDef2 = targetUser:GetProperty("StateTimeDef")
  local A = math.min(0.8, Int * 0.3 / 100)
  local B = math.min(1, Vit * 0.4 / 100)
  local Time = 1 + A - B + StateTimeAtk - StateTimeDef2
  if Time <= 0 then
    Time = 0
  end
  return Time
end

function CommonFun.calcAttrDizzyTime(srcUser, targetUser)
  local Str = srcUser:GetProperty("Str")
  local Vit = targetUser:GetProperty("Vit")
  local StateTimeAtk = srcUser:GetProperty("StateTimeAtk")
  local StateTimeDef2 = targetUser:GetProperty("StateTimeDef")
  local A = math.min(0.8, Str * 0.3 / 100)
  local B = math.min(1, Vit * 0.4 / 100)
  local Time = 1 + A - B + StateTimeAtk - StateTimeDef2
  if Time <= 0 then
    Time = 0
  end
  return Time
end

function CommonFun.calcAttrFreezeTime(srcUser, targetUser)
  local Int = srcUser:GetProperty("Int")
  local Int2 = targetUser:GetProperty("Int")
  local StateTimeAtk = srcUser:GetProperty("StateTimeAtk")
  local StateTimeDef2 = targetUser:GetProperty("StateTimeDef")
  local A = math.min(0.8, Int * 0.3 / 100)
  local B = math.min(1, Int2 * 0.4 / 100)
  local Time = 1 + A - B + StateTimeAtk - StateTimeDef2
  if Time <= 0 then
    Time = 0
  end
  return Time
end

function CommonFun.calcAttrStoneTime(srcUser, targetUser)
  local Int = srcUser:GetProperty("Int")
  local Int2 = targetUser:GetProperty("Int")
  local StateTimeAtk = srcUser:GetProperty("StateTimeAtk")
  local StateTimeDef2 = targetUser:GetProperty("StateTimeDef")
  local A = math.min(0.8, Int * 0.3 / 100)
  local B = math.min(1, Int2 * 0.4 / 100)
  local Time = 1 + A - B + StateTimeAtk - StateTimeDef2
  if Time <= 0 then
    Time = 0
  end
  return Time
end

function CommonFun.calcAttrSleepTime(srcUser, targetUser)
  local Dex = srcUser:GetProperty("Dex")
  local Int = targetUser:GetProperty("Int")
  local StateTimeAtk = srcUser:GetProperty("StateTimeAtk")
  local StateTimeDef2 = targetUser:GetProperty("StateTimeDef")
  local A = math.min(0.8, Dex * 0.3 / 100)
  local B = math.min(1, Int * 0.4 / 100)
  local Time = 1 + A - B + StateTimeAtk - StateTimeDef2
  if Time <= 0 then
    Time = 0
  end
  return Time
end

function CommonFun.calcAttrFearTime(srcUser, targetUser)
  local Dex = srcUser:GetProperty("Dex")
  local Int = targetUser:GetProperty("Int")
  local StateTimeAtk = srcUser:GetProperty("StateTimeAtk")
  local StateTimeDef2 = targetUser:GetProperty("StateTimeDef")
  local A = math.min(0.8, Dex * 0.3 / 100)
  local B = math.min(1, Int * 0.4 / 100)
  local Time = 1 + A - B + StateTimeAtk - StateTimeDef2
  if Time <= 0 then
    Time = 0
  end
  return Time
end

function CommonFun.calcAttrSlowTime(srcUser, targetUser)
  local Agi = srcUser:GetProperty("Agi")
  local Vit = targetUser:GetProperty("Vit")
  local StateTimeAtk = srcUser:GetProperty("StateTimeAtk")
  local StateTimeDef2 = targetUser:GetProperty("StateTimeDef")
  local A = math.min(0.8, Agi * 0.3 / 100)
  local B = math.min(1, Vit * 0.4 / 100)
  local Time = 1 + A - B + StateTimeAtk - StateTimeDef2
  if Time <= 0 then
    Time = 0
  end
  return Time
end

function CommonFun.calcAttrSilenceTime(srcUser, targetUser)
  local Dex = srcUser:GetProperty("Dex")
  local Vit = targetUser:GetProperty("Vit")
  local StateTimeAtk = srcUser:GetProperty("StateTimeAtk")
  local StateTimeDef2 = targetUser:GetProperty("StateTimeDef")
  local A = math.min(0.8, Dex * 0.3 / 100)
  local B = math.min(1, Vit * 0.4 / 100)
  local Time = 1 + A - B + StateTimeAtk - StateTimeDef2
  if Time <= 0 then
    Time = 0
  end
  return Time
end

function CommonFun.calcAttrCurseTime(srcUser, targetUser)
  local Str = srcUser:GetProperty("Str")
  local Int = targetUser:GetProperty("Int")
  local StateTimeAtk = srcUser:GetProperty("StateTimeAtk")
  local StateTimeDef2 = targetUser:GetProperty("StateTimeDef")
  local A = math.min(1, Str * 0.3 / 100)
  local B = math.min(1, Int * 0.4 / 100)
  local Time = 1 + A - B + StateTimeAtk - StateTimeDef2
  if Time <= 0 then
    Time = 0
  end
  return Time
end

function CommonFun.calcAttrDarkTime(srcUser, targetUser)
  local Str = srcUser:GetProperty("Str")
  local Int = targetUser:GetProperty("Int")
  local StateTimeAtk = srcUser:GetProperty("StateTimeAtk")
  local StateTimeDef2 = targetUser:GetProperty("StateTimeDef")
  local A = math.min(1, Str * 0.3 / 100)
  local B = math.min(1, Int * 0.4 / 100)
  local Time = 1 + A - B + StateTimeAtk - StateTimeDef2
  if Time <= 0 then
    Time = 0
  end
  return Time
end

function CommonFun.calcKillLine(srcUser, targetUser)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = targetUser:GetProperty("Hp")
  local MaxHp = targetUser:GetProperty("MaxHp")
  local Num = math.min(targetUser:GetBuffLayer(137000), 5)
  local KillLine = 10 + 3 * Num
  local isKill = 0
  if Hp <= MaxHp * (0.1 + 0.03 * Num) then
    isKill = 1
  end
  return KillLine, isKill
end

function CommonFun.calcBuffValue(srcUser, targetUser, type, a, b, c, d, lv, damage, param)
  if CommonFun.CalcBuffFuncs[type] == nil then
    return 0
  end
  return CommonFun.CalcBuffFuncs[type](srcUser, targetUser, a, b, c, d, lv, damage, param)
end

function CommonFun.calcBuff_6(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = MaxHp * (a + c) + b
  if 0 < A or a == 0 then
    return A
  end
  if srcUser:GetNpcID() == 0 and targetUser:HasBuffID(160000) and targetUser.boss == false and targetUser.mini == false then
    return 0
  end
  if srcUser:GetNpcID() == 0 and (targetUser.boss or targetUser.mini) then
    local Vit = srcUser:GetProperty("Vit")
    local MAtk = srcUser:GetProperty("MAtk")
    local MAtkPer = srcUser:GetProperty("MAtkPer")
    local Refine = srcUser:GetProperty("Refine")
    local MRefine = srcUser:GetProperty("MRefine")
    local Def2 = targetUser:GetProperty("Def")
    local DefPer2 = targetUser:GetProperty("DefPer")
    local MDef2 = targetUser:GetProperty("MDef")
    local MDefPer2 = targetUser:GetProperty("MDefPer")
    local Vit2 = targetUser:GetProperty("Vit")
    local VitPer2 = targetUser:GetProperty("VitPer")
    local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
    local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
    local Int2 = targetUser:GetProperty("Int")
    local IntPer2 = targetUser:GetProperty("IntPer")
    local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
    local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
    local Str = srcUser:GetProperty("Str")
    local Dex = srcUser:GetProperty("Dex")
    local Luk = srcUser:GetProperty("Luk")
    local Atk = srcUser:GetProperty("Atk")
    local AtkPer = srcUser:GetProperty("AtkPer")
    local DamIncrease = srcUser:GetProperty("DamIncrease")
    local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
    local IgnoreDef = srcUser:GetProperty("IgnoreDef")
    if 1 <= IgnoreDef then
      IgnoreDef = 1
    end
    local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
    if 1 <= IgnoreMDef then
      IgnoreMDef = 1
    end
    local raceparam = 1
    local srcRace = srcUser.race
    local targetRace = targetUser.race
    if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
    elseif srcUser:HasBuffID(49320) then
      targetRace = 2
    end
    if targetUser:HasBuffID(49320) and targetUser:HasBuffID(49325) then
    elseif targetUser:HasBuffID(49320) then
      srcRace = 2
    end
    if nil == CommonFun.RaceProps[targetRace] then
      return 0
    end
    if nil == CommonFun.RaceProps[srcRace] then
      return 0
    end
    local raceInc = srcUser:GetProperty(CommonFun.RaceProps[targetRace][1])
    local raceRed = targetUser:GetProperty(CommonFun.RaceProps[srcRace][2])
    local raceparam = 1 + raceInc - raceRed
    if raceparam <= 0.1 then
      raceparam = 0.1
    end
    local MAtkFinal = MAtk * (1 + MAtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * raceparam
    local AtkFinal = Atk * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * raceparam
    if MAtkFinal <= AtkFinal then
      local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
      A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * a * 100 * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2) + b
    else
      local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
      A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * a * 100 * (1 - RefineMDamReduc) * (1 + MDamIncrease) - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2) + b
    end
  end
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_20(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer1 = srcUser:GetProperty("MAtkPer")
  local Num1 = srcUser:GetRunePoint(22008)
  local Num2 = srcUser:GetRunePoint(22009)
  local RuneDamage = (Num1 + Num2) * 0.03
  local MAtkPer = MAtkPer1 + RuneDamage
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = 4
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local ElementRate = CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement)
  if (srcUser:HasBuffID(69650) or srcUser:HasBuffID(71090)) and 1 < ElementRate then
    ElementRate = ElementRate * 1.1
  end
  if targetUser:HasBuffID(49130) then
    ElementRate = math.min(ElementRate, 1)
  end
  if srcUser:HasBuffID(49210) then
    ElementRate = ElementRate + 0.15
  end
  local skilllv_fs = srcUser:GetLernedSkillLevel(88)
  local skilllv_xd = srcUser:GetLernedSkillLevel(1919)
  local skilllv = math.max(skilllv_fs, skilllv_xd)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = (MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = ((MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (a * skilllv + b) - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * (1 + MDamIncrease) * ElementRate * (1 - RefineMDamReduc)
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = 1
  end
  if targetUser:DamageAlways1() then
    A = 1
  end
  if A <= 1 then
    return -1
  end
  return -A
end

function CommonFun.calcBuff_21(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local BaseLv = srcUser.BaseLv
  local A = BaseLv * (a * lv + b)
  if A <= 0 then
    A = 1
  end
  return A
end

function CommonFun.calcBuff_22(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  local srcAtkElement = 3
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local Int2 = targetUser:GetProperty("Int")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = (MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk
  local A = MAtkFinal * (a * lv + b) * CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement)
  if 0 <= A then
    return -1
  end
  return A
end

function CommonFun.calcBuff_23(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local BaseLv = targetUser.BaseLv
  local A = math.random(1, BaseLv) * a + b
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcBuff_39(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local BaseLv = srcUser.BaseLv
  local A = BaseLv * a + b
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_40(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local JobLv = srcUser:GetJobLv()
  local A = JobLv * a + b
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_41(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hiding = srcUser:GetProperty("Hiding")
  local A = lv * a + b
  if A <= 0 then
    return 0
  end
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  if Hiding == 1 or bits[CommonFun.AttrEffect.HideStrengthEffect] == 1 then
    return A * 2
  end
  return A
end

function CommonFun.calcBuff_50(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = srcUser:GetProperty("Hp")
  local MaxHp = srcUser:GetProperty("MaxHp")
  local A = (1 - Hp / MaxHp) * 0.6
  if A <= 0 then
    return 0
  end
  if 0.5 <= A then
    return 0.5
  end
  return A
end

function CommonFun.calcBuff_51(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Buff = srcUser:HasBuffID(114)
  local A = 0
  if Buff == true then
    return 100
  end
  return A
end

function CommonFun.calcBuff_52(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Buff = srcUser:HasBuffID(80001190)
  local A = 0
  if Buff == true then
    return 100
  end
  return A
end

function CommonFun.calcBuff_53(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:GetNpcID() == 10057 then
    return 100
  end
  return A
end

function CommonFun.calcBuff_54(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Vit = srcUser:GetProperty("Vit")
  local A = Vit * -5
  return A
end

function CommonFun.calcBuff_55(srcUser, targetUser, a, b, c, d, lv)
  local MaxHp = srcUser:GetProperty("MaxHp")
  local MaxSp = srcUser:GetProperty("MaxSp")
  local skilllv_1 = srcUser:GetLernedSkillLevel(69)
  local Buff = srcUser:HasBuffID(80000410)
  local Card1 = srcUser:GetEquipCardNum(2, 20041)
  local mapid, maptype = srcUser:GetMapInfo()
  if srcUser == nil or targetUser == nil then
    return 0
  end
  if maptype == 2 or maptype == 4 then
    MaxHp = MaxHp * 0.25
  end
  local A = MaxHp * a + MaxSp * b + skilllv_1 * c + (2 * skilllv_1 - 10) * d
  if Buff == true and 0 < Card1 then
    return A * 1.1
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_56(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 5
  local Buff = srcUser:HasBuffID(80000250)
  if Buff == true then
    A = 10
  end
  return A
end

function CommonFun.calcBuff_57(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52034)
  local A = lv * a + b + 2 * Num1
  return A
end

function CommonFun.calcBuff_58(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Atk = srcUser:GetProperty("Atk")
  local BaseLv = srcUser.BaseLv
  local masterRefine = srcUser:GetProperty("Refine")
  local masterAtk = srcUser:GetProperty("Atk")
  local master = srcUser:GetMasterUser()
  if master ~= nil then
    masterRefine = master:GetProperty("Refine")
    masterAtk = master:GetProperty("Atk")
  end
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local AtkFinal = (masterRefine * 2 + Atk) * (a + b)
  local ResultDamInc = srcUser:GetProperty("ResultDamInc")
  local ResultDamRes = targetUser:GetProperty("ResultDamRes")
  local Result = 1 + ResultDamInc - ResultDamRes
  Result = math.max(Result, 0.1)
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2)) * Result
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = 1
  end
  if targetUser:DamageAlways1() then
    A = 1
  end
  if A <= 1 then
    return -1
  end
  return -A
end

function CommonFun.calcBuff_59(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local skilllv_1 = srcUser:GetLernedSkillLevel(446)
  skillDamPer = skilllv_1 * 1.8
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  local srcAtkElement = 5
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = MAtk
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local ResultDamInc = srcUser:GetProperty("ResultDamInc")
  local ResultDamRes = targetUser:GetProperty("ResultDamRes")
  local Result = 1 + ResultDamInc - ResultDamRes
  Result = math.max(Result, 0.1)
  local NeutralAtk = srcUser:GetProperty("NeutralAtk")
  local BeNeutralDamPer = targetUser:GetProperty("BeNeutralDamPer")
  local ele = 1 + NeutralAtk - BeNeutralDamPer
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)) * CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement) * ele * skillDamPer * (1 + MDamIncrease) * (1 - RefineMDamReduc) * Result
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = 1
  end
  if targetUser:DamageAlways1() then
    A = 1
  end
  if A <= 1 then
    return -1
  end
  return -A
end

function CommonFun.calcBuff_60(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(251)
  local CriDamage = 0
  if 10 < skilllv then
    CriDamage = (skilllv - 10) * 0.01
    return CriDamage
  else
    return CriDamage
  end
end

function CommonFun.calcBuff_61(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(115)
  local value_add = 0
  if 10 < skilllv then
    value_add = (skilllv - 10) * a
    return value_add
  else
    return value_add
  end
end

function CommonFun.calcBuff_62(srcUser, targetUser, a, b, c, d, lv)
  local MaxHp = srcUser:GetProperty("MaxHp")
  local mapid, maptype = srcUser:GetMapInfo()
  if srcUser == nil or targetUser == nil then
    return 0
  end
  if maptype == 2 or maptype == 4 then
    MaxHp = MaxHp * 0.25
  end
  local A = MaxHp * a
  return A
end

function CommonFun.calcBuff_100(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local SilenceAtk = srcUser:GetProperty("SilenceAtk")
  local SilenceDef2 = targetUser:GetProperty("SilenceDef")
  local SlienceDam = 1 + SilenceAtk - SilenceDef2
  if SlienceDam <= 0 then
    SlienceDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * SlienceDam * StateDam * CommonFun.calcAttrSilenceRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1000(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local SilenceAtk = srcUser:GetProperty("SilenceAtk")
  local SilenceDef2 = targetUser:GetProperty("SilenceDef")
  local SlienceDam = 1 + SilenceAtk - SilenceDef2
  if SlienceDam <= 0 then
    SlienceDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * SlienceDam * StateDam * CommonFun.calcAttrSilenceTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_101(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52019)
  local Num2 = srcUser:GetRunePoint(52020)
  local Num3 = srcUser:GetRunePoint(52022)
  local Num4 = srcUser:GetRunePoint(52025)
  local Num5 = srcUser:GetRunePoint(52026)
  local RuneRate = Num1 + Num2 + Num3 + Num4 + Num5
  local SilenceAtk = srcUser:GetProperty("SilenceAtk")
  local SilenceDef2 = targetUser:GetProperty("SilenceDef")
  local SlienceDam = 1 + SilenceAtk - SilenceDef2
  if SlienceDam <= 0 then
    SlienceDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = (1 + StateAtk) * (1 - StateDef2)
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = RuneRate * a * SlienceDam * StateDam * CommonFun.calcAttrSilenceRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_102(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52019)
  local Num2 = srcUser:GetRunePoint(52020)
  local Num3 = srcUser:GetRunePoint(52022)
  local Num4 = srcUser:GetRunePoint(52025)
  local Num5 = srcUser:GetRunePoint(52026)
  local RuneTime = Num1 + Num2 + Num3 + Num4 + Num5
  local A = RuneTime * CommonFun.calcAttrSilenceTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_103(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52100)
  local SilenceAtk = srcUser:GetProperty("SilenceAtk")
  local SilenceDef2 = targetUser:GetProperty("SilenceDef")
  local SlienceDam = 1 + SilenceAtk - SilenceDef2
  if SlienceDam <= 0 then
    SlienceDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = (1 + StateAtk) * (1 - StateDef2)
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = 100 * SlienceDam * StateDam * CommonFun.calcAttrSilenceRate(srcUser, targetUser)
  if 0 < Num1 then
    A = 0
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_104(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52100)
  local A = Num1 * 100 * CommonFun.calcAttrSilenceRate(srcUser, targetUser)
  if targetUser.boss or targetUser.mini then
    A = 0
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_105(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52100)
  local A = Num1 * a
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_106(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52130)
  local Num2 = srcUser:GetRunePoint(52100)
  local A = Num1 * a * CommonFun.calcAttrSilenceRate(srcUser, targetUser)
  if 1 <= Num2 then
    A = 0
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_107(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52130)
  local MaxSp = targetUser:GetProperty("MaxSp")
  local A = Num1 * a * MaxSp
  return A
end

function CommonFun.calcBuff_110(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local FreezeAtk = srcUser:GetProperty("FreezeAtk")
  local FreezeDef2 = targetUser:GetProperty("FreezeDef")
  local FreezeDam = 1 + FreezeAtk - FreezeDef2
  if FreezeDam <= 0 then
    FreezeDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * FreezeDam * StateDam * CommonFun.calcAttrFreezeRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1100(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local FreezeAtk = srcUser:GetProperty("FreezeAtk")
  local FreezeDef2 = targetUser:GetProperty("FreezeDef")
  local FreezeDam = 1 + FreezeAtk - FreezeDef2
  if FreezeDam <= 0 then
    FreezeDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * FreezeDam * StateDam * CommonFun.calcAttrFreezeTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_111(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local FreezeAtk = srcUser:GetProperty("FreezeAtk")
  local FreezeDef2 = targetUser:GetProperty("FreezeDef")
  local FreezeDam = 1 + FreezeAtk - FreezeDef2
  if FreezeDam <= 0 then
    FreezeDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local Num1 = srcUser:GetRunePoint(22130)
  local A = (lv * a + b) * FreezeDam * StateDam * CommonFun.calcAttrFreezeRate(srcUser, targetUser)
  if 1 <= Num1 then
    A = 0
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_112(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(22130)
  local A = 0
  if 1 <= Num1 then
    A = lv * a + b
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_113(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(22130)
  local A = Num1 * a
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_114(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(22140)
  local A = Num1 * 100
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_115(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(22140)
  local MaxHp = srcUser:GetProperty("MaxHp")
  local A = Num1 * a * MaxHp
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_120(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local StoneAtk = srcUser:GetProperty("StoneAtk")
  local StoneDef2 = targetUser:GetProperty("StoneDef")
  local StoneDam = 1 + StoneAtk - StoneDef2
  if StoneDam <= 0 then
    StoneDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * StoneDam * StateDam * CommonFun.calcAttrStoneRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1200(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local StoneAtk = srcUser:GetProperty("StoneAtk")
  local StoneDef2 = targetUser:GetProperty("StoneDef")
  local StoneDam = 1 + StoneAtk - StoneDef2
  if StoneDam <= 0 then
    StoneDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * StoneDam * StateDam * CommonFun.calcAttrStoneTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_130(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local StunAtk = srcUser:GetProperty("StunAtk")
  local StunDef2 = targetUser:GetProperty("StunDef")
  local StunDam = 1 + StunAtk - StunDef2
  if StunDam <= 0 then
    StunDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * StunDam * StateDam * CommonFun.calcAttrDizzyRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1300(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local StunAtk = srcUser:GetProperty("StunAtk")
  local StunDef2 = targetUser:GetProperty("StunDef")
  local StunDam = 1 + StunAtk - StunDef2
  if StunDam <= 0 then
    StunDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * StunDam * StateDam * CommonFun.calcAttrDizzyTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1301(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local StunAtk = srcUser:GetProperty("StunAtk")
  local StunDef2 = targetUser:GetProperty("StunDef")
  local StunDam = 1 + StunAtk - StunDef2
  if StunDam <= 0 then
    StunDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * StunDam * StateDam * CommonFun.calcAttrDizzyTime(srcUser, targetUser)
  local Buff = srcUser:HasBuffID(80000220)
  if Buff == true then
    A = (lv * a + b + 2) * StunDam * StateDam * CommonFun.calcAttrDizzyTime(srcUser, targetUser)
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1302(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local StunAtk = srcUser:GetProperty("StunAtk")
  local StunDef2 = targetUser:GetProperty("StunDef")
  local StunDam = 1 + StunAtk - StunDef2
  if StunDam <= 0 then
    StunDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(c)
  local A = (lv * a + b + skilllv * d) * StunDam * StateDam * CommonFun.calcAttrDizzyTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_131(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(235)
  local Num1 = srcUser:GetRunePoint(51019)
  local Num2 = srcUser:GetRunePoint(51020)
  local RuneRate = (Num1 + Num2) * 20
  local StunAtk = srcUser:GetProperty("StunAtk")
  local StunDef2 = targetUser:GetProperty("StunDef")
  local StunDam = 1 + StunAtk - StunDef2
  if StunDam <= 0 then
    StunDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (skilllv_1 * a + b + RuneRate) * StunDam * StateDam * CommonFun.calcAttrDizzyRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  if skilllv_1 <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_132(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(123)
  local StunAtk = srcUser:GetProperty("StunAtk")
  local StunDef2 = targetUser:GetProperty("StunDef")
  local StunDam = 1 + StunAtk - StunDef2
  if StunDam <= 0 then
    StunDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (skilllv_1 * a + b) * StunDam * StateDam * CommonFun.calcAttrDizzyRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  if skilllv_1 <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1320(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(123)
  local StunAtk = srcUser:GetProperty("StunAtk")
  local StunDef2 = targetUser:GetProperty("StunDef")
  local StunDam = 1 + StunAtk - StunDef2
  if StunDam <= 0 then
    StunDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (skilllv_1 * a + b) * StunDam * StateDam * CommonFun.calcAttrDizzyTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  if skilllv_1 <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_133(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local StunAtk = srcUser:GetProperty("StunAtk")
  local StunDef2 = targetUser:GetProperty("StunDef")
  local StunDam = 1 + StunAtk - StunDef2
  if StunDam <= 0 then
    StunDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local Gem1 = srcUser:GetGemValue(102122)
  local Gem2 = srcUser:GetGemValue(112122)
  local A = (Gem1 / 1000 + Gem2 / 1000) * StunDam * StateDam * CommonFun.calcAttrDizzyRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_140(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local BlindAtk = srcUser:GetProperty("BlindAtk")
  local BlindDef2 = targetUser:GetProperty("BlindDef")
  local BlindDam = 1 + BlindAtk - BlindDef2
  if BlindDam <= 0 then
    BlindDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * BlindDam * StateDam * CommonFun.calcAttrBurnRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_142(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(2053)
  local Master = srcUser:GetMasterUser()
  local skilllv_2 = 0
  if Master ~= nil then
    skilllv_2 = Master:GetLernedSkillLevel(2053)
  end
  local BlindAtk = srcUser:GetProperty("BlindAtk")
  local BlindDef2 = targetUser:GetProperty("BlindDef")
  local BlindDam = 1 + BlindAtk - BlindDef2
  if BlindDam <= 0 then
    BlindDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = ((skilllv_1 + skilllv_2) * a + b) * BlindDam * StateDam * CommonFun.calcAttrBurnRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1400(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local BlindAtk = srcUser:GetProperty("BlindAtk")
  local BlindDef2 = targetUser:GetProperty("BlindDef")
  local BlindDam = 1 + BlindAtk - BlindDef2
  if BlindDam <= 0 then
    BlindDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * BlindDam * StateDam * CommonFun.calcAttrBurnTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_141(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(88)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1919)
  local BlindAtk = srcUser:GetProperty("BlindAtk")
  local BlindDef2 = targetUser:GetProperty("BlindDef")
  local BlindDam = 1 + BlindAtk - BlindDef2
  if BlindDam <= 0 then
    BlindDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = ((skilllv_1 + skilllv_2) * a + b) * BlindDam * StateDam * CommonFun.calcAttrBurnRate(srcUser, targetUser)
  if skilllv_1 <= 0 and skilllv_2 <= 0 then
    return 0
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_150(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local PoisonAtk = srcUser:GetProperty("PoisonAtk")
  local PoisonDef2 = targetUser:GetProperty("PoisonDef")
  local PoisonDam = 1 + PoisonAtk - PoisonDef2
  if PoisonDam <= 0 then
    PoisonDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * PoisonDam * StateDam * CommonFun.calcAttrPoisonRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1500(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local PoisonAtk = srcUser:GetProperty("PoisonAtk")
  local PoisonDef2 = targetUser:GetProperty("PoisonDef")
  local PoisonDam = 1 + PoisonAtk - PoisonDef2
  if PoisonDam <= 0 then
    PoisonDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * PoisonDam * StateDam * CommonFun.calcAttrPoisonTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_151(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(191)
  local PoisonAtk = srcUser:GetProperty("PoisonAtk")
  local PoisonDef2 = targetUser:GetProperty("PoisonDef")
  local PoisonDam = 1 + PoisonAtk - PoisonDef2
  if PoisonDam <= 0 then
    PoisonDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (skilllv_1 * a + b) * PoisonDam * StateDam * CommonFun.calcAttrPoisonTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_152(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(32005)
  local RuneRate = Num1 * 10
  local A = RuneRate
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_153(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(31026)
  local Num2 = srcUser:GetRunePoint(31027)
  local RuneDamage = Num1 * 0.05 + Num2 * 0.05
  local A = a - RuneDamage
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_154(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local PoisonAtk = srcUser:GetProperty("PoisonAtk")
  local PoisonDef2 = targetUser:GetProperty("PoisonDef")
  local PoisonDam = 1 + PoisonAtk - PoisonDef2
  local Profession = srcUser:GetProfressionID()
  if PoisonDam <= 0 then
    PoisonDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  if Profession == 31 or Profession == 32 or Profession == 33 or Profession == 34 or Profession == 35 then
    b = 12
  end
  local A = (lv * a + b) * PoisonDam * StateDam * CommonFun.calcAttrPoisonRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_160(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local SlowAtk = srcUser:GetProperty("SlowAtk")
  local SlowDef2 = targetUser:GetProperty("SlowDef")
  local SlowDam = 1 + SlowAtk - SlowDef2
  if SlowDam <= 0 then
    SlowDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * SlowDam * StateDam * CommonFun.calcAttrSlowRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1600(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local SlowAtk = srcUser:GetProperty("SlowAtk")
  local SlowDef2 = targetUser:GetProperty("SlowDef")
  local SlowDam = 1 + SlowAtk - SlowDef2
  if SlowDam <= 0 then
    SlowDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * SlowDam * StateDam * CommonFun.calcAttrSlowTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1601(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local SlowAtk = srcUser:GetProperty("SlowAtk")
  local SlowDef2 = targetUser:GetProperty("SlowDef")
  local SlowDam = 1 + SlowAtk - SlowDef2
  if SlowDam <= 0 then
    SlowDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local Num = srcUser:GetRunePoint(153022)
  local skilllv = srcUser:GetLernedSkillLevel(1613)
  local A = (skilllv * a + b + Num) * SlowDam * StateDam * CommonFun.calcAttrSlowTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_170(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local ChaosAtk = srcUser:GetProperty("ChaosAtk")
  local ChaosDef2 = targetUser:GetProperty("ChaosDef")
  local ChaosDam = 1 + ChaosAtk - ChaosDef2
  if ChaosDam <= 0 then
    ChaosDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * ChaosDam * StateDam * CommonFun.calcAttrFearRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_171(srcUser, targetUser, a, b, c, d, lv)
  local A = 0
  local Num1 = srcUser:GetRunePoint(94030)
  if 0 < Num1 then
    A = 100
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1700(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local ChaosAtk = srcUser:GetProperty("ChaosAtk")
  local ChaosDef2 = targetUser:GetProperty("ChaosDef")
  local ChaosDam = 1 + ChaosAtk - ChaosDef2
  if ChaosDam <= 0 then
    ChaosDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * ChaosDam * StateDam * CommonFun.calcAttrFearTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1701(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(94030)
  local A = Num1
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_180(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local CurseAtk = srcUser:GetProperty("CurseAtk")
  local CurseDef2 = targetUser:GetProperty("CurseDef")
  local CurseDam = 1 + CurseAtk - CurseDef2
  if CurseDam <= 0 then
    CurseDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * CurseDam * StateDam * CommonFun.calcAttrCurseRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1800(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local CurseAtk = srcUser:GetProperty("CurseAtk")
  local CurseDef2 = targetUser:GetProperty("CurseDef")
  local CurseDam = 1 + CurseAtk - CurseDef2
  if CurseDam <= 0 then
    CurseDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * CurseDam * StateDam * CommonFun.calcAttrCurseTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_185(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local BleedAtk = srcUser:GetProperty("BleedAtk")
  local BleedDef2 = targetUser:GetProperty("BleedDef")
  local BleedDam = 1 + BleedAtk - BleedDef2
  if BleedDam <= 0 then
    BleedDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * BleedDam * StateDam * CommonFun.calcAttrBlindRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1850(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local BleedAtk = srcUser:GetProperty("BleedAtk")
  local BleedDef2 = targetUser:GetProperty("BleedDef")
  local BleedDam = 1 + BleedAtk - BleedDef2
  if BleedDam <= 0 then
    BleedDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * BleedDam * StateDam * CommonFun.calcAttrBlindTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_186(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local DarkStateAtk = srcUser:GetProperty("DarkStateAtk")
  local DarkStateDef2 = targetUser:GetProperty("DarkStateDef")
  local DarkStateDam = 1 + DarkStateAtk - DarkStateDef2
  if DarkStateDam <= 0 then
    DarkStateDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * DarkStateDam * StateDam * CommonFun.calcAttrDarkRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1860(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local DarkStateAtk = srcUser:GetProperty("DarkStateAtk")
  local DarkStateDef2 = targetUser:GetProperty("DarkStateDef")
  local DarkStateDam = 1 + DarkStateAtk - DarkStateDef2
  if DarkStateDam <= 0 then
    DarkStateDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * DarkStateDam * StateDam * CommonFun.calcAttrDarkTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_187(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local SleepAtk = srcUser:GetProperty("SleepAtk")
  local SleepDef2 = targetUser:GetProperty("SleepDef")
  local SleepDam = 1 + SleepAtk - SleepDef2
  if SleepDam <= 0 then
    SleepDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * SleepDam * StateDam * CommonFun.calcAttrSleepRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_1870(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local SleepAtk = srcUser:GetProperty("SleepAtk")
  local SleepDef2 = targetUser:GetProperty("SleepDef")
  local SleepDam = 1 + SleepAtk - SleepDef2
  if SleepDam <= 0 then
    SleepDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (lv * a + b) * SleepDam * StateDam * CommonFun.calcAttrSleepTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_188(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local BleedAtk = srcUser:GetProperty("BleedAtk")
  local BleedDef2 = targetUser:GetProperty("BleedDef")
  local BleedDam = 1 + BleedAtk - BleedDef2
  if BleedDam <= 0 then
    BleedDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(1241)
  local A = skilllv * 10 * BleedDam * StateDam * CommonFun.calcAttrBlindRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_190(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Weapon = srcUser:GetEquipedID(7)
  local A = 0
  if Weapon == 41233 or Weapon == 141233 or Weapon == 41256 or Weapon == 141256 then
    A = 10
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_200(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local MDef = srcUser:GetProperty("MDef")
  local Flee = srcUser:GetProperty("Flee")
  local Weapon2 = srcUser:GetEquipedID(2)
  local A = 0
  local mapid, maptype = srcUser:GetMapInfo()
  if maptype == 2 or maptype == 4 then
    MaxHp = MaxHp * 0.25
  end
  if Weapon2 == 42058 or Weapon2 == 142058 or Weapon2 == 42098 or Weapon2 == 142098 then
    A = math.min(1500, MaxHp / 200)
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_201(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local MDef = srcUser:GetProperty("MDef")
  local Flee = srcUser:GetProperty("Flee")
  local Weapon1 = srcUser:GetEquipedID(1)
  local A = 0
  if Weapon1 == 60512 or Weapon1 == 160512 then
    A = MDef / 10
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_202(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local MDef = srcUser:GetProperty("MDef")
  local Flee = srcUser:GetProperty("Flee")
  local Weapon1 = srcUser:GetEquipedID(1)
  local A = 0
  if Weapon1 == 61512 or Weapon1 == 161512 then
    A = Flee / 10
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_203(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local MDef = srcUser:GetProperty("MDef")
  local EquipASPD = srcUser:GetProperty("EquipASPD")
  local Weapon1 = srcUser:GetEquipedID(1)
  local A = 0
  if Weapon1 == 61011 or Weapon1 == 161011 then
    A = EquipASPD * 100
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_204(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Dex = srcUser:GetProperty("Dex")
  local Num1 = srcUser:GetRunePoint(62013)
  local Num2 = srcUser:GetRunePoint(62014)
  local Num3 = srcUser:GetRunePoint(62015)
  local Num4 = srcUser:GetRunePoint(62016)
  local Num5 = srcUser:GetRunePoint(62017)
  local RuneDamage = Num1 * 0.2 + Num2 * 0.2 + Num3 * 0.2 + Num4 * 0.2 + Num5 * 0.2
  local A = Dex * RuneDamage
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_205(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Luk = srcUser:GetProperty("Luk")
  local Num1 = srcUser:GetRunePoint(62026)
  local Num2 = srcUser:GetRunePoint(62027)
  local Num3 = srcUser:GetRunePoint(62028)
  local Num4 = srcUser:GetRunePoint(62029)
  local Num5 = srcUser:GetRunePoint(62030)
  local RuneDamage = Num1 * 0.2 + Num2 * 0.4 + Num3 * 0.2 + Num4 * 0.2 + Num5 * 0.2
  local A = Luk * RuneDamage
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_300(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(51002)
  local Num2 = srcUser:GetRunePoint(51007)
  local Num3 = srcUser:GetRunePoint(51008)
  local RuneDamage = Num1 + Num2 + Num3
  local A = 0
  if 0 < RuneDamage then
    A = 100
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_301(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(51003)
  local Num2 = srcUser:GetRunePoint(51006)
  local Num3 = srcUser:GetRunePoint(51009)
  local Num4 = srcUser:GetRunePoint(52002)
  local RuneDamage = Num1 + Num2 + Num3 + Num4
  local A = RuneDamage * a
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_302(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(51002)
  local Num2 = srcUser:GetRunePoint(51007)
  local Num3 = srcUser:GetRunePoint(51008)
  local RuneDamage = Num1 + Num2 + Num3
  local A = RuneDamage * a
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_310(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(51004)
  local Num2 = srcUser:GetRunePoint(51005)
  local Num3 = srcUser:GetRunePoint(52010)
  local RuneDamage = Num1 + Num2 + Num3
  local A = 0
  if 0 < RuneDamage then
    A = 100
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_311(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(51004)
  local Num2 = srcUser:GetRunePoint(51005)
  local Num3 = srcUser:GetRunePoint(52010)
  local RuneDamage = Num1 + Num2 + Num3
  local A = RuneDamage * a
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_320(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(11002)
  local Num2 = srcUser:GetRunePoint(11007)
  local Num3 = srcUser:GetRunePoint(11013)
  local RuneDamage = (Num1 + Num2 + Num3) * c + 1
  local A = (lv * a + b) * RuneDamage
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_321(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Agi = srcUser:GetProperty("Agi")
  local Num1 = srcUser:GetRunePoint(11011)
  local Num2 = srcUser:GetRunePoint(12012)
  local A = (Num1 + Num2) * math.floor(Agi / 5)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_322(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(11003)
  local Num2 = srcUser:GetRunePoint(11009)
  local Num3 = srcUser:GetRunePoint(11016)
  local Num4 = srcUser:GetRunePoint(11017)
  local Num5 = srcUser:GetRunePoint(12022)
  local A = lv * a + b + (Num1 + Num2 + Num3 + Num4 + Num5) * c
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_323(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(45)
  local skilllv_2 = srcUser:GetLernedSkillLevel(370)
  local Num1 = srcUser:GetRunePoint(12014)
  local Num2 = srcUser:GetRunePoint(12015)
  local Num3 = srcUser:GetRunePoint(12016)
  local Num4 = srcUser:GetRunePoint(12036)
  local Num5 = srcUser:GetRunePoint(12037)
  local Num6 = srcUser:GetRunePoint(12038)
  local A = (Num1 + Num2 + Num3 + Num4 + Num5 + Num6) * a * skilllv_1 + (Num1 + Num2 + Num3 + Num4 + Num5 + Num6) * a * skilllv_2
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_330(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skillLevel = srcUser:GetLernedSkillLevel(191)
  local Num1 = srcUser:GetRunePoint(31024)
  local Num2 = srcUser:GetRunePoint(31025)
  local Num3 = srcUser:GetRunePoint(32024)
  local Num4 = srcUser:GetRunePoint(32025)
  local RuneDamage = Num1 * 0.25 + Num2 * 0.5 + Num3 * 0.5 + Num4 * 0.25 + 1
  local A = skillLevel * a * RuneDamage
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_340(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(32004)
  local RuneDamage = Num1 * 15
  local A = lv * a + RuneDamage
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_350(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(32003)
  local A = Num1 * 0.25
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_360(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local BlindAtk = srcUser:GetProperty("BlindAtk")
  local BlindDef2 = targetUser:GetProperty("BlindDef")
  local BlindDam = 1 + BlindAtk - BlindDef2
  if BlindDam <= 0 then
    BlindDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = (1 + StateAtk) * (1 - StateDef2)
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = 0
  local Num1 = srcUser:GetRunePoint(41006)
  local SkillAttr = srcUser:GetCurSkillAtkAttr()
  if SkillAttr == 4 then
    A = (lv * a + b) * BlindDam * StateDam * Num1
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_370(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local BlindAtk = srcUser:GetProperty("BlindAtk")
  local BlindDef2 = targetUser:GetProperty("BlindDef")
  local BlindDam = 1 + BlindAtk - BlindDef2
  if BlindDam <= 0 then
    BlindDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = (1 + StateAtk) * (1 - StateDef2)
  if StateDam <= 0 then
    StateDam = 0
  end
  local Num1 = srcUser:GetRunePoint(42022)
  local A = (lv * a + b) * BlindDam * StateDam * Num1
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_380(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(42025)
  local Num2 = srcUser:GetRunePoint(42026)
  local Num3 = srcUser:GetRunePoint(42027)
  local Num4 = srcUser:GetRunePoint(42028)
  local Num5 = srcUser:GetRunePoint(42029)
  local A = -(Num1 * 0.1 + Num2 * 0.05 + Num3 * 0.05 + Num4 * 0.05 + Num5 * 0.1)
  return A
end

function CommonFun.calcBuff_390(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(42036)
  local Num2 = srcUser:GetRunePoint(42037)
  local Num3 = srcUser:GetRunePoint(42038)
  local Num4 = srcUser:GetRunePoint(42039)
  local Num5 = srcUser:GetRunePoint(42040)
  local A = -(Num1 * 0.05 + Num2 * 0.1 + Num3 * 0.05 + Num4 * 0.1 + Num5 * 0.1)
  return A
end

function CommonFun.calcBuff_400(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(21006)
  local A = Num1 * 100
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_401(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(22007)
  local Num2 = srcUser:GetRunePoint(223005)
  local A = (Num1 + Num2) * 3
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcBuff_410(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(22020)
  local Num2 = srcUser:GetRunePoint(22019)
  local Num3 = srcUser:GetRunePoint(22021)
  local A = Num1 * 5 + Num2 * 2 + Num3 * 2
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_420(srcUser, targetUser, a, b, c, d, lv)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer1 = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local Num1 = srcUser:GetRunePoint(22024)
  local Num2 = srcUser:GetRunePoint(22025)
  local Num3 = srcUser:GetRunePoint(223023)
  local RuneDamage = (Num1 + Num3) * 0.4 * lv * (Num2 * 0.15 + 1)
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = (MAtk - BaseMAtk) * (1 + MAtkPer1) + BaseMAtk
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local B = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * (1 + MDamIncrease) - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  local A = -B * RuneDamage
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_421(srcUser, targetUser, a, b, c, d, lv)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer1 = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local Num1 = srcUser:GetRunePoint(52024)
  local MRefine = srcUser:GetProperty("MRefine")
  local RangeDam = srcUser:GetProperty("RangeDam")
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = (MAtk - BaseMAtk) * (1 + MAtkPer1) + BaseMAtk
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local B = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * (1 + MDamIncrease) - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  local A = -B * a * Num1
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_422(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52024)
  local A = Num1 * a
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_430(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52035)
  local Num2 = srcUser:GetRunePoint(120200)
  local A = Num1 * 10 + Num2 * 10 + a * lv + b
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_440(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(51002)
  local Num2 = srcUser:GetRunePoint(51007)
  local Num3 = srcUser:GetRunePoint(51008)
  local RuneRate = Num1 + Num2 + Num3
  local A = RuneRate * 100
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_441(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num4 = srcUser:GetRunePoint(51003)
  local Num5 = srcUser:GetRunePoint(51002)
  local Num6 = srcUser:GetRunePoint(51009)
  local Num7 = srcUser:GetRunePoint(52002)
  local RuneValue = 0
  if 1 <= Num5 then
    RuneValue = 0.1
  end
  local RuneDamage = ((Num4 + Num5 + Num6 + Num7) * 0.05 + RuneValue) * -1
  local A = RuneDamage * damage
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_442(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(51002)
  local Num2 = srcUser:GetRunePoint(51007)
  local Num3 = srcUser:GetRunePoint(51008)
  local RuneDamage = (Num1 + Num2 + Num3) * 7
  local A = RuneDamage
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_450(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52003)
  local RuneDamage = Num1 * 3
  local A = RuneDamage + a
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_460(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(12005)
  local Num2 = srcUser:GetRunePoint(12007)
  local Num3 = srcUser:GetRunePoint(12008)
  local RuneDamage = Num1 + Num2 + Num3
  local A = RuneDamage * a
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_470(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52008)
  local Num2 = srcUser:GetRunePoint(52009)
  local RuneDamage = (Num1 + Num2) * 0.05
  local GemValue = srcUser:GetGemValue(51121)
  local A = RuneDamage - GemValue / 100000
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_471(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52008)
  local A = Num1 * 100
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_480(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(62020)
  local Num2 = srcUser:GetRunePoint(62021)
  local Num3 = srcUser:GetRunePoint(62022)
  local Num4 = srcUser:GetRunePoint(62023)
  local RuneRate = Num1 * 10 + Num2 * 5 + Num3 * 5 + Num4 * 5
  local A = RuneRate
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_490(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(62020)
  local Num2 = srcUser:GetRunePoint(62021)
  local Num3 = srcUser:GetRunePoint(62022)
  local Num4 = srcUser:GetRunePoint(62023)
  local RuneAtk = -(Num1 * 0.1 + Num2 * 0.05 + Num3 * 0.05 + Num4 * 0.05)
  local A = RuneAtk
  return A
end

function CommonFun.calcBuff_500(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(51015)
  local Num2 = srcUser:GetRunePoint(51016)
  local Num3 = srcUser:GetRunePoint(52028)
  local Num4 = srcUser:GetRunePoint(52029)
  local RuneDamage = (Num1 + Num2 + Num3 + Num4) * 0.05 + 1
  local A = RuneDamage * (a * lv + b)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_510(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(32050)
  local A = -0.01 * Num1 + a
  return A
end

function CommonFun.calcBuff_511(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(32050)
  local A = -0.05 * Num1 + a
  return A
end

function CommonFun.calcBuff_520(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(32100)
  local RuneDamage = Num1 * 0.02
  if 10 < lv then
    lv = 10
  end
  local A = a * lv + RuneDamage
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_530(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52110)
  local A = Num1 * 100
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_540(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52080)
  local A = Num1 * 100
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_550(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52080)
  local A = 100
  if 0 < Num1 then
    A = 0
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_551(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52080)
  local A = Num1 * 100
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_552(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52080)
  local A = Num1 * a
  return A
end

function CommonFun.calcBuff_560(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52160)
  local A = Num1 * a
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_570(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52023)
  local Num2 = srcUser:GetRunePoint(52170)
  local Num3 = srcUser:GetRunePoint(52171)
  local A = Num1 * 6 + Num2 * 2 + Num3 * 2
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_580(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(52090)
  local A = Num1 * a
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_590(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(42100)
  local A = -0.05 * Num1
  return A
end

function CommonFun.calcBuff_600(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(42090)
  local RuneRate = Num1 * 5
  local A = RuneRate
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_610(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hiding = targetUser:GetProperty("Hiding")
  local A = 0
  if Hiding == 1 then
    A = 100
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_620(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(62040)
  local RuneDamage = Num1 * 0.1 + 1
  local A = RuneDamage * a
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_630(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(62060)
  local Num2 = srcUser:GetRunePoint(62061)
  local Num3 = srcUser:GetRunePoint(62062)
  local Num4 = srcUser:GetRunePoint(62063)
  local Num5 = srcUser:GetRunePoint(62064)
  local A = -0.1 * (Num1 + Num2 + Num3 + Num4 + Num5)
  return A
end

function CommonFun.calcBuff_631(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(62060)
  local Num2 = srcUser:GetRunePoint(62061)
  local Num3 = srcUser:GetRunePoint(62062)
  local Num4 = srcUser:GetRunePoint(62063)
  local Num5 = srcUser:GetRunePoint(62064)
  local A = Num1 + Num2 + Num3 + Num4 + Num5
  return A
end

function CommonFun.calcBuff_640(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(62090)
  local Num2 = srcUser:GetRunePoint(62091)
  local Num3 = srcUser:GetRunePoint(62092)
  local A = (Num1 + Num2 + Num3) * 5
  return A
end

function CommonFun.calcBuff_650(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(88)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1919)
  local Num1 = srcUser:GetRunePoint(22170)
  local AtkAttr = srcUser:GetProperty("AtkAttr")
  local A = 0
  if AtkAttr == 4 and 1 <= Num1 then
    A = 5 * (skilllv_1 + skilllv_2)
  end
  return A
end

function CommonFun.calcBuff_660(srcUser, targetUser, a, b, c, d, lv, damage)
  local Luk = srcUser:GetProperty("Luk")
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = 1
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement)
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (a * lv) * math.floor(Int / 10) * (1 - RefineMDamReduc) * (1 + MDamIncrease) - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2)
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_661(srcUser, targetUser, a, b, c, d, lv, damage)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = 1
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local ElementRate = CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement)
  if (srcUser:HasBuffID(69650) or srcUser:HasBuffID(71090)) and 1 < ElementRate then
    ElementRate = ElementRate * 1.1
  end
  if targetUser:HasBuffID(49130) then
    ElementRate = math.min(ElementRate, 1)
  end
  if srcUser:HasBuffID(49210) then
    ElementRate = ElementRate + 0.15
  end
  local NpcParam = CommonFun.NpcParam(srcUser, targetUser, params, damageParam, logger)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * ElementRate * NpcParam
  local skilllv = srcUser:GetLernedSkillLevel(3102)
  local skilllv2 = srcUser:GetLernedSkillLevel(3120)
  local MDamSpike = srcUser:GetProperty("MDamSpike")
  local WindAtk = srcUser:GetProperty("WindAtk")
  local A = -(MAtkFinal * (1 + MDamSpike) + MRefine) * skilllv * 0.2 * (1 + WindAtk) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * (1 + skilllv2 * 0.05)
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_670(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(22110)
  local A = Num1 * 100
  return A
end

function CommonFun.calcBuff_671(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(22110)
  local A = Num1 + a
  return A
end

function CommonFun.calcBuff_680(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(22041)
  local Num2 = srcUser:GetRunePoint(22043)
  local Num3 = srcUser:GetRunePoint(223009)
  local Num4 = srcUser:GetRunePoint(223011)
  local A = 0
  if 1 <= Num1 + Num2 + Num3 + Num4 then
    A = a
  end
  return A
end

function CommonFun.calcBuff_690(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(12080)
  local RuneDamage = Num1 * 0.07
  local A = a * lv + RuneDamage
  if 0 <= A then
    return 0
  end
  return A
end

function CommonFun.calcBuff_700(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(12130)
  local RuneDamage = Num1 * 0.12
  local A = a + RuneDamage
  if 0 <= A then
    return 0
  end
  return A
end

function CommonFun.calcBuff_710(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(12120)
  local A = Num1 * 15
  return A
end

function CommonFun.calcBuff_720(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(12120)
  local A = -0.2 * Num1
  return A
end

function CommonFun.calcBuff_730(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(12050)
  local A = 100 - Num1 * 100
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_731(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(12050)
  local A = Num1 * 100
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_732(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(12050)
  local Num2 = srcUser:GetRunePoint(12040)
  local A = 0
  if 1 <= Num1 then
    A = 100 * Num2
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_733(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(12050)
  local Num2 = srcUser:GetRunePoint(12041)
  local A = 0
  if 1 <= Num1 then
    A = 100 * Num2
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_734(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(12050)
  local Def = srcUser:GetProperty("Def")
  local Vit = srcUser:GetProperty("Vit")
  local DefPer = srcUser:GetProperty("DefPer")
  local DefFinal = (Def - Vit) * (1 + DefPer) + Vit
  local A = Num1 * a * b * DefFinal
  return A
end

function CommonFun.calcBuff_740(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(12180)
  local A = 100 - Num1 * 100
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_741(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(12180)
  local A = Num1 * (a * lv + b)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_750(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(12060)
  local A = Num1 * a
  return A
end

function CommonFun.calcBuff_760(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(12131)
  local A = Num1 * a + b
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_770(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local profressionID = targetUser:GetProfressionID()
  local skilllv_1 = targetUser:GetLernedSkillLevel(301)
  local skilllv_2 = targetUser:GetLernedSkillLevel(1207)
  local skilllv_3 = targetUser:GetLernedSkillLevel(1472)
  local skilllv_4 = targetUser:GetLernedSkillLevel(1708)
  local Dragon = 0
  local A = 15
  if srcUser:HasBuffID(117110) then
    Dragon = skilllv_2
  end
  if profressionID == 122 or profressionID == 123 or profressionID == 124 or profressionID == 125 or profressionID == 143 or profressionID == 144 or profressionID == 145 or profressionID == 203 or profressionID == 204 or profressionID == 205 then
    A = skilllv_1 + Dragon + skilllv_3 + skilllv_4
  end
  if profressionID == 92 or profressionID == 93 or profressionID == 94 or profressionID == 95 then
    A = skilllv_1
  end
  if A <= 0 then
    A = 1
  end
  return A
end

function CommonFun.calcBuff_780(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(322)
  local skilllv_2 = 0
  if srcUser:HasBuffID(100510) then
    skilllv_2 = srcUser:GetLernedSkillLevel(303)
  end
  local atk1 = 0
  if 1 <= skilllv_1 and skilllv_1 <= 5 then
    atk1 = 1
  elseif 5 < skilllv_1 then
    atk1 = 2
  end
  local A = (a + atk1) * (1 + skilllv_2 * 0.2)
  return A
end

function CommonFun.calcBuff_790(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(322)
  local IgnoreDef = 0
  if 1 <= skilllv_1 and skilllv_1 <= 5 then
    IgnoreDef = 0.005
  elseif 5 < skilllv_1 then
    IgnoreDef = 0.01
  end
  local A = a + IgnoreDef
  return A
end

function CommonFun.calcBuff_800(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Int = srcUser:GetProperty("Int")
  local A = math.floor(Int / 3)
  if A <= 0 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_1900(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Num1 = srcUser:GetRunePoint(120070)
  local RuneDamage = Num1 * 0.1 + 1
  local A = math.floor((MaxHp / a + b) * RuneDamage) * (3 + lv)
  if srcUser:HasBuffID(100727) then
    A = A * 2
  end
  return A
end

function CommonFun.calcBuff_1901(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxSp = srcUser:GetProperty("MaxSp")
  local Num1 = srcUser:GetRunePoint(120070)
  local RuneDamage = Num1 * 0.1 + 1
  local A = math.floor((MaxSp / a + b) * RuneDamage) * (3 + lv)
  if srcUser:HasBuffID(100727) then
    A = A * 2
  end
  return A
end

function CommonFun.calcBuff_1902(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Num1 = srcUser:GetRunePoint(120070)
  local RuneDamage = Num1 * 0.1 + 1
  local skilllv = srcUser:GetLernedSkillLevel(312)
  local A = math.floor((MaxHp / a + b) * RuneDamage) * (3 + skilllv)
  if srcUser:HasBuffID(100727) then
    A = A * 2
  end
  return A
end

function CommonFun.calcBuff_1903(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxSp = srcUser:GetProperty("MaxSp")
  local Num1 = srcUser:GetRunePoint(120070)
  local RuneDamage = Num1 * 0.1 + 1
  local skilllv = srcUser:GetLernedSkillLevel(312)
  local A = math.floor((MaxSp / a + b) * RuneDamage) * (3 + skilllv)
  if srcUser:HasBuffID(100727) then
    A = A * 2
  end
  return A
end

function CommonFun.calcBuff_1910(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxSp = srcUser:GetProperty("MaxSp")
  local A = -math.floor(MaxSp * (0.04 * lv) + lv * 100)
  return A
end

function CommonFun.calcBuff_1920(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(115080) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_1930(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = srcUser:GetBuffEndTime(115080)
  return A
end

function CommonFun.calcBuff_1940(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0.01 * lv
  return A
end

function CommonFun.calcBuff_1950(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(120030)
  local A = -0.5 + lv * 0.05 + 0.03 * Num1
  return A
end

function CommonFun.calcBuff_1960(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(120080)
  local A = 25 * Num1
  return A
end

function CommonFun.calcBuff_1970(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(120090)
  local A = Num1 * 0.01
  return A
end

function CommonFun.calcBuff_1980(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(120170)
  local A = Num1 * 0.01
  return A
end

function CommonFun.calcBuff_2000(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local StunAtk = srcUser:GetProperty("StunAtk")
  local StunDef2 = targetUser:GetProperty("StunDef")
  local StunDam = 1 + StunAtk - StunDef2
  if StunDam <= 0 then
    StunDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = (1 + StateAtk) * (1 - StateDef2)
  if StateDam <= 0 then
    StateDam = 0
  end
  local Num1 = srcUser:GetRunePoint(70110)
  local A = (lv * a + b + Num1 * 15) * StunDam * StateDam * CommonFun.calcAttrDizzyRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_2010(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local BaseLv = srcUser.BaseLv
  local Str = srcUser:GetProperty("Str")
  local Int = srcUser:GetProperty("Int")
  local Num1 = srcUser:GetRunePoint(70080)
  local A = -(Str * 2 + math.floor(Str * Str / 100) + Int * 2 + math.floor(Int * Int / 100) + BaseLv * 10) * 3 * (1 - Num1 * 0.05)
  return A
end

function CommonFun.calcBuff_2020(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(40430) then
    local RefineLv = srcUser:GetEquipedRefineLv(1)
    A = RefineLv / 100
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRing.id == 42579 or equipRing.id == 142579 then
    A = equipRing.refinelv / 100
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRingSD.id == 42579 or equipRingSD.id == 142579 then
    A = equipRingSD.refinelv / 100 * equipRingSD.quench_per / 100
  end
  return A
end

function CommonFun.calcBuff_2030(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(90000935) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_2040(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(90000653) and srcUser:HasBuffID(90000683) then
    local RefineLv = srcUser:GetEquipedRefineLv(2)
    if 10 <= RefineLv then
      A = 0.1
    else
      A = 0.05
    end
  end
  return A
end

function CommonFun.calcBuff_2041(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(41960) and srcUser:HasBuffID(90000683) then
    local RefineLv = srcUser:GetEquipedRefineLv(2)
    if 10 <= RefineLv then
      A = 0.1
    else
      A = 0.05
    end
  end
  return A
end

function CommonFun.calcBuff_2042(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if (equipRing.id == 42087 or equipRing.id == 142087) and srcUser:HasBuffID(90000653) then
    if equipRing.refinelv >= 10 then
      A = 0.1
    else
      A = 0.05
    end
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if (equipRingSD.id == 42087 or equipRingSD.id == 142087) and srcUser:HasBuffID(90000653) then
    if equipRingSD.refinelv >= 10 then
      A = 0.1
    else
      A = 0.05
    end
  end
  return A
end

function CommonFun.calcBuff_2043(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if (equipRing.id == 42087 or equipRing.id == 142087) and srcUser:HasBuffID(41960) then
    if equipRing.refinelv >= 10 then
      A = 0.1
    else
      A = 0.05
    end
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if (equipRingSD.id == 42087 or equipRingSD.id == 142087) and srcUser:HasBuffID(41960) then
    if equipRingSD.refinelv >= 10 then
      A = 0.1
    else
      A = 0.05
    end
  end
  return A
end

function CommonFun.calcBuff_2050(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local RefineLv = srcUser:GetEquipedRefineLv(2)
  if 5 <= RefineLv and RefineLv < 10 then
    A = 0.03
  elseif 10 <= RefineLv and RefineLv < 15 then
    A = 0.07
  elseif 15 <= RefineLv then
    A = 0.12
  end
  return A
end

function CommonFun.calcBuff_2060(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(90000895) and srcUser:HasBuffID(90000733) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_2061(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Flee = srcUser:GetProperty("Flee")
  local A = 5 * Flee
  return A
end

function CommonFun.calcBuff_2070(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(90000995) and srcUser:HasBuffID(90001005) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_2080(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(90000985) and srcUser:HasBuffID(90001073) and srcUser:HasBuffID(40470) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_2090(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local mapid, maptype = srcUser:GetMapInfo()
  local pvpRatio = 1
  if maptype == 2 or maptype == 4 then
    pvpRatio = 0.25
  end
  local A = -MaxHp * 0.09 * pvpRatio
  if srcUser:HasBuffID(90001093) or srcUser:HasBuffID(41732) then
    A = -MaxHp * 0.07 * pvpRatio
  end
  local HolyAtk = srcUser:GetProperty("HolyAtk")
  if srcUser:HasBuffID(22900) then
    A = -MaxHp * (0.09 - math.max(math.min(HolyAtk / 10, 0.06), 0)) * pvpRatio
  end
  return A
end

function CommonFun.calcBuff_2091(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 8
  local B = 0
  if srcUser:HasBuffID(40170) or srcUser:HasBuffID(90000533) or srcUser:HasBuffID(43370) then
    B = 12
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRingSD.id ~= 0 and srcUser:HasBuffLayer(43370, EBUFFERLAYER_SHADOW) then
    B = 12 * equipRingSD.quench_per / 100
  end
  if (srcUser:HasBuffID(115090) or srcUser:HasBuffID(115091)) and (srcUser:HasBuffID(90001093) or srcUser:HasBuffID(41732)) then
    local Hp = srcUser:GetProperty("Hp")
    local MaxHp = srcUser:GetProperty("MaxHp")
    if Hp > MaxHp * 0.09 then
      A = 40
    end
  end
  return A + B
end

function CommonFun.calcBuff_2092(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Profession = srcUser:GetProfressionID()
  local A = 3
  if srcUser:HasBuffID(80000710) and (Profession == 11 or Profession == 12 or Profession == 13 or Profession == 14 or Profession == 15 or Profession == 203 or Profession == 204 or Profession == 205 or Profession == 72 or Profession == 73 or Profession == 74 or Profession == 75) then
    A = 6
  end
  return A
end

function CommonFun.calcBuff_2093(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 3
  if srcUser:HasBuffID(80001290) then
    A = 6
  end
  return A
end

function CommonFun.calcBuff_2100(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(90000985) and srcUser:HasBuffID(40440) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_2110(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(189)
  if skilllv_1 ~= 10 then
    a = 0
  end
  local A = a + b
  return A
end

function CommonFun.calcBuff_2120(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(90001034) and srcUser:HasBuffID(40170) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_2121(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local EquipASPD = srcUser:GetProperty("EquipASPD")
  local A = math.floor(EquipASPD / 2 * 100)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_2130(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if (srcUser:HasBuffID(90000945) or srcUser:HasBuffID(44550)) and (srcUser:HasBuffID(90000955) or srcUser:HasBuffID(44540)) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_2140(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(90001004) or srcUser:HasBuffID(43000) or srcUser:HasBuffLayer(43000, EBUFFERLAYER_SHADOW) then
    A = 0.1
  end
  return A
end

function CommonFun.calcBuff_2150(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 5
  local skilllv_1 = srcUser:GetLernedSkillLevel(150)
  if 2 <= skilllv_1 and skilllv_1 < 4 then
    A = 6
  elseif 4 <= skilllv_1 and skilllv_1 < 6 then
    A = 7
  elseif 6 <= skilllv_1 and skilllv_1 < 8 then
    A = 8
  elseif 8 <= skilllv_1 and skilllv_1 < 10 then
    A = 9
  elseif 10 <= skilllv_1 then
    A = 10
  end
  return A
end

function CommonFun.calcBuff_2151(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local skilllv_1 = srcUser:GetLernedSkillLevel(150)
  local Num = srcUser:GetRunePoint(51004)
  local extraLv = 0
  if 10 < skilllv_1 then
    extraLv = skilllv_1 - 10
  end
  local A = 0.1 + 0.02 * math.min(skilllv_1, 10) + (Num * 1500 + 1500 * extraLv) / MaxHp
  return A
end

function CommonFun.calcBuff_2160(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  if bits[CommonFun.AttrEffect.HideStrengthEffect] == 1 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_2170(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local skilllv_1 = srcUser:GetLernedSkillLevel(102010)
  local A = MaxHp * (a + skilllv_1 * b)
  if A <= 1 then
    A = 1
  end
  return A
end

function CommonFun.calcBuff_2180(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxSp = targetUser:GetProperty("MaxSp")
  local skilllv_1 = srcUser:GetLernedSkillLevel(102000)
  local A = MaxSp * (a + skilllv_1 * b)
  if A <= 1 then
    A = 1
  end
  return A
end

function CommonFun.calcBuff_2190(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  if damage <= 1 then
    return 1
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp = srcUser:GetProperty("Hp")
  local HpRatio = Hp / MaxHp
  local Card1 = srcUser:GetEquipCardNum(7, 23006)
  local Card2 = srcUser:GetEquipCardNum(7, 24627)
  if CommonFun.IsInRate(50, srcUser:GetRandom()) and (srcUser:HasBuffID(80000770) and 1 <= Card1 or srcUser:HasBuffID(81000970) and 1 <= Card2) and HpRatio <= 0.3 then
    return damage * 0.1
  else
    return damage * 0.05
  end
end

function CommonFun.calcBuff_2200(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  if damage <= 1 then
    return 1
  end
  if srcUser:HasBuffID(80000880) then
    return MaxHp * 0.03
  else
    return MaxHp * 0.02
  end
end

function CommonFun.calcBuff_2210(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local MaxSp = srcUser:GetProperty("MaxSp")
  local MaxHpRatio = 0
  local MaxSpRatio = 0
  if 0 <= MaxHp and MaxHp < 2000 then
    MaxHpRatio = 0.01
  elseif 2000 <= MaxHp and MaxHp < 5000 then
    MaxHpRatio = 0.02
  elseif 5000 <= MaxHp and MaxHp < 10000 then
    MaxHpRatio = 0.03
  elseif 10000 <= MaxHp and MaxHp < 20000 then
    MaxHpRatio = 0.04
  elseif 20000 <= MaxHp and MaxHp < 50000 then
    MaxHpRatio = 0.05
  elseif 50000 <= MaxHp and MaxHp < 100000 then
    MaxHpRatio = 0.06
  else
    MaxHpRatio = 0.07
  end
  if 0 <= MaxSp and MaxSp < 200 then
    MaxSpRatio = 0.01
  elseif 200 <= MaxSp and MaxSp < 500 then
    MaxSpRatio = 0.02
  elseif 500 <= MaxSp and MaxSp < 1000 then
    MaxSpRatio = 0.03
  elseif 1000 <= MaxSp and MaxSp < 2000 then
    MaxSpRatio = 0.04
  elseif 2000 <= MaxSp and MaxSp < 5000 then
    MaxSpRatio = 0.05
  elseif 5000 <= MaxSp and MaxSp < 10000 then
    MaxSpRatio = 0.06
  else
    MaxSpRatio = 0.07
  end
  local A = MaxHpRatio + MaxSpRatio + b
  if 1 <= A then
    A = 1
  end
  return A
end

function CommonFun.calcBuff_2220(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local targetRace = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    targetRace = 2
  end
  if targetRace == 5 and srcUser:HasBuffID(50670) then
    return -0.2
  else
    return 0
  end
end

function CommonFun.calcBuff_2230(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44008 or Ring1 == 144008) and 10 <= RefineLv1 and 4 <= order1 then
    a = RefineLv1 / 100
  end
  if (Ring2 == 44008 or Ring2 == 144008) and 10 <= RefineLv2 and 4 <= order2 then
    b = RefineLv2 / 100
  end
  if (Ring1 == 44008 or Ring1 == 144008) and (Ring2 == 44008 or Ring2 == 144008) and 4 <= order1 and 4 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_2240(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp = srcUser:GetProperty("Hp")
  local MaxSp = srcUser:GetProperty("MaxSp")
  local Sp = srcUser:GetProperty("Sp")
  local HpRatio = Hp / MaxHp
  local SpRatio = Sp / MaxSp
  if a >= HpRatio and srcUser:HasBuffID(80001440) and srcUser:HasBuffID(51251) then
    return 100
  else
    return 0
  end
end

function CommonFun.calcBuff_2250(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Vit = targetUser:GetProperty("Vit")
  local Int = srcUser:GetProperty("Int")
  local skilllv_1 = srcUser:GetLernedSkillLevel(419)
  local skilllv_2 = srcUser:GetLernedSkillLevel(423)
  local skilllv_3 = srcUser:GetLernedSkillLevel(3705)
  local rate1 = 1
  local rate2 = 1
  if 1 <= skilllv_1 then
    rate1 = 1.1 + 0.02 * skilllv_1
  end
  if 1 <= skilllv_2 then
    rate2 = 1 + 0.1 * skilllv_2
  end
  local Weapon = srcUser:GetEquipedID(4)
  local rate3 = 1
  if Weapon == 43551 or Weapon == 143551 then
    rate3 = rate3 + 0.2
  end
  if srcUser:HasBuffID(90001563) then
    rate3 = rate3 + 0.2
  end
  if srcUser:HasBuffID(44260) then
    rate3 = rate3 + 0.4
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  if equipRingSD.id ~= 0 and srcUser:HasBuffLayer(44260, EBUFFERLAYER_SHADOW) then
    rate3 = rate3 + 0.4 * equipRingSD.quench_per / 100
  end
  if srcUser:HasBuffID(91000130) or srcUser:HasBuffID(91001630) then
    rate3 = rate3 + 0.1
  end
  if srcUser:HasBuffID(91000700) or srcUser:HasBuffID(91001631) then
    rate3 = rate3 + 0.1
  end
  local A = 400 * (1 + Vit * 0.025) * (1 + Int * 0.005) * rate1 * rate2 * rate3 * (1 + skilllv_3 * 0.3)
  return A
end

function CommonFun.calcBuff_2260(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Int1 = targetUser:GetProperty("Int")
  local Int2 = srcUser:GetProperty("Int")
  local skilllv_1 = srcUser:GetLernedSkillLevel(419)
  local skilllv_2 = srcUser:GetLernedSkillLevel(424)
  local skilllv_3 = srcUser:GetLernedSkillLevel(3705)
  local rate1 = 1
  local rate2 = 1
  if 1 <= skilllv_1 then
    rate1 = 1.1 + 0.02 * skilllv_1
  end
  if 1 <= skilllv_2 then
    rate2 = 1 + skilllv_2
  end
  local Weapon = srcUser:GetEquipedID(4)
  local rate3 = 1
  if Weapon == 43551 or Weapon == 143551 then
    rate3 = rate3 + 0.2
  end
  if srcUser:HasBuffID(90001563) then
    rate3 = rate3 + 0.2
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  if equipRing.id == 43577 or equipRing.id == 143577 then
    rate3 = rate3 + 0.4
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  if equipRingSD.id == 43577 or equipRingSD.id == 143577 then
    rate3 = rate3 + 0.4 * equipRingSD.quench_per / 100
  end
  if srcUser:HasBuffID(91000130) or srcUser:HasBuffID(91001621) then
    rate3 = rate3 + 0.1
  end
  if srcUser:HasBuffID(91000700) or srcUser:HasBuffID(91001622) then
    rate3 = rate3 + 0.1
  end
  local GemValue = srcUser:GetGemValue(132112)
  local A = 50 * (1 + Int1 * 0.015) * (1 + Int2 * 0.0015) * rate1 * rate2 * rate3 * (1 + GemValue / 100000) * (1 + skilllv_3 * 0.1)
  return A
end

function CommonFun.calcBuff_2270(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local Sp = srcUser:GetProperty("Sp")
  local Luk = srcUser:GetProperty("Luk")
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = -(Sp * (1 + Luk / 100) * DefReduc * (1 - RefineDamReduc) * (1 - DamReduc2) - Vit2 * (1 + VitPer2))
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_2271(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Sp = srcUser:GetProperty("Sp")
  local Luk = srcUser:GetProperty("Luk")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local SkillDam = srcUser:GetProperty("SkillDam")
  local SkillRes = targetUser:GetProperty("SkillRes")
  local ResultDamInc = srcUser:GetProperty("ResultDamInc")
  local ResultDamRes = targetUser:GetProperty("ResultDamRes")
  local ActuallySkiRes = SkillRes - SkillDam
  local mapid, maptype = srcUser:GetMapInfo()
  if maptype == 2 or maptype == 4 then
    ActuallySkiRes = ActuallySkiRes < -1 and -1 or 1 < ActuallySkiRes and 1 or ActuallySkiRes
    ActuallySkiRes = math.floor(ActuallySkiRes * 1000) / 1000
    ActuallySkiRes = ActuallySkiRes + 0.4 * (1 - math.sin(ActuallySkiRes * 3.14 / 2))
  end
  local SkillEnd = 1 - ActuallySkiRes
  local Result = 1 + ResultDamInc - ResultDamRes
  local SkillRealDam = math.floor(Sp * (6 + Luk / 50))
  SkillEnd = math.max(SkillEnd, 0.1)
  Result = math.max(Result, 0.1)
  SkillRealDam = math.max(SkillRealDam, 1)
  local A = -SkillRealDam * (1 - RefineDamReduc) * SkillEnd * Result
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_2272(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Sp = srcUser:GetProperty("Sp")
  local Luk = srcUser:GetProperty("Luk")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local SkillDam = srcUser:GetProperty("SkillDam")
  local SkillRes = targetUser:GetProperty("SkillRes")
  local ResultDamInc = srcUser:GetProperty("ResultDamInc")
  local ResultDamRes = targetUser:GetProperty("ResultDamRes")
  local ActuallySkiRes = SkillRes - SkillDam
  local mapid, maptype = srcUser:GetMapInfo()
  if maptype == 2 or maptype == 4 then
    ActuallySkiRes = ActuallySkiRes < -1 and -1 or 1 < ActuallySkiRes and 1 or ActuallySkiRes
    ActuallySkiRes = math.floor(ActuallySkiRes * 1000) / 1000
    ActuallySkiRes = ActuallySkiRes + 0.4 * (1 - math.sin(ActuallySkiRes * 3.14 / 2))
  end
  local SkillEnd = 1 - ActuallySkiRes
  local Result = 1 + ResultDamInc - ResultDamRes
  local SkillRealDam = math.floor(Sp * (6 + Luk / 50))
  SkillEnd = math.max(SkillEnd, 0.1)
  Result = math.max(Result, 0.1)
  SkillRealDam = math.max(SkillRealDam, 1)
  local A = -SkillRealDam * (1 - RefineMDamReduc) * SkillEnd * Result
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_2280(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local skilllv_1 = srcUser:GetLernedSkillLevel(417)
  local A = Atk * (1 + AtkPer) * (0.1 + skilllv_1 * 0.02) + MAtk * (1 + MAtkPer) * skilllv_1 * 0.01
  return A
end

function CommonFun.calcBuff_2290(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local skilllv_1 = srcUser:GetLernedSkillLevel(417)
  local A = Atk * (1 + AtkPer) * skilllv_1 * 0.01 + MAtk * (1 + MAtkPer) * (0.1 + skilllv_1 * 0.02)
  return A
end

function CommonFun.calcBuff_2300(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Vit = srcUser:GetProperty("Vit")
  local skilllv_1 = srcUser:GetLernedSkillLevel(427)
  skilllv_1 = math.min(skilllv_1, 5)
  if skilllv_1 == 0 then
    return 0
  end
  local A = Vit * (skilllv_1 + 2)
  return A
end

function CommonFun.calcBuff_2310(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Vit = srcUser:GetProperty("Vit")
  local skilllv_1 = srcUser:GetLernedSkillLevel(427)
  skilllv_1 = math.min(skilllv_1, 5)
  local A = Vit * skilllv_1
  return A
end

function CommonFun.calcBuff_2320(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(430)
  local A = 100 * skilllv_1
  return A
end

function CommonFun.calcBuff_2330(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:IsBeingPresent(600030) == true then
    A = 20
  end
  return A
end

function CommonFun.calcBuff_2340(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:IsBeingPresent(600020) == true then
    A = 20
  end
  return A
end

function CommonFun.calcBuff_2350(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Int = srcUser:GetProperty("Int")
  local Num = srcUser:GetRunePoint(130070)
  local A = 0.2 * Num * Int
  return A
end

function CommonFun.calcBuff_2360(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Luk = srcUser:GetProperty("Luk")
  local Num = srcUser:GetRunePoint(130240)
  local A = 0.2 * Num * Luk
  return A
end

function CommonFun.calcBuff_2370(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(433)
  local A = 100 * skilllv_1
  return A
end

function CommonFun.calcBuff_2380(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(434)
  local A = 100 * skilllv_1
  return A
end

function CommonFun.calcBuff_2390(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(435)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = 0.02 * skilllv_1 * MaxHp
  return A
end

function CommonFun.calcBuff_2400(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(423)
  local A = 0
  if 1 <= skilllv_1 then
    A = 0.04 * skilllv_1 + 0.1
  end
  return A
end

function CommonFun.calcBuff_2410(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(491)
  local skilllv_2 = srcUser:GetLernedSkillLevel(492)
  local skilllv_3 = srcUser:GetLernedSkillLevel(493)
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Weapon = srcUser:GetEquipedID(7)
  local pojia = 0
  if Weapon == 40746 or Weapon == 140746 or Weapon == 40805 or Weapon == 140805 then
    if 5 <= RefineLv and RefineLv < 10 then
      pojia = 5
    elseif 10 <= RefineLv and RefineLv < 15 then
      pojia = 10
    elseif 15 <= RefineLv then
      pojia = 20
    end
  end
  if (srcUser:HasBuffID(90001893) or srcUser:HasBuffID(22930)) and 5 < RefineLv then
    pojia = pojia + (RefineLv - 5) * 1
  end
  local Weapon_1 = srcUser:GetEquipedID(7)
  local pojia_1 = 0
  if Weapon_1 == 40743 or Weapon_1 == 140743 then
    pojia_1 = 3
  end
  local pojia_8 = 0
  if srcUser:HasBuffID(90001643) and 8 <= RefineLv then
    pojia_8 = 3
  end
  local Vit2 = targetUser:GetProperty("Vit")
  local Rate2 = math.floor(Vit2 / 8)
  local GemValue = srcUser:GetGemValue(91033)
  local GemDam = GemValue / 1000
  local Rate = math.min(skilllv_1 * 3 + skilllv_2 * 3 + skilllv_3 * 3 + pojia + pojia_1 + pojia_8 + (Luk + Dex) / 5, 90 + GemDam) - math.min(Rate2, 50)
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    local off5 = targetUser:IsEquipForceOff(5)
    local off6 = targetUser:IsEquipForceOff(6)
    local off7 = targetUser:IsEquipForceOff(7)
    local equiped5 = targetUser:GetEquipedID(5) ~= 0
    local equiped6 = targetUser:GetEquipedID(6) ~= 0
    local equiped7 = targetUser:GetEquipedID(7) ~= 0
    local skill2 = 0 < skilllv_2
    local skill3 = 0 < skilllv_3
    local odd = {
      1,
      1,
      0,
      0
    }
    if skill2 then
      odd[3] = 2
    end
    if skill3 then
      odd[4] = 2
    end
    if off5 or equiped5 == false then
      odd[1] = 0
    end
    if off6 or equiped6 == false then
      odd[2] = 0
    end
    if off7 or equiped7 == false then
      odd[4] = 0
    end
    if odd[1] == 0 or odd[2] == 0 then
      odd[3] = 0
    end
    local r = 100
    local c1, c2 = 0, 0
    for i, v in ipairs(odd) do
      if v == 2 then
        odd[i] = 30
        r = r - 30
        c2 = c2 + 1
      elseif v == 1 then
        c1 = c1 + 1
      end
    end
    if 0 < c1 then
      for i, v in ipairs(odd) do
        if v == 1 then
          odd[i] = r / c1
        end
      end
    elseif 0 < c2 then
      for i, v in ipairs(odd) do
        if v == 30 then
          odd[i] = 100 / c2
        end
      end
    end
    r = 0
    for i, v in ipairs(odd) do
      if v ~= 0 then
        r = r + v
        odd[i] = r
      end
    end
    local pos = {
      [1] = {
        w = odd[1],
        pos = 5
      },
      [2] = {
        w = odd[2],
        pos = 6
      },
      [3] = {
        w = odd[3],
        pos = 506
      },
      [4] = {
        w = odd[4],
        pos = 7
      }
    }
    local random = srcUser:GetRandom()
    for k, v in ipairs(pos) do
      if random <= v.w then
        return v.pos
      end
    end
    return 0
  end
  return 0
end

function CommonFun.calcBuff_2420(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local n, m = 0, 0
  if targetUser:GetNpcID() == 0 then
    n = 1
  end
  if targetUser:GetNpcID() ~= 0 and targetUser.boss == false and targetUser.mini == false then
    m = 1
  end
  local A = a * n + b * m
  return A
end

function CommonFun.calcBuff_2421(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local m = 0
  if targetUser:GetNpcID() ~= 0 then
    m = 1
  end
  local A = a * m
  return A
end

function CommonFun.calcBuff_2430(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(494)
  local skilllv_2 = srcUser:GetLernedSkillLevel(495)
  local skilllv_3 = srcUser:GetLernedSkillLevel(496)
  local skilllv_4 = srcUser:GetLernedSkillLevel(497)
  local skilllv_5 = srcUser:GetLernedSkillLevel(498)
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Weapon = srcUser:GetEquipedID(7)
  local pojia = 0
  if Weapon == 40746 or Weapon == 140746 or Weapon == 40805 or Weapon == 140805 then
    if 5 <= RefineLv and RefineLv < 10 then
      pojia = 5
    elseif 10 <= RefineLv and RefineLv < 15 then
      pojia = 10
    elseif 15 <= RefineLv then
      pojia = 20
    end
  end
  if (srcUser:HasBuffID(90001893) or srcUser:HasBuffID(22930)) and 5 < RefineLv then
    pojia = pojia + (RefineLv - 5) * 1
  end
  local Weapon_1 = srcUser:GetEquipedID(7)
  local pojia_1 = 0
  if Weapon_1 == 40743 or Weapon_1 == 140743 then
    pojia_1 = 3
  end
  local pojia_8 = 0
  if srcUser:HasBuffID(90001643) and 8 <= RefineLv then
    pojia_8 = 3
  end
  local Vit2 = targetUser:GetProperty("Vit")
  local Rate2 = math.floor(Vit2 / 8)
  local GemValue = srcUser:GetGemValue(91033)
  local GemDam = GemValue / 1000
  local Rate = math.min(skilllv_1 * 3 + skilllv_2 * 3 + skilllv_3 * 3 + skilllv_4 * 3 + pojia + pojia_1 + pojia_8 + (Luk + Dex) / 5, 90 + GemDam) - math.min(Rate2, 50)
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    local skill2 = 0 < skilllv_2
    local skill3 = 0 < skilllv_3
    local skill4 = 0 < skilllv_4
    local skill5 = 0 < skilllv_5
    local off, equiped = {}, {}
    off[1], equiped[1] = targetUser:IsEquipForceOff(1), targetUser:GetEquipedID(1) ~= 0
    off[4], equiped[4] = targetUser:IsEquipForceOff(4), targetUser:GetEquipedID(4) ~= 0
    off[8], equiped[8] = targetUser:IsEquipForceOff(8), targetUser:GetEquipedID(8) ~= 0
    off[2], equiped[2] = targetUser:IsEquipForceOff(2), targetUser:GetEquipedID(2) ~= 0
    local result, rate = 0, 1
    for i = 1, 2 do
      local odd = {
        1,
        0,
        0,
        0
      }
      local c1 = 1
      if off[1] or equiped[1] == false then
        odd[1] = 0
        c1 = c1 - 1
      end
      if skill2 and off[4] == false and equiped[4] then
        odd[2] = 1
        c1 = c1 + 1
      end
      if skill3 and off[8] == false and equiped[8] then
        odd[3] = 1
        c1 = c1 + 1
      end
      if skill4 and off[2] == false and equiped[2] then
        odd[4] = 1
        c1 = c1 + 1
      end
      local r = 0
      for k, v in ipairs(odd) do
        if v == 1 then
          r = 100 / c1 + r
          odd[k] = r
        end
      end
      local pos = {
        [1] = {
          w = odd[1],
          pos = 1
        },
        [2] = {
          w = odd[2],
          pos = 4
        },
        [3] = {
          w = odd[3],
          pos = 8
        },
        [4] = {
          w = odd[4],
          pos = 2
        }
      }
      local random = srcUser:GetRandom()
      for k, v in ipairs(pos) do
        if random <= v.w then
          result = result + v.pos * rate
          rate = rate * 100
          off[v.pos] = true
          break
        end
      end
      if srcUser:GetRandom() > skilllv_5 * 7 then
        break
      end
    end
    return result
  end
  return 0
end

function CommonFun.calcBuff_2440(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Rate = 5
  local skilllv_1 = srcUser:GetLernedSkillLevel(432)
  local skilllv_2 = srcUser:GetLernedSkillLevel(464)
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  local effect = 0
  if 0 < skilllv_1 and skilllv_1 <= 10 then
    effect = 10 + 5 * skilllv_1
  elseif 10 < skilllv_1 then
    effect = 60 + (skilllv_1 - 10) * 2
  end
  Rate = 5 + math.min(effect, (Luk + Dex) / 5) / 4
  local Weapon = srcUser:GetEquipedID(7)
  if Weapon == 41545 or Weapon == 141545 or Weapon == 41567 or Weapon == 141567 then
    Rate = Rate + 5
  end
  if srcUser:HasBuffID(53370) then
    Rate = Rate + 5
  end
  local pos = 0
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    pos = 7
    if 0 < skilllv_2 and CommonFun.IsInRate(skilllv_2 * 10, srcUser:GetRandom()) then
      pos = 107
    end
  end
  return pos
end

function CommonFun.calcBuff_2441(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Rate = 20
  local skilllv_1 = 10
  local skilllv_2 = 10
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  if 0 < skilllv_1 then
    Rate = 5 + math.min(10 + 5 * skilllv_1, (Luk + Dex) / 5) / 4
  end
  local pos = 0
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    pos = 7
    if 0 < skilllv_2 and CommonFun.IsInRate(skilllv_2 * 10, srcUser:GetRandom()) then
      pos = 107
    end
  end
  return pos
end

function CommonFun.calcBuff_2442(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Rate = 20
  local skilllv_1 = 10
  local skilllv_2 = 10
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  if 0 < skilllv_1 then
    Rate = 5 + math.min(10 + 5 * skilllv_1, (Luk + Dex) / 5)
  end
  local pos = 0
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    pos = 2
    if 0 < skilllv_2 and CommonFun.IsInRate(skilllv_2 * 10, srcUser:GetRandom()) then
      pos = 208
    end
  end
  return pos
end

function CommonFun.calcBuff_2443(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  local Rate = 10 + (Luk + Dex) / 30
  local Rate_double = 10 + (Luk + Dex) / 30
  local pos = 0
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    pos = 1
    if CommonFun.IsInRate(Rate_double, srcUser:GetRandom()) then
      pos = 107
    end
  end
  return pos
end

function CommonFun.calcBuff_2444(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  local Rate = 10 + (Luk + Dex) / 30
  local Rate_double = 10 + (Luk + Dex) / 30
  local pos = 0
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    pos = 2
    if CommonFun.IsInRate(Rate_double, srcUser:GetRandom()) then
      pos = 208
    end
  end
  return pos
end

function CommonFun.calcBuff_2445(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Rate = 5
  local skilllv_1 = srcUser:GetLernedSkillLevel(432)
  local skilllv_2 = srcUser:GetLernedSkillLevel(464)
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  local effect = 0
  if 0 < skilllv_1 and skilllv_1 <= 10 then
    effect = 10 + 5 * skilllv_1
  elseif 10 < skilllv_1 then
    effect = 60 + (skilllv_1 - 10) * 2
  end
  Rate = 5 + math.min(effect, (Luk + Dex) / 5) / 4
  local Weapon = srcUser:GetEquipedID(7)
  if Weapon == 41545 or Weapon == 141545 or Weapon == 41567 or Weapon == 141567 then
    Rate = Rate + 5
  end
  if srcUser:HasBuffID(53370) then
    Rate = Rate + 5
  end
  local pos = 0
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    pos = 7
    if 0 < skilllv_2 and CommonFun.IsInRate(skilllv_2 * 10, srcUser:GetRandom()) then
      pos = 107
    end
  end
  local A = 0
  if srcUser:HasBuffID(90004474) then
    A = Rate
  end
  return A
end

function CommonFun.calcBuff_2450(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skill = srcUser:GetLernedSkillLevel(411)
  local skilllv_1 = srcUser:GetLernedSkillLevel(432)
  local skilllv_2 = srcUser:GetLernedSkillLevel(463)
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  local Rate = skill
  local effect = 0
  if 0 < skilllv_1 and skilllv_1 <= 10 then
    effect = 10 + 5 * skilllv_1
  elseif 10 < skilllv_1 then
    effect = 60 + (skilllv_1 - 10) * 2
  end
  Rate = skill + math.min(effect, (Luk + Dex) / 5)
  local Weapon = srcUser:GetEquipedID(7)
  if Weapon == 41545 or Weapon == 141545 or Weapon == 41567 or Weapon == 141567 then
    Rate = Rate + 5
  end
  if srcUser:HasBuffID(53370) then
    Rate = Rate + 5
  end
  local pos = 0
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    pos = 2
    if 0 < skilllv_2 and CommonFun.IsInRate(skilllv_2 * 10, srcUser:GetRandom()) then
      pos = 208
    end
  end
  return pos
end

function CommonFun.calcBuff_2451(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skill = srcUser:GetLernedSkillLevel(411)
  local skilllv_1 = srcUser:GetLernedSkillLevel(432)
  local skilllv_2 = srcUser:GetLernedSkillLevel(463)
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  local Rate = skill
  local effect = 0
  if 0 < skilllv_1 and skilllv_1 <= 10 then
    effect = 10 + 5 * skilllv_1
  elseif 10 < skilllv_1 then
    effect = 60 + (skilllv_1 - 10) * 2
  end
  Rate = skill + math.min(effect, (Luk + Dex) / 5)
  local Weapon = srcUser:GetEquipedID(7)
  if Weapon == 41545 or Weapon == 141545 or Weapon == 41567 or Weapon == 141567 then
    Rate = Rate + 5
  end
  if srcUser:HasBuffID(53370) then
    Rate = Rate + 5
  end
  local A = 0
  if srcUser:HasBuffID(90004474) then
    A = Rate
  end
  return A
end

function CommonFun.calcBuff_2460(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skill = srcUser:GetLernedSkillLevel(422)
  local skilllv_1 = srcUser:GetLernedSkillLevel(432)
  local skilllv_2 = srcUser:GetLernedSkillLevel(464)
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  local Rate = skill
  local effect = 0
  if 0 < skilllv_1 and skilllv_1 <= 10 then
    effect = 10 + 5 * skilllv_1
  elseif 10 < skilllv_1 then
    effect = 60 + (skilllv_1 - 10) * 2
  end
  Rate = skill + math.min(effect, (Luk + Dex) / 5)
  local Weapon = srcUser:GetEquipedID(7)
  if Weapon == 41545 or Weapon == 141545 or Weapon == 41567 or Weapon == 141567 then
    Rate = Rate + 5
  end
  if srcUser:HasBuffID(53370) then
    Rate = Rate + 5
  end
  local pos = 0
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    pos = 7
    if 0 < skilllv_2 and CommonFun.IsInRate(skilllv_2 * 10, srcUser:GetRandom()) then
      pos = 107
    end
  end
  return pos
end

function CommonFun.calcBuff_2461(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skill = srcUser:GetLernedSkillLevel(422)
  local skilllv_1 = srcUser:GetLernedSkillLevel(432)
  local skilllv_2 = srcUser:GetLernedSkillLevel(464)
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  local Rate = skill
  local effect = 0
  if 0 < skilllv_1 and skilllv_1 <= 10 then
    effect = 10 + 5 * skilllv_1
  elseif 10 < skilllv_1 then
    effect = 60 + (skilllv_1 - 10) * 2
  end
  Rate = skill + math.min(effect, (Luk + Dex) / 5)
  local Weapon = srcUser:GetEquipedID(7)
  if Weapon == 41545 or Weapon == 141545 or Weapon == 41567 or Weapon == 141567 then
    Rate = Rate + 5
  end
  if srcUser:HasBuffID(53370) then
    Rate = Rate + 5
  end
  local A = 0
  if srcUser:HasBuffID(90004474) then
    A = Rate
  end
  return A
end

function CommonFun.calcBuff_2470(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skill = srcUser:GetLernedSkillLevel(422)
  local skilllv_1 = srcUser:GetLernedSkillLevel(432)
  local skilllv_2 = srcUser:GetLernedSkillLevel(463)
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  local Rate = skill
  local effect = 0
  if 0 < skilllv_1 and skilllv_1 <= 10 then
    effect = 10 + 5 * skilllv_1
  elseif 10 < skilllv_1 then
    effect = 60 + (skilllv_1 - 10) * 2
  end
  Rate = skill + math.min(effect, (Luk + Dex) / 5)
  local Weapon = srcUser:GetEquipedID(7)
  if Weapon == 41545 or Weapon == 141545 or Weapon == 41567 or Weapon == 141567 then
    Rate = Rate + 5
  end
  if srcUser:HasBuffID(53370) then
    Rate = Rate + 5
  end
  local pos = 0
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    pos = 2
    if 0 < skilllv_2 and CommonFun.IsInRate(skilllv_2 * 10, srcUser:GetRandom()) then
      pos = 208
    end
  end
  return pos
end

function CommonFun.calcBuff_2480(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skill = srcUser:GetLernedSkillLevel(217)
  local skill_cx = srcUser:GetLernedSkillLevel(465)
  if 0 < skill_cx then
    skill = 7
  end
  local pos = 0
  local random1 = srcUser:GetRandom()
  local random2 = srcUser:GetRandom()
  if CommonFun.IsInRate(skill, random1) and CommonFun.IsInRate(skill * 0.7, random2) then
    pos = 207
    if CommonFun.IsInRate(skill, random1) and CommonFun.IsInRate(skill * 0.7, random2) == false then
      pos = 7
    elseif CommonFun.IsInRate(skill, random1) == false and CommonFun.IsInRate(skill * 0.7, random2) then
      pos = 2
    end
  end
  return pos
end

function CommonFun.calcBuff_2481(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local pos = 1020708
  return pos
end

function CommonFun.calcBuff_2490(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skill = srcUser:GetLernedSkillLevel(467)
  local Num1 = srcUser:GetRunePoint(90160)
  local A = skill * 2 + 1 + Num1
  return A
end

function CommonFun.calcBuff_2500(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skill = srcUser:GetLernedSkillLevel(481)
  local Num1 = srcUser:GetRunePoint(90070)
  local A = skill * 0.01 + 0.1 + Num1 * 0.03
  return A
end

function CommonFun.calcBuff_2510(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local Num1 = srcUser:GetRunePoint(90130)
  if 0 < Num1 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_2520(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(90130)
  local A = Num1 * 2
  return A
end

function CommonFun.calcBuff_2530(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(90130)
  local A = Num1 * 0.1
  return A
end

function CommonFun.calcBuff_2540(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skill = srcUser:GetLernedSkillLevel(198)
  local A = 0
  if 10 < skill then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_2550(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local profressionID = srcUser:GetProfressionID()
  local A = 0
  if profressionID == 92 or profressionID == 93 or profressionID == 94 or profressionID == 95 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_2560(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:DamageAlways1() then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_2570(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser:GetNpcID() == 0 or targetUser.boss or targetUser.mini then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_2580(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:IsBeingPresent(600010) == true then
    A = 4
  end
  return A
end

function CommonFun.calcBuff_2581(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:IsBeingPresent(600010) == true then
    A = 8
  end
  return A
end

function CommonFun.calcBuff_2590(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:IsBeingPresent(600020) == true then
    A = 0.04
  end
  return A
end

function CommonFun.calcBuff_2591(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:IsBeingPresent(600020) == true then
    A = 0.08
  end
  return A
end

function CommonFun.calcBuff_2592(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:IsBeingPresent(600020) == true then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_2600(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:IsBeingPresent(600030) == true then
    A = 0.04
  end
  return A
end

function CommonFun.calcBuff_2601(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:IsBeingPresent(600030) == true then
    A = 0.08
  end
  return A
end

function CommonFun.calcBuff_2610(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Flee = srcUser:GetProperty("Flee")
  local Weapon1 = srcUser:GetEquipedID(1)
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local Profession = srcUser:GetProfressionID()
  local A = 0
  if Weapon1 == 61512 or Weapon1 == 161512 then
    if 10 <= RefineLv and RefineLv < 15 then
      A = Flee / 10
    elseif 15 <= RefineLv then
      A = Flee / 10 + Flee / 5
    end
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_2620(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Weapon1 = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if Weapon1 == 41836 or Weapon1 == 141836 then
    A = RefineLv / 100
  end
  return A
end

function CommonFun.calcBuff_2630(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0.05
  if Ring == 40322 or Ring == 140322 then
    if 10 <= RefineLv and RefineLv < 15 then
      A = 0.1
    elseif 15 <= RefineLv then
      A = 0.15000000000000002
    end
  end
  return A
end

function CommonFun.calcBuff_2640(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(4)
  local RefineLv = srcUser:GetEquipedRefineLv(4)
  local A = 0
  if Ring == 43509 or Ring == 143509 then
    if 10 <= RefineLv and RefineLv < 15 then
      A = 0.05
    elseif 15 <= RefineLv then
      A = 0.1
    end
  end
  return A
end

function CommonFun.calcBuff_2650(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0.1
  if Ring == 40011 or Ring == 140011 then
    if 10 <= RefineLv and RefineLv < 15 then
      A = 0.2
    elseif 15 <= RefineLv then
      A = 0.5
    end
  end
  return A
end

function CommonFun.calcBuff_2660(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(3)
  local RefineLv = srcUser:GetEquipedRefineLv(3)
  local A = 0
  if Ring == 43030 or Ring == 143030 then
    if 10 <= RefineLv and RefineLv < 15 then
      A = 0.05
    elseif 15 <= RefineLv then
      A = 0.1
    end
  end
  return A
end

function CommonFun.calcBuff_2670(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(1)
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local A = 10
  if Ring == 42513 or Ring == 142513 then
    if 10 <= RefineLv and RefineLv < 15 then
      A = 15
    elseif 15 <= RefineLv then
      A = 25
    end
  end
  return A
end

function CommonFun.calcBuff_2680(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if (Ring == 40723 or Ring == 140723) and 10 <= RefineLv then
    A = 0.05
  end
  return A
end

function CommonFun.calcBuff_2690(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if (Ring == 40723 or Ring == 140723) and 12 <= RefineLv then
    A = 0.1
  end
  return A
end

function CommonFun.calcBuff_2691(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if (Ring == 40766 or Ring == 140766) and 12 <= RefineLv then
    A = 0.1
  end
  return A
end

function CommonFun.calcBuff_2700(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Weapon1 = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if Weapon1 == 40914 or Weapon1 == 140914 then
    A = RefineLv / 100
  end
  return A
end

function CommonFun.calcBuff_2710(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Weapon1 = srcUser:GetEquipedID(1)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  local A = 0
  if Weapon1 == 42535 or Weapon1 == 142535 or Weapon1 == 42586 or Weapon1 == 142586 then
    A = IgnoreMDef * 100 * 0.5
  end
  return A
end

function CommonFun.calcBuff_2720(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if Ring == 41509 or Ring == 141509 then
    if 5 <= RefineLv and RefineLv < 10 then
      A = 0.03
    elseif 10 <= RefineLv and RefineLv < 15 then
      A = 0.08
    elseif 15 <= RefineLv then
      A = 0.15
    end
  end
  return A
end

function CommonFun.calcBuff_2730(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if Ring == 40621 or Ring == 140621 then
    if 5 <= RefineLv and RefineLv < 10 then
      A = 0.05
    elseif 10 <= RefineLv then
      A = 0.1
    end
  end
  return A
end

function CommonFun.calcBuff_2740(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if (Ring == 40621 or Ring == 140621) and 15 <= RefineLv then
    A = 0.05
  end
  return A
end

function CommonFun.calcBuff_2750(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if (Ring == 41232 or Ring == 141232) and 10 <= RefineLv then
    A = 0.08
  end
  return A
end

function CommonFun.calcBuff_2760(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if (Ring == 41232 or Ring == 141232) and 15 <= RefineLv then
    A = 0.1
  end
  return A
end

function CommonFun.calcBuff_2770(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(2)
  local RefineLv = srcUser:GetEquipedRefineLv(2)
  local A = 0.05
  if Ring == 42055 or Ring == 142055 then
    if 5 <= RefineLv and RefineLv < 10 then
      A = 0.08
    elseif 10 <= RefineLv and RefineLv < 15 then
      A = 0.13
    elseif 15 <= RefineLv then
      A = 0.2
    end
  end
  return A
end

function CommonFun.calcBuff_2780(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 24
  if (Ring == 62509 or Ring == 162509) and 5 <= RefineLv then
    A = 64
  end
  return A
end

function CommonFun.calcBuff_2790(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if (Ring == 62509 or Ring == 162509) and 10 <= RefineLv then
    A = 200
  end
  return A
end

function CommonFun.calcBuff_2800(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if (Ring == 62509 or Ring == 162509) and 15 <= RefineLv then
    A = 0.05
  end
  return A
end

function CommonFun.calcBuff_2810(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 30
  if srcUser:HasBuffID(90001513) and (srcUser:HasBuffID(90001123) or srcUser:HasBuffID(43370)) then
    A = 60
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRingSD.id ~= 0 and srcUser:HasBuffLayer(43370, EBUFFERLAYER_SHADOW) then
    A = 60
  end
  return A
end

function CommonFun.calcBuff_2820(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(1)
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local A = 0
  if Ring == 60504 or Ring == 160504 then
    if 5 <= RefineLv and RefineLv < 10 then
      A = 0.05
    elseif 10 <= RefineLv and RefineLv < 15 then
      A = 0.1
    elseif 15 <= RefineLv then
      A = 0.2
    end
  end
  return A
end

function CommonFun.calcBuff_2830(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(2)
  local RefineLv = srcUser:GetEquipedRefineLv(2)
  local A = 0
  if Ring == 42075 or Ring == 142075 then
    if 5 <= RefineLv and RefineLv < 10 then
      A = 0.02
    elseif 10 <= RefineLv then
      A = 0.05
    end
  end
  return A
end

function CommonFun.calcBuff_2840(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if Ring == 40742 or Ring == 140742 then
    if 10 <= RefineLv and RefineLv < 15 then
      A = 0.05
    elseif 15 <= RefineLv then
      A = 0.15000000000000002
    end
  end
  return A
end

function CommonFun.calcBuff_2850(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(3)
  local RefineLv = srcUser:GetEquipedRefineLv(3)
  local A = a
  if (Ring == 43028 or Ring == 143028) and srcUser:HasBuffID(90001664) then
    A = RefineLv / 100 + a
  end
  return A
end

function CommonFun.calcBuff_2860(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring = srcUser:GetEquipedID(3)
  local RefineLv = srcUser:GetEquipedRefineLv(3)
  local A = 0
  if (Ring == 43032 or Ring == 143032) and 10 <= RefineLv then
    A = 0.1
  end
  return A
end

function CommonFun.calcBuff_2870(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(210)
  local A = 210005
  if skilllv_1 == 10 then
    A = 210010
  end
  return A
end

function CommonFun.calcBuff_2880(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(354)
  local A = 354005
  if skilllv_1 == 10 then
    A = 354010
  end
  return A
end

function CommonFun.calcBuff_2890(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(174)
  local A = 174005
  if skilllv_1 == 10 then
    A = 174010
  end
  return A
end

function CommonFun.calcBuff_2900(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp = srcUser:GetProperty("Hp")
  local A = 100
  if Hp >= MaxHp * 0.4 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_2910(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local Hp = targetUser:GetProperty("Hp")
  local A = -(MaxHp * 0.3 + Hp * 0.1)
  return A
end

function CommonFun.calcBuff_2920(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetBuffLayer(31561)
  local A = 75
  if 1 <= Num1 and Num1 <= 3 then
    A = 55
  elseif 3 < Num1 and Num1 <= 6 then
    A = 35
  elseif 6 < Num1 then
    A = 15
  end
  return A
end

function CommonFun.calcBuff_2930(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(234)
  local Luk = targetUser:GetProperty("Luk")
  local A = 0
  if 10 < skilllv_1 then
    A = Luk / (23 - skilllv_1) / 100
  end
  return A
end

function CommonFun.calcBuff_2940(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:HasSubmitQuest(393310001) == true then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_2950(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local skilllv_1 = srcUser:GetLernedSkillLevel(427)
  if 5 < skilllv_1 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_2960(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(90001303) then
    A = 0.05
  end
  return A
end

function CommonFun.calcBuff_2970(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if srcUser:HasBuffID(107090) or srcUser:HasBuffID(107094) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3000(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Skilllv = srcUser:GetLernedSkillLevel(103130)
  local QualityValue_a = 0
  local QualityValue_b = 0
  QualityValue_a = math.ceil(Skilllv / 2)
  QualityValue_b = math.floor(Skilllv / 2)
  if a == 1 then
    return QualityValue_a
  elseif b == 1 then
    return QualityValue_b
  else
    return 0
  end
end

function CommonFun.calcBuff_3010(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Dex = srcUser:GetProperty("Dex")
  local Vit = targetUser:GetProperty("Vit")
  local Dex2 = targetUser:GetProperty("Dex")
  local m = math.min(0.3, Dex * 0.2 / 100)
  local n = math.min(1, (Vit * 0.4 + Dex2 * 0.4) / 100)
  local Time = 1 + m - n
  if Time <= 0 then
    Time = 0
  end
  local A = (lv * a + b) * Time
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3020(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local PoisonAtk = srcUser:GetProperty("PoisonAtk")
  local PoisonDef2 = targetUser:GetProperty("PoisonDef")
  local PoisonDam = 1 + PoisonAtk - PoisonDef2
  if PoisonDam <= 0 then
    PoisonDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = (1 + StateAtk) * (1 - StateDef2)
  if StateDam <= 0 then
    StateDam = 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1101)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1102)
  local A = (20 + skilllv_2) * PoisonDam * StateDam * CommonFun.calcAttrPoisonRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3021(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local PoisonAtk = srcUser:GetProperty("PoisonAtk")
  local PoisonDef2 = targetUser:GetProperty("PoisonDef")
  local PoisonDam = 1 + PoisonAtk - PoisonDef2
  if PoisonDam <= 0 then
    PoisonDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = (1 + StateAtk) * (1 - StateDef2)
  if StateDam <= 0 then
    StateDam = 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1103)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1102)
  skilllv_1 = math.min(skilllv_1, 10)
  local A = (10 + skilllv_1 * 4 + skilllv_2) * PoisonDam * StateDam * CommonFun.calcAttrPoisonRate(srcUser, targetUser)
  if targetUser:HasBuffID(20610050) and targetUser:HasBuffID(117860) or targetUser:HasBuffID(20610050) and targetUser:HasBuffID(184020) then
    A = 0
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3030(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local PoisonAtk = srcUser:GetProperty("PoisonAtk")
  local PoisonDef2 = targetUser:GetProperty("PoisonDef")
  local PoisonDam = 1 + PoisonAtk - PoisonDef2
  if PoisonDam <= 0 then
    PoisonDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = (1 + StateAtk) * (1 - StateDef2)
  if StateDam <= 0 then
    StateDam = 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1101)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1102)
  local Num = srcUser:GetRunePoint(34060)
  local A = (10 + skilllv_1 + skilllv_2 + Num * 2) * PoisonDam * StateDam * CommonFun.calcAttrPoisonTime(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3040(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Vit = srcUser:GetProperty("Vit")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1128)
  local skilllv_2 = srcUser:GetLernedSkillLevel(4410)
  local skilllv_3 = srcUser:GetLernedSkillLevel(4427)
  local Num = srcUser:GetRunePoint(134030)
  skilllv_1 = math.min(skilllv_1, 10)
  local A = Vit * ((skilllv_1 + skilllv_2) * 4 + Num * 5) * (1 + skilllv_3 * 0.07)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3050(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1140)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local Hp = targetUser:GetProperty("Hp")
  local A = -skilllv_1 / 100 * (1 + MaxHp / Hp * 0.05) * MaxHp
  local B = -skilllv_1 / 100 * (1 + MaxHp / Hp * 0.05)
  A = CommonFun.calcBuff_6(srcUser, targetUser, B, 0, c, d, lv)
  return A
end

function CommonFun.calcBuff_3051(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetRunePoint(94010)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local Hp = targetUser:GetProperty("Hp")
  local A = 0
  if 0 < Num then
    A = -(Num * 0.1 + MaxHp / Hp * 0.05)
  end
  if targetUser.boss == true and targetUser.mini == true then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3060(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 5
  if srcUser:HasBuffID(52430) then
    A = 8
  end
  return A
end

function CommonFun.calcBuff_3061(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 5
  if srcUser:HasBuffID(52430) then
    A = 10
  end
  return A
end

function CommonFun.calcBuff_3069(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local ChantTime = srcUser:GetCurChantTime()
  local mapid, maptype = srcUser:GetMapInfo()
  if (maptype == 2 or maptype == 4) and 3000 <= ChantTime then
    local skilllv3 = srcUser:GetLernedSkillLevel(2263)
    local Luk = srcUser:GetProperty("Luk")
    local Luk2 = targetUser:GetProperty("Luk")
    A = (Luk - Luk2) * skilllv3 * 0.01
    if srcUser:HasBuffID(21730040) and srcUser:HasBuffID(133769) then
      A = A + 5
    end
    if srcUser:HasBuffID(90004674) then
      A = A + 1
    end
    if srcUser:HasBuffID(45264) or srcUser:HasBuffID(45274) or srcUser:HasBuffID(47364) then
      A = A + 7
    end
    if srcUser:HasBuffID(45265) or srcUser:HasBuffID(45275) then
      A = A * 1.77
    end
  end
  if targetUser:HasBuffID(160000) then
    A = 0
  end
  if targetUser.boss == true or targetUser.mini == true then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3070(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = lv * a + b
  if targetUser:HasBuffID(160000) then
    A = 0
  end
  if targetUser.boss == true or targetUser.mini == true then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3071(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(c)
  local A = lv * a + b + Value / 1000
  if targetUser:HasBuffID(160000) then
    A = 0
  end
  if targetUser.boss == true or targetUser.mini == true then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3072(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = lv * a + b
  if targetUser:HasBuffID(25002) then
    A = 0
  end
  if targetUser.boss == true or targetUser.mini == true then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3073(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(a)
  local A = skilllv_1 * b + c
  if srcUser:HasBuffID(90004194) then
    A = A + 10
  end
  if targetUser:HasBuffID(160000) then
    A = 0
  end
  if targetUser.boss == true or targetUser.mini == true then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3074(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = lv * a + b
  if targetUser:HasBuffID(160000) or targetUser:HasBuffID(130002) then
    A = 0
  end
  if targetUser.boss == true or targetUser.mini == true then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3075(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser:GetNpcID() == 310003 or targetUser:GetNpcID() == 310004 or targetUser:GetNpcID() == 310005 or targetUser:GetNpcID() == 310006 then
    A = 0
  end
  if targetUser:GetNpcID() == 310013 or targetUser:GetNpcID() == 310014 or targetUser:GetNpcID() == 310015 or targetUser:GetNpcID() == 310016 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3076(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser.boss == true or targetUser.mini == true then
    A = 100
  end
  if targetUser:HasBuffID(160000) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3077(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = lv * a + b
  if targetUser:HasBuffID(160000) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3078(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(a)
  local A = skilllv_1 * b + c
  if srcUser:HasBuffID(90004194) then
    A = A + 10
  end
  if targetUser:HasBuffID(160000) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3079(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser.boss == true or targetUser.mini == true then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3080(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1185)
  local Vit = srcUser:GetProperty("Vit")
  local Num = srcUser:GetRunePoint(74070)
  local BeHealEncPer2 = targetUser:GetProperty("BeHealEncPer")
  local HealEncPer = srcUser:GetProperty("HealEncPer")
  local A = 0
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local Angel = 1
  if srcUser:HasBuffID(90001817) then
    Angel = 1 + RefineLv / 100 * 2
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRing.id == 42579 or equipRing.id == 142579 then
    Angel = 1 + equipRing.refinelv / 100 * 2
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRingSD.id == 42579 or equipRingSD.id == 142579 then
    Angel = 1 + equipRingSD.refinelv / 100 * 2 * equipRingSD.quench_per / 100
  end
  if srcUser:HasBuffID(90004204) then
    Angel = Angel + 0.15
  end
  if 0 < skilllv_1 and skilllv_1 <= 10 then
    A = skilllv_1 * 2 * (100 + Vit) * (1 + HealEncPer) * (1 + BeHealEncPer2) * (1 + Num / 10) * Angel
  elseif 10 < skilllv_1 then
    A = (20 + skilllv_1) * (100 + Vit) * (1 + HealEncPer) * (1 + BeHealEncPer2) * (1 + Num / 10) * Angel
  end
  local GemValue = srcUser:GetGemValue(72061)
  A = A * (1 + GemValue / 100000)
  if targetUser:HasBuffID(41100050) then
    local MaxHp = targetUser:GetProperty("MaxHp")
    local Hp = targetUser:GetProperty("Hp")
    local Num1 = targetUser:GetBuffLayer(41100050)
    if Hp < MaxHp * (0.15 * Num1) then
      A = A * 3
    end
  end
  return A
end

function CommonFun.calcBuff_3090(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1190)
  local A = skilllv_1 * a
  return A
end

function CommonFun.calcBuff_3100(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1202)
  local MaxSp = targetUser:GetProperty("MaxSp")
  local Num = srcUser:GetRunePoint(124010)
  local A = -(skilllv_1 * 3 + Num * 5) / 100 * MaxSp
  return A
end

function CommonFun.calcBuff_3110(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Vit = targetUser:GetProperty("Vit")
  local Int = srcUser:GetProperty("Int")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1204)
  local BeHealEncPer2 = targetUser:GetProperty("BeHealEncPer")
  local HealEncPer = srcUser:GetProperty("HealEncPer")
  local Num = srcUser:GetRunePoint(124070)
  local A = 0
  if 0 < skilllv_1 and skilllv_1 <= 5 then
    A = 100 * (5 + skilllv_1) * (1 + Vit / 100) * (1 + Int / 100) * (1 + BeHealEncPer2) * (1 + HealEncPer) * (1 + Num * 0.08)
  elseif 5 < skilllv_1 and skilllv_1 <= 10 then
    A = 100 * (10 + skilllv_1 * 0.5) * (1 + Vit / 100) * (1 + Int / 100) * (1 + BeHealEncPer2) * (1 + HealEncPer) * (1 + Num * 0.08)
  end
  return A
end

function CommonFun.calcBuff_3120(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  return 7
end

function CommonFun.calcBuff_3121(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  return 8
end

function CommonFun.calcBuff_3122(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  return 13
end

function CommonFun.calcBuff_3123(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  return 1
end

function CommonFun.calcBuff_3124(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  return 12
end

function CommonFun.calcBuff_3130(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1161)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1916)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = -MaxHp * (0.06 + (skilllv_1 + skilllv_2) * 0.02)
  local B = -0.06 - (skilllv_1 + skilllv_2) * 0.02
  A = CommonFun.calcBuff_6(srcUser, targetUser, B, 0, c, d, lv)
  return A
end

function CommonFun.calcBuff_3140(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(a)
  local MaxSp = targetUser:GetProperty("MaxSp")
  local A = -skilllv_1 * b / 100 * MaxSp
  return A
end

function CommonFun.calcBuff_3150(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local off1 = targetUser:IsEquipForceOff(1)
  local off2 = targetUser:IsEquipForceOff(2)
  local off3 = targetUser:IsEquipForceOff(3)
  local off4 = targetUser:IsEquipForceOff(4)
  local off5 = targetUser:IsEquipForceOff(5)
  local off6 = targetUser:IsEquipForceOff(6)
  local off7 = targetUser:IsEquipForceOff(7)
  local off8 = targetUser:IsEquipForceOff(8)
  local equiped1 = targetUser:GetEquipedID(1) ~= 0
  local equiped2 = targetUser:GetEquipedID(2) ~= 0
  local equiped3 = targetUser:GetEquipedID(3) ~= 0
  local equiped4 = targetUser:GetEquipedID(4) ~= 0
  local equiped5 = targetUser:GetEquipedID(5) ~= 0
  local equiped6 = targetUser:GetEquipedID(6) ~= 0
  local equiped7 = targetUser:GetEquipedID(7) ~= 0
  local equiped8 = targetUser:GetEquipedID(8) ~= 0
  local list = {}
  if off1 == false and equiped1 == true then
    table.insert(list, 1)
  end
  if off2 == false and equiped2 == true then
    table.insert(list, 2)
  end
  if off3 == false and equiped3 == true then
    table.insert(list, 3)
  end
  if off4 == false and equiped4 == true then
    table.insert(list, 4)
  end
  if off5 == false and equiped5 == true then
    table.insert(list, 5)
  end
  if off6 == false and equiped6 == true then
    table.insert(list, 6)
  end
  if off7 == false and equiped7 == true then
    table.insert(list, 7)
  end
  if off8 == false and equiped8 == true then
    table.insert(list, 8)
  end
  if #list <= 0 then
    return 0
  end
  local random = srcUser:GetRandom()
  return list[random % #list + 1]
end

function CommonFun.calcBuff_3151(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local off2 = targetUser:IsEquipForceOff(2)
  local off7 = targetUser:IsEquipForceOff(7)
  local equiped2 = targetUser:GetEquipedID(2) ~= 0
  local equiped7 = targetUser:GetEquipedID(7) ~= 0
  local list = {}
  if off2 == false and equiped2 == true then
    table.insert(list, 2)
  end
  if off7 == false and equiped7 == true then
    table.insert(list, 7)
  end
  if #list <= 0 then
    return 0
  end
  local random = srcUser:GetRandom()
  return list[random % #list + 1]
end

function CommonFun.calcBuff_3152(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local off2 = targetUser:IsEquipForceOff(2)
  local off4 = targetUser:IsEquipForceOff(4)
  local equiped2 = targetUser:GetEquipedID(2) ~= 0
  local equiped4 = targetUser:GetEquipedID(4) ~= 0
  local list = {}
  if off2 == false and equiped2 == true then
    table.insert(list, 2)
  end
  if off4 == false and equiped4 == true then
    table.insert(list, 4)
  end
  if #list <= 0 then
    return 0
  end
  local random = srcUser:GetRandom()
  return list[random % #list + 1]
end

function CommonFun.calcBuff_3153(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 10
  local BuffLevel = targetUser:GetBuffLevel(165734)
  if targetUser:HasBuffID(165734) then
    A = A * (1 - BuffLevel * 0.2)
  end
  return A
end

function CommonFun.calcBuff_3160(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1260)
  local WeaponType = srcUser:GetEquipedWeaponType()
  local A = 0
  if WeaponType == 170 then
    A = skilllv_1 * 0.2
  end
  return A
end

function CommonFun.calcBuff_3170(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1263)
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local Num = srcUser:GetRunePoint(14060)
  local A = MAtk * (1 + MAtkPer) * skilllv_1 * 0.1 * (1 + Num / 20)
  return A
end

function CommonFun.calcBuff_3180(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1264)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1722)
  local MDef2 = srcUser:GetProperty("MDef")
  local MDefPer2 = srcUser:GetProperty("MDefPer")
  skilllv_1 = math.min(skilllv_1 + skilllv_2, 5)
  local A = MDef2 * (1 + MDefPer2) * skilllv_1 * 0.3
  return A
end

function CommonFun.calcBuff_3181(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MDef2 = srcUser:GetProperty("MDef")
  local MDefPer2 = srcUser:GetProperty("MDefPer")
  local Num = srcUser:GetRunePoint(14070)
  local A = -(MDef2 * (1 - Num / 10))
  return A
end

function CommonFun.calcBuff_3190(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1269)
  local Num = srcUser:GetRunePoint(14050)
  local GemValue = srcUser:GetGemValue(11112)
  local A = a * (1 + skilllv_1 / 10 + Num / 20) * (1 + GemValue / 100000)
  if srcUser:HasBuffID(70440) then
    A = A * 1.5
  end
  return A
end

function CommonFun.calcBuff_3200(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local MaxSp = targetUser:GetProperty("MaxSp")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1222)
  skilllv_1 = math.min(skilllv_1, 5)
  local A = MaxHp * (skilllv_1 * 0.005 + 0.015) * a + MaxSp * (skilllv_1 * 0.005 + 0.015) * b
  return A
end

function CommonFun.calcBuff_3210(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1242)
  local A = -MaxHp * (skilllv_1 / 10 + 1) * 0.005
  return A
end

function CommonFun.calcBuff_3220(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local AttrEffect = targetUser:GetProperty("AttrEffect2")
  local bits = CommonFun.getBits(AttrEffect)
  local A = 100
  if targetUser:HasBuffID(160000) or bits[CommonFun.AttrEffect2.Suspend] == 1 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3221(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetRunePoint(24050)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = -(Num * 2 / 100 * MaxHp)
  local B = -Num * 2 / 100
  A = CommonFun.calcBuff_6(srcUser, targetUser, B, 0, c, d, lv)
  return A
end

function CommonFun.calcBuff_3222(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Sp = targetUser:GetProperty("Sp")
  local A = -Sp
  return A
end

function CommonFun.calcBuff_3223(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local TargetAppleNum = srcUser:GetAppleNum()
  local A = 0
  if 5 < TargetAppleNum then
    A = math.max(-0.95, -0.05 * (TargetAppleNum - 5))
  end
  return A
end

function CommonFun.calcBuff_3250(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetRunePoint(c)
  local A = lv * a + b + Num * d
  return A
end

function CommonFun.calcBuff_3251(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = srcUser:GetProperty(CommonFun.GetAttrName(c))
  local A = math.floor(Attr / a * 1000) / 1000 + lv * b + d
  return A
end

function CommonFun.calcBuff_3252(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = srcUser:GetProperty(CommonFun.GetAttrName(c))
  local Ensemble = srcUser:GetEnsemblePartner()
  local A = 0
  if Ensemble ~= nil then
    local Attr2 = Ensemble:GetProperty(CommonFun.GetAttrName(c))
    A = math.floor(Attr / a + Attr2 / a) + lv * b + d
  elseif Ensemble == nil and (srcUser:HasBuffID(128010) == true or srcUser:HasBuffID(128011) == true) then
    A = math.floor(Attr / a) + lv * b + d
  end
  return A
end

function CommonFun.calcBuff_3253(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(c)
  local A = 0
  local Ensemble = srcUser:GetEnsemblePartner()
  if Ensemble ~= nil then
    local Num2 = Ensemble:GetRunePoint(c)
    A = lv * a + b + (Num1 + Num2) * d
  elseif Ensemble == nil and (srcUser:HasBuffID(128010) == true or srcUser:HasBuffID(128011) == true) then
    A = lv * a + b + Num1 * d
  end
  return A
end

function CommonFun.calcBuff_3254(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Int = srcUser:GetProperty("Int")
  local Num = srcUser:GetRunePoint(102034)
  local A = Int / 300 + lv * 0.1 + Num * 0.05
  return A
end

function CommonFun.calcBuff_3255(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetRunePoint(c)
  local diary = 0
  if srcUser:HasBuffID(90002383) and srcUser:HasBuffID(90002147) then
    diary = 3
  end
  if srcUser:HasBuffID(90002383) and srcUser:HasBuffID(42240) then
    diary = 3
  end
  if srcUser:HasBuffID(42620) and srcUser:HasBuffID(90002147) then
    diary = 3
  end
  if srcUser:HasBuffID(42620) and srcUser:HasBuffID(42240) then
    diary = 3
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if equipRingSD.id ~= 0 and srcUser:HasBuffLayer(42620, EBUFFERLAYER_SHADOW) and (srcUser:HasBuffID(90002147) or srcUser:HasBuffID(42240)) then
    diary = 3
  end
  if srcUser:HasBuffID(90004514) and srcUser:HasBuffID(90004515) then
    diary = diary + 5
  end
  local GemValue1 = srcUser:GetGemValue(82001)
  local GemValue2 = 0
  if srcUser:HasBuffID(118340) or srcUser:HasBuffID(118341) or srcUser:HasBuffID(118342) or srcUser:HasBuffID(118343) or srcUser:HasBuffID(118344) then
    GemValue2 = srcUser:GetGemValue(82002)
  end
  local GemDam = GemValue1 / 1000 + GemValue2 / 1000
  local A = lv * a + b + Num * d + diary + GemDam
  return A
end

function CommonFun.calcBuff_3300(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(2)
  if 5 <= RefineLv and RefineLv < 10 then
    A = d + a
  elseif 10 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_3301(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  if 5 <= RefineLv and RefineLv < 10 then
    A = d + a
  elseif 10 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_3302(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(4)
  if 5 <= RefineLv and RefineLv < 10 then
    A = d + a
  elseif 10 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_3303(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  if 5 <= RefineLv and RefineLv < 10 then
    A = d + a
  elseif 10 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_3304(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(3)
  if 5 <= RefineLv and RefineLv < 10 then
    A = d + a
  elseif 10 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_3305(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(12)
  if 5 <= RefineLv and RefineLv < 10 then
    A = d + a
  elseif 10 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_3306(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(9)
  if 5 <= RefineLv and RefineLv < 10 then
    A = d + a
  elseif 10 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_3307(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(8)
  if 5 <= RefineLv and RefineLv < 10 then
    A = d + a
  elseif 10 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_3308(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(11)
  if 5 <= RefineLv and RefineLv < 10 then
    A = d + a
  elseif 10 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_3310(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Flee = srcUser:GetProperty("Flee")
  local A = math.floor(Flee / 10 * 1)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3320(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(3)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_3321(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_3322(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_3323(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(2)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_3324(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(4)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_3325(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(2)
  local A = c
  local DD = 0
  if 0 < RefineLv and srcUser:HasBuffID(90002255) then
    A = RefineLv * a + A
  end
  return A
end

function CommonFun.calcBuff_3326(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(8)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_3327(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(12)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_3328(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(9)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_3330(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(4)
  local Agi = srcUser:GetProperty("Agi")
  local A = 0
  if 12 <= RefineLv and 150 <= Agi then
    A = 0.05
  end
  return A
end

function CommonFun.calcBuff_3331(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(4)
  local Agi = srcUser:GetProperty("Agi")
  local A = 0
  if 12 <= RefineLv and 150 <= Agi then
    A = 0.06
  end
  return A
end

function CommonFun.calcBuff_3340(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(4)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local A = 0
  if 0 <= RefineLv and (225 <= Str or 225 <= Dex) then
    A = 0.03
  end
  return A
end

function CommonFun.calcBuff_3350(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44032 or Ring1 == 144032) and 12 <= RefineLv1 and 4 <= order1 then
    a = 0.04
  end
  if (Ring2 == 44032 or Ring2 == 144032) and 12 <= RefineLv2 and 4 <= order2 then
    b = 0.04
  end
  if (Ring1 == 44032 or Ring1 == 144032) and (Ring2 == 44032 or Ring2 == 144032) and 4 <= order1 and 4 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_3360(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44029 or Ring1 == 144029) and 12 <= RefineLv1 and 4 <= order1 then
    a = 0.03
  end
  if (Ring2 == 44029 or Ring2 == 144029) and 12 <= RefineLv2 and 4 <= order2 then
    b = 0.03
  end
  if (Ring1 == 44029 or Ring1 == 144029) and (Ring2 == 44029 or Ring2 == 144029) and 4 <= order1 and 4 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_3370(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44031 or Ring1 == 144031) and 12 <= RefineLv1 and 4 <= order1 then
    a = 0.03
  end
  if (Ring2 == 44031 or Ring2 == 144031) and 12 <= RefineLv2 and 4 <= order2 then
    b = 0.03
  end
  if (Ring1 == 44031 or Ring1 == 144031) and (Ring2 == 44031 or Ring2 == 144031) and 4 <= order1 and 4 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_3380(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44030 or Ring1 == 144030) and 12 <= RefineLv1 and 4 <= order1 then
    a = 0.06
  end
  if (Ring2 == 44030 or Ring2 == 144030) and 12 <= RefineLv2 and 4 <= order2 then
    b = 0.06
  end
  if (Ring1 == 44030 or Ring1 == 144030) and (Ring2 == 44030 or Ring2 == 144030) and 4 <= order1 and 4 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_3390(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44010 or Ring1 == 144010) and 12 <= RefineLv1 and 4 <= order1 then
    a = 0.04
  end
  if (Ring2 == 44010 or Ring2 == 144010) and 12 <= RefineLv2 and 4 <= order2 then
    b = 0.04
  end
  if (Ring1 == 44010 or Ring1 == 144010) and (Ring2 == 44010 or Ring2 == 144010) and 4 <= order1 and 4 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_3400(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44008 or Ring1 == 144008) and 12 <= RefineLv1 and 8 <= order1 then
    a = 0.05
  end
  if (Ring2 == 44008 or Ring2 == 144008) and 12 <= RefineLv2 and 8 <= order2 then
    b = 0.05
  end
  if (Ring1 == 44008 or Ring1 == 144008) and (Ring2 == 44008 or Ring2 == 144008) and 8 <= order1 and 8 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_3401(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44008 or Ring1 == 144008) and 12 <= RefineLv1 and 8 <= order1 then
    a = -0.05
  end
  if (Ring2 == 44008 or Ring2 == 144008) and 12 <= RefineLv2 and 8 <= order2 then
    b = -0.05
  end
  if (Ring1 == 44008 or Ring1 == 144008) and (Ring2 == 44008 or Ring2 == 144008) and 8 <= order1 and 8 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_3410(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if 12 <= RefineLv then
    A = 0.03
  end
  return A
end

function CommonFun.calcBuff_3420(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(4)
  local A = 0
  if 12 <= RefineLv then
    A = 0.02
  end
  return A
end

function CommonFun.calcBuff_3430(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if 13 <= RefineLv then
    A = 0.05
  end
  return A
end

function CommonFun.calcBuff_3440(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0.05
  if 13 <= RefineLv then
    A = 0.1 + A
  end
  return A
end

function CommonFun.calcBuff_3441(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if 5 <= RefineLv and RefineLv < 13 then
    A = 0.1
  elseif 13 <= RefineLv then
    A = 0.2
  end
  return A
end

function CommonFun.calcBuff_3450(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Dex = targetUser:GetProperty("Dex")
  local A = 53
  if 15 <= RefineLv then
    A = math.floor(Dex / 10) * 4 + A
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3451(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  if 5 <= RefineLv and RefineLv < 10 then
    A = d + a
  elseif 10 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  local Dex = srcUser:GetProperty("Dex")
  if 240 <= Dex then
    A = 0.02 + A
  end
  return A
end

function CommonFun.calcBuff_3452(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Dex = targetUser:GetProperty("Dex")
  local A = 0
  if 15 <= RefineLv then
    A = math.floor(Dex / 10) * 4 + A
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3460(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local A = 70
  if 12 <= RefineLv then
    A = A + math.floor(Str / 10) * 2 + math.floor(Dex / 10) * 2 + math.floor(Luk / 10) * 2
  end
  return A
end

function CommonFun.calcBuff_3461(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local A = 70
  if 10 <= RefineLv then
    A = A + math.floor(Str / 10) * 2 + math.floor(Dex / 10) * 2 + math.floor(Luk / 10) * 2
  end
  return A
end

function CommonFun.calcBuff_3462(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local A = 0
  if 10 <= RefineLv then
    A = A + math.floor(Str / 10) * 2 + math.floor(Dex / 10) * 2 + math.floor(Luk / 10) * 2
  end
  return A
end

function CommonFun.calcBuff_3470(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 3
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(90000617) and 10 <= RefineLv then
    A = 5
  end
  return A
end

function CommonFun.calcBuff_3471(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 3
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(41890) and 10 <= RefineLv then
    A = 5
  end
  return A
end

function CommonFun.calcBuff_3480(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Str = targetUser:GetProperty("Str")
  local A = 0
  if 15 <= RefineLv then
    A = math.floor(Str / 10) * 4
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3481(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  if 240 <= Str then
    A = 0.03
  end
  return A
end

function CommonFun.calcBuff_3500(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local Ring1 = srcUser:GetEquipedID(2)
  if Ring1 == 42077 or Ring1 == 142077 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_3490(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Ring1 = srcUser:GetEquipedID(7)
  if (Ring1 == 40047 or Ring1 == 140047) and 10 <= RefineLv then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_3492(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Ring1 = srcUser:GetEquipedID(7)
  if (Ring1 == 41526 or Ring1 == 141526) and 10 <= RefineLv and srcUser:HasBuffID(90002041) then
    A = 15
  end
  if (Ring1 == 41565 or Ring1 == 141565) and 10 <= RefineLv then
    A = 15
  end
  return A
end

function CommonFun.calcBuff_3491(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Ring1 = srcUser:GetEquipedID(7)
  if (Ring1 == 40057 or Ring1 == 140057) and 10 <= RefineLv then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_3510(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(52640) then
    A = 0.08
  end
  return A
end

function CommonFun.calcBuff_3511(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(81000500) and srcUser:HasBuffID(52640) then
    A = 0.02
  end
  return A
end

function CommonFun.calcBuff_3520(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(52650) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_3530(srcUser, targetUser, a, b, c, d, lv)
  local MaxHp = srcUser:GetProperty("MaxHp")
  local mapid, maptype = srcUser:GetMapInfo()
  if srcUser == nil or targetUser == nil then
    return 0
  end
  if maptype == 2 or maptype == 4 then
    MaxHp = MaxHp * 0.25
  end
  local A = MaxHp * a
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_3540(srcUser, targetUser, a, b, c, d, lv)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local Hp2 = targetUser:GetProperty("Hp")
  local MaxHp2 = targetUser:GetProperty("MaxHp")
  lv = math.min(lv, 10)
  local damChangePer = 0.3 * lv + 3
  local damChangePer1 = 4 * lv
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local raceparam = 1
  local srcRace = srcUser.race
  local targetRace = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    targetRace = 2
  end
  if targetUser:HasBuffID(49320) and targetUser:HasBuffID(49325) then
  elseif targetUser:HasBuffID(49320) then
    srcRace = 2
  end
  if nil == CommonFun.RaceProps[targetRace] then
    return 0
  end
  if nil == CommonFun.RaceProps[srcRace] then
    return 0
  end
  local raceInc = srcUser:GetProperty(CommonFun.RaceProps[targetRace][1])
  local raceRed = targetUser:GetProperty(CommonFun.RaceProps[srcRace][2])
  local raceparam = 1 + raceInc - raceRed
  local mapid, maptype = srcUser:GetMapInfo()
  if maptype == 2 or maptype == 4 then
    local B = raceRed - raceInc
    B = B < -1 and -1 or 1 < B and 1 or B
    B = math.floor(B * 1000) / 1000
    B = B + 0.3 * (1 - math.sin(B * 3.14 / 2))
    raceparam = 1 - B
  end
  if raceparam <= 0.1 then
    raceparam = 0.1
  end
  local srcAtkElement = 5
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local ElementRate = CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement)
  if (srcUser:HasBuffID(69650) or srcUser:HasBuffID(71090)) and 1 < ElementRate then
    ElementRate = ElementRate * 1.1
  end
  if targetUser:HasBuffID(49130) then
    ElementRate = math.min(ElementRate, 1)
  end
  if srcUser:HasBuffID(49210) then
    ElementRate = ElementRate + 0.15
  end
  if nil == CommonFun.NatureProps[srcAtkElement] or nil == CommonFun.NatureProps[targetDefElement] or nil == targetDefElement then
    return 0
  end
  local elementInc = srcUser:GetProperty(CommonFun.NatureProps[targetDefElement][1])
  local elementRed = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement][2])
  local elementAtk = srcUser:GetProperty(CommonFun.NatureProps[srcAtkElement][3])
  local elementparam = (1 + elementInc) * ElementRate
  local elementparam2 = 1 + elementAtk - elementRed
  local mapid, maptype = srcUser:GetMapInfo()
  if maptype == 2 or maptype == 4 then
    local B = elementRed - elementAtk
    B = B < -1 and -1 or 1 < B and 1 or B
    B = math.floor(B * 1000) / 1000
    B = B + 0.3 * (1 - math.sin(B * 3.14 / 2))
    elementparam2 = 1 - B
  end
  if elementparam2 <= 0.1 then
    elementparam2 = 0.1
  end
  local ele = elementparam * elementparam2
  if targetDefElement == nil or ElementRate == nil or elementInc == nil or elementRed == nil or elementAtk == nil then
    ele = 1
  end
  local NpcParam = CommonFun.NpcParam(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * ele + BaseAtk) * raceparam * NpcParam
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local Int2 = targetUser:GetProperty("Int")
  local Numxp = srcUser:GetRunePoint(94050)
  local RuneDamage = 1 + Numxp * 0.1
  local GemValue = srcUser:GetGemValue(91022)
  local GemDam = 1 + GemValue / 100000
  local bloodrain = 1
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits3 = CommonFun.getBits(StateEffect)
  if bits3[CommonFun.StateEffect.Poison] == 1 and srcUser:HasBuffID(64350) then
    bloodrain = bloodrain + 0.1
  end
  local A = -(((AtkFinal + Int2 * damChangePer1) * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2)) * RuneDamage * GemDam * bloodrain
  if bits[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  if GetNpcID == 280711 or GetNpcID == 280413 or GetNpcID == 280708 or GetNpcID == 280434 then
    A = math.floor(A / 100)
  end
  return A
end

function CommonFun.calcBuff_3541(srcUser, targetUser, a, b, c, d, lv)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local Hp2 = targetUser:GetProperty("Hp")
  local MaxHp2 = targetUser:GetProperty("MaxHp")
  local damChangePer = 0.3 * lv + 1.3
  local AttrEffect = srcUser:GetProperty("AttrEffect")
  local bits = CommonFun.getBits(AttrEffect)
  local raceparam = 1
  local srcRace = srcUser.race
  local targetRace = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    targetRace = 2
  end
  if targetUser:HasBuffID(49320) and targetUser:HasBuffID(49325) then
  elseif targetUser:HasBuffID(49320) then
    srcRace = 2
  end
  if nil == CommonFun.RaceProps[targetRace] then
    return 0
  end
  if nil == CommonFun.RaceProps[srcRace] then
    return 0
  end
  local raceInc = srcUser:GetProperty(CommonFun.RaceProps[targetRace][1])
  local raceRed = targetUser:GetProperty(CommonFun.RaceProps[srcRace][2])
  local raceparam = 1 + raceInc - raceRed
  local mapid, maptype = srcUser:GetMapInfo()
  if maptype == 2 or maptype == 4 then
    local B = raceRed - raceInc
    B = B < -1 and -1 or 1 < B and 1 or B
    B = math.floor(B * 1000) / 1000
    B = B + 0.3 * (1 - math.sin(B * 3.14 / 2))
    raceparam = 1 - B
  end
  if raceparam <= 0.1 then
    raceparam = 0.1
  end
  local srcAtkElement = 10
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local ElementRate = CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement)
  local NumXp1 = srcUser:GetRunePoint(31019)
  local NumXp2 = srcUser:GetRunePoint(31020)
  local RuneRate = (NumXp1 + NumXp2) * 0.1
  ElementRate = ElementRate + RuneRate
  if (srcUser:HasBuffID(69650) or srcUser:HasBuffID(71090)) and 1 < ElementRate then
    ElementRate = ElementRate * 1.1
  end
  if targetUser:HasBuffID(49130) then
    ElementRate = math.min(ElementRate, 1)
  end
  if srcUser:HasBuffID(49210) then
    ElementRate = ElementRate + 0.15
  end
  if nil == CommonFun.NatureProps[srcAtkElement] or nil == CommonFun.NatureProps[targetDefElement] or nil == targetDefElement then
    return 0
  end
  local elementInc = srcUser:GetProperty(CommonFun.NatureProps[targetDefElement][1])
  local elementRed = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement][2])
  local elementAtk = srcUser:GetProperty(CommonFun.NatureProps[srcAtkElement][3])
  local elementparam = (1 + elementInc) * ElementRate
  local elementparam2 = 1 + elementAtk - elementRed
  local mapid, maptype = srcUser:GetMapInfo()
  if maptype == 2 or maptype == 4 then
    local B = elementRed - elementAtk
    B = B < -1 and -1 or 1 < B and 1 or B
    B = math.floor(B * 1000) / 1000
    B = B + 0.3 * (1 - math.sin(B * 3.14 / 2))
    elementparam2 = 1 - B
  end
  if elementparam2 <= 0.1 then
    elementparam2 = 0.1
  end
  local ele = elementparam * elementparam2
  if targetDefElement == nil or ElementRate == nil or elementInc == nil or elementRed == nil or elementAtk == nil then
    ele = 1
  end
  local NpcParam = CommonFun.NpcParam(srcUser, targetUser, params, damageParam, logger)
  local BaseAtk = Str * 2 + math.floor(Str * Str / 100) + math.floor(Dex / 5) + math.floor(Luk / 5)
  local AtkFinal = ((Atk - BaseAtk) * (1 + AtkPer) * CommonFun.ShapeCorrection(srcUser, targetUser) * ele + BaseAtk) * raceparam * NpcParam
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local bloodrain = 1
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits3 = CommonFun.getBits(StateEffect)
  if bits3[CommonFun.StateEffect.Poison] == 1 and srcUser:HasBuffID(64350) then
    bloodrain = bloodrain + 0.1
  end
  local A = -((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * damChangePer * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2)) * bloodrain
  if bits[CommonFun.AttrEffect.Hualiduanjian] == 1 then
    return A * 1.5
  end
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  if targetUser:HasBuffID(20610050) and targetUser:HasBuffID(117860) or targetUser:HasBuffID(20610050) and targetUser:HasBuffID(184020) then
    A = 0
  end
  if GetNpcID == 280709 or GetNpcID == 280436 then
    A = math.floor(A / 100)
  end
  return A
end

function CommonFun.calcBuff_3550(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local A = a
  if 200 <= Str or 200 <= Dex then
    A = a + b
  end
  return A
end

function CommonFun.calcBuff_3560(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Int = srcUser:GetProperty("Int")
  local A = a
  if 200 <= Int then
    A = a + b
  end
  return A
end

function CommonFun.calcBuff_3570(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(11)
  local A = a
  if c <= RefineLv then
    A = a + b
  end
  return A
end

function CommonFun.calcBuff_3580(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(11)
  local A = a
  if c <= RefineLv then
    A = a + b * (RefineLv - c)
  end
  return A
end

function CommonFun.calcBuff_3590(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local A = a
  if 225 <= Str or 225 <= Dex then
    A = a + b
  end
  return A
end

function CommonFun.calcBuff_3600(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(103180)
  local SlowAtk = srcUser:GetProperty("SlowAtk")
  local SlowDef2 = targetUser:GetProperty("SlowDef")
  local SlowDam = 1 + SlowAtk - SlowDef2
  if SlowDam <= 0 then
    SlowDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = (1 + StateAtk) * (1 - StateDef2)
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (skilllv_1 * a + b) * SlowDam * StateDam * CommonFun.calcAttrSlowRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3610(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local target_Hp = targetUser:GetProperty("Hp")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1168)
  local A = -math.min(target_Hp * (skilllv_1 - 5) * 0.03, (skilllv_1 - 5) * 10000)
  if targetUser.boss or targetUser.mini then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3620(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(103680)
  local A = skilllv_1 * a + b
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3630(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local FreezeAtk = srcUser:GetProperty("FreezeAtk")
  local FreezeDef2 = targetUser:GetProperty("FreezeDef")
  local FreezeDam = 1 + FreezeAtk - FreezeDef2
  if FreezeDam <= 0 then
    FreezeDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = (1 + StateAtk) * (1 - StateDef2)
  if StateDam <= 0 then
    StateDam = 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(103700)
  local A = (skilllv_1 * a + b) * FreezeDam * StateDam * CommonFun.calcAttrFreezeRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3640(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local BlindAtk = srcUser:GetProperty("BlindAtk")
  local BlindDef2 = targetUser:GetProperty("BlindDef")
  local BlindDam = 1 + BlindAtk - BlindDef2
  if BlindDam <= 0 then
    BlindDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = (1 + StateAtk) * (1 - StateDef2)
  if StateDam <= 0 then
    StateDam = 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(103710)
  local A = (skilllv_1 * a + b) * BlindDam * StateDam * CommonFun.calcAttrBurnRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3650(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Int = srcUser:GetProperty("Int")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1128)
  local A = math.floor(Int * (skilllv_1 - 10) * 0.2)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3660(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Def = srcUser:GetProperty("Def")
  local DefPer = srcUser:GetProperty("DefPer")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1181)
  local A = math.floor(Def * (1 + DefPer) * (skilllv_1 - 10) * 0.2 / 12)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3670(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MDef = srcUser:GetProperty("MDef")
  local MDefPer = srcUser:GetProperty("MDefPer")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1181)
  local A = math.floor(MDef * (1 + MDefPer) * (skilllv_1 - 10) * 0.2 / 6)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3680(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Int = srcUser:GetProperty("Int")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1250)
  local A = math.floor(Int / (10 * (11 - skilllv_1))) / 100
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3690(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1317)
  local Num = srcUser:GetRunePoint(83040)
  local MaxHp = srcUser:GetProperty("MaxHp")
  local A = -MaxHp * (skilllv_1 * 0.01 - Num * 0.01)
  if 0 < A then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3691(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1317)
  local MaxHp = srcUser:GetProperty("MaxHp")
  local mapid, maptype = srcUser:GetMapInfo()
  if maptype == 2 or maptype == 4 then
    MaxHp = MaxHp * 0.25
  end
  local Num_hp = srcUser:GetRunePoint(82018)
  local A = MaxHp * skilllv_1 * 0.01 * (1 + Num_hp * 0.1)
  return A
end

function CommonFun.calcBuff_3700(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MDamReduc = srcUser:GetProperty("MDamReduc")
  local A = math.floor(MDamReduc * 100 * 75)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_3710(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1325)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local skilllv_2 = srcUser:GetLernedSkillLevel(1333)
  local BeHealEncPer2 = targetUser:GetProperty("BeHealEncPer")
  local HealEncPer = srcUser:GetProperty("HealEncPer")
  local Element = 0
  local ElementNpc = srcUser:getCurElementElfID()
  if ElementNpc == 580010 then
    Element = 0.001 * skilllv_2
  end
  local mapid, maptype = srcUser:GetMapInfo()
  if (maptype == 2 or maptype == 4) and srcUser:HasBuffID(20820100) == false then
    MaxHp = MaxHp * 0.25
  end
  local GemValue = srcUser:GetGemValue(82091)
  local GemDam = 1 + GemValue / 100000
  local A = MaxHp * (skilllv_1 * 0.004 + 0.008 + Element) * (1 + BeHealEncPer2) * (1 + HealEncPer) * GemDam
  return A
end

function CommonFun.calcBuff_3711(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxSp = targetUser:GetProperty("MaxSp")
  local GemValue = srcUser:GetGemValue(82131)
  local A = MaxSp * GemValue / 100000
  return A
end

function CommonFun.calcBuff_3720(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1334)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1333)
  local A = 50 + 10 * skilllv_1 + 10 * skilllv_2
  return A
end

function CommonFun.calcBuff_3730(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(52880) then
    A = 0.05
  end
  return A
end

function CommonFun.calcBuff_3731(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(56350) then
    A = 0.05
  end
  return A
end

function CommonFun.calcBuff_3740(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Int = srcUser:GetProperty("Int")
  local A = -math.floor(Int / 2)
  return A
end

function CommonFun.calcBuff_3741(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  local A = -math.floor(Str / 2)
  return A
end

function CommonFun.calcBuff_3742(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Dex = srcUser:GetProperty("Dex")
  local A = -math.floor(Dex / 2)
  return A
end

function CommonFun.calcBuff_3743(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Agi = srcUser:GetProperty("Agi")
  local A = -math.floor(Agi / 2)
  return A
end

function CommonFun.calcBuff_3744(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Vit = srcUser:GetProperty("Vit")
  local A = -math.floor(Vit / 2)
  return A
end

function CommonFun.calcBuff_3745(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Luk = srcUser:GetProperty("Luk")
  local A = -math.floor(Luk / 2)
  return A
end

function CommonFun.calcBuff_3750(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Skilllv = srcUser:GetLernedSkillLevel(103740)
  local QualityValue_a = 0
  local QualityValue_b = 0
  QualityValue_a = math.ceil(Skilllv / 2)
  QualityValue_b = math.floor(Skilllv / 2)
  if a == 1 then
    return QualityValue_a
  elseif b == 1 then
    return QualityValue_b
  else
    return 0
  end
end

function CommonFun.calcBuff_3760(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetRunePoint(c)
  local A = lv * a * Num
  return A
end

function CommonFun.calcBuff_3770(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetRunePoint(93030)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = -(Num * 0.5 / 100 * MaxHp)
  if targetUser.boss == true and targetUser.mini == true then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_3780(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetRunePoint(13030)
  local Vit = srcUser:GetProperty("Vit")
  local A = Num * 1 / 5 * Vit
  return A
end

function CommonFun.calcBuff_3790(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetRunePoint(123010)
  local A = (1 - Num) * lv * a + Num * 10
  return A
end

function CommonFun.calcBuff_3800(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetRunePoint(123030)
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local A = math.floor(Atk * (1 + AtkPer) * 0.2 * Num / 50)
  return A
end

function CommonFun.calcBuff_3810(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skill = srcUser:GetLernedSkillLevel(192)
  local Num1 = srcUser:GetRunePoint(33040)
  local A = skill * 2 + 1 + Num1
  return A
end

function CommonFun.calcBuff_3820(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1391)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1440)
  local Vit = srcUser:GetProperty("Vit")
  local Int = srcUser:GetProperty("Int")
  local BeHealEncPer2 = targetUser:GetProperty("BeHealEncPer")
  local HealEncPer = srcUser:GetProperty("HealEncPer")
  local Num = srcUser:GetRunePoint(102045)
  local GemValue1 = srcUser:GetGemValue(102081)
  local GemValue2 = srcUser:GetGemValue(112081)
  local Gem = 1 + GemValue1 / 100000 + GemValue2 / 100000
  local A = ((skilllv_1 + skilllv_2) * 3 + 20) * (Vit / 2 + Int) * (1 + HealEncPer) * (1 + BeHealEncPer2) * (1 + Num * 0.05) * Gem
  return A
end

function CommonFun.calcBuff_3830(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local Sp = srcUser:GetProperty("Sp")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1367)
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = -(Sp * (skilllv_1 + 1) * DefReduc * (1 - RefineDamReduc) * (1 - DamReduc2) - Vit2 * (1 + VitPer2))
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_3840(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1418)
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = -(Atk * (1 + AtkPer) * (skilllv_1 * 1.2 + 1.2) * DefReduc * (1 - RefineDamReduc) * (1 - DamReduc2) - Vit2 * (1 + VitPer2))
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_3850(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ensemble = srcUser:GetEnsemblePartner()
  local mapid, maptype = srcUser:GetMapInfo()
  local MaxHp1 = srcUser:GetProperty("MaxHp")
  local MaxHp2 = 0
  if Ensemble ~= nil then
    MaxHp2 = Ensemble:GetProperty("MaxHp")
  end
  local MaxHp = MaxHp1 + MaxHp2
  if maptype == 2 or maptype == 4 then
    MaxHp = (MaxHp1 + MaxHp2) * 0.25
  end
  local A = 0
  if lv <= 10 then
    A = MaxHp * 0.05 + lv * 400 + 1000
  elseif 10 < lv then
    A = MaxHp * (0.05 + (lv - 10) * 0.02) + 5000
  end
  local GemValue1 = srcUser:GetGemValue(102051)
  local GemValue2 = 0
  local GemValue3 = srcUser:GetGemValue(112051)
  local GemValue4 = 0
  if Ensemble ~= nil then
    GemValue2 = Ensemble:GetGemValue(102051)
    GemValue4 = Ensemble:GetGemValue(112051)
  end
  local Gem = 1 + GemValue1 / 100000 + GemValue2 / 100000 + GemValue3 / 100000 + GemValue4 / 100000
  local MaxHpPer2 = targetUser:GetProperty("MaxHpPer")
  A = A * Gem / (1 + MaxHpPer2)
  if srcUser:GetEnsembleSkillDouble() == true then
    A = A * 2
  end
  return A
end

function CommonFun.calcBuff_3860(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ensemble = srcUser:GetEnsemblePartner()
  local Atk1 = srcUser:GetProperty("Atk")
  local AtkPer1 = srcUser:GetProperty("AtkPer")
  local Atk2 = 0
  local AtkPer2 = 0
  if Ensemble ~= nil then
    Atk2 = Ensemble:GetProperty("Atk")
    AtkPer2 = Ensemble:GetProperty("AtkPer")
  end
  local Atk = Atk1 * (1 + AtkPer1) + Atk2 * (1 + AtkPer2)
  local Num1 = srcUser:GetRunePoint(102049)
  local Num2 = 0
  if Ensemble ~= nil then
    Num2 = Ensemble:GetRunePoint(102049)
  end
  local Rune = (Num1 + Num2) * 0.02 + 1
  local A = 0
  if lv <= 10 then
    A = lv * 15 * Rune
  elseif 10 < lv then
    A = (Atk * ((lv - 10) * 0.004) + 150) * Rune
  end
  local GemValue1 = srcUser:GetGemValue(102021)
  local GemValue2 = 0
  local GemValue3 = srcUser:GetGemValue(112021)
  local GemValue4 = 0
  if Ensemble ~= nil then
    GemValue2 = Ensemble:GetGemValue(112021)
    GemValue4 = Ensemble:GetGemValue(102021)
  end
  A = A * (1 + GemValue1 / 100000 + GemValue2 / 100000 + GemValue3 / 100000 + GemValue4 / 100000)
  if srcUser:GetEnsembleSkillDouble() == true then
    A = A * 2
  end
  return A
end

function CommonFun.calcBuff_3870(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ensemble = srcUser:GetEnsemblePartner()
  local MAtk1 = srcUser:GetProperty("MAtk")
  local MAtkPer1 = srcUser:GetProperty("MAtkPer")
  local MAtk2 = 0
  local MAtkPer2 = 0
  if Ensemble ~= nil then
    MAtk2 = Ensemble:GetProperty("MAtk")
    MAtkPer2 = Ensemble:GetProperty("MAtkPer")
  end
  local MAtk = MAtk1 * (1 + MAtkPer1) + MAtk2 * (1 + MAtkPer2)
  local Num1 = srcUser:GetRunePoint(102048)
  local Num2 = 0
  if Ensemble ~= nil then
    Num2 = Ensemble:GetRunePoint(102048)
  end
  local Rune = (Num1 + Num2) * 0.02 + 1
  local A = 0
  if lv <= 10 then
    A = lv * 15 * Rune
  elseif 10 < lv then
    A = (MAtk * ((lv - 10) * 0.004) + 150) * Rune
  end
  local GemValue1 = srcUser:GetGemValue(112022)
  local GemValue2 = 0
  local GemValue3 = srcUser:GetGemValue(102022)
  local GemValue4 = 0
  if Ensemble ~= nil then
    GemValue2 = Ensemble:GetGemValue(102022)
    GemValue4 = Ensemble:GetGemValue(112022)
  end
  A = A * (1 + GemValue1 / 100000 + GemValue2 / 100000 + GemValue3 / 100000 + GemValue4 / 100000)
  if srcUser:GetEnsembleSkillDouble() == true then
    A = A * 2
  end
  return A
end

function CommonFun.calcBuff_3871(srcUser, targetUser, a, b, c, d, lv)
  local A = lv * a + b
  local Ensemble = srcUser:GetEnsemblePartner()
  if Ensemble == nil then
    A = A / 2
  end
  if srcUser:GetEnsembleSkillDouble() == true then
    A = A * 2
  end
  return A
end

function CommonFun.calcBuff_3880(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = targetUser:GetProperty("Hp")
  local Sp = targetUser:GetProperty("Sp")
  local A = -(Hp * lv * a + Sp * lv * b)
  local B = -lv * a
  if targetUser:HasBuffID(160000) then
    A = 0
  end
  if b == 0 and (targetUser.boss or targetUser.mini) then
    A = CommonFun.calcBuff_6(srcUser, targetUser, B, 0, c, d, lv)
  end
  return A
end

function CommonFun.calcBuff_3890(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local MaxSp = targetUser:GetProperty("MaxSp")
  local A = MaxHp * lv * a + MaxSp * lv * b
  return A
end

function CommonFun.calcBuff_3900(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local HpPerRatio = 1
  local Hp = targetUser:GetProperty("Hp")
  local MaxHp = targetUser:GetProperty("MaxHp")
  if Hp < 0.8 * MaxHp then
    HpPerRatio = 2
  end
  local A = -0.5 * HpPerRatio
  return A
end

function CommonFun.calcBuff_4000(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(4)
  local A = 0
  if 12 <= RefineLv and srcUser:HasBuffID(41561) then
    A = 0.03
  end
  return A
end

function CommonFun.calcBuff_4010(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1163)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = math.min(0.1, skilllv_1 * 0.02)
  if 10 <= RefineLv then
    A = A + (RefineLv - 10) * 0.01
  end
  return A
end

function CommonFun.calcBuff_4020(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local A = 0
  if 10 <= RefineLv and 0.6 < IgnoreMDef then
    A = 0.03
  end
  return A
end

function CommonFun.calcBuff_4030(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetRunePoint(c)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Ring1 = srcUser:GetEquipedID(7)
  local diary = 0
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  if Ring1 == 63440 or Ring1 == 163440 or Ring1 == 63417 or Ring1 == 163417 then
    diary = RefineLv
  end
  local card = 0
  if srcUser:HasBuffID(53340) then
    card = 3
  end
  if (bits[CommonFun.StateEffect.Poison] == 1 or bits[CommonFun.StateEffect.Blood] == 1 or bits[CommonFun.StateEffect.Burn] == 1 or bits[CommonFun.StateEffect.Dizzy] == 1 or bits[CommonFun.StateEffect.Freeze] == 1 or bits[CommonFun.StateEffect.Stone] == 1 or bits[CommonFun.StateEffect.Sleep] == 1 or bits[CommonFun.StateEffect.Fear] == 1 or bits[CommonFun.StateEffect.NoMove] == 1 or bits[CommonFun.StateEffect.Silence] == 1 or bits[CommonFun.StateEffect.Curse] == 1 or bits[CommonFun.StateEffect.Dark] == 1) and (srcUser:HasBuffID(43110) or srcUser:HasBuffLayer(43110, EBUFFERLAYER_SHADOW)) and srcUser:HasBuffID(42240) then
    card = card + 5
  end
  if srcUser:HasBuffID(90004514) and srcUser:HasBuffID(90004515) then
    card = card + 5
  end
  local skilllv_dashi = srcUser:GetLernedSkillLevel(5102)
  local dashi = skilllv_dashi * 2
  local A = lv * a + b + Num * d + diary * 0.3 + card + dashi
  return A
end

function CommonFun.calcBuff_4040(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetRunePoint(c)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local JS = 0
  if 15 <= RefineLv and srcUser:HasBuffID(90002133) then
    JS = 5
  end
  if srcUser:HasBuffID(42710) then
    JS = JS + 4
  end
  if 15 <= RefineLv and srcUser:HasBuffID(42710) then
    JS = JS + 5
  end
  if srcUser:HasBuffID(90004574) then
    JS = JS + 5
  end
  local A = lv * a + b + Num * d + JS
  return A
end

function CommonFun.calcBuff_4050(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if 12 <= RefineLv and srcUser:HasBuffID(90002137) then
    A = 0.05
  end
  return A
end

function CommonFun.calcBuff_4060(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if 12 <= RefineLv and srcUser:HasBuffID(90002147) then
    A = 0.05
  end
  return A
end

function CommonFun.calcBuff_4070(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local A = 0
  if 10 <= RefineLv and srcUser:HasBuffID(90002157) then
    A = 0.05
  end
  return A
end

function CommonFun.calcBuff_4080(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 5
  if 10 <= RefineLv and srcUser:HasBuffID(90001333) then
    A = 8
  end
  return A
end

function CommonFun.calcBuff_4081(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 5
  if 10 <= RefineLv and srcUser:HasBuffID(41870) then
    A = 8
  end
  return A
end

function CommonFun.calcBuff_4090(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  local A = 0
  if srcUser:HasBuffID(90002161) then
    if 240 <= Str then
      A = 0.08
    elseif 200 <= Str then
      A = 0.03
    end
  end
  return A
end

function CommonFun.calcBuff_4100(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  local A = 0
  if srcUser:HasBuffID(90000909) and 240 <= Str then
    A = 0.1
  end
  return A
end

function CommonFun.calcBuff_4110(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  local A = 0
  if srcUser:HasBuffID(90002173) then
    if 240 <= Str then
      A = 0.15
    elseif 210 <= Str then
      A = 0.08
    elseif 180 <= Str then
      A = 0.03
    end
  end
  return A
end

function CommonFun.calcBuff_4120(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  local A = 0.05
  if srcUser:HasBuffID(90002173) then
    if 240 <= Str then
      A = 0.25
    elseif 210 <= Str then
      A = 0.15
    elseif 180 <= Str then
      A = 0.1
    end
  end
  return A
end

function CommonFun.calcBuff_4130(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local Ring1 = srcUser:GetEquipedID(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 0
  local d = 0
  local A = 3
  local aa = 0
  local bb = 0
  local cc = 0
  local dd = 0
  local ee = 0
  local ff = 0
  if srcUser:HasBuffID(90002223) and (Ring1 == 44038 or Ring1 == 144038) and 10 <= RefineLv1 and 4 <= order1 then
    a = 1
  end
  if srcUser:HasBuffID(90002223) and (Ring2 == 44038 or Ring2 == 144038) and 10 <= RefineLv2 and 4 <= order2 then
    b = 1
  end
  if srcUser:HasBuffID(90002223) and (Ring1 == 44038 or Ring1 == 144038) and 15 <= RefineLv1 and 4 <= order1 then
    c = 1
  end
  if srcUser:HasBuffID(90002223) and (Ring2 == 44038 or Ring2 == 144038) and 15 <= RefineLv2 and 4 <= order2 then
    d = 1
  end
  if (Ring1 == 44059 or Ring1 == 144059) and 5 <= RefineLv1 then
    aa = 1
  end
  if (Ring2 == 44059 or Ring2 == 144059) and 5 <= RefineLv2 then
    bb = 1
  end
  if (Ring1 == 44059 or Ring1 == 144059) and 10 <= RefineLv1 then
    cc = 1
  end
  if (Ring2 == 44059 or Ring2 == 144059) and 10 <= RefineLv2 then
    dd = 1
  end
  if (Ring1 == 44059 or Ring1 == 144059) and 15 <= RefineLv1 then
    ee = 1
  end
  if (Ring2 == 44059 or Ring2 == 144059) and 15 <= RefineLv2 then
    ff = 1
  end
  local aaa = 0
  local bbb = 0
  local ccc = 0
  local ddd = 0
  local eee = 0
  local fff = 0
  local equipRingSD5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRingSD5.id == 44059 or equipRingSD5.id == 144059 then
    if 5 <= equipRingSD5.refinelv then
      aaa = 1
    end
    if 10 <= equipRingSD5.refinelv then
      ccc = 1
    end
    if 15 <= equipRingSD5.refinelv then
      eee = 1
    end
  end
  local equipRingSD6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRingSD6.id == 44059 or equipRingSD6.id == 144059 then
    if 5 <= equipRingSD6.refinelv then
      bbb = 1
    end
    if 10 <= equipRingSD6.refinelv then
      ddd = 1
    end
    if 15 <= equipRingSD6.refinelv then
      fff = 1
    end
  end
  local A = 3 + math.min(1, a + b + cc + dd + ccc + ddd) + math.min(1, c + d + ee + ff + eee + fff) + math.min(1, aa + bb + aaa + bbb)
  return A
end

function CommonFun.calcBuff_4140(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44005 or Ring1 == 144005) and 12 <= RefineLv1 and 9 <= order1 then
    a = 0.03
  end
  if (Ring2 == 44005 or Ring2 == 144005) and 12 <= RefineLv2 and 9 <= order2 then
    b = 0.03
  end
  if (Ring1 == 44005 or Ring1 == 144005) and (Ring2 == 44005 or Ring2 == 144005) and 9 <= order1 and 9 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_4150(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44004 or Ring1 == 144004) and 5 <= RefineLv1 and 10 <= order1 then
    a = 30
  end
  if (Ring2 == 44004 or Ring2 == 144004) and 5 <= RefineLv2 and 10 <= order2 then
    b = 30
  end
  if (Ring1 == 44004 or Ring1 == 144004) and (Ring2 == 44004 or Ring2 == 144004) and 10 <= order1 and 10 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_4160(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44004 or Ring1 == 144004) and 10 <= RefineLv1 and 10 <= order1 then
    a = 0.03
  end
  if (Ring2 == 44004 or Ring2 == 144004) and 10 <= RefineLv2 and 10 <= order2 then
    b = 0.03
  end
  if (Ring1 == 44004 or Ring1 == 144004) and (Ring2 == 44004 or Ring2 == 144004) and 10 <= order1 and 10 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_4161(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44004 or Ring1 == 144004) and 0 <= RefineLv1 and 6 <= order1 then
    a = 2 + a
  end
  if (Ring2 == 44004 or Ring2 == 144004) and 0 <= RefineLv2 and 6 <= order2 then
    b = 2 + b
  end
  if (Ring1 == 44004 or Ring1 == 144004) and 5 <= RefineLv1 and 6 <= order1 then
    a = 4 + a
  end
  if (Ring2 == 44004 or Ring2 == 144004) and 5 <= RefineLv2 and 6 <= order2 then
    b = 4 + b
  end
  if (Ring1 == 44004 or Ring1 == 144004) and (Ring2 == 44004 or Ring2 == 144004) and 6 <= order1 and 6 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_4162(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44004 or Ring1 == 144004) and 10 <= RefineLv1 and 6 <= order1 then
    a = 0.05
  end
  if (Ring2 == 44004 or Ring2 == 144004) and 10 <= RefineLv2 and 6 <= order2 then
    b = 0.05
  end
  if (Ring1 == 44004 or Ring1 == 144004) and (Ring2 == 44004 or Ring2 == 144004) and 6 <= order1 and 6 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_4163(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44004 or Ring1 == 144004) and 15 <= RefineLv1 and 6 <= order1 then
    a = -0.2
  end
  if (Ring2 == 44004 or Ring2 == 144004) and 15 <= RefineLv2 and 6 <= order2 then
    b = -0.2
  end
  if (Ring1 == 44004 or Ring1 == 144004) and (Ring2 == 44004 or Ring2 == 144004) and 6 <= order1 and 6 <= order1 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_4164(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44004 or Ring1 == 144004) and 0 <= RefineLv1 and 6 <= order1 then
    a = 16
  end
  if (Ring2 == 44004 or Ring2 == 144004) and 0 <= RefineLv2 and 6 <= order2 then
    b = 16
  end
  if (Ring1 == 44004 or Ring1 == 144004) and (Ring2 == 44004 or Ring2 == 144004) and 6 <= order1 and 6 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_4170(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local Ring1 = srcUser:GetEquipedID(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 0
  local d = 0
  local A = 5
  local aa = 0
  local bb = 0
  local cc = 0
  local dd = 0
  if srcUser:HasBuffID(90001679) and (Ring1 == 44021 or Ring1 == 144021) and 10 <= RefineLv1 and 10 <= order1 then
    a = 1
  end
  if srcUser:HasBuffID(90001679) and (Ring2 == 44021 or Ring2 == 144021) and 10 <= RefineLv2 and 10 <= order2 then
    b = 1
  end
  if srcUser:HasBuffID(90001679) and (Ring1 == 44021 or Ring1 == 144021) and 15 <= RefineLv1 and 10 <= order1 then
    c = 2
  end
  if srcUser:HasBuffID(90001679) and (Ring2 == 44021 or Ring2 == 144021) and 15 <= RefineLv2 and 10 <= order2 then
    d = 2
  end
  if (Ring1 == 44053 or Ring1 == 144053) and 10 <= RefineLv1 then
    aa = 1
  end
  if (Ring2 == 44053 or Ring2 == 144053) and 10 <= RefineLv2 then
    bb = 1
  end
  if (Ring1 == 44053 or Ring1 == 144053) and 15 <= RefineLv1 then
    cc = 2
  end
  if (Ring2 == 44053 or Ring2 == 144053) and 15 <= RefineLv2 then
    dd = 2
  end
  local aaa = 0
  local bbb = 0
  local ccc = 0
  local ddd = 0
  local equipRingSD5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRingSD5.id == 44053 or equipRingSD5.id == 144053 then
    if 10 <= equipRingSD5.refinelv then
      aaa = 1
    end
    if 15 <= equipRingSD5.refinelv then
      ccc = 2
    end
  end
  local equipRingSD6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRingSD6.id == 44053 or equipRingSD6.id == 144053 then
    if 10 <= equipRingSD6.refinelv then
      bbb = 1
    end
    if 15 <= equipRingSD6.refinelv then
      ddd = 2
    end
  end
  local A = 5 + math.min(1, a + b + aa + bb + aaa + bbb) + math.min(2, c + d + cc + dd + ccc + ddd)
  if srcUser:HasBuffID(35755) then
    A = 8
  end
  return A
end

function CommonFun.calcBuff_4171(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local Ring1 = srcUser:GetEquipedID(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local A = 0
  local aa = 0
  local bb = 0
  local cc = 0
  local dd = 0
  local c = 0
  if (Ring1 == 44053 or Ring1 == 144053) and 10 <= RefineLv1 then
    aa = 5
  end
  if (Ring2 == 44053 or Ring2 == 144053) and 10 <= RefineLv2 then
    bb = 5
  end
  if (Ring1 == 44053 or Ring1 == 144053) and 15 <= RefineLv1 then
    cc = 5
  end
  if (Ring2 == 44053 or Ring2 == 144053) and 15 <= RefineLv2 then
    dd = 5
  end
  local aaa = 0
  local bbb = 0
  local ccc = 0
  local ddd = 0
  local equipRingSD5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  if equipRingSD5.id == 44053 or equipRingSD5.id == 144053 then
    if 10 <= equipRingSD5.refinelv then
      aaa = 5
    end
    if 15 <= equipRingSD5.refinelv then
      ccc = 5
    end
  end
  local equipRingSD6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if equipRingSD6.id == 44053 or equipRingSD6.id == 144053 then
    if 10 <= equipRingSD6.refinelv then
      bbb = 5
    end
    if 15 <= equipRingSD6.refinelv then
      ddd = 5
    end
  end
  if Ring1 == 44053 or Ring1 == 144053 then
    c = c + 1
  end
  if Ring2 == 44053 or Ring2 == 144053 then
    c = c + 1
  end
  if equipRingSD5.id == 44053 or equipRingSD5.id == 144053 then
    c = c + 1
  end
  if equipRingSD6.id == 44053 or equipRingSD6.id == 144053 then
    c = c + 1
  end
  if c == 0 then
    return 0
  end
  local A = (math.min(5, aa + bb + aaa + bbb) + math.min(5, cc + dd + ccc + ddd)) / c
  return -A
end

function CommonFun.calcBuff_4180(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv1 = srcUser:GetEquipedRefineLv(3)
  local IgnoreDef = srcUser:GetProperty("IgnoreDef")
  local A = 0
  if 8 <= RefineLv1 then
    A = IgnoreDef * 100 * 0.5
  end
  return A
end

function CommonFun.calcBuff_4190(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv1 = srcUser:GetEquipedRefineLv(3)
  local A = 0
  if 12 <= RefineLv1 then
    A = 0.03
  end
  return A
end

function CommonFun.calcBuff_4200(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MDef2 = srcUser:GetProperty("MDef")
  local MDefPer2 = srcUser:GetProperty("MDefPer")
  local A = MDef2 * (1 + MDefPer2) * 2
  return A
end

function CommonFun.calcBuff_4210(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 20
  if srcUser:HasBuffID(52950) and srcUser:HasBuffID(53050) then
    A = 45
  end
  return A
end

function CommonFun.calcBuff_4220(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Agi = srcUser:GetProperty("Agi")
  local A = 0.075
  if 180 < Agi then
    A = 0.125
  end
  return A
end

function CommonFun.calcBuff_4230(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Agi = srcUser:GetProperty("Agi")
  local A = math.floor(Agi / 20) / 100
  return A
end

function CommonFun.calcBuff_4240(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxSp = srcUser:GetProperty("MaxSp")
  local A = math.floor(MaxSp / 800) * 0.01
  return A
end

function CommonFun.calcBuff_4250(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 15
  local RefineLv2 = srcUser:GetEquipedRefineLv(2)
  if srcUser:HasBuffID(53150) and 10 <= RefineLv2 then
    A = 30
  end
  return A
end

function CommonFun.calcBuff_4260(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(8)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_4270(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = targetUser:GetBuffLayer(118142)
  local A = 0
  if 3 <= Num1 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_4280(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(41240) or srcUser:HasBuffID(41970) then
    A = 15
  end
  return A
end

function CommonFun.calcBuff_4290(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(8004) then
    A = 1
  end
  return A
end

function CommonFun.calcBuff_4300(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(8004) then
    A = 8
  end
  return A
end

function CommonFun.calcBuff_4310(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = targetUser:GetBuffLayer(161740)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = math.min(Num1 * 0.3 + 0.3, 1) * MaxHp
  return -A
end

function CommonFun.calcBuff_4320(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local StunAtk = srcUser:GetProperty("StunAtk")
  local StunDef2 = targetUser:GetProperty("StunDef")
  local StunDam = 1 + StunAtk - StunDef2
  if StunDam <= 0 then
    StunDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  local Profession = srcUser:GetProfressionID()
  if bits[CommonFun.StateEffect.Poison] == 1 and (Profession == 32 or Profession == 33 or Profession == 34 or Profession == 35) then
    b = 5
  end
  local A = b * StunDam * StateDam * CommonFun.calcAttrDizzyRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_4330(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(34152) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_4340(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Agi = srcUser:GetProperty("Agi")
  local A = math.floor(Agi / 2)
  return A
end

function CommonFun.calcBuff_4350(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(2)
  local A = 0
  if 10 <= RefineLv and srcUser:HasBuffID(90001623) then
    A = a
  end
  return A
end

function CommonFun.calcBuff_4351(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(2)
  local A = 0
  if 10 <= RefineLv then
    A = a
  end
  return A
end

function CommonFun.calcBuff_4360(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Ring1 = srcUser:GetEquipedID(7)
  local A = 100
  local Sp = srcUser:GetProperty("Sp")
  local MaxSp = srcUser:GetProperty("MaxSp")
  local GemValue = 0
  if Sp < MaxSp * 0.3 then
    GemValue = srcUser:GetGemValue(122132)
  end
  if GemValue ~= 0 then
    A = A - GemValue / 1000
  end
  if Ring1 == 62540 or Ring1 == 162540 then
    A = A + RefineLv * a + b
  end
  return A
end

function CommonFun.calcBuff_4370(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:IsBeingPresent(591010) == true then
    A = 0.02
  end
  return A
end

function CommonFun.calcBuff_4371(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:IsBeingPresent(591010) == true then
    A = 0.04
  end
  return A
end

function CommonFun.calcBuff_4380(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local pos = 2
  return pos
end

function CommonFun.calcBuff_4390(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local skilllv_1 = srcUser:GetLernedSkillLevel(381)
  if srcUser:HasBuffID(116360) then
    A = skilllv_1 * 0.01
  end
  return A
end

function CommonFun.calcBuff_4400(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:IsBeingPresent(591010) == true then
    A = 0.03
  end
  return A
end

function CommonFun.calcBuff_4410(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = 0.005 * MaxHp + 5
  if targetUser:HasBuffID(116311) then
    A = 0.01 * MaxHp + 10
  end
  return -A
end

function CommonFun.calcBuff_4420(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Master = srcUser:GetMasterUser()
  local A = 0
  if Master ~= nil then
    local Num1 = Master:GetRunePoint(133040)
    A = 10 * Num1
  end
  return A
end

function CommonFun.calcBuff_4430(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44040 or Ring1 == 144040) and 12 <= RefineLv1 then
    a = 0.03
  end
  if (Ring2 == 44040 or Ring2 == 144040) and 12 <= RefineLv2 then
    b = 0.03
  end
  if (Ring1 == 44040 or Ring1 == 144040) and (Ring2 == 44040 or Ring2 == 144040) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_4440(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if 12 <= RefineLv and srcUser:HasBuffID(42240) then
    A = 0.05
  end
  return A
end

function CommonFun.calcBuff_4450(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local Ring1 = srcUser:GetEquipedID(7)
  if Ring1 == 62840 or Ring1 == 162840 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_4460(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local Ring1 = srcUser:GetEquipedID(7)
  if Ring1 == 63140 or Ring1 == 163140 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_4470(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0.1
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ROBE)
  if 0 < equipRing.refinelv then
    A = 0.1 + math.min(0.1, equipRing.refinelv * 0.01)
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ROBE)
  if 0 < equipRingSD.refinelv then
    A = 0.1 + math.min(0.1, equipRingSD.refinelv * 0.01)
  end
  return A
end

function CommonFun.calcBuff_4480(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetRunePoint(62020)
  local Num2 = srcUser:GetRunePoint(62021)
  local RuneRate = Num1 * 10 + Num2 * 5
  local A = RuneRate
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_4490(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local IBaseLv = srcUser.BaseLv
  local A = IBaseLv * a + b
  return A
end

function CommonFun.calcBuff_4500(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(157)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1462)
  local A = 0
  A = (skilllv_1 + skilllv_2) * a + b
  return A
end

function CommonFun.calcBuff_4510(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser:GetNpcID() <= 240093 and targetUser:GetNpcID() >= 240087 then
    A = 0
  end
  if targetUser:DamageAlways1() then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_4520(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:GetNpcID() <= 240093 and targetUser:GetNpcID() >= 240087 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_4530(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  local Int = srcUser:GetProperty("Int")
  local Dex = srcUser:GetProperty("Dex")
  local Agi = srcUser:GetProperty("Agi")
  local Vit = srcUser:GetProperty("Vit")
  local Luk = srcUser:GetProperty("Luk")
  local A = a
  if 99 <= Str then
    A = A + b
  end
  if 99 <= Int then
    A = A + b
  end
  if 99 <= Dex then
    A = A + b
  end
  if 99 <= Agi then
    A = A + b
  end
  if 99 <= Vit then
    A = A + b
  end
  if 99 <= Luk then
    A = A + b
  end
  return A
end

function CommonFun.calcBuff_4540(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = targetUser:GetBuffLayer(162792)
  local A = 0
  if 2 <= Num1 then
    A = 100
  end
  if targetUser:HasBuffID(163190) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_4550(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:GetNpcID() == 250050 and targetUser:GetNpcID() == 250080 then
    A = 100
  end
  if srcUser:GetNpcID() == 250060 and targetUser:GetNpcID() == 250090 then
    A = 100
  end
  if srcUser:GetNpcID() == 260050 and targetUser:GetNpcID() == 260080 then
    A = 100
  end
  if srcUser:GetNpcID() == 260060 and targetUser:GetNpcID() == 260090 then
    A = 100
  end
  if srcUser:GetNpcID() == 270050 and targetUser:GetNpcID() == 270080 then
    A = 100
  end
  if srcUser:GetNpcID() == 270060 and targetUser:GetNpcID() == 270090 then
    A = 100
  end
  if targetUser:HasBuffID(162853) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_4560(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:HasBuffID(162800) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_4570(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = targetUser:GetBuffLayer(163021)
  local A = 0
  if 3 <= Num1 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_4580(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Skilllv = srcUser:GetLernedSkillLevel(105210)
  local QualityValue_a = 0
  local QualityValue_b = 0
  QualityValue_a = math.ceil(Skilllv / 2)
  QualityValue_b = math.floor(Skilllv / 2)
  if a == 1 then
    return QualityValue_a
  elseif b == 1 then
    return QualityValue_b
  else
    return 0
  end
end

function CommonFun.calcBuff_4590(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(100640)
  local skilllv_1 = srcUser:GetLernedSkillLevel(105130)
  local SilenceAtk = srcUser:GetProperty("SilenceAtk")
  local SilenceDef2 = targetUser:GetProperty("SilenceDef")
  local SlienceDam = 1 + SilenceAtk - SilenceDef2
  if SlienceDam <= 0 then
    SlienceDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (skilllv * a + skilllv_1 * b) * SlienceDam * StateDam * CommonFun.calcAttrSilenceRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_4600(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(100660)
  local skilllv_1 = srcUser:GetLernedSkillLevel(105170)
  local A = skilllv * a + skilllv_1 * b
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_4610(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(100670)
  local skilllv_1 = srcUser:GetLernedSkillLevel(105180)
  local A = skilllv * a + skilllv_1 * b
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_4620(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = srcUser:GetProperty(CommonFun.GetAttrName(c))
  local A = math.floor(Attr / a) + d
  return A
end

function CommonFun.calcBuff_4621(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = srcUser:GetProperty(CommonFun.GetAttrName(c))
  local A = (math.floor(Attr / a) + d) / 100
  return A
end

function CommonFun.calcBuff_4622(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = srcUser:GetProperty(CommonFun.GetAttrName(c))
  local A = (math.floor(Attr / a) * b + d) / 100
  return A
end

function CommonFun.calcBuff_4623(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = srcUser:GetProperty(CommonFun.GetAttrName(c))
  local A = math.floor(Attr / a) * b + d
  return A
end

function CommonFun.calcBuff_4624(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = srcUser:GetProperty(CommonFun.GetAttrName(c))
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local A = 0
  if 15 <= RefineLv then
    A = math.floor(Attr / a) + d
  end
  return A
end

function CommonFun.calcBuff_4625(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = srcUser:GetProperty(CommonFun.GetAttrName(c))
  local RefineLv = srcUser:GetEquipedRefineLv(10)
  local A = d
  if b <= RefineLv then
    A = A + math.floor(Attr / a)
  end
  return A
end

function CommonFun.calcBuff_4630(srcUser, targetUser, a, b, c, d, lv)
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MaxHp = targetUser:GetProperty("MaxHp")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local MDef2 = targetUser:GetProperty("MDef")
  local MDefPer2 = targetUser:GetProperty("MDefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local Int2 = targetUser:GetProperty("Int")
  local IntPer2 = targetUser:GetProperty("IntPer")
  local MDamReduc2 = CommonFun.calcMDamReDuc(srcUser, targetUser)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local raceparam = 1
  local srcRace = srcUser.race
  local targetRace = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    targetRace = 2
  end
  if targetUser:HasBuffID(49320) and targetUser:HasBuffID(49325) then
  elseif targetUser:HasBuffID(49320) then
    srcRace = 2
  end
  if nil == CommonFun.RaceProps[targetRace] then
    return 0
  end
  if nil == CommonFun.RaceProps[srcRace] then
    return 0
  end
  local raceInc = srcUser:GetProperty(CommonFun.RaceProps[targetRace][1])
  local raceRed = targetUser:GetProperty(CommonFun.RaceProps[srcRace][2])
  local raceparam = 1 + raceInc - raceRed
  if raceparam <= 0.1 then
    raceparam = 0.1
  end
  local srcAtkElement = c
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local ElementRate = CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement)
  if nil == CommonFun.NatureProps[srcAtkElement] or nil == CommonFun.NatureProps[targetDefElement] or nil == targetDefElement then
    return 0
  end
  local elementInc = srcUser:GetProperty(CommonFun.NatureProps[targetDefElement][1])
  local elementRed = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement][2])
  local elementAtk = srcUser:GetProperty(CommonFun.NatureProps[srcAtkElement][3])
  local elementparam = (1 + elementInc) * ElementRate
  local elementparam2 = 1 + elementAtk - elementRed
  if elementparam2 <= 0.1 then
    elementparam2 = 0.1
  end
  local ele = elementparam * elementparam2
  if targetDefElement == nil or ElementRate == nil or elementInc == nil or elementRed == nil or elementAtk == nil then
    ele = 1
  end
  local MAtkFinal = b * CommonFun.ShapeCorrection(srcUser, targetUser) * ele * raceparam
  local MDefReduc = CommonFun.CalcMDef(srcUser, targetUser)
  local A = (MAtkFinal * MDefReduc * (1 - MDamReduc2) + MRefine) * (1 - RefineMDamReduc) * (1 + MDamIncrease) - Vit2 / 2 * (1 + VitPer2) - Int2 * (1 + IntPer2) + MaxHp * a
  if targetUser:GetNpcID() == 280931 then
    A = MaxHp * 0.1
  end
  return -A
end

function CommonFun.calcBuff_4640(srcUser, targetUser, a, b, c, d, lv)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local Hp2 = targetUser:GetProperty("Hp")
  local MaxHp2 = targetUser:GetProperty("MaxHp")
  local raceparam = 1
  local srcRace = srcUser.race
  local targetRace = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    targetRace = 2
  end
  if targetUser:HasBuffID(49320) and targetUser:HasBuffID(49325) then
  elseif targetUser:HasBuffID(49320) then
    srcRace = 2
  end
  if nil == CommonFun.RaceProps[targetRace] then
    return 0
  end
  if nil == CommonFun.RaceProps[srcRace] then
    return 0
  end
  local raceInc = srcUser:GetProperty(CommonFun.RaceProps[targetRace][1])
  local raceRed = targetUser:GetProperty(CommonFun.RaceProps[srcRace][2])
  local raceparam = 1 + raceInc - raceRed
  if raceparam <= 0.1 then
    raceparam = 0.1
  end
  local srcAtkElement = c
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local ElementRate = CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement)
  if nil == CommonFun.NatureProps[srcAtkElement] or nil == CommonFun.NatureProps[targetDefElement] or nil == targetDefElement then
    return 0
  end
  local elementInc = srcUser:GetProperty(CommonFun.NatureProps[targetDefElement][1])
  local elementRed = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement][2])
  local elementAtk = srcUser:GetProperty(CommonFun.NatureProps[srcAtkElement][3])
  local elementparam = (1 + elementInc) * ElementRate
  local elementparam2 = 1 + elementAtk - elementRed
  if elementparam2 <= 0.1 then
    elementparam2 = 0.1
  end
  local ele = elementparam * elementparam2
  if targetDefElement == nil or ElementRate == nil or elementInc == nil or elementRed == nil or elementAtk == nil then
    ele = 1
  end
  local AtkFinal = b * CommonFun.ShapeCorrection(srcUser, targetUser) * ele * raceparam
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = (AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2) + a * MaxHp2
  return -A
end

function CommonFun.calcBuff_4641(srcUser, targetUser, a, b, c, d, lv)
  local Str = srcUser:GetProperty("Str")
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local IgnoreDef = 0
  local IgnoreDef1 = srcUser:GetProperty("IgnoreDef")
  local IgnoreDef2 = srcUser:GetProperty("IgnoreEquipDef")
  if targetUser.boss or targetUser.mini then
    IgnoreDef = IgnoreDef1
  else
    IgnoreDef = IgnoreDef1 + IgnoreDef2
  end
  if 1 <= IgnoreDef then
    IgnoreDef = 1
  end
  local Refine = srcUser:GetProperty("Refine")
  local Def2 = targetUser:GetProperty("Def")
  local DefPer2 = targetUser:GetProperty("DefPer")
  local Vit2 = targetUser:GetProperty("Vit")
  local VitPer2 = targetUser:GetProperty("VitPer")
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local Hp2 = targetUser:GetProperty("Hp")
  local MaxHp2 = targetUser:GetProperty("MaxHp")
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp = srcUser:GetProperty("Hp")
  local HpPerRatio = math.max(math.floor(Hp / MaxHp * 10), 1)
  local raceparam = 1
  local srcRace = srcUser.race
  local targetRace = targetUser.race
  if srcUser:HasBuffID(49320) and srcUser:HasBuffID(49325) then
  elseif srcUser:HasBuffID(49320) then
    targetRace = 2
  end
  if targetUser:HasBuffID(49320) and targetUser:HasBuffID(49325) then
  elseif targetUser:HasBuffID(49320) then
    srcRace = 2
  end
  if nil == CommonFun.RaceProps[targetRace] then
    return 0
  end
  if nil == CommonFun.RaceProps[srcRace] then
    return 0
  end
  local raceInc = srcUser:GetProperty(CommonFun.RaceProps[targetRace][1])
  local raceRed = targetUser:GetProperty(CommonFun.RaceProps[srcRace][2])
  local raceparam = 1 + raceInc - raceRed
  if raceparam <= 0.1 then
    raceparam = 0.1
  end
  local srcAtkElement = c
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local ElementRate = CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement)
  if nil == CommonFun.NatureProps[srcAtkElement] or nil == CommonFun.NatureProps[targetDefElement] or nil == targetDefElement then
    return 0
  end
  local elementInc = srcUser:GetProperty(CommonFun.NatureProps[targetDefElement][1])
  local elementRed = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement][2])
  local elementAtk = srcUser:GetProperty(CommonFun.NatureProps[srcAtkElement][3])
  local elementparam = (1 + elementInc) * ElementRate
  local elementparam2 = 1 + elementAtk - elementRed
  if elementparam2 <= 0.1 then
    elementparam2 = 0.1
  end
  local ele = elementparam * elementparam2
  if targetDefElement == nil or ElementRate == nil or elementInc == nil or elementRed == nil or elementAtk == nil then
    ele = 1
  end
  local AtkFinal = b * CommonFun.ShapeCorrection(srcUser, targetUser) * ele * raceparam
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local A = ((AtkFinal * DefReduc * (1 - DamReduc2) + Refine) * (1 - RefineDamReduc) * (1 + DamIncrease) - Vit2 * (1 + VitPer2) + a * MaxHp2) * HpPerRatio
  return -A
end

function CommonFun.calcBuff_4650(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = targetUser:GetProperty("Hp")
  local A = -(Hp - 1)
  return A
end

function CommonFun.calcBuff_4660(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(12)
  local A = c
  if b < RefineLv then
    A = math.min((RefineLv - b) * a + A, d)
  end
  return A
end

function CommonFun.calcBuff_4661(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(8)
  local A = c
  if b < RefineLv then
    A = math.min((RefineLv - b) * a + A, d)
  end
  return A
end

function CommonFun.calcBuff_4662(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(9)
  local A = c
  if b < RefineLv then
    A = math.min((RefineLv - b) * a + A, d)
  end
  return A
end

function CommonFun.calcBuff_4663(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(11)
  local A = c
  if b < RefineLv then
    A = math.min((RefineLv - b) * a + A, d)
  end
  return A
end

function CommonFun.calcBuff_4670(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if (srcUser:HasBuffID(90000945) or srcUser:HasBuffID(44550)) and (srcUser:HasBuffID(90000955) or srcUser:HasBuffID(44540)) then
    A = 100
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  local equipRingSDshoes = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  if (equipRingSD.id ~= 0 or equipRingSDshoes.id ~= 0) and (srcUser:HasBuffID(90000945) or srcUser:HasBuffID(44550) or srcUser:HasBuffLayer(44550, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(90000955) or srcUser:HasBuffID(44540) or srcUser:HasBuffLayer(44540, EBUFFERLAYER_SHADOW)) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_4680(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(9)
  local A = a
  if c <= RefineLv then
    A = a + b
  end
  return A
end

function CommonFun.calcBuff_4681(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(10)
  local A = a
  if c <= RefineLv then
    A = a + b
  end
  return A
end

function CommonFun.calcBuff_4690(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local IBaseLv = srcUser.BaseLv
  local RefineLv = srcUser:GetEquipedRefineLv(11)
  local RefineNum = math.min(RefineLv, 6)
  local A = IBaseLv * (RefineNum * 5 + 10)
  return A
end

function CommonFun.calcBuff_4700(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = a
  local RefineLv = srcUser:GetEquipedRefineLv(8)
  if c <= RefineLv then
    A = a + b
  end
  return A
end

function CommonFun.calcBuff_4710(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local srcUser_Hp = srcUser:GetProperty("Hp")
  local target_Hp = targetUser:GetProperty("Hp")
  local target_hpper = srcUser_Hp / target_Hp
  if srcUser:HasBuffID(36900) and target_hpper < 1 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_4720(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0.05
  local HpM = srcUser:GetProperty("Hp")
  local MaxHpM = srcUser:GetProperty("MaxHp")
  local hpperM = HpM / MaxHpM
  if srcUser:HasBuffID(36890) and hpperM < 1 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_4800(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44015 or Ring1 == 144015) and 12 <= RefineLv1 then
    a = 0.04
  end
  if (Ring2 == 44015 or Ring2 == 144015) and 12 <= RefineLv2 then
    b = 0.04
  end
  if (Ring1 == 44015 or Ring1 == 144015) and (Ring2 == 44015 or Ring2 == 144015) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_4801(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44015 or Ring1 == 144015) and 0 <= RefineLv1 then
    a = 4
  end
  if (Ring2 == 44015 or Ring2 == 144015) and 0 <= RefineLv2 then
    b = 4
  end
  if (Ring1 == 44015 or Ring1 == 144015) and 12 <= RefineLv1 then
    a = 10
  end
  if (Ring2 == 44015 or Ring2 == 144015) and 12 <= RefineLv2 then
    b = 10
  end
  if (Ring1 == 44015 or Ring1 == 144015) and (Ring2 == 44015 or Ring2 == 144015) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_4810(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(4)
  if 8 <= RefineLv and RefineLv < 12 then
    A = d + a
  elseif 12 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_4811(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(3)
  if 8 <= RefineLv and RefineLv < 12 then
    A = d + a
  elseif 12 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_4812(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  if 8 <= RefineLv and RefineLv < 12 then
    A = d + a
  elseif 12 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_4813(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  if 8 <= RefineLv and RefineLv < 12 then
    A = d + a
  elseif 12 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_4814(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(2)
  if 8 <= RefineLv and RefineLv < 12 then
    A = d + a
  elseif 12 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_4820(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local MDef = srcUser:GetProperty("MDef")
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  if 10 <= RefineLv and srcUser:HasBuffID(90001367) then
    A = MDef / 10
  end
  return A
end

function CommonFun.calcBuff_4830(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Dex = srcUser:GetProperty("Dex")
  local A = 0
  if 150 <= Dex then
    A = -0.2
  elseif 120 <= Dex then
    A = -0.1
  end
  return A
end

function CommonFun.calcBuff_4831(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Int = srcUser:GetProperty("Int")
  local A = 0
  if 180 <= Int then
    A = 0.1
  end
  return A
end

function CommonFun.calcBuff_4840(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44044 or Ring1 == 144044) and 8 <= RefineLv1 then
    a = 0.05
  end
  if (Ring2 == 44044 or Ring2 == 144044) and 8 <= RefineLv2 then
    b = 0.05
  end
  if (Ring1 == 44044 or Ring1 == 144044) and (Ring2 == 44044 or Ring2 == 144044) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_4841(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44044 or Ring1 == 144044) and 12 <= RefineLv1 then
    a = 0.03
  end
  if (Ring2 == 44044 or Ring2 == 144044) and 12 <= RefineLv2 then
    b = 0.03
  end
  if (Ring1 == 44044 or Ring1 == 144044) and (Ring2 == 44044 or Ring2 == 144044) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_4850(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = srcUser:GetProperty(CommonFun.GetAttrName(c))
  local A = d
  if a <= Attr then
    A = A + b
  end
  return A
end

function CommonFun.calcBuff_4860(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44045 or Ring1 == 144045) and 12 <= RefineLv1 then
    a = 0.04
  end
  if (Ring2 == 44045 or Ring2 == 144045) and 12 <= RefineLv2 then
    b = 0.04
  end
  if (Ring1 == 44045 or Ring1 == 144045) and (Ring2 == 44045 or Ring2 == 144045) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_4870(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local RefineLv = srcUser:GetEquipedRefineLv(4)
  if srcUser:HasBuffID(90002393) then
    A = RefineLv / 100 * 2
  end
  return A
end

function CommonFun.calcBuff_4880(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local IgnoreDef = srcUser:GetProperty("IgnoreDef")
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local A = 0
  if 8 <= RefineLv then
    A = IgnoreDef * 100 * 0.5
  end
  return A
end

function CommonFun.calcBuff_4890(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44046 or Ring1 == 144046) and 12 <= RefineLv1 then
    a = 0.06
  end
  if (Ring2 == 44046 or Ring2 == 144046) and 12 <= RefineLv2 then
    b = 0.06
  end
  if (Ring1 == 44046 or Ring1 == 144046) and (Ring2 == 44046 or Ring2 == 144046) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_4900(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(7)
  local RefineLv1 = srcUser:GetEquipedRefineLv(7)
  local Ring2 = srcUser:GetEquipedID(2)
  local RefineLv2 = srcUser:GetEquipedRefineLv(2)
  local a = 0
  local b = 0
  if (Ring1 == 41255 or Ring1 == 141255) and 10 <= RefineLv1 then
    a = 0.05
  end
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if (equipRing.id == 42097 or equipRing.id == 142097) and 10 <= equipRing.refinelv then
    b = 0.05
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if (equipRingSD.id == 42097 or equipRingSD.id == 142097) and 10 <= equipRingSD.refinelv then
    b = 0.05
  end
  local A = a + b
  return A
end

function CommonFun.calcBuff_4910(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if (equipRing.id == 42100 or equipRing.id == 142100) and srcUser:IsBeingPresent(600010) == true then
    A = 12
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if (equipRingSD.id == 42100 or equipRingSD.id == 142100) and srcUser:IsBeingPresent(600010) == true then
    A = 12
  end
  return A
end

function CommonFun.calcBuff_4911(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if (equipRing.id == 42100 or equipRing.id == 142100) and srcUser:IsBeingPresent(600020) == true then
    A = 0.12
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if (equipRingSD.id == 42100 or equipRingSD.id == 142100) and srcUser:IsBeingPresent(600020) == true then
    A = 0.12
  end
  return A
end

function CommonFun.calcBuff_4912(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if (equipRing.id == 42100 or equipRing.id == 142100) and srcUser:IsBeingPresent(600030) == true then
    A = 0.12
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if (equipRingSD.id == 42100 or equipRingSD.id == 142100) and srcUser:IsBeingPresent(600030) == true then
    A = 0.12
  end
  return A
end

function CommonFun.calcBuff_4913(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local equipRing = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_EQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if (equipRing.id == 42100 or equipRing.id == 142100) and srcUser:IsBeingPresent(591010) == true then
    A = 0.06
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  if (equipRingSD.id == 42100 or equipRingSD.id == 142100) and srcUser:IsBeingPresent(591010) == true then
    A = 0.06
  end
  return A
end

function CommonFun.calcBuff_4920(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = a
  if targetUser:GetNpcID() == 17200 or targetUser:GetNpcID() == 17201 or targetUser:GetNpcID() == 17202 or targetUser:GetNpcID() == 17203 or targetUser:GetNpcID() == 17204 then
    A = b
  end
  return A
end

function CommonFun.calcBuff_4921(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:GetNpcID() >= 280321 and targetUser:GetNpcID() <= 280324 or targetUser:GetNpcID() >= 280332 and targetUser:GetNpcID() <= 280336 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_4930(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(8)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_4931(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(9)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_4932(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(10)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_4933(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(11)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_4934(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(12)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_4940(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  if 12 <= RefineLv and srcUser:HasBuffID(42710) then
    A = 0.05
  end
  return A
end

function CommonFun.calcBuff_4950(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 30
  if srcUser:HasBuffID(42720) and (srcUser:HasBuffID(90001123) or srcUser:HasBuffID(43370)) then
    A = 60
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRingSD.id ~= 0 and srcUser:HasBuffLayer(43370, EBUFFERLAYER_SHADOW) then
    A = 60
  end
  return A
end

function CommonFun.calcBuff_5000(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(a)
  local A = 0
  if Value ~= 0 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_5010(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(c)
  local A = lv * a + b + Value / 1000
  return A
end

function CommonFun.calcBuff_5011(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value1 = srcUser:GetGemValue(102032)
  local Value2 = srcUser:GetGemValue(112032)
  local A = (Value1 / 1000 + Value2 / 1000) * a + b
  return A
end

function CommonFun.calcBuff_5012(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(c)
  local A = lv * a + b + Value
  return A
end

function CommonFun.calcBuff_5013(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = targetUser:GetGemValue(c)
  local A = lv * a + b + Value / 1000
  return A
end

function CommonFun.calcBuff_5014(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(c)
  local A = lv * a + b + Value / 1000
  if srcUser:HasBuffID(90004624) then
    A = A + 5
  end
  if srcUser:HasBuffID(132903) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_5020(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(c)
  local A = lv * a + b + Value / 100000
  return A
end

function CommonFun.calcBuff_5021(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Master = srcUser:GetMasterUser()
  local Value = 0
  if Master ~= nil then
    Value = Master:GetGemValue(c)
  end
  local A = lv * a + b + Value / 100000
  return A
end

function CommonFun.calcBuff_5030(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if srcUser:HasBuffID(21120050) or srcUser:HasBuffID(21020080) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5031(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(21120050) or srcUser:HasBuffID(21020080) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_5032(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(20720010) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_5033(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if srcUser:HasBuffID(20720010) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5034(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local Value = srcUser:GetGemValue(a)
  if Value ~= 0 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_5038(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hasbuff = 0
  if srcUser:HasBuffID(c) and srcUser:HasBuffID(d) then
    Hasbuff = 1
  end
  local A = a + b * Hasbuff
  return A
end

function CommonFun.calcBuff_5039(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hasbuff = 0
  if srcUser:HasBuffID(c) then
    Hasbuff = 1
  end
  local A = a + b * Hasbuff
  if targetUser:HasBuffID(160000) then
    A = 0
  end
  if targetUser.boss == true or targetUser.mini == true then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5040(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hasbuff = 0
  if srcUser:HasBuffID(c) then
    Hasbuff = 1
  end
  local A = a + b * Hasbuff
  return A
end

function CommonFun.calcBuff_5041(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hasbuff = 0
  if targetUser:HasBuffID(c) then
    Hasbuff = 1
  end
  local A = a + b * Hasbuff
  return A
end

function CommonFun.calcBuff_5042(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hasbuff = 0
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local RefineNum = 0
  if srcUser:HasBuffID(c) then
    Hasbuff = 1
  end
  if 10 <= RefineLv then
    RefineNum = 1
  end
  local A = a + b * Hasbuff * RefineNum
  return A
end

function CommonFun.calcBuff_5043(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  local Num1 = srcUser:GetBuffLayer(154085)
  if 2 <= Num1 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5044(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hasbuff = 0
  if srcUser:HasBuffID(21430111) then
    Hasbuff = 1
  end
  local A = 100 + -100 * Hasbuff
  return A
end

function CommonFun.calcBuff_5045(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hasbuff = 0
  if srcUser:HasBuffID(c) then
    Hasbuff = 1
  end
  local A = lv * a + b + d * Hasbuff
  return A
end

function CommonFun.calcBuff_5050(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 20
  local GemValue2 = srcUser:GetGemValue(122081)
  local Num1 = srcUser:GetBuffLayer(100500)
  local taka = 0
  if srcUser:HasBuffID(42720) then
    taka = taka + Num1
  end
  if srcUser:HasBuffID(90004584) then
    taka = taka + 10
  end
  A = 20 + GemValue2 / 1000 + taka
  return A
end

function CommonFun.calcBuff_5060(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetRunePoint(54020)
  local GemValue = srcUser:GetGemValue(51042)
  local A = lv * 5 + 5 + Num * 2 + GemValue / 1000
  return A
end

function CommonFun.calcBuff_5070(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = targetUser:GetBuffLayer(163264)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = MaxHp * (0.03 + 0.02 * Num) + 7500 * Num
  return -A
end

function CommonFun.calcBuff_5071(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Distance = targetUser:GetDisWithLineUser(19)
  local time = targetUser:GetBuffPassedTime(165060)
  local Num = targetUser:GetBuffLayer(163264)
  if Distance < 1 then
    Distance = 1
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = MaxHp * (0.01 * math.min(Distance * Distance * 0.4 - 0.8 * Distance + 2, 100) + 0.02 * Num) + 6000 * (Num - 1) * (1 + time / 4 + time * time * 0.08)
  return -A
end

function CommonFun.calcBuff_5072(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local time = targetUser:GetBuffPassedTime(165060)
  local A = 0.75 * math.min(1 + time / 15, 1.6)
  return -A
end

function CommonFun.calcBuff_5073(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser:HasBuffID(165080) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5080(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local PoisonAtk = srcUser:GetProperty("PoisonAtk")
  local PoisonDef2 = targetUser:GetProperty("PoisonDef")
  local PoisonDam = 1 + PoisonAtk - PoisonDef2
  if PoisonDam <= 0 then
    PoisonDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = (1 + StateAtk) * (1 - StateDef2)
  if StateDam <= 0 then
    StateDam = 0
  end
  local GemValue = srcUser:GetGemValue(31002)
  local A = 0
  if srcUser:HasBuffID(116010) and GemValue ~= 0 then
    A = GemValue / 1000 * PoisonDam * StateDam * CommonFun.calcAttrPoisonRate(srcUser, targetUser)
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_5090(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local GemValue1 = srcUser:GetGemValue(31031)
  local GemValue2 = srcUser:GetGemValue(31032)
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local Refine = srcUser:GetProperty("Refine")
  local A = Atk * (1 + AtkPer) * GemValue1 / 1000 + Refine * GemValue2 / 1000
  return A
end

function CommonFun.calcBuff_5100(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local GemValue1 = srcUser:GetGemValue(41031)
  local GemValue2 = srcUser:GetGemValue(41032)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local A = math.floor(Int / 10) * GemValue1 / 100000 * a + math.floor(Vit / 10) * GemValue2 / 100000 * b
  return A
end

function CommonFun.calcBuff_5110(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local GemValue = srcUser:GetGemValue(122011)
  local Int = srcUser:GetProperty("Int")
  local A = Int * GemValue / 1000
  return A
end

function CommonFun.calcBuff_5120(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local GemValue1 = srcUser:GetGemValue(132001)
  local GemValue2 = srcUser:GetGemValue(132002)
  local Agi = srcUser:GetProperty("Agi")
  local A = Agi * GemValue1 / 1000 * a + Agi * GemValue2 / 1000 * b
  return A
end

function CommonFun.calcBuff_5121(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Agi = srcUser:GetProperty("Agi")
  local A = -Agi
  return A
end

function CommonFun.calcBuff_5130(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value1 = srcUser:GetGemValue(112052)
  local Value2 = srcUser:GetGemValue(102052)
  local A = Value1 / 1000 + Value2 / 1000
  return A
end

function CommonFun.calcBuff_5140(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(21042)
  local MaxSp = srcUser:GetProperty("MaxSp")
  local A = Value / 100000 * MaxSp
  return A
end

function CommonFun.calcBuff_5141(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(21122)
  local MaxSp = targetUser:GetProperty("MaxSp")
  local A = -Value / 100000 * MaxSp
  return A
end

function CommonFun.calcBuff_5150(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(51012)
  local MaxSp = targetUser:GetProperty("MaxSp")
  local Sp = targetUser:GetProperty("Sp")
  local A = Value / 100000 * (MaxSp - Sp)
  return A
end

function CommonFun.calcBuff_5160(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value1 = srcUser:GetGemValue(102071)
  local Value2 = srcUser:GetGemValue(112071)
  local A = 0
  if Value1 + Value2 ~= 0 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_5170(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value1 = srcUser:GetGemValue(102071)
  local Value2 = srcUser:GetGemValue(112071)
  local A = Value1 / 1000 + Value2 / 1000 + 3
  return A
end

function CommonFun.calcBuff_5180(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(11032)
  local MaxSp = srcUser:GetProperty("MaxSp")
  local Sp = srcUser:GetProperty("Sp")
  local A = -(Sp * (1 - Value / 100000))
  return A
end

function CommonFun.calcBuff_5190(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = a * lv + b
  if srcUser:HasBuffID(c) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5200(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local SilenceAtk = srcUser:GetProperty("SilenceAtk")
  local SilenceDef2 = targetUser:GetProperty("SilenceDef")
  local SlienceDam = 1 + SilenceAtk - SilenceDef2
  if SlienceDam <= 0 then
    SlienceDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local GemValue = srcUser:GetGemValue(91021)
  local rate1 = GemValue / 1000 * SlienceDam * StateDam * CommonFun.calcAttrSilenceRate(srcUser, targetUser)
  local rate2 = GemValue / 1000 * SlienceDam * StateDam * CommonFun.calcAttrSilenceRate(srcUser, targetUser)
  local Hasbuff = 0
  if srcUser:HasBuffID(20910030) then
    Hasbuff = 1
  end
  local A = rate1 * a + rate2 * b * Hasbuff
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_5210(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(123)
  local StunAtk = srcUser:GetProperty("StunAtk")
  local StunDef2 = targetUser:GetProperty("StunDef")
  local StunDam = 1 + StunAtk - StunDef2
  if StunDam <= 0 then
    StunDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local A = (skilllv_1 * a + b) * StunDam * StateDam * CommonFun.calcAttrDizzyRate(srcUser, targetUser)
  if A <= 0 then
    return 0
  end
  if skilllv_1 <= 0 then
    return 0
  end
  if srcUser:HasBuffID(20410010) == false then
    return 0
  end
  return A
end

function CommonFun.calcBuff_5220(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local FreezeAtk = srcUser:GetProperty("FreezeAtk")
  local FreezeDef2 = targetUser:GetProperty("FreezeDef")
  local FreezeDam = 1 + FreezeAtk - FreezeDef2
  if FreezeDam <= 0 then
    FreezeDam = 0
  end
  local StateAtk = srcUser:GetProperty("StateAtk")
  local StateDef2 = targetUser:GetProperty("StateDef")
  local StateDam = 1 + StateAtk - StateDef2
  if StateDam <= 0 then
    StateDam = 0
  end
  local rate1 = (lv * 2 + 20) * FreezeDam * StateDam * CommonFun.calcAttrFreezeRate(srcUser, targetUser)
  local rate2 = (lv * 2 + 20) * FreezeDam * StateDam * CommonFun.calcAttrFreezeRate(srcUser, targetUser)
  local Hasbuff = 0
  if srcUser:HasBuffID(20820030) then
    Hasbuff = 1
  end
  local A = rate1 * a + rate2 * b * Hasbuff
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_5230(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hasbuff = 0
  local GemValue = srcUser:GetGemValue(122002)
  if srcUser:HasBuffID(100660) then
    Hasbuff = 1
  end
  local A = GemValue / 1000 * Hasbuff
  return A
end

function CommonFun.calcBuff_5240(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local lvValue = srcUser.BaseLv
  local A = 3000000 * (lvValue - 120)
  return A
end

function CommonFun.calcBuff_5241(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local lvValue = srcUser.BaseLv
  local A = 0.5 * (lvValue - 120)
  return A
end

function CommonFun.calcBuff_5250(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(c)
  local A = lv * a + b + Value / 100000
  local Profession = targetUser:GetProfressionID()
  if Profession == 102 or Profession == 103 or Profession == 104 or Profession == 105 then
    A = A * 2
  end
  return A
end

function CommonFun.calcBuff_5260(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(c)
  local MaxHp = srcUser:GetProperty("MaxHp")
  local MaxSp = srcUser:GetProperty("MaxSp")
  local A = Value / 100000 * MaxHp * a + Value / 100000 * MaxSp * b
  return A
end

function CommonFun.calcBuff_5261(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(c)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local MaxSp = targetUser:GetProperty("MaxSp")
  local A = Value / 100000 * MaxHp * a + Value / 100000 * MaxSp * b
  return A
end

function CommonFun.calcBuff_5270(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local buff = 0
  local Hp1 = srcUser:GetProperty("Hp")
  local Hp2 = targetUser:GetProperty("Hp")
  if srcUser:HasBuffID(20720090) and Hp2 < Hp1 * 0.05 then
    buff = 1
  end
  local A = a * buff + b * Hp2
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = 0
  end
  if targetUser:DamageAlways1() then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5280(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = srcUser:GetProperty(CommonFun.GetAttrName(a))
  local skilllv_1 = srcUser:GetLernedSkillLevel(1376)
  local A = math.min(skilllv_1 * 3, Attr)
  return A
end

function CommonFun.calcBuff_5290(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1107)
  local Value = srcUser:GetGemValue(31011)
  local Xiaodao = srcUser:GetBuffLayer(1011001)
  local skilllv_2 = srcUser:GetLernedSkillLevel(6102)
  local A = math.min(skilllv_1 * 7, 35) + Value / 1000 + skilllv_2 * Xiaodao * 0.2
  return A
end

function CommonFun.calcBuff_5291(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(a)
  local Value = srcUser:GetGemValue(c)
  local A = skilllv_1 * b + Value / d
  return A
end

function CommonFun.calcBuff_5300(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local skilllv_1 = srcUser:GetLernedSkillLevel(1144)
  if (srcUser:HasBuffID(116410) or srcUser:HasBuffID(116413)) and 0 < skilllv_1 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_5310(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ensemble = srcUser:GetEnsemblePartner()
  if Ensemble == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(a) or Ensemble:HasBuffID(a) then
    A = b
  end
  return A
end

function CommonFun.calcBuff_5320(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local suoding = targetUser:GetBuffLayer(163732)
  if 4 <= suoding then
    if targetUser:HasBuffID(163750) then
      return 0
    else
      return 100
    end
  end
  return A
end

function CommonFun.calcBuff_5330(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser:HasBuffID(163750) then
    return 0
  end
  return A
end

function CommonFun.calcBuff_5400(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser:HasBuffID(164002) or targetUser:HasBuffID(164050) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5401(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser:HasBuffID(164012) or targetUser:HasBuffID(164050) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5402(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:GetNpcID() == 250321 or targetUser:GetNpcID() == 250322 or targetUser:GetNpcID() == 250323 or targetUser:GetNpcID() == 250324 or targetUser:GetNpcID() == 250325 or targetUser:GetNpcID() == 250326 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_5403(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:GetNpcID() == 270321 or targetUser:GetNpcID() == 270322 or targetUser:GetNpcID() == 270323 or targetUser:GetNpcID() == 270324 or targetUser:GetNpcID() == 270325 or targetUser:GetNpcID() == 270326 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_5404(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:GetNpcID() == 260321 or targetUser:GetNpcID() == 260322 or targetUser:GetNpcID() == 260323 or targetUser:GetNpcID() == 260324 or targetUser:GetNpcID() == 260325 or targetUser:GetNpcID() == 260326 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_5405(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser:HasBuffID(165512) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5410(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local lvValue = srcUser.BaseLv
  local A = 2000000 * (lvValue - 90)
  return A
end

function CommonFun.calcBuff_5411(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local lvValue = srcUser.BaseLv
  local A = 0.2 * (lvValue - 90)
  return A
end

function CommonFun.calcBuff_5412(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local lvValue = srcUser.BaseLv
  local A = 4000000 * (lvValue - 120)
  return A
end

function CommonFun.calcBuff_5413(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local lvValue = srcUser.BaseLv
  local A = 0.3 * (lvValue - 120)
  return A
end

function CommonFun.calcBuff_5414(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local lvValue = srcUser.BaseLv
  local A = 600000 * (lvValue - 70)
  return A
end

function CommonFun.calcBuff_5415(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local lvValue = srcUser.BaseLv
  local A = 0.1 * (lvValue - 70)
  return A
end

function CommonFun.calcBuff_5420(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1608)
  local Num = srcUser:GetRunePoint(153001)
  local A = (Atk * (1 + AtkPer) + MAtk * (1 + MAtkPer)) * skilllv_1 * 0.02 * (1 + Num * 0.1)
  return A
end

function CommonFun.calcBuff_5430(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Int = srcUser:GetProperty("Int")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1609)
  local BeHealEncPer2 = targetUser:GetProperty("BeHealEncPer")
  local HealEncPer = srcUser:GetProperty("HealEncPer")
  local skilllv_2 = srcUser:GetLernedSkillLevel(1632)
  local Num = srcUser:GetRunePoint(153019)
  local GemHuoxia = srcUser:GetGemValue(153101)
  local WFoxtail = 1
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  local Ring7 = srcUser:GetEquipedID(7)
  if srcUser:HasBuffID(90002603) then
    WFoxtail = WFoxtail + RefineLv7 * 0.02
  end
  if Ring7 == 44308 or Ring7 == 144308 then
    WFoxtail = WFoxtail + RefineLv7 * 0.02
  end
  local A = (MAtk * (1 + MAtkPer) * skilllv_1 * 0.05 + Int * skilllv_1 * 2) * (1 + BeHealEncPer2) * (1 + HealEncPer) * (1 + skilllv_2 * 0.02) * (1 + Num * 0.05) * (1 + GemHuoxia / 100000) * WFoxtail
  local RateNum = 0
  if srcUser:HasBuffID(90004614) then
    RateNum = 15
  end
  if CommonFun.IsInRate(RateNum, srcUser:GetRandom()) then
    return A * 2
  else
    return A
  end
end

function CommonFun.calcBuff_5431(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1610)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1632)
  local Num = srcUser:GetRunePoint(153018)
  local GemXiaqun = srcUser:GetGemValue(153102)
  local A = (skilllv_1 * 6 + skilllv_2 * 2 + Num * 5) * (1 + GemXiaqun / 100000)
  return A
end

function CommonFun.calcBuff_5440(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1632)
  lv = math.min(lv, 5)
  local GemDurou = srcUser:GetGemValue(153002)
  local A = MaxHp * (lv * 0.03 + 0.15 + skilllv_1 * 0.01 + GemDurou / 100000)
  local RateNum = 0
  if srcUser:HasBuffID(90004614) then
    RateNum = 15
  end
  if CommonFun.IsInRate(RateNum, srcUser:GetRandom()) then
    return A * 2
  else
    return A
  end
end

function CommonFun.calcBuff_5441(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxSp = targetUser:GetProperty("MaxSp")
  local A = MaxSp * ((lv - 5) * 0.05 + 0.15)
  return A
end

function CommonFun.calcBuff_5450(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local Num = srcUser:GetRunePoint(153032)
  local GemBaishu = srcUser:GetGemValue(153072)
  if lv <= 10 then
    A = 10 + Num * 3 + GemBaishu / 1000
  else
    A = (lv - 10) * 2 + 10 + Num * 3 + GemBaishu / 1000
  end
  if targetUser:HasBuffID(160000) then
    A = 0
  end
  if targetUser.boss == true or targetUser.mini == true then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5451(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if lv <= 10 then
    A = 5
  else
    A = (lv - 10) * 1 + 5
  end
  return A
end

function CommonFun.calcBuff_5460(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local num1 = srcUser:RaceNumInTeam({2})
  local num2 = srcUser:GetCatNumInTeam()
  local A = (num1 + num2) * lv * a
  return A
end

function CommonFun.calcBuff_5470(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local skilllv_1 = srcUser:GetLernedSkillLevel(1619)
  local HealEncPer = srcUser:GetProperty("HealEncPer")
  local skilllv_2 = srcUser:GetLernedSkillLevel(1632)
  local Num1 = srcUser:GetRunePoint(153023)
  local Num2 = srcUser:GetRunePoint(153036)
  local LushFoxtail = 1
  if (srcUser:HasBuffID(42840) or srcUser:HasBuffID(42960)) and (srcUser:HasBuffID(42790) or srcUser:HasBuffID(43150)) then
    LushFoxtail = LushFoxtail + 0.05
  end
  local RefineLv7 = srcUser:GetEquipedRefineLv(7)
  if 10 <= RefineLv7 and srcUser:HasBuffID(90002607) then
    LushFoxtail = LushFoxtail + 0.1
  end
  if 10 <= RefineLv7 and srcUser:HasBuffID(42960) then
    LushFoxtail = LushFoxtail + 0.1
  end
  local A = MaxHp * (skilllv_1 * 0.02 + 0.1 + skilllv_2 * 0.01 + Num1 * 0.03) * (1 + HealEncPer * Num2 * 0.05) * LushFoxtail
  return A
end

function CommonFun.calcBuff_5480(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1622)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1635)
  local A = -(skilllv_1 * 0.02 + skilllv_2 * 0.01)
  return A
end

function CommonFun.calcBuff_5490(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1624)
  skilllv_1 = math.min(skilllv_1, 5)
  local A = skilllv_1 * 0.03
  return A
end

function CommonFun.calcBuff_5491(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1624)
  local Num = srcUser:GetRunePoint(153040)
  local A = 0
  if 5 < skilllv_1 then
    A = (skilllv_1 - 5) * 0.02 + Num * 0.03
  else
    A = Num * 0.03
  end
  return A
end

function CommonFun.calcBuff_5500(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Bufflv = srcUser:GetBuffLayer(164500)
  local A = MaxHp * a * Bufflv + b * Bufflv
  return A
end

function CommonFun.calcBuff_5510(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser:HasBuffID(164532) or targetUser:HasBuffID(164533) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5511(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:HasBuffID(164532) or targetUser:HasBuffID(164533) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_5520(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = srcUser:GetProperty(CommonFun.GetAttrName(104))
  local Gem = srcUser:GetGemValue(102131)
  local A = (Attr * 20 + lv * 200 + 1000) * (1 + Gem / 100000)
  return A
end

function CommonFun.calcBuff_5530(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = srcUser:GetProperty(CommonFun.GetAttrName(101))
  local Gem = srcUser:GetGemValue(112131)
  local A = (Attr * 5 + lv * 50 + 200) * (1 + Gem / 100000)
  return A
end

function CommonFun.calcBuff_5531(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser:HasBuffID(118670) or targetUser:HasBuffID(118672) or targetUser:HasBuffID(118673) or targetUser:HasBuffID(119111) or targetUser:HasBuffID(119113) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5532(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser:HasBuffID(118670) or targetUser:HasBuffID(118671) or targetUser:HasBuffID(118672) or targetUser:HasBuffID(119111) or targetUser:HasBuffID(119113) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5533(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser:HasBuffID(118670) or targetUser:HasBuffID(118671) or targetUser:HasBuffID(118672) or targetUser:HasBuffID(118673) or targetUser:HasBuffID(119113) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5534(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser:HasBuffID(118670) or targetUser:HasBuffID(118671) or targetUser:HasBuffID(118672) or targetUser:HasBuffID(118673) or targetUser:HasBuffID(119111) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5540(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(a)
  local GainNum = srcUser:GetSkillGainBuffNum()
  local A = Value / 100000 * GainNum
  return A
end

function CommonFun.calcBuff_5550(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Gem = srcUser:GetGemValue(51122)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = MaxHp * Gem / 100000
  return A
end

function CommonFun.calcBuff_5600(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44010 or Ring1 == 144010) and 8 <= RefineLv1 and 8 <= order1 then
    a = 0.02
  end
  if (Ring2 == 44010 or Ring2 == 144010) and 8 <= RefineLv2 and 8 <= order2 then
    b = 0.02
  end
  if (Ring1 == 44010 or Ring1 == 144010) and (Ring2 == 44010 or Ring2 == 144010) and 8 <= order1 and 8 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5610(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44032 or Ring1 == 144032) and 8 <= RefineLv1 and 8 <= order1 then
    a = 0.04
  end
  if (Ring2 == 44032 or Ring2 == 144032) and 8 <= RefineLv2 and 8 <= order2 then
    b = 0.04
  end
  if (Ring1 == 44032 or Ring1 == 144032) and (Ring2 == 44032 or Ring2 == 144032) and 8 <= order1 and 8 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5620(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44029 or Ring1 == 144029) and 8 <= RefineLv1 and 8 <= order1 then
    a = 0.02
  end
  if (Ring2 == 44029 or Ring2 == 144029) and 8 <= RefineLv2 and 8 <= order2 then
    b = 0.02
  end
  if (Ring1 == 44029 or Ring1 == 144029) and (Ring2 == 44029 or Ring2 == 144029) and 8 <= order1 and 8 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5630(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44031 or Ring1 == 144031) and 8 <= RefineLv1 and 8 <= order1 then
    a = 0.02
  end
  if (Ring2 == 44031 or Ring2 == 144031) and 8 <= RefineLv2 and 8 <= order2 then
    b = 0.02
  end
  if (Ring1 == 44031 or Ring1 == 144031) and (Ring2 == 44031 or Ring2 == 144031) and 8 <= order1 and 8 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5640(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44030 or Ring1 == 144030) and 8 <= RefineLv1 and 8 <= order1 then
    a = 0.03
  end
  if (Ring2 == 44030 or Ring2 == 144030) and 8 <= RefineLv2 and 8 <= order2 then
    b = 0.03
  end
  if (Ring1 == 44030 or Ring1 == 144030) and (Ring2 == 44030 or Ring2 == 144030) and 8 <= order1 and 8 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5650(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44027 or Ring1 == 144027) and 8 <= RefineLv1 and 4 <= order1 then
    a = -0.1
  end
  if (Ring2 == 44027 or Ring2 == 144027) and 8 <= RefineLv2 and 4 <= order2 then
    b = -0.1
  end
  if (Ring1 == 44027 or Ring1 == 144027) and (Ring2 == 44027 or Ring2 == 144027) and 4 <= order1 and 4 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5660(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44027 or Ring1 == 144027) and 12 <= RefineLv1 and 6 <= order1 then
    a = 0.04
  end
  if (Ring2 == 44027 or Ring2 == 144027) and 12 <= RefineLv2 and 6 <= order2 then
    b = 0.04
  end
  if (Ring1 == 44027 or Ring1 == 144027) and (Ring2 == 44027 or Ring2 == 144027) and 6 <= order1 and 6 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5670(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44003 or Ring1 == 144003) and 10 <= RefineLv1 and 8 <= order1 then
    a = 100
  end
  if (Ring2 == 44003 or Ring2 == 144003) and 10 <= RefineLv2 and 8 <= order2 then
    b = 100
  end
  if (Ring1 == 44003 or Ring1 == 144003) and (Ring2 == 44003 or Ring2 == 144003) and 8 <= order1 and 8 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5671(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44047 or Ring1 == 144047) and 5 <= RefineLv1 and RefineLv1 < 10 then
    a = 100
  elseif (Ring1 == 44047 or Ring1 == 144047) and 10 <= RefineLv1 and RefineLv1 < 15 then
    a = 200
  elseif (Ring1 == 44047 or Ring1 == 144047) and 15 <= RefineLv1 then
    a = 400
  else
    a = 0
  end
  if (Ring2 == 44047 or Ring2 == 144047) and 5 <= RefineLv2 and RefineLv2 < 10 then
    b = 100
  elseif (Ring2 == 44047 or Ring2 == 144047) and 10 <= RefineLv2 and RefineLv2 < 15 then
    b = 200
  elseif (Ring2 == 44047 or Ring2 == 144047) and 15 <= RefineLv2 then
    b = 400
  else
    b = 0
  end
  if (Ring1 == 44047 or Ring1 == 144047) and (Ring2 == 44047 or Ring2 == 144047) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5680(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44045 or Ring1 == 144045) and 8 <= RefineLv1 and 4 <= order1 then
    a = 0.02
  end
  if (Ring2 == 44045 or Ring2 == 144045) and 8 <= RefineLv2 and 4 <= order2 then
    b = 0.02
  end
  if (Ring1 == 44045 or Ring1 == 144045) and (Ring2 == 44045 or Ring2 == 144045) and 4 <= order1 and 4 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5690(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44015 or Ring1 == 144015) and 8 <= RefineLv1 and 4 <= order1 then
    a = 40
  end
  if (Ring2 == 44015 or Ring2 == 144015) and 8 <= RefineLv2 and 4 <= order2 then
    b = 40
  end
  if (Ring1 == 44015 or Ring1 == 144015) and (Ring2 == 44015 or Ring2 == 144015) and 4 <= order1 and 4 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5700(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44015 or Ring1 == 144015) and 8 <= RefineLv1 and 4 <= order1 then
    a = 4
  end
  if (Ring2 == 44015 or Ring2 == 144015) and 8 <= RefineLv2 and 4 <= order2 then
    b = 4
  end
  if (Ring1 == 44015 or Ring1 == 144015) and (Ring2 == 44015 or Ring2 == 144015) and 4 <= order1 and 4 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5710(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44065 or Ring1 == 144065) and 12 <= RefineLv1 and 8 <= order1 then
    a = 0.03
  end
  if (Ring2 == 44065 or Ring2 == 144065) and 12 <= RefineLv2 and 8 <= order2 then
    b = 0.03
  end
  if (Ring1 == 44065 or Ring1 == 144065) and (Ring2 == 44065 or Ring2 == 144065) and 8 <= order1 and 8 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5720(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44068 or Ring1 == 144068) and 12 <= RefineLv1 and 6 <= order1 then
    a = 0.03
  end
  if (Ring2 == 44068 or Ring2 == 144068) and 12 <= RefineLv2 and 6 <= order2 then
    b = 0.03
  end
  if (Ring1 == 44068 or Ring1 == 144068) and (Ring2 == 44068 or Ring2 == 144068) and 6 <= order1 and 6 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5721(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44068 or Ring1 == 144068) and 8 <= RefineLv1 and 8 <= order1 then
    a = 0.02
  end
  if (Ring2 == 44068 or Ring2 == 144068) and 8 <= RefineLv2 and 8 <= order2 then
    b = 0.02
  end
  if (Ring1 == 44068 or Ring1 == 144068) and (Ring2 == 44068 or Ring2 == 144068) and 8 <= order1 and 8 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5722(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44068 or Ring1 == 144068) and 4 <= order1 then
    a = RefineLv1 * 0.01
  end
  if (Ring2 == 44068 or Ring2 == 144068) and 4 <= order2 then
    b = RefineLv2 * 0.01
  end
  if (Ring1 == 44068 or Ring1 == 144068) and (Ring2 == 44068 or Ring2 == 144068) and 4 <= order1 and 4 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5730(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44064 or Ring1 == 144064) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.06
  elseif (Ring1 == 44064 or Ring1 == 144064) and 12 <= RefineLv1 then
    a = 0.1
  elseif Ring1 == 44064 or Ring1 == 144064 then
    a = 0.03
  end
  if (Ring2 == 44064 or Ring2 == 144064) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.06
  elseif (Ring2 == 44064 or Ring2 == 144064) and 12 <= RefineLv2 then
    b = 0.1
  elseif Ring2 == 44064 or Ring2 == 144064 then
    b = 0.03
  end
  if (Ring1 == 44064 or Ring1 == 144064) and (Ring2 == 44064 or Ring2 == 144064) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5740(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44048 or Ring1 == 144048) and 5 <= RefineLv1 and RefineLv1 < 10 then
    a = -0.05
  elseif (Ring1 == 44048 or Ring1 == 144048) and 10 <= RefineLv1 and RefineLv1 < 15 then
    a = -0.1
  elseif (Ring1 == 44048 or Ring1 == 144048) and 15 <= RefineLv1 then
    a = -0.3
  else
    a = 0
  end
  if (Ring2 == 44048 or Ring2 == 144048) and 5 <= RefineLv2 and RefineLv2 < 10 then
    b = -0.05
  elseif (Ring2 == 44048 or Ring2 == 144048) and 10 <= RefineLv2 and RefineLv2 < 15 then
    b = -0.1
  elseif (Ring2 == 44048 or Ring2 == 144048) and 15 <= RefineLv2 then
    b = -0.3
  else
    b = 0
  end
  if (Ring1 == 44048 or Ring1 == 144048) and (Ring2 == 44048 or Ring2 == 144048) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5741(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44048 or Ring1 == 144048) and 5 <= RefineLv1 and RefineLv1 < 10 then
    a = 4
  elseif (Ring1 == 44048 or Ring1 == 144048) and 10 <= RefineLv1 and RefineLv1 < 15 then
    a = 4
  elseif (Ring1 == 44048 or Ring1 == 144048) and 15 <= RefineLv1 then
    a = 4
  else
    a = 0
  end
  if (Ring2 == 44048 or Ring2 == 144048) and 5 <= RefineLv2 and RefineLv2 < 10 then
    b = 4
  elseif (Ring2 == 44048 or Ring2 == 144048) and 10 <= RefineLv2 and RefineLv2 < 15 then
    b = 4
  elseif (Ring2 == 44048 or Ring2 == 144048) and 15 <= RefineLv2 then
    b = 4
  else
    b = 0
  end
  if (Ring1 == 44048 or Ring1 == 144048) and (Ring2 == 44048 or Ring2 == 144048) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5742(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44048 or Ring1 == 144048) and 5 <= RefineLv1 and RefineLv1 < 10 then
    a = 40
  elseif (Ring1 == 44048 or Ring1 == 144048) and 10 <= RefineLv1 and RefineLv1 < 15 then
    a = 40
  elseif (Ring1 == 44048 or Ring1 == 144048) and 15 <= RefineLv1 then
    a = 120
  else
    a = 0
  end
  if (Ring2 == 44048 or Ring2 == 144048) and 5 <= RefineLv2 and RefineLv2 < 10 then
    b = 40
  elseif (Ring2 == 44048 or Ring2 == 144048) and 10 <= RefineLv2 and RefineLv2 < 15 then
    b = 40
  elseif (Ring2 == 44048 or Ring2 == 144048) and 15 <= RefineLv2 then
    b = 120
  else
    b = 0
  end
  if (Ring1 == 44048 or Ring1 == 144048) and (Ring2 == 44048 or Ring2 == 144048) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5743(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44048 or Ring1 == 144048) and 5 <= RefineLv1 and RefineLv1 < 10 then
    a = 0
  elseif (Ring1 == 44048 or Ring1 == 144048) and 10 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.08
  elseif (Ring1 == 44048 or Ring1 == 144048) and 15 <= RefineLv1 then
    a = 0.08
  else
    a = 0
  end
  if (Ring2 == 44048 or Ring2 == 144048) and 5 <= RefineLv2 and RefineLv2 < 10 then
    b = 0
  elseif (Ring2 == 44048 or Ring2 == 144048) and 10 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.08
  elseif (Ring2 == 44048 or Ring2 == 144048) and 15 <= RefineLv2 then
    b = 0.08
  else
    b = 0
  end
  if (Ring1 == 44048 or Ring1 == 144048) and (Ring2 == 44048 or Ring2 == 144048) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5750(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44049 or Ring1 == 144049) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.03
  elseif (Ring1 == 44049 or Ring1 == 144049) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.07
  elseif (Ring1 == 44049 or Ring1 == 144049) and 15 <= RefineLv1 then
    a = 0.07
  else
    a = 0
  end
  if (Ring2 == 44049 or Ring2 == 144049) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.03
  elseif (Ring2 == 44049 or Ring2 == 144049) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.07
  elseif (Ring2 == 44049 or Ring2 == 144049) and 15 <= RefineLv2 then
    b = 0.07
  else
    b = 0
  end
  if (Ring1 == 44049 or Ring1 == 144049) and (Ring2 == 44049 or Ring2 == 144049) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5751(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44049 or Ring1 == 144049) and 5 <= RefineLv1 and RefineLv1 < 10 then
    a = 0
  elseif (Ring1 == 44049 or Ring1 == 144049) and 10 <= RefineLv1 and RefineLv1 < 15 then
    a = 0
  elseif (Ring1 == 44049 or Ring1 == 144049) and 15 <= RefineLv1 then
    a = 0.08
  else
    a = 0
  end
  if (Ring2 == 44049 or Ring2 == 144049) and 5 <= RefineLv2 and RefineLv2 < 10 then
    b = 0
  elseif (Ring2 == 44049 or Ring2 == 144049) and 10 <= RefineLv2 and RefineLv2 < 15 then
    b = 0
  elseif (Ring2 == 44049 or Ring2 == 144049) and 15 <= RefineLv2 then
    b = 0.08
  else
    b = 0
  end
  if (Ring1 == 44049 or Ring1 == 144049) and (Ring2 == 44049 or Ring2 == 144049) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5760(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44051 or Ring1 == 144051) and 10 <= RefineLv1 and RefineLv1 < 15 then
    a = RefineLv1 / 100
  elseif (Ring1 == 44051 or Ring1 == 144051) and 15 <= RefineLv1 then
    a = RefineLv1 / 100 + 0.05
  end
  if (Ring2 == 44051 or Ring2 == 144051) and 10 <= RefineLv2 and RefineLv2 < 15 then
    b = RefineLv2 / 100
  elseif (Ring2 == 44051 or Ring2 == 144051) and 15 <= RefineLv2 then
    b = RefineLv2 / 100 + 0.05
  end
  if (Ring1 == 44051 or Ring1 == 144051) and (Ring2 == 44051 or Ring2 == 144051) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5761(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44051 or Ring1 == 144051) and 12 <= RefineLv1 then
    a = 0.05
  end
  if (Ring2 == 44051 or Ring2 == 144051) and 12 <= RefineLv2 then
    b = 0.05
  end
  if (Ring1 == 44051 or Ring1 == 144051) and (Ring2 == 44051 or Ring2 == 144051) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5762(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44051 or Ring1 == 144051) and 12 <= RefineLv1 then
    a = -0.05
  end
  if (Ring2 == 44051 or Ring2 == 144051) and 12 <= RefineLv2 then
    b = -0.05
  end
  if (Ring1 == 44051 or Ring1 == 144051) and (Ring2 == 44051 or Ring2 == 144051) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5770(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44054 or Ring1 == 144054) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.03
  elseif (Ring1 == 44054 or Ring1 == 144054) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.09
  elseif (Ring1 == 44054 or Ring1 == 144054) and 15 <= RefineLv1 then
    a = 0.15
  else
    a = 0
  end
  if (Ring2 == 44054 or Ring2 == 144054) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.03
  elseif (Ring2 == 44054 or Ring2 == 144054) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.09
  elseif (Ring2 == 44054 or Ring2 == 144054) and 15 <= RefineLv2 then
    b = 0.15
  else
    b = 0
  end
  if (Ring1 == 44054 or Ring1 == 144054) and (Ring2 == 44054 or Ring2 == 144054) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5780(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44055 or Ring1 == 144055) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44055 or Ring1 == 144055) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.04
  elseif (Ring1 == 44055 or Ring1 == 144055) and 15 <= RefineLv1 then
    a = 0.1
  else
    a = 0
  end
  if (Ring2 == 44055 or Ring2 == 144055) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44055 or Ring2 == 144055) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.04
  elseif (Ring2 == 44055 or Ring2 == 144055) and 15 <= RefineLv2 then
    b = 0.1
  else
    b = 0
  end
  if (Ring1 == 44055 or Ring1 == 144055) and (Ring2 == 44055 or Ring2 == 144055) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5781(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44055 or Ring1 == 144055) and 8 <= RefineLv1 then
    a = -0.1
  end
  if (Ring2 == 44055 or Ring2 == 144055) and 8 <= RefineLv2 then
    b = -0.1
  end
  if (Ring1 == 44055 or Ring1 == 144055) and (Ring2 == 44055 or Ring2 == 144055) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5790(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44056 or Ring1 == 144056) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.02
  elseif (Ring1 == 44056 or Ring1 == 144056) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.05
  elseif (Ring1 == 44056 or Ring1 == 144056) and 15 <= RefineLv1 then
    a = 0.09
  else
    a = 0
  end
  if (Ring2 == 44056 or Ring2 == 144056) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.02
  elseif (Ring2 == 44056 or Ring2 == 144056) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.05
  elseif (Ring2 == 44056 or Ring2 == 144056) and 15 <= RefineLv2 then
    b = 0.09
  else
    b = 0
  end
  if (Ring1 == 44056 or Ring1 == 144056) and (Ring2 == 44056 or Ring2 == 144056) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5800(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44057 or Ring1 == 144057) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.02
  elseif (Ring1 == 44057 or Ring1 == 144057) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.05
  elseif (Ring1 == 44057 or Ring1 == 144057) and 15 <= RefineLv1 then
    a = 0.09
  else
    a = 0
  end
  if (Ring2 == 44057 or Ring2 == 144057) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.02
  elseif (Ring2 == 44057 or Ring2 == 144057) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.05
  elseif (Ring2 == 44057 or Ring2 == 144057) and 15 <= RefineLv2 then
    b = 0.09
  else
    b = 0
  end
  if (Ring1 == 44057 or Ring1 == 144057) and (Ring2 == 44057 or Ring2 == 144057) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5810(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44058 or Ring1 == 144058) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.04
  elseif (Ring1 == 44058 or Ring1 == 144058) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.08
  elseif (Ring1 == 44058 or Ring1 == 144058) and 15 <= RefineLv1 then
    a = 0.14
  else
    a = 0
  end
  if (Ring2 == 44058 or Ring2 == 144058) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.04
  elseif (Ring2 == 44058 or Ring2 == 144058) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.08
  elseif (Ring2 == 44058 or Ring2 == 144058) and 15 <= RefineLv2 then
    b = 0.14
  else
    b = 0
  end
  if (Ring1 == 44058 or Ring1 == 144058) and (Ring2 == 44058 or Ring2 == 144058) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5820(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44052 or Ring1 == 144052) and 12 <= RefineLv1 then
    a = 0.04
  end
  if (Ring2 == 44052 or Ring2 == 144052) and 12 <= RefineLv2 then
    b = 0.04
  end
  if (Ring1 == 44052 or Ring1 == 144052) and (Ring2 == 44052 or Ring2 == 144052) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5821(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44052 or Ring1 == 144052) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.02
  elseif (Ring1 == 44052 or Ring1 == 144052) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.02
  elseif (Ring1 == 44052 or Ring1 == 144052) and 15 <= RefineLv1 then
    a = 0.06
  else
    a = 0
  end
  if (Ring2 == 44052 or Ring2 == 144052) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.02
  elseif (Ring2 == 44052 or Ring2 == 144052) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.02
  elseif (Ring2 == 44052 or Ring2 == 144052) and 15 <= RefineLv2 then
    b = 0.06
  else
    b = 0
  end
  if (Ring1 == 44052 or Ring1 == 144052) and (Ring2 == 44052 or Ring2 == 144052) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5830(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44060 or Ring1 == 144060) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44060 or Ring1 == 144060) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.03
  elseif (Ring1 == 44060 or Ring1 == 144060) and 15 <= RefineLv1 then
    a = 0.06
  else
    a = 0
  end
  if (Ring2 == 44060 or Ring2 == 144060) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44060 or Ring2 == 144060) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.03
  elseif (Ring2 == 44060 or Ring2 == 144060) and 15 <= RefineLv2 then
    b = 0.06
  else
    b = 0
  end
  if (Ring1 == 44060 or Ring1 == 144060) and (Ring2 == 44060 or Ring2 == 144060) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5840(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44062 or Ring1 == 144062) and 12 <= RefineLv1 then
    a = 0.04
  end
  if (Ring2 == 44062 or Ring2 == 144062) and 12 <= RefineLv2 then
    b = 0.04
  end
  if (Ring1 == 44062 or Ring1 == 144062) and (Ring2 == 44062 or Ring2 == 144062) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5841(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44062 or Ring1 == 144062) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.02
  elseif (Ring1 == 44062 or Ring1 == 144062) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.02
  elseif (Ring1 == 44062 or Ring1 == 144062) and 15 <= RefineLv1 then
    a = 0.06
  else
    a = 0
  end
  if (Ring2 == 44062 or Ring2 == 144062) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.02
  elseif (Ring2 == 44062 or Ring2 == 144062) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.02
  elseif (Ring2 == 44062 or Ring2 == 144062) and 15 <= RefineLv2 then
    b = 0.06
  else
    b = 0
  end
  if (Ring1 == 44062 or Ring1 == 144062) and (Ring2 == 44062 or Ring2 == 144062) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5850(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44063 or Ring1 == 144063) and 12 <= RefineLv1 then
    a = 0.04
  end
  if (Ring2 == 44063 or Ring2 == 144063) and 12 <= RefineLv2 then
    b = 0.04
  end
  if (Ring1 == 44063 or Ring1 == 144063) and (Ring2 == 44063 or Ring2 == 144063) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5851(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44063 or Ring1 == 144063) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 40
  elseif (Ring1 == 44063 or Ring1 == 144063) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 40
  elseif (Ring1 == 44063 or Ring1 == 144063) and 15 <= RefineLv1 then
    a = 140
  else
    a = 0
  end
  if (Ring2 == 44063 or Ring2 == 144063) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 40
  elseif (Ring2 == 44063 or Ring2 == 144063) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 40
  elseif (Ring2 == 44063 or Ring2 == 144063) and 15 <= RefineLv2 then
    b = 140
  else
    b = 0
  end
  if (Ring1 == 44063 or Ring1 == 144063) and (Ring2 == 44063 or Ring2 == 144063) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5852(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44063 or Ring1 == 144063) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 4
  elseif (Ring1 == 44063 or Ring1 == 144063) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 10
  elseif (Ring1 == 44063 or Ring1 == 144063) and 15 <= RefineLv1 then
    a = 16
  else
    a = 0
  end
  if (Ring2 == 44063 or Ring2 == 144063) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 4
  elseif (Ring2 == 44063 or Ring2 == 144063) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 10
  elseif (Ring2 == 44063 or Ring2 == 144063) and 15 <= RefineLv2 then
    b = 16
  else
    b = 0
  end
  if (Ring1 == 44063 or Ring1 == 144063) and (Ring2 == 44063 or Ring2 == 144063) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5860(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44061 or Ring1 == 144061) and 8 <= RefineLv1 then
    a = 0.05
  end
  if (Ring2 == 44061 or Ring2 == 144061) and 8 <= RefineLv2 then
    b = 0.05
  end
  if (Ring1 == 44061 or Ring1 == 144061) and (Ring2 == 44061 or Ring2 == 144061) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5861(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44061 or Ring1 == 144061) and 12 <= RefineLv1 then
    a = 0.03
  end
  if (Ring2 == 44061 or Ring2 == 144061) and 12 <= RefineLv2 then
    b = 0.03
  end
  if (Ring1 == 44061 or Ring1 == 144061) and (Ring2 == 44061 or Ring2 == 144061) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5862(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44061 or Ring1 == 144061) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44061 or Ring1 == 144061) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.03
  elseif (Ring1 == 44061 or Ring1 == 144061) and 15 <= RefineLv1 then
    a = 0.08
  else
    a = 0
  end
  if (Ring2 == 44061 or Ring2 == 144061) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44061 or Ring2 == 144061) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.03
  elseif (Ring2 == 44061 or Ring2 == 144061) and 15 <= RefineLv2 then
    b = 0.08
  else
    b = 0
  end
  if (Ring1 == 44061 or Ring1 == 144061) and (Ring2 == 44061 or Ring2 == 144061) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5870(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44066 or Ring1 == 144066) and 8 <= RefineLv1 then
    a = 0.03
  end
  if (Ring2 == 44066 or Ring2 == 144066) and 8 <= RefineLv2 then
    b = 0.03
  end
  if (Ring1 == 44066 or Ring1 == 144066) and (Ring2 == 44066 or Ring2 == 144066) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5871(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44066 or Ring1 == 144066) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44066 or Ring1 == 144066) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.03
  elseif (Ring1 == 44066 or Ring1 == 144066) and 15 <= RefineLv1 then
    a = 0.08
  else
    a = 0
  end
  if (Ring2 == 44066 or Ring2 == 144066) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44066 or Ring2 == 144066) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.03
  elseif (Ring2 == 44066 or Ring2 == 144066) and 15 <= RefineLv2 then
    b = 0.08
  else
    b = 0
  end
  if (Ring1 == 44066 or Ring1 == 144066) and (Ring2 == 44066 or Ring2 == 144066) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5880(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if Ring1 == 44069 or Ring1 == 144069 then
    a = RefineLv1 * 0.01
  end
  if Ring2 == 44069 or Ring2 == 144069 then
    b = RefineLv2 * 0.01
  end
  if (Ring1 == 44069 or Ring1 == 144069) and (Ring2 == 44069 or Ring2 == 144069) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5881(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44069 or Ring1 == 144069) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.02
  elseif (Ring1 == 44069 or Ring1 == 144069) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.05
  elseif (Ring1 == 44069 or Ring1 == 144069) and 15 <= RefineLv1 then
    a = 0.09
  else
    a = 0
  end
  if (Ring2 == 44069 or Ring2 == 144069) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.02
  elseif (Ring2 == 44069 or Ring2 == 144069) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.05
  elseif (Ring2 == 44069 or Ring2 == 144069) and 15 <= RefineLv2 then
    b = 0.09
  else
    b = 0
  end
  if (Ring1 == 44069 or Ring1 == 144069) and (Ring2 == 44069 or Ring2 == 144069) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_5890(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local Ring1 = srcUser:GetEquipedID(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 0
  local d = 0
  local A = 0
  local e = 0
  local f = 0
  local aa = 1
  local bb = 1
  local cc = 1
  local dd = srcUser:GetBuffLayer(90002542)
  local ee = srcUser:GetBuffLayer(42791)
  local ff = srcUser:GetBuffLayer(43151)
  if (Ring1 == 44067 or Ring1 == 144067) and 0 <= RefineLv1 and 3 <= order1 then
    a = 1
  end
  if (Ring2 == 44067 or Ring2 == 144067) and 0 <= RefineLv2 and 3 <= order2 then
    b = 1
  end
  if Ring1 == 44068 or Ring1 == 144068 then
    a = 1
  end
  if Ring2 == 44068 or Ring2 == 144068 then
    b = 1
  end
  if Ring1 == 44069 or Ring1 == 144069 then
    a = 1
  end
  if Ring2 == 44069 or Ring2 == 144069 then
    b = 1
  end
  if (Ring1 == 44067 and 3 <= order1 or Ring1 == 144067 and 3 <= order1 or Ring1 == 44068 or Ring1 == 144068 or Ring1 == 44069 or Ring1 == 144069) and (Ring2 == 44067 and 3 <= order2 or Ring2 == 144067 and 3 <= order2 or Ring2 == 44068 or Ring2 == 144068 or Ring2 == 44069 or Ring2 == 144069) then
    aa = 2
  end
  if (Ring1 == 44068 or Ring1 == 144068) and 0 <= RefineLv1 and 5 <= order1 then
    c = 1
  end
  if (Ring2 == 44068 or Ring2 == 144068) and 0 <= RefineLv2 and 5 <= order2 then
    d = 1
  end
  if Ring1 == 44069 or Ring1 == 144069 then
    c = 1
  end
  if Ring2 == 44069 or Ring2 == 144069 then
    d = 1
  end
  if (Ring1 == 44068 and 5 <= order1 or Ring1 == 144068 and 5 <= order1 or Ring1 == 44069 or Ring1 == 144069) and (Ring2 == 44068 and 5 <= order2 or Ring2 == 144068 and 5 <= order2 or Ring2 == 44069 or Ring2 == 144069) then
    bb = 2
  end
  if Ring1 == 44069 or Ring1 == 144069 then
    e = 3
  end
  if Ring2 == 44069 or Ring2 == 144069 then
    f = 3
  end
  if (Ring1 == 44069 or Ring1 == 144069) and (Ring2 == 44069 or Ring2 == 144069) then
    cc = 2
  end
  local A = 0 + math.min(1, a + b) / aa + math.min(1, c + d) / bb + math.min(3, e + f) / cc
  local Bufflv = srcUser:GetBuffLayer(90002554)
  local Bufflv1 = dd + ee + ff + Bufflv
  if Bufflv == 2 then
    A = 2 / Bufflv1
  end
  if Bufflv == 1 and dd == 1 then
    A = 2 / Bufflv1
  end
  if Bufflv == 1 and ee == 2 then
    A = 2 / Bufflv1
  end
  if Bufflv == 1 and Bufflv1 == 2 then
    A = 2 / Bufflv1
  end
  if 1 <= ff then
    A = 5 / Bufflv1
  end
  return -A
end

function CommonFun.calcBuff_5891(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local a = 0
  local b = 0
  local c = 0
  local Bufflv1 = srcUser:GetBuffLayer(90002542)
  local Bufflv2 = srcUser:GetBuffLayer(42791)
  local Bufflv3 = srcUser:GetBuffLayer(90002554)
  local Bufflv4 = srcUser:GetBuffLayer(43151)
  local Bufflv = srcUser:GetBuffLayer(42780) + srcUser:GetBuffLayer(42790) + srcUser:GetBuffLayer(43150)
  local aa = Bufflv1 + Bufflv2 + Bufflv3 + Bufflv4
  local bb = Bufflv3 + Bufflv4
  local cc = Bufflv4
  if 1 <= aa then
    a = 1
  end
  if 1 <= bb then
    b = 1
  end
  if 1 <= cc then
    c = 3
  end
  if Bufflv <= 0 then
    return 0
  end
  local A = (0 + a + b + c) / Bufflv
  return -A
end

function CommonFun.calcBuff_5900(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if (srcUser:HasBuffID(90000637) or srcUser:HasBuffID(41820)) and (srcUser:HasBuffID(90000707) or srcUser:HasBuffID(42460)) and (srcUser:HasBuffID(90001087) or srcUser:HasBuffID(43010)) and (srcUser:HasBuffID(90001823) or srcUser:HasBuffID(44190)) then
    A = -0.05
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  local equipRingSDshoes = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  local equipRingSD5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  local equipRingSD6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if (equipRingSD.id ~= 0 or equipRingSDshoes.id ~= 0 or equipRingSD5.id ~= 0 or equipRingSD6.id ~= 0) and (srcUser:HasBuffID(90000637) or srcUser:HasBuffID(41820)) and (srcUser:HasBuffID(90000707) or srcUser:HasBuffID(42460) or srcUser:HasBuffLayer(42460, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(90001087) or srcUser:HasBuffID(43010) or srcUser:HasBuffLayer(43010, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(90001823) or srcUser:HasBuffID(44190) or srcUser:HasBuffLayer(44190, EBUFFERLAYER_SHADOW)) then
    A = -0.05
  end
  return A
end

function CommonFun.calcBuff_5901(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if (srcUser:HasBuffID(90000637) or srcUser:HasBuffID(41820)) and (srcUser:HasBuffID(90000707) or srcUser:HasBuffID(42460)) and (srcUser:HasBuffID(90001087) or srcUser:HasBuffID(43010)) and (srcUser:HasBuffID(90001823) or srcUser:HasBuffID(44190)) then
    A = 0.03
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  local equipRingSDshoes = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  local equipRingSD5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  local equipRingSD6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if (equipRingSD.id ~= 0 or equipRingSDshoes.id ~= 0 or equipRingSD5.id ~= 0 or equipRingSD6.id ~= 0) and (srcUser:HasBuffID(90000637) or srcUser:HasBuffID(41820)) and (srcUser:HasBuffID(90000707) or srcUser:HasBuffID(42460) or srcUser:HasBuffLayer(42460, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(90001087) or srcUser:HasBuffID(43010) or srcUser:HasBuffLayer(43010, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(90001823) or srcUser:HasBuffID(44190) or srcUser:HasBuffLayer(44190, EBUFFERLAYER_SHADOW)) then
    A = 0.03
  end
  return A
end

function CommonFun.calcBuff_5902(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if (srcUser:HasBuffID(90000637) or srcUser:HasBuffID(41820)) and (srcUser:HasBuffID(90000707) or srcUser:HasBuffID(42460)) and (srcUser:HasBuffID(90001087) or srcUser:HasBuffID(43010)) and (srcUser:HasBuffID(90001823) or srcUser:HasBuffID(44190)) then
    A = 0.03
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  local equipRingSDshoes = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  local equipRingSD5 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1)
  local equipRingSD6 = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2)
  if (equipRingSD.id ~= 0 or equipRingSDshoes.id ~= 0 or equipRingSD5.id ~= 0 or equipRingSD6.id ~= 0) and (srcUser:HasBuffID(90000637) or srcUser:HasBuffID(41820)) and (srcUser:HasBuffID(90000707) or srcUser:HasBuffID(42460) or srcUser:HasBuffLayer(42460, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(90001087) or srcUser:HasBuffID(43010) or srcUser:HasBuffLayer(43010, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(90001823) or srcUser:HasBuffID(44190) or srcUser:HasBuffLayer(44190, EBUFFERLAYER_SHADOW)) then
    A = 0.03
  end
  return A
end

function CommonFun.calcBuff_5910(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if (srcUser:HasBuffID(42380) or srcUser:HasBuffID(43090)) and srcUser:HasBuffID(90001327) then
    A = 0.1
  end
  return A
end

function CommonFun.calcBuff_5911(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if (srcUser:HasBuffID(42380) or srcUser:HasBuffID(43090)) and srcUser:HasBuffID(90001327) then
    A = 1000
  end
  return A
end

function CommonFun.calcBuff_5920(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if (srcUser:HasBuffID(90001005) or srcUser:HasBuffID(43000) or srcUser:HasBuffLayer(43000, EBUFFERLAYER_SHADOW)) and srcUser:HasBuffID(90000995) then
    A = 2
  end
  return A
end

function CommonFun.calcBuff_5921(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if (srcUser:HasBuffID(90001005) or srcUser:HasBuffID(43000) or srcUser:HasBuffLayer(43000, EBUFFERLAYER_SHADOW)) and srcUser:HasBuffID(90000995) then
    A = 0.1
  end
  return A
end

function CommonFun.calcBuff_5930(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(1638)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local Hp = targetUser:GetProperty("Hp")
  local A = (MaxHp - Hp) * skilllv / 100
  if A <= 0 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5931(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local GemValue = srcUser:GetGemValue(153141)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local Hp = targetUser:GetProperty("Hp")
  local A = (MaxHp - Hp) * GemValue / 100000
  if A <= 0 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_5940(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp = srcUser:GetProperty("Hp")
  local MaxHp2 = targetUser:GetProperty("MaxHp")
  local A = (MaxHp - Hp) / MaxHp * 12000 + MaxHp2 * (MaxHp - Hp) / MaxHp * 0.12
  if A <= 0 then
    A = 0
  end
  return -A
end

function CommonFun.calcBuff_5950(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hasbuff = 0
  local fire = 0
  local Profession = srcUser:GetProfressionID()
  if Profession == 21 or Profession == 22 or Profession == 23 or Profession == 24 or Profession == 25 or Profession == 82 or Profession == 83 or Profession == 84 or Profession == 85 or Profession == 223 or Profession == 224 or Profession == 225 or Profession == 635 or Profession == 675 then
    fire = 1
  end
  if srcUser:HasBuffID(c) then
    Hasbuff = 1
  end
  local A = a + b * Hasbuff * fire
  return A
end

function CommonFun.calcBuff_5960(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Sp = srcUser:GetProperty("Sp")
  if b == 1 then
    local Opening = srcUser:GetSkillOptByOption(17)
    if Opening == 0 then
      return -Sp * a
    end
    return 0
  end
  local A = -Sp * a
  return A
end

function CommonFun.calcBuff_5970(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local FireAtk = srcUser:GetProperty("FireAtk")
  local WaterAtk = srcUser:GetProperty("WaterAtk")
  local WindAtk = srcUser:GetProperty("WindAtk")
  local EarthAtk = srcUser:GetProperty("EarthAtk")
  local GhostAtk = srcUser:GetProperty("GhostAtk")
  local Max = 0
  if FireAtk >= WaterAtk then
    Max = FireAtk
  else
    Max = WaterAtk
  end
  if WindAtk <= Max then
  else
    Max = WindAtk
  end
  if EarthAtk <= Max then
  else
    Max = EarthAtk
  end
  if GhostAtk <= Max then
  else
    Max = GhostAtk
  end
  local skilllv = srcUser:GetLernedSkillLevel(3104)
  local skilllv1 = srcUser:GetLernedSkillLevel(1951)
  local ratio = (skilllv + skilllv1) * 0.1
  local A = ((Max - FireAtk) * a + (Max - WaterAtk) * b + (Max - WindAtk) * c + (Max - EarthAtk) * d) * ratio
  if a == 0 and b == 0 and c == 0 and d == 0 then
    A = (Max - GhostAtk) * ratio
  end
  return A
end

function CommonFun.calcBuff_5980(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local jiangshi = srcUser:GetBuffLayer(166420)
  local A = MaxHp * (0.05 + jiangshi * 0.01)
  return A
end

function CommonFun.calcBuff_5990(srcUser, targetUser, a, b, c, d, lv)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local IgnoreMDef = srcUser:GetProperty("IgnoreMDef")
  if 1 <= IgnoreMDef then
    IgnoreMDef = 1
  end
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = 5
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local ElementRate = CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement)
  if (srcUser:HasBuffID(69650) or srcUser:HasBuffID(71090)) and 1 < ElementRate then
    ElementRate = ElementRate * 1.1
  end
  if targetUser:HasBuffID(49130) then
    ElementRate = math.min(ElementRate, 1)
  end
  if srcUser:HasBuffID(49210) then
    ElementRate = ElementRate + 0.15
  end
  if nil == CommonFun.NatureProps[srcAtkElement] or nil == CommonFun.NatureProps[targetDefElement] or nil == targetDefElement then
    return 0
  end
  local NeutralAtk = srcUser:GetProperty("NeutralAtk")
  local GemValue = srcUser:GetGemValue(82161)
  local ele = ElementRate * (1 + NeutralAtk + GemValue / 100000)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local NpcParam = CommonFun.NpcParam(srcUser, targetUser, params, damageParam, logger)
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * NpcParam
  local damChangePer = lv + 5
  local skilllv_zd = srcUser:GetLernedSkillLevel(3227)
  local MDamSpike = srcUser:GetProperty("MDamSpike")
  local ResultDamInc = srcUser:GetProperty("ResultDamInc")
  local ResultDamRes = targetUser:GetProperty("ResultDamRes")
  local Result = 1 + ResultDamInc - ResultDamRes
  Result = math.max(Result, 0.1)
  if srcUser:HasBuffID(22000130) and a == 0.5 then
    a = 1
  end
  local A = -((MAtkFinal * (1 + MDamSpike) + MRefine) * damChangePer * (1 - RefineMDamReduc) * (1 + MDamIncrease)) * ele * a * (1 + skilllv_zd * 0.05) * Result
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_6000(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local skilllv_1 = srcUser:GetLernedSkillLevel(3113)
  local skilllv_2 = srcUser:GetLernedSkillLevel(3128)
  local skilllv_3 = srcUser:GetLernedSkillLevel(1954)
  local skilllv_4 = srcUser:GetLernedSkillLevel(1956)
  local GemValue = srcUser:GetGemValue(21152)
  local GemDam = 1 + GemValue / 100000
  local A = MAtk * (1 + MAtkPer) * (skilllv_1 + skilllv_3) * (1 + (skilllv_2 + skilllv_4) * 0.1) * GemDam
  return A
end

function CommonFun.calcBuff_6010(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = srcUser:GetProperty("Hp")
  local A = -(Hp - 1)
  return A
end

function CommonFun.calcBuff_6020(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp = srcUser:GetProperty("Hp")
  local skilllv_1 = srcUser:GetLernedSkillLevel(3302)
  local A = (Hp - MaxHp * 0.2) * (1 + skilllv_1 * 0.2)
  if A < 0 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_6030(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp = srcUser:GetProperty("Hp")
  local A = -(Hp - MaxHp * a)
  return A
end

function CommonFun.calcBuff_6040(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp = srcUser:GetProperty("Hp")
  local skilllv_1 = srcUser:GetLernedSkillLevel(3310)
  local A = (MaxHp - Hp) * damage * (0.004 * skilllv_1)
  return A
end

function CommonFun.calcBuff_6050(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local MaxSp = targetUser:GetProperty("MaxSp")
  local skilllv_1 = srcUser:GetLernedSkillLevel(3313)
  local skilllv_2 = srcUser:GetLernedSkillLevel(3320)
  local A = MaxHp * skilllv_1 * 0.05 * a + MaxSp * skilllv_2 * 0.05 * b
  return A
end

function CommonFun.calcBuff_6060(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = lv * damage * a
  return A
end

function CommonFun.calcBuff_6070(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = (lv + 3) * 1000
  return A
end

function CommonFun.calcBuff_6080(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local RefineLv9 = srcUser:GetEquipedRefineLv(9)
  local A = (Atk * (1 + AtkPer) + MAtk * (1 + MAtkPer)) * (math.min(RefineLv9 * 0.05, 0.3) + 0.1)
  return A
end

function CommonFun.calcBuff_6090(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:GetNpcID() == 0 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_6091(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local Num = targetUser:GetBuffLayer(a)
  if Num == b then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_6092(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  local Num = srcUser:GetBuffLayer(a)
  if b <= Num then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_6093(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local Num = srcUser:GetBuffLayer(116080)
  local Value = srcUser:GetGemValue(31132)
  local limit = 10 + Value / 1000
  if Num >= limit then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_6100(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxSp = srcUser:GetProperty("MaxSp")
  local Sp = srcUser:GetProperty("Sp")
  local skilllv_1 = srcUser:GetLernedSkillLevel(3428)
  local skilllv_2 = srcUser:GetLernedSkillLevel(3528)
  local A = (MaxSp - Sp) * (0.01 * (skilllv_1 + skilllv_2))
  return A
end

function CommonFun.calcBuff_6110(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num1 = srcUser:GetBuffLayer(165603)
  local A = 0
  if Num1 == 10 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_6120(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(129060) and srcUser:HasBuffID(129092) == false then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_6130(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(3605)
  local Hp = targetUser:GetProperty("Hp")
  local A = -(Hp * skilllv_1 * 0.02)
  if targetUser:HasBuffID(160000) then
    return 0
  end
  if targetUser.boss or targetUser.mini then
    local B = -skilllv_1 * 0.02
    A = CommonFun.calcBuff_6(srcUser, targetUser, B, 0, c, d, lv)
  end
  return A
end

function CommonFun.calcBuff_6140(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(3601)
  local A = skilllv_1 * 1 + 5
  if srcUser:HasBuffID(129060) then
    A = A * 2
  end
  return A
end

function CommonFun.calcBuff_6150(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(3602)
  local Int = srcUser:GetProperty("Int")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local GemValue = srcUser:GetGemValue(51142)
  local A = -(Int * (6 * skilllv_1 + GemValue / 1000) + MAtk * (1 + MAtkPer))
  if srcUser:HasBuffID(129060) then
    A = A * 2
  end
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_6160(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local Hp = targetUser:GetProperty("Hp")
  local A = -(Hp - MaxHp / 2)
  return A
end

function CommonFun.calcBuff_6170(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(c)
  local m = 0
  if d < skilllv_1 then
    m = 1
  end
  local A = a + b * m
  return A
end

function CommonFun.calcBuff_6180(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local skilllv_1 = srcUser:GetLernedSkillLevel(3711)
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits2 = CommonFun.getBits(StateEffect)
  if bits2[CommonFun.StateEffect.Burn] == 1 and 0 < skilllv_1 then
    A = skilllv_1 * 2 + 6
  end
  return A
end

function CommonFun.calcBuff_6190(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local Refine = srcUser:GetProperty("Refine")
  local MRefine = srcUser:GetProperty("MRefine")
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local skilllv_zw = srcUser:GetLernedSkillLevel(3704)
  local skilllv_1 = srcUser:GetLernedSkillLevel(3702)
  local A = -((Atk * (1 + AtkPer) + MAtk * (1 + MAtkPer)) * DefReduc * (1 - DamReduc2) + Refine + MRefine) * (skilllv_1 * 0.5 + 2.5) * (1 - RefineDamReduc) * (1 + DamIncrease) * (1 + skilllv_zw * 0.02)
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_6200(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(3801)
  local skilllv2 = srcUser:GetLernedSkillLevel(4407)
  local Str = srcUser:GetProperty("Str")
  local A = math.floor((skilllv + skilllv2) * 0.1 * Str)
  return A
end

function CommonFun.calcBuff_6210(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(3802)
  local skilllv_cc = srcUser:GetLernedSkillLevel(4407)
  local skilllv_2 = srcUser:GetLernedSkillLevel(3820)
  local Vit = srcUser:GetProperty("Vit")
  local MaxHp = srcUser:GetProperty("MaxHp")
  local mapid, maptype = srcUser:GetMapInfo()
  local pvpRatio = 1
  if maptype == 2 or maptype == 4 then
    pvpRatio = 0.25
  end
  local A = math.floor((skilllv + skilllv_cc) * 0.003 * MaxHp * pvpRatio + Vit * ((skilllv + skilllv_cc) * 6 + skilllv_2 * 8))
  local Profession = targetUser:GetProfressionID()
  if Profession == 72 or Profession == 73 or Profession == 74 or Profession == 75 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_6211(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  local Profession = targetUser:GetProfressionID()
  if Profession == 72 or Profession == 73 or Profession == 74 or Profession == 75 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_6220(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = srcUser:GetProperty("Hp")
  if srcUser:HasBuffID(20720160) then
    Hp = srcUser:GetProperty("MaxHp")
  end
  local mapid, maptype = srcUser:GetMapInfo()
  if maptype == 2 or maptype == 4 then
    Hp = Hp * 0.25
  end
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local skilllv = srcUser:GetLernedSkillLevel(3807)
  local GemValue = srcUser:GetGemValue(72142)
  local A = -(Hp * (skilllv * 0.1 + 0.1)) * DefReduc * (1 - DamReduc2) * (1 - RefineDamReduc) * (1 + DamIncrease) * (1 + GemValue / 100000)
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_6230(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(3811)
  local Num = srcUser:GetBuffLayer(130090)
  local A = skilllv * 0.02 + Num * 0.04
  return A
end

function CommonFun.calcBuff_6240(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(3907)
  local Num = srcUser:GetBuffLayer(130503)
  local A = Num * skilllv * a
  return A
end

function CommonFun.calcBuff_6250(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(3910)
  local A = 0
  if targetUser:HasBuffID(116013) then
    A = 15 + skilllv * 5
  end
  return A
end

function CommonFun.calcBuff_6260(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local MaxHp = targetUser:GetProperty("MaxHp")
  local Hp = targetUser:GetProperty("Hp")
  local Num = srcUser:GetBuffLayer(130503)
  local skilllv = srcUser:GetLernedSkillLevel(3927)
  local Gem = 0
  if srcUser:HasBuffID(20310160) then
    Gem = 0.05
  end
  if Hp / MaxHp <= 0.01 * Num + skilllv * 0.02 + Gem then
    A = 100
  end
  if targetUser:HasBuffID(160000) then
    A = 0
  end
  if targetUser.boss == true or targetUser.mini == true then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_6270(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(3902)
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local A = Atk * (1 + AtkPer) * skilllv * 0.6
  return A
end

function CommonFun.calcBuff_6280(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(3905)
  local Vit = srcUser:GetProperty("Vit")
  local skilllv2 = srcUser:GetLernedSkillLevel(3923)
  local A = Vit * skilllv * (1 + skilllv2 * 0.05)
  return A
end

function CommonFun.calcBuff_6290(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local RefineLv9 = srcUser:GetEquipedRefineLv(9)
  local A = (Atk * (1 + AtkPer) + MAtk * (1 + MAtkPer)) * a + b
  return A
end

function CommonFun.calcBuff_6300(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(4009)
  local Sp = srcUser:GetProperty("Sp")
  local Int = srcUser:GetProperty("Int")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local ResultDamInc = srcUser:GetProperty("ResultDamInc")
  local ResultDamRes = targetUser:GetProperty("ResultDamRes")
  local NpcParam = CommonFun.NpcParam(srcUser, targetUser, params, damageParam, logger)
  local Result = 1 + ResultDamInc - ResultDamRes
  Result = math.max(Result, 0.1)
  local A = -skilllv_1 / 100 * Sp * Int * (1 - RefineDamReduc) * Result * NpcParam
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_6310(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Rate = 10
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  local effect = 0
  if 10 <= RefineLv then
    effect = math.min(10, (Luk + Dex) / 20)
  end
  if 5 <= RefineLv and RefineLv < 10 then
  elseif 10 <= RefineLv then
    Rate = Rate + 5 + effect
  end
  local pos = 0
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    pos = 7
    if 5 <= RefineLv and CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
      pos = 107
    end
  end
  return pos
end

function CommonFun.calcBuff_6320(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Rate = 10
  local Weapon = srcUser:GetEquipedID(7)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  local effect = 0
  if 10 <= RefineLv then
    effect = math.min(10, (Luk + Dex) / 20)
  end
  if 5 <= RefineLv and RefineLv < 10 then
  elseif 10 <= RefineLv then
    Rate = Rate + 5 + effect
  end
  local pos = 0
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    pos = 2
    if 5 <= RefineLv and CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
      pos = 208
    end
  end
  return pos
end

function CommonFun.calcBuff_6330(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local aa = 0
  local bb = 0
  local cc = 0
  local dd = 0
  if (Ring1 == 44077 or Ring1 == 144077) and 8 <= RefineLv1 then
    aa = 0.1
  end
  if (Ring2 == 44077 or Ring2 == 144077) and 8 <= RefineLv2 then
    bb = 0.1
  end
  if (Ring1 == 44077 or Ring1 == 144077) and 12 <= RefineLv1 then
    cc = 0.1
  end
  if (Ring2 == 44077 or Ring2 == 144077) and 12 <= RefineLv2 then
    dd = 0.1
  end
  local A = -0.3 - math.min(0.1, cc + dd) - math.min(0.1, aa + bb)
  return A
end

function CommonFun.calcBuff_6340(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(4106)
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp2 = targetUser:GetProperty("Hp")
  local A = -(MaxHp + Hp2) * 0.01 * skilllv
  if targetUser:HasBuffID(160000) then
    A = 0
  end
  if targetUser.boss or targetUser.mini then
    local B = -0.02 * skilllv
    A = CommonFun.calcBuff_6(srcUser, targetUser, B, 0, c, d, lv)
  end
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_6350(srcUser, targetUser, a, b, c, d, lv, damage)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local MRefine = srcUser:GetProperty("MRefine")
  local NpcParam = CommonFun.NpcParam(srcUser, targetUser, params, damageParam, logger)
  local BaseMAtk = Int + math.floor(Int * Int / 100)
  local MAtkFinal = ((MAtk - BaseMAtk) * (1 + MAtkPer) + BaseMAtk) * NpcParam
  local skilllv = srcUser:GetLernedSkillLevel(4110)
  local Num = damage
  local srcAtkElement = 5
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local ElementRate = CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement)
  if (srcUser:HasBuffID(69650) or srcUser:HasBuffID(71090)) and 1 < ElementRate then
    ElementRate = ElementRate * 1.1
  end
  if targetUser:HasBuffID(49130) then
    ElementRate = math.min(ElementRate, 1)
  end
  if srcUser:HasBuffID(49210) then
    ElementRate = ElementRate + 0.15
  end
  if nil == CommonFun.NatureProps[srcAtkElement] or nil == CommonFun.NatureProps[targetDefElement] or nil == targetDefElement then
    return 0
  end
  local NeutralAtk = srcUser:GetProperty("NeutralAtk")
  local ele = ElementRate * (1 + NeutralAtk)
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local MDamSpike = srcUser:GetProperty("MDamSpike")
  local ResultDamInc = srcUser:GetProperty("ResultDamInc")
  local ResultDamRes = targetUser:GetProperty("ResultDamRes")
  local Result = 1 + ResultDamInc - ResultDamRes
  Result = math.max(Result, 0.1)
  local A = -(MAtkFinal * (1 + MDamSpike) + MRefine) * (skilllv * 0.3 * Num) * (1 - RefineMDamReduc) * (1 + MDamIncrease) * Result * ele
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_6360(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if (srcUser:HasBuffID(90001733) or srcUser:HasBuffID(41750)) and (srcUser:HasBuffID(90001743) or srcUser:HasBuffID(43270)) and srcUser:HasBuffID(90000757) then
    A = 0.05
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRingSD.id ~= 0 and (srcUser:HasBuffID(90001733) or srcUser:HasBuffID(41750)) and srcUser:HasBuffLayer(43270, EBUFFERLAYER_SHADOW) and srcUser:HasBuffID(90000757) then
    A = 0.05
  end
  return A
end

function CommonFun.calcBuff_6361(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if (srcUser:HasBuffID(90001267) or srcUser:HasBuffID(43300)) and (srcUser:HasBuffID(41770) or srcUser:HasBuffID(90001253)) then
    A = -0.1
  end
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHIELD)
  if equipRingSD.id ~= 0 and srcUser:HasBuffLayer(43300, EBUFFERLAYER_SHADOW) and (srcUser:HasBuffID(41770) or srcUser:HasBuffID(90001253)) then
    A = -0.1
  end
  return A
end

function CommonFun.calcBuff_6370(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Flee = srcUser:GetProperty("Flee")
  local Weapon1 = srcUser:GetEquipedID(1)
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  local Profession = srcUser:GetProfressionID()
  local A = 0
  if Weapon1 == 42595 or Weapon1 == 142595 then
    if 5 <= RefineLv and RefineLv < 10 then
      A = math.floor(Flee / 10)
    elseif 10 <= RefineLv and RefineLv < 15 then
      A = math.floor(Flee / 10 + Flee / 5)
    elseif 15 <= RefineLv then
      A = math.floor(Flee / 10 + Flee / 5 + Flee / 5)
    end
  end
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_6380(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local Refine = srcUser:GetProperty("Refine")
  local MRefine = srcUser:GetProperty("MRefine")
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local skilllv = srcUser:GetLernedSkillLevel(a)
  local A = -(Atk * (1 + AtkPer) * DefReduc * (1 - DamReduc2)) * (skilllv * b + c) * (1 - RefineDamReduc) * (1 + DamIncrease)
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_6390(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(4208)
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local GemNew = srcUser:GetGemValue(91151)
  local GemDamNew = 1 + GemNew / 100000
  local A = (Dex + Luk) * skilllv * 60 * GemDamNew
  return A
end

function CommonFun.calcBuff_6397(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = srcUser:GetProperty("Hp")
  local MaxHp = srcUser:GetProperty("MaxHp")
  local A = (MaxHp - Hp) * a
  return A
end

function CommonFun.calcBuff_6398(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = srcUser:GetProperty("Hp")
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Rune = srcUser:GetRunePoint(a)
  local A = (MaxHp - Hp) * Rune * b
  return A
end

function CommonFun.calcBuff_6399(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = targetUser:GetProperty("Hp")
  local skilllv = srcUser:GetLernedSkillLevel(a)
  local A = Hp * skilllv * b
  local B = skilllv * b
  if targetUser.boss or targetUser.mini then
    A = CommonFun.calcBuff_6(srcUser, targetUser, B, 0, c, d, lv)
  end
  if targetUser:HasBuffID(160000) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_6400(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local skilllv = srcUser:GetLernedSkillLevel(a)
  local A = MaxHp * skilllv * b
  return A
end

function CommonFun.calcBuff_6401(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local skilllv = srcUser:GetLernedSkillLevel(a)
  local skilllv_boki = srcUser:GetBoKiSkillLv(a)
  local A = MaxHp * ((skilllv + skilllv_boki) * b + c)
  return A
end

function CommonFun.calcBuff_6402(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local MaxSp = targetUser:GetProperty("MaxSp")
  local skilllv = srcUser:GetLernedSkillLevel(a)
  local A = MaxHp * skilllv * b + MaxSp * skilllv * c
  return A
end

function CommonFun.calcBuff_6410(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local jingxue = srcUser:GetBuffLayer(173531)
  local A = MaxHp * jingxue * 2.0E-4
  return A
end

function CommonFun.calcBuff_6420(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local ganran = targetUser:GetBuffLayer(173510)
  local A = MaxHp * ganran * 0.1 + 36000 * ganran
  return -A
end

function CommonFun.calcBuff_6421(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local ganran = targetUser:GetBuffLayer(173510)
  if 5 <= ganran then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_6430(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local tuipi = targetUser:GetBuffLayer(173620)
  A = tuipi * 0.6
  return A
end

function CommonFun.calcBuff_6440(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(3905)
  local skilllv2 = srcUser:GetLernedSkillLevel(3912)
  local A = 0
  if 1 <= skilllv then
    A = skilllv2 * 10
  end
  return A
end

function CommonFun.calcBuff_6450(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipExtractionRefineLv(1)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_6451(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipExtractionRefineLv(1)
  local A = d
  if 5 <= RefineLv and RefineLv < 10 then
    A = d + a
  elseif 10 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_6455(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipExtractionRefineLv(2)
  local A = c
  if b < RefineLv then
    A = (RefineLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_6456(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipExtractionRefineLv(2)
  local A = d
  if 5 <= RefineLv and RefineLv < 10 then
    A = d + a
  elseif 10 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_6460(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Rate = 10
  local pos = 0
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    pos = 7
  end
  return pos
end

function CommonFun.calcBuff_6461(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Rate = 10
  local pos = 0
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    pos = 2
  end
  return pos
end

function CommonFun.calcBuff_6470(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(a)
  local Sp = targetUser:GetProperty("Sp")
  local A = -skilllv_1 * b / 100 * Sp
  return A
end

function CommonFun.calcBuff_6480(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = lv * a + b
  if targetUser:HasBuffID(160000) or targetUser.boss == true or targetUser.mini == true or targetUser:GetNpcID() == 280500 then
    A = 0
  end
  if targetUser:GetNpcID() >= 280300 and targetUser:GetNpcID() <= 280320 or targetUser:GetNpcID() >= 280343 and targetUser:GetNpcID() <= 280362 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_6490(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(a)
  local Value = srcUser:GetGemValue(c)
  local A = skilllv_1 * b + Value / 1000 + d
  return A
end

function CommonFun.calcBuff_6500(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local skilllv_1 = srcUser:GetLernedSkillLevel(a)
  if srcUser:HasBuffID(c) then
    A = skilllv_1 * b + d
  end
  return A
end

function CommonFun.calcBuff_6501(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local Gem = srcUser:GetGemValue(c)
  if srcUser:HasBuffID(b) then
    A = Gem / a + d
  end
  return A
end

function CommonFun.calcBuff_6510(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local StrengthLv = srcUser:GetEquipedStrengthLv(c)
  local A = d
  if b <= StrengthLv then
    A = (StrengthLv - b) * a + A
  end
  return A
end

function CommonFun.calcBuff_6511(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local StrengthLv = srcUser:GetEquipedStrengthLv(c)
  local A = d
  if b <= StrengthLv then
    A = math.floor((StrengthLv - b) / 10) * a + A
  end
  return A
end

function CommonFun.calcBuff_6520(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local Gem = srcUser:GetGemValue(b)
  local A = MaxHp * (a + Gem / 100000)
  return A
end

function CommonFun.calcBuff_6530(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxSp = srcUser:GetProperty("MaxSp")
  local Gem = srcUser:GetGemValue(b)
  local A = MaxSp * (a + Gem / 100000)
  return A
end

function CommonFun.calcBuff_6540(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(3208)
  local A = skilllv_1 * 2 + 5
  if srcUser:HasBuffID(126122) then
    local Gem = srcUser:GetGemValue(82152)
    A = A + Gem / 1000
  end
  if srcUser:HasBuffID(90004924) then
    A = A + 5
  end
  return A
end

function CommonFun.calcBuff_6550(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(3628)
  local A = 10 + skilllv_1
  return A
end

function CommonFun.calcBuff_6551(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ratio = 1
  local mapid, maptype = srcUser:GetMapInfo()
  if maptype == 2 or maptype == 4 then
    Ratio = 0.25
  end
  local A = damage * lv * 0.02 * Ratio
  return A
end

function CommonFun.calcBuff_6560(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(4023)
  local Gem = srcUser:GetGemValue(41152)
  local rate = skilllv_1 * 2 + Gem / 1000
  local Hasbuff = 0
  if srcUser:HasBuffID(20410140) then
    Hasbuff = 1
  end
  local A = rate * Hasbuff * a + rate * b
  return A
end

function CommonFun.calcBuff_6570(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(12)
  if 6 <= RefineLv and RefineLv < 10 then
    A = d + a
  elseif 10 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_6580(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  local A = a
  if c <= Str then
    A = a + b
  end
  return A
end

function CommonFun.calcBuff_6590(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local Hp = targetUser:GetProperty("Hp")
  local A = -(Atk * (1 + AtkPer) + MAtk * (1 + MAtkPer) + Hp * 0.03) * a
  return A
end

function CommonFun.calcBuff_6600(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = targetUser:GetBuffLayer(100035300)
  local skilllv_1 = srcUser:GetLernedSkillLevel(106180)
  local A = -Num * skilllv_1 * 300
  return A
end

function CommonFun.calcBuff_6610(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Dex = srcUser:GetProperty("Dex")
  local A = 0
  if 90 <= Dex then
    A = 0.05
  end
  return A
end

function CommonFun.calcBuff_6620(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if a <= lv then
    A = b * (lv - a) + c
  end
  return A
end

function CommonFun.calcBuff_6630(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = srcUser:GetProperty("Hp")
  local MaxHp = srcUser:GetProperty("MaxHp")
  local A = 1 - Hp / MaxHp
  if A <= 0 then
    return 0
  end
  return A
end

function CommonFun.calcBuff_6631(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RogueLayer = srcUser:GetRogueLayer()
  local A = 0
  A = a + (b + c * (lv - 1)) * RogueLayer + d * (lv - 1)
  return A
end

function CommonFun.calcBuff_6632(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local MaxSp = srcUser:GetProperty("MaxSp")
  local A = MaxHp * lv * a
  return A
end

function CommonFun.calcBuff_6633(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local MaxSp = srcUser:GetProperty("MaxSp")
  local A = MaxSp * lv * a
  return A
end

function CommonFun.calcBuff_6634(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = srcUser:GetProperty("Hp")
  local A = -0.02 * Hp
  return A
end

function CommonFun.calcBuff_6635(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  if damage <= 1 then
    return 1
  end
  return damage * a * lv
end

function CommonFun.calcBuff_6636(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RogueLayer = srcUser:GetRoguePassMonRoom()
  local A = 0
  A = a + (b + c * (lv - 1)) * RogueLayer + d * (lv - 1)
  return A
end

function CommonFun.calcBuff_6637(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RogueLayer = srcUser:GetRoguePassBossRoom()
  local A = 0
  A = a + (b + c * (lv - 1)) * RogueLayer + d * (lv - 1)
  return A
end

function CommonFun.calcBuff_6640(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Atk = srcUser:GetProperty("Atk")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local Refine = srcUser:GetProperty("Refine")
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local skilllv = srcUser:GetLernedSkillLevel(2040)
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits2 = CommonFun.getBits(StateEffect)
  local StateRatio = 1
  if bits2[CommonFun.StateEffect.Blood] == 1 and 10 < skilllv then
    StateRatio = 1 + (skilllv - 10) * 0.2
  end
  local A = -(Atk * (1 + AtkPer) * DefReduc * (1 - DamReduc2) + Refine) * math.min(skilllv, 10) * (1 - RefineDamReduc) * (1 + DamIncrease) * StateRatio
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_6650(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local GainNum = targetUser:GetSkillGainBuffNum()
  local skilllv = srcUser:GetLernedSkillLevel(2072)
  local A = -5 * (Luk + Dex) * lv * GainNum * (1 + skilllv * 0.05) * (1 - RefineDamReduc)
  return A
end

function CommonFun.calcBuff_6660(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local Hp = targetUser:GetProperty("Hp")
  local skilllv = srcUser:GetLernedSkillLevel(108240)
  local skilllv1 = srcUser:GetLernedSkillLevel(106310)
  local A = (MaxHp - Hp) * skilllv * 0.01 * (1 + skilllv1 * 0.05)
  if A <= 1 then
    return 1
  end
  return A
end

function CommonFun.calcBuff_6670(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if (srcUser:HasBuffID(90002343) or srcUser:HasBuffID(42580)) and (srcUser:HasBuffID(90002353) or srcUser:HasBuffID(44250)) and srcUser:HasBuffID(90002363) then
    A = 0.1
  end
  local equipRingSDarmour = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  if (equipRingSDarmour.id ~= 0 or equipRingSD.id ~= 0) and (srcUser:HasBuffID(90002343) or srcUser:HasBuffID(42580) or srcUser:HasBuffLayer(42580, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(90002353) or srcUser:HasBuffID(44250) or srcUser:HasBuffLayer(44250, EBUFFERLAYER_SHADOW)) and srcUser:HasBuffID(90002363) then
    A = 0.1
  end
  return A
end

function CommonFun.calcBuff_6671(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if (srcUser:HasBuffID(90002343) or srcUser:HasBuffID(42580)) and (srcUser:HasBuffID(90002353) or srcUser:HasBuffID(44250)) and srcUser:HasBuffID(90002363) then
    A = 5
  end
  local equipRingSDarmour = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  if (equipRingSDarmour.id ~= 0 or equipRingSD.id ~= 0) and (srcUser:HasBuffID(90002343) or srcUser:HasBuffID(42580) or srcUser:HasBuffLayer(42580, EBUFFERLAYER_SHADOW)) and (srcUser:HasBuffID(90002353) or srcUser:HasBuffID(44250) or srcUser:HasBuffLayer(44250, EBUFFERLAYER_SHADOW)) and srcUser:HasBuffID(90002363) then
    A = 5
  end
  return A
end

function CommonFun.calcBuff_6680(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if (srcUser:HasBuffID(90000919) or srcUser:HasBuffID(41760)) and (srcUser:HasBuffID(90000717) or srcUser:HasBuffID(42470)) and (srcUser:HasBuffID(90001723) or srcUser:HasBuffID(44200)) and (srcUser:HasBuffID(90000737) or srcUser:HasBuffID(44100)) then
    A = a
  end
  local equipRingSDarmour = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ARMOUR)
  local equipRingSD = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_ROBE)
  local equipRingSDshoes = srcUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, CommonFun.EquipPos.EEQUIPPOS_SHOES)
  if (equipRingSDarmour.id ~= 0 or equipRingSD.id ~= 0 or equipRingSDshoes.id ~= 0) and (srcUser:HasBuffID(90000919) or srcUser:HasBuffID(41760)) and (srcUser:HasBuffLayer(42470, EBUFFERLAYER_SHADOW) or srcUser:HasBuffID(90000717) or srcUser:HasBuffID(42470)) and (srcUser:HasBuffLayer(44200, EBUFFERLAYER_SHADOW) or srcUser:HasBuffID(90001723) or srcUser:HasBuffID(44200)) and (srcUser:HasBuffID(90000737) or srcUser:HasBuffID(44100) or srcUser:HasBuffLayer(44100, EBUFFERLAYER_SHADOW)) then
    A = a
  end
  return A
end

function CommonFun.calcBuff_6700(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxSp = targetUser:GetProperty("MaxSp")
  local Rune = srcUser:GetRunePoint(163041)
  local A = -MaxSp * Rune / 100
  return A
end

function CommonFun.calcBuff_6710(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 10
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  if 15 <= RefineLv then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_6711(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  if 15 <= RefineLv then
    A = 10
  end
  return A
end

function CommonFun.calcBuff_6720(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = 0
  local Sp = srcUser:GetProperty("Sp")
  local MaxSp = srcUser:GetProperty("MaxSp")
  if 10 <= RefineLv then
    A = math.floor((MaxSp - Sp) / MaxSp * 10) / 100
  end
  return A
end

function CommonFun.calcBuff_6730(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44084 or Ring1 == 144084) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44084 or Ring1 == 144084) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.03
  elseif (Ring1 == 44084 or Ring1 == 144084) and 15 <= RefineLv1 then
    a = 0.03
  else
    a = 0
  end
  if (Ring2 == 44084 or Ring2 == 144084) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44084 or Ring2 == 144084) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.03
  elseif (Ring2 == 44084 or Ring2 == 144084) and 15 <= RefineLv2 then
    b = 0.03
  else
    b = 0
  end
  if (Ring1 == 44084 or Ring1 == 144084) and (Ring2 == 44084 or Ring2 == 144084) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_6740(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44085 or Ring1 == 144085) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 40
  elseif (Ring1 == 44085 or Ring1 == 144085) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 40
  elseif (Ring1 == 44085 or Ring1 == 144085) and 15 <= RefineLv1 then
    a = 40
  else
    a = 0
  end
  if (Ring2 == 44085 or Ring2 == 144085) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 40
  elseif (Ring2 == 44085 or Ring2 == 144085) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 40
  elseif (Ring2 == 44085 or Ring2 == 144085) and 15 <= RefineLv2 then
    b = 40
  else
    b = 0
  end
  if (Ring1 == 44085 or Ring1 == 144085) and (Ring2 == 44085 or Ring2 == 144085) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_6741(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44085 or Ring1 == 144085) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44085 or Ring1 == 144085) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.03
  elseif (Ring1 == 44085 or Ring1 == 144085) and 15 <= RefineLv1 then
    a = 0.06
  else
    a = 0
  end
  if (Ring2 == 44085 or Ring2 == 144085) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44085 or Ring2 == 144085) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.03
  elseif (Ring2 == 44085 or Ring2 == 144085) and 15 <= RefineLv2 then
    b = 0.06
  else
    b = 0
  end
  if (Ring1 == 44085 or Ring1 == 144085) and (Ring2 == 44085 or Ring2 == 144085) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_6742(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44084 or Ring1 == 144084) and 8 <= RefineLv1 and 8 <= order1 then
    a = 40
  end
  if (Ring2 == 44084 or Ring2 == 144084) and 8 <= RefineLv2 and 8 <= order2 then
    b = 40
  end
  if (Ring1 == 44084 or Ring1 == 144084) and (Ring2 == 44084 or Ring2 == 144084) and 8 <= order1 and 8 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_6800(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local MAtk = srcUser:GetProperty("MAtk")
  local skilllv = srcUser:GetLernedSkillLevel(1914)
  if 1 <= skilllv then
    A = math.floor(MAtk / 100) * 2.0E-4 * skilllv
  end
  return A
end

function CommonFun.calcBuff_6801(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp = srcUser:GetProperty("Hp")
  local skilllv = srcUser:GetLernedSkillLevel(1949)
  if 1 <= skilllv then
    A = (1 - Hp / MaxHp) / (11 - skilllv)
  end
  return A
end

function CommonFun.calcBuff_6802(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local MAtk = srcUser:GetProperty("MAtk")
  local Num1 = srcUser:GetRunePoint(223018)
  if 1 <= Num1 then
    A = math.floor(MAtk / 100) * 2.0E-4 * Num1
  end
  return A
end

function CommonFun.calcBuff_6810(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(2028)
  local Sp = srcUser:GetProperty("Sp")
  local A = -(skilllv_1 - 10) / 200 * Sp
  return A
end

function CommonFun.calcBuff_6820(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local BeHealEncPer = srcUser:GetProperty("BeHealEncPer")
  local A = (MaxHp * a + b) * (1 + BeHealEncPer)
  if A < 0 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_6830(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxSp = srcUser:GetProperty("MaxSp")
  local A = MaxSp / 2
  if srcUser:HasBuffID(165750) then
    A = MaxSp / 20
  end
  return A
end

function CommonFun.calcBuff_6840(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(4524)
  local A = a + b * skilllv_1
  if srcUser:HasBuffID(154284) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_6850(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local Num = srcUser:GetBuffLayer(a)
  if b <= Num then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_6851(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local Num = srcUser:GetBuffLayer(a)
  local skilllv = srcUser:GetLernedSkillLevel(b)
  A = Num * skilllv * c
  return A
end

function CommonFun.calcBuff_6852(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = targetUser:GetBuffLayer(a)
  local A = Num * b + c
  return A
end

function CommonFun.calcBuff_6860(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  local Int = srcUser:GetProperty("Int")
  local Dex = srcUser:GetProperty("Dex")
  local Agi = srcUser:GetProperty("Agi")
  local Vit = srcUser:GetProperty("Vit")
  local Luk = srcUser:GetProperty("Luk")
  local A = a
  local Num = 0
  if 159 <= Str then
    Num = Num + 1
  end
  if 159 <= Int then
    Num = Num + 1
  end
  if 159 <= Dex then
    Num = Num + 1
  end
  if 159 <= Agi then
    Num = Num + 1
  end
  if 159 <= Vit then
    Num = Num + 1
  end
  if 159 <= Luk then
    Num = Num + 1
  end
  if 3 <= Num then
    A = A + b
  end
  return A
end

function CommonFun.calcBuff_6870(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Skilllv = srcUser:GetBoKiSkillLv(a)
  local A = c
  if 0 < Skilllv then
    A = Skilllv * b + c
  end
  return A
end

function CommonFun.calcBuff_6871(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(3113)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1954)
  local Hasbuff = 0
  local A = 0
  if srcUser:HasBuffID(c) then
    Hasbuff = 1
  end
  if 1 <= skilllv_1 + skilllv_2 then
    A = a + b * Hasbuff
  else
    return 0
  end
  return A
end

function CommonFun.calcBuff_6872(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(3129)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1957)
  local A = 2 + 2 * (skilllv_1 + skilllv_2)
  return A
end

function CommonFun.calcBuff_6873(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = a * lv + b
  local mapid, maptype = srcUser:GetMapInfo()
  if maptype == 3 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_6874(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local skilllv = srcUser:GetLernedSkillLevel(c)
  if 1 <= skilllv then
    A = a * skilllv + b
  end
  return A
end

function CommonFun.calcBuff_6875(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:InMainCity() then
    A = a
  end
  return A
end

function CommonFun.calcBuff_6876(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(d)
  local Value = srcUser:GetGemValue(c)
  local A = skilllv * a + b + Value / 100000
  return A
end

function CommonFun.calcBuff_6877(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = targetUser:GetProperty("Hp")
  local A = -a / 100 * Hp
  return A
end

function CommonFun.calcBuff_6880(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:GetEquipedWeaponType() == 300 or srcUser:GetEquipedWeaponType() == 0 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_6890(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local HpM = srcUser:GetProperty("Hp")
  local MaxHpM = srcUser:GetProperty("MaxHp")
  local hpperM = HpM / MaxHpM
  local A = math.floor((1 - hpperM) * 10) * 20
  return A
end

function CommonFun.calcBuff_6900(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = 0
  if targetUser:GetNpcID() == 301201 or targetUser:GetNpcID() == 301204 or targetUser:GetNpcID() == 301205 or targetUser:GetNpcID() == 301206 or targetUser:GetNpcID() == 301202 then
    A = -MaxHp
  elseif (targetUser:GetNpcID() == 301201 or targetUser:GetNpcID() == 301204 or targetUser:GetNpcID() == 301205 or targetUser:GetNpcID() == 301206) and targetUser:HasBuffID(154900) then
    A = -0.2 * MaxHp
  end
  return A
end

function CommonFun.calcBuff_6901(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = 0
  if targetUser:GetNpcID() == 301203 or targetUser:GetNpcID() == 301201 or targetUser:GetNpcID() == 301204 or targetUser:GetNpcID() == 301205 or targetUser:GetNpcID() == 301206 then
    A = -MaxHp
  elseif targetUser:GetNpcID() == 301200 then
    A = -0.2 * MaxHp
  end
  return A
end

function CommonFun.calcBuff_6902(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = 0
  local buffNum = targetUser:GetBuffLayer(155001)
  if buffNum <= 10 then
    A = -0.01 * MaxHp
  elseif 10 < buffNum and buffNum <= 20 then
    A = -0.02 * MaxHp
  elseif 20 < buffNum and buffNum <= 30 then
    A = -0.05 * MaxHp
  elseif 30 < buffNum then
    A = -0.1 * MaxHp
  end
  return A
end

function CommonFun.calcBuff_6903(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:GetNpcID() == a then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_6910(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:GetNpcID() == 216345 or targetUser:GetNpcID() == 216361 or targetUser:GetNpcID() == 216363 or targetUser:GetNpcID() == 216364 or targetUser:GetNpcID() == 216365 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_6920(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:HasBuffID(51231) or targetUser:HasBuffID(130001) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_6930(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Master = srcUser:GetMasterUser()
  local MaxHp = targetUser:GetProperty("MaxHp")
  local shengming = 0
  local shanghai = 1
  local MaxHp2 = 0
  if Master ~= nil then
    MaxHp2 = Master:GetProperty("MaxHp")
    if Master:HasBuffID(180521) then
      shengming = MaxHp2 * 2
    end
    if Master:HasBuffID(180420) then
      shanghai = 1.4
    end
  end
  if targetUser:HasBuffID(160000) then
    MaxHp = 0
  end
  if targetUser.boss == true or targetUser.mini == true then
    MaxHp = 0
  end
  local A = (0.05 * MaxHp + shengming) * shanghai
  if targetUser:HasBuffID(180520) or targetUser:HasBuffID(154920) then
    A = 0
  end
  return -A
end

function CommonFun.calcBuff_6940(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 2
  local Master = srcUser:GetMasterUser()
  if Master ~= nil and Master:HasBuffID(180421) then
    A = 3
  end
  return A
end

function CommonFun.calcBuff_6950(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local buffids = {
    180401,
    180402,
    180403,
    180404,
    180405,
    180406,
    180407,
    180408,
    180409,
    180410,
    180411,
    180412,
    180413,
    180414,
    180415,
    180416,
    180417,
    180418,
    180419,
    180420,
    180421,
    180422,
    180423,
    180424,
    180425,
    180426,
    180427,
    180428,
    180501,
    180502,
    180503,
    180504,
    180505,
    180506,
    180507,
    180508,
    180509,
    180510,
    180511,
    180512,
    180513,
    180514,
    180515,
    180516,
    180517,
    180518,
    180519,
    180520,
    180521,
    180522,
    180523,
    180524,
    180525
  }
  local A = 0
  for i, buffid in ipairs(buffids) do
    if srcUser:HasBuffID(buffid) then
      A = A + 1
    end
  end
  local B = a + b * A
  return B
end

function CommonFun.calcBuff_6960(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = targetUser:GetProperty("Hp")
  local Atk = srcUser:GetProperty("Atk")
  local DefReduc = CommonFun.CalcDef(srcUser, targetUser)
  local DamReduc2 = CommonFun.calcDamReDuc(srcUser, targetUser)
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local A = -(Atk * DefReduc * (1 - DamReduc2) * (1 - RefineDamReduc) * a + Hp * b)
  return A
end

function CommonFun.calcBuff_6970(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local MaxSp = srcUser:GetProperty("MaxSp")
  local Sp = srcUser:GetProperty("Sp")
  local SpRatio = Sp / MaxSp
  if SpRatio < 0.3 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_6971(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp = srcUser:GetProperty("Hp")
  local HpRatio = Hp / MaxHp
  if HpRatio < 0.3 then
    A = 25
  end
  return A
end

function CommonFun.calcBuff_6972(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(106509)
  local dongcha = 0
  local BigDamPer = targetUser:GetProperty("BigDamPer")
  local SmallDamPer = targetUser:GetProperty("SmallDamPer")
  if 0.5 < BigDamPer or 0.5 < SmallDamPer then
    dongcha = 1
  end
  local A = skilllv * 0.005 * (dongcha + 1)
  return A
end

function CommonFun.calcBuff_6980(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(12)
  if 6 <= RefineLv and RefineLv < 8 then
    A = d + a
  elseif 8 <= RefineLv and RefineLv < 10 then
    A = d + a + b
  elseif 10 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_6981(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(8)
  if 6 <= RefineLv and RefineLv < 8 then
    A = d + a
  elseif 8 <= RefineLv and RefineLv < 10 then
    A = d + a + b
  elseif 10 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_6982(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(11)
  if 6 <= RefineLv and RefineLv < 8 then
    A = d + a
  elseif 8 <= RefineLv and RefineLv < 10 then
    A = d + a + b
  elseif 10 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_6983(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(9)
  local A = c
  if b < RefineLv then
    A = math.min(RefineLv - b, 10) * a + A
  end
  return A
end

function CommonFun.calcBuff_6984(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(10)
  local A = c
  if b < RefineLv then
    A = math.min(RefineLv - b, 10) * a + A
  end
  return A
end

function CommonFun.calcBuff_6985(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(9)
  if 6 <= RefineLv and RefineLv < 8 then
    A = d + a
  elseif 8 <= RefineLv and RefineLv < 10 then
    A = d + a + b
  elseif 10 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_6986(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(10)
  if 6 <= RefineLv and RefineLv < 8 then
    A = d + a
  elseif 8 <= RefineLv and RefineLv < 10 then
    A = d + a + b
  elseif 10 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_6990(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local list = {
    1,
    2,
    3,
    4,
    7,
    8
  }
  local random = srcUser:GetRandom()
  return list[random % #list + 1]
end

function CommonFun.calcBuff_7000(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local WeaponType = srcUser:GetEquipedWeaponType()
  local Num = srcUser:GetBulletNum()
  local skilllv = srcUser:GetLernedSkillLevel(2260)
  local layer = math.ceil(Num / 2) + skilllv
  if WeaponType == 320 then
    layer = layer + skilllv
  end
  return layer
end

function CommonFun.calcBuff_7010(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local MaxSp = targetUser:GetProperty("MaxSp")
  local skilllv = srcUser:GetLernedSkillLevel(a)
  local A = MaxHp * skilllv * b + MaxSp * skilllv * c
  return A
end

function CommonFun.calcBuff_7020(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local skilllv = srcUser:GetLernedSkillLevel(a)
  local A = MaxHp * (skilllv * b + c)
  return A
end

function CommonFun.calcBuff_7030(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local Num = srcUser:GetRunePoint(a)
  local A = MaxHp * (Num * b + c)
  return A
end

function CommonFun.calcBuff_7040(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Def = srcUser:GetProperty("Def")
  local Vit = srcUser:GetProperty("Vit")
  local DefPer = targetUser:GetProperty("DefPer")
  local A = math.floor(Def / 2)
  if srcUser:HasBuffID(81001330) then
    A = math.floor(Def / 4)
  end
  return -A
end

function CommonFun.calcBuff_7041(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MDef = srcUser:GetProperty("MDef")
  local A = math.floor(MDef / 2)
  if srcUser:HasBuffID(81001330) then
    A = math.floor(MDef / 4)
  end
  return -A
end

function CommonFun.calcBuff_7050(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:HasBuffID(174844) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_7051(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:HasBuffID(174863) then
    A = 100
  end
  if targetUser:HasBuffID(174858) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_7060(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Bufflv = srcUser:GetBuffLayer(174852)
  local A = 0
  if 1 <= Bufflv and Bufflv < 2 then
    A = MaxHp * 0.3
  elseif 2 <= Bufflv and Bufflv < 3 then
    A = MaxHp * 0.66
  elseif 3 <= Bufflv then
    A = MaxHp * 1
  end
  return -A
end

function CommonFun.calcBuff_7070(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local RefineLv = srcUser:GetEquipedRefineLv(2)
  if srcUser:HasBuffID(90002963) and 10 <= RefineLv then
    A = 0.08
  end
  return A
end

function CommonFun.calcBuff_7071(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local RefineLv = srcUser:GetEquipedRefineLv(2)
  if srcUser:HasBuffID(90002963) and 10 <= RefineLv then
    A = 0.04
  end
  return A
end

function CommonFun.calcBuff_7080(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44087 or Ring1 == 144087) and 12 <= RefineLv1 then
    a = 0.03
  end
  if (Ring2 == 44087 or Ring2 == 144087) and 12 <= RefineLv2 then
    b = 0.03
  end
  if (Ring1 == 44087 or Ring1 == 144087) and (Ring2 == 44087 or Ring2 == 144087) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7081(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44087 or Ring1 == 144087) and 8 <= RefineLv1 and 8 <= order1 then
    a = 0.02
  end
  if (Ring2 == 44087 or Ring2 == 144087) and 8 <= RefineLv2 and 8 <= order2 then
    b = 0.02
  end
  if (Ring1 == 44087 or Ring1 == 144087) and (Ring2 == 44087 or Ring2 == 144087) and 8 <= order1 and 8 <= order2 then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7082(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44088 or Ring1 == 144088) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.02
  elseif (Ring1 == 44088 or Ring1 == 144088) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.02
  elseif (Ring1 == 44088 or Ring1 == 144088) and 15 <= RefineLv1 then
    a = 0.02
  else
    a = 0
  end
  if (Ring2 == 44088 or Ring2 == 144088) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.02
  elseif (Ring2 == 44088 or Ring2 == 144088) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.02
  elseif (Ring2 == 44088 or Ring2 == 144088) and 15 <= RefineLv2 then
    b = 0.02
  else
    b = 0
  end
  if (Ring1 == 44088 or Ring1 == 144088) and (Ring2 == 44088 or Ring2 == 144088) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7083(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44088 or Ring1 == 144088) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44088 or Ring1 == 144088) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.03
  elseif (Ring1 == 44088 or Ring1 == 144088) and 15 <= RefineLv1 then
    a = 0.06
  else
    a = 0
  end
  if (Ring2 == 44088 or Ring2 == 144088) and 8 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44088 or Ring2 == 144088) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.03
  elseif (Ring2 == 44088 or Ring2 == 144088) and 15 <= RefineLv2 then
    b = 0.06
  else
    b = 0
  end
  if (Ring1 == 44088 or Ring1 == 144088) and (Ring2 == 44088 or Ring2 == 144088) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7090(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44086 or Ring1 == 144086) and 12 <= RefineLv1 then
    a = 0.04
  end
  if (Ring2 == 44086 or Ring2 == 144086) and 12 <= RefineLv2 then
    b = 0.04
  end
  if (Ring1 == 44086 or Ring1 == 144086) and (Ring2 == 44086 or Ring2 == 144086) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7100(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Profession = srcUser:GetProfressionID()
  local A = 0
  local B = 0
  if Profession == 150 or Profession == 151 or Profession == 152 or Profession == 153 or Profession == 154 or Profession == 155 then
    A = 1
  else
    B = 1
  end
  local C = A * a + B * b
  return C
end

function CommonFun.calcBuff_7110(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local RefineLv = srcUser:GetEquipedRefineLv(8)
  local mapid, maptype = srcUser:GetMapInfo()
  local A = MaxHp * 0.05
  if 10 <= RefineLv then
    A = A + MaxHp * 0.05
  end
  return A
end

function CommonFun.calcBuff_7120(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local mapid, maptype = srcUser:GetMapInfo()
  local A = MaxHp * 0.1
  return A
end

function CommonFun.calcBuff_7130(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MoveSpd = srcUser:GetProperty("MoveSpd")
  local A = 100 + (math.max(MoveSpd, 1) - 1) * 100
  return A
end

function CommonFun.calcBuff_7140(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  local Int = srcUser:GetProperty("Int")
  local Dex = srcUser:GetProperty("Dex")
  local Agi = srcUser:GetProperty("Agi")
  local Vit = srcUser:GetProperty("Vit")
  local Luk = srcUser:GetProperty("Luk")
  local A = a
  if 119 <= Str then
    A = A + b
  end
  if 119 <= Int then
    A = A + b
  end
  if 119 <= Dex then
    A = A + b
  end
  if 119 <= Agi then
    A = A + b
  end
  if 119 <= Vit then
    A = A + b
  end
  if 119 <= Luk then
    A = A + b
  end
  return A
end

function CommonFun.calcBuff_7150(srcUser, targetUser, a, b, c, d, lv, damage)
  local Int = srcUser:GetProperty("Int")
  local Vit = srcUser:GetProperty("Vit")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local MaxHp = targetUser:GetProperty("MaxHp")
  local MDamIncrease = CommonFun.calcMDamIncrease(srcUser, targetUser)
  local MRefine = srcUser:GetProperty("MRefine")
  local srcAtkElement = c
  local targetDefElement = targetUser:GetProperty("DefAttr")
  local ElementRate = CommonFun.GetElementRate(srcUser, srcAtkElement, targetUser, targetDefElement)
  if nil == CommonFun.NatureProps[srcAtkElement] or nil == CommonFun.NatureProps[targetDefElement] or nil == targetDefElement then
    return 0
  end
  local elementInc = srcUser:GetProperty(CommonFun.NatureProps[targetDefElement][1])
  local elementRed = targetUser:GetProperty(CommonFun.NatureProps[srcAtkElement][2])
  local elementAtk = srcUser:GetProperty(CommonFun.NatureProps[srcAtkElement][3])
  local elementparam = ElementRate
  local elementparam2 = 1 + elementAtk
  if elementparam2 <= 0.1 then
    elementparam2 = 0.1
  end
  local ele = elementparam * elementparam2
  if targetDefElement == nil or ElementRate == nil or elementInc == nil or elementRed == nil or elementAtk == nil then
    ele = 1
  end
  local RefineMDamReduc = targetUser:GetProperty("RefineMDamReduc")
  local MDamSpike = srcUser:GetProperty("MDamSpike")
  local ResultDamInc = srcUser:GetProperty("ResultDamInc")
  local ResultDamRes = targetUser:GetProperty("ResultDamRes")
  local Result = 1 + ResultDamInc - ResultDamRes
  Result = math.max(Result, 0.1)
  local debuffdu = targetUser:GetBuffLayer(156610)
  local debuffhuo = targetUser:GetBuffLayer(156620)
  local debuff = 1
  if 1 <= debuffdu or 1 <= debuffhuo then
    debuff = 1 + (debuffdu + debuffhuo - 1) * 0.5
  end
  local A = -((1 + MDamSpike) * b * (1 - RefineMDamReduc) * (1 + MDamIncrease) * Result * ele + MaxHp * a) * debuff
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_7160(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(21161)
  local skilllv_1 = srcUser:GetLernedSkillLevel(1163)
  local A = 0
  if Value ~= 0 and 0 < skilllv_1 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_7170(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = a
  if srcUser:HasBuffID(22000060) or srcUser:HasBuffID(22000070) then
    A = a + 5
  end
  return A
end

function CommonFun.calcBuff_7180(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local GemValue = srcUser:GetGemValue(72162)
  local A = damage * GemValue / 100000
  return A
end

function CommonFun.calcBuff_7190(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local MaxSp = srcUser:GetProperty("MaxSp")
  local skilllv = srcUser:GetLernedSkillLevel(2311)
  local A = MaxHp * math.min(skilllv, 5) * a + MaxSp * math.min(skilllv, 5) * b
  if 0 < c then
    local Num = srcUser:GetRunePoint(183013)
    A = A * (1 + Num * 0.04)
  end
  return A
end

function CommonFun.calcBuff_7191(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(2363)
  local A = 0
  if 0 < skilllv and CommonFun.Shape ~= nil and CommonFun.Shape.S == targetUser.shape then
    A = 100
  end
  if targetUser:HasBuffID(160000) then
    A = 0
  end
  if targetUser.boss == true or targetUser.mini == true then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_7200(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(2326)
  local Int = srcUser:GetProperty("Int")
  local Luk = srcUser:GetProperty("Luk")
  local BeHealEncPer2 = targetUser:GetProperty("BeHealEncPer")
  local HealEncPer = srcUser:GetProperty("HealEncPer")
  local Num = srcUser:GetRunePoint(183035)
  local GemValue = srcUser:GetGemValue(183112)
  local A = (Int + Luk) * skilllv_1 * a * (1 + BeHealEncPer2) * (1 + HealEncPer) * (1 + Num * 0.03) * (1 + GemValue / 100000)
  return A
end

function CommonFun.calcBuff_7210(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(2366)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local time = targetUser:GetBuffPassedTime(135190)
  local A = -MaxHp * (0.01 + math.max(time, 0) * skilllv_1 * 5.0E-4)
  local B = -(0.01 + math.max(time, 0) * skilllv_1 * 5.0E-4)
  A = CommonFun.calcBuff_6(srcUser, targetUser, B, 0, c, d, lv)
  return A
end

function CommonFun.calcBuff_7220(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local lvValue = srcUser.BaseLv
  local A = 1500000 * (lvValue - 95)
  return A
end

function CommonFun.calcBuff_7221(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local lvValue = srcUser.BaseLv
  local A = 0.5 * (lvValue - 95)
  return A
end

function CommonFun.calcBuff_7222(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local lvValue = srcUser.BaseLv
  local A = 250000 * (lvValue - 80)
  return A
end

function CommonFun.calcBuff_7223(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local lvValue = srcUser.BaseLv
  local A = 0.25 * (lvValue - 80)
  return A
end

function CommonFun.calcBuff_7224(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local lvValue = srcUser.BaseLv
  local A = 4000000 * (lvValue - 140)
  return A
end

function CommonFun.calcBuff_7225(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local lvValue = srcUser.BaseLv
  local A = 0.5 * (lvValue - 140)
  return A
end

function CommonFun.calcBuff_7230(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(2327)
  local Value = srcUser:GetGemValue(183042)
  local A = -1 + skilllv * 0.1 + Value / 100000
  if 0 < A then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_7240(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(c)
  local MaxHp = targetUser:GetProperty("MaxHp")
  local MaxSp = targetUser:GetProperty("MaxSp")
  local A = Value / 100000 * MaxHp * a + Value / 100000 * MaxSp * b
  return A
end

function CommonFun.calcBuff_7250(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(d)
  local Value = srcUser:GetGemValue(c)
  local A = skilllv * a + b + Value / 1000
  return A
end

function CommonFun.calcBuff_7260(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(d)
  local Value = srcUser:GetGemValue(c)
  local A = 0
  if srcUser:HasBuffID(21830140) then
    A = skilllv * a + b + Value / 1000
  end
  return A
end

function CommonFun.calcBuff_7300(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44090 or Ring1 == 144090) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.05
  elseif (Ring1 == 44090 or Ring1 == 144090) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.1
  elseif (Ring1 == 44090 or Ring1 == 144090) and 15 <= RefineLv1 then
    a = 0.15
  end
  if (Ring2 == 44090 or Ring2 == 144090) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.05
  elseif (Ring2 == 44090 or Ring2 == 144090) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.1
  elseif (Ring2 == 44090 or Ring2 == 144090) and 15 <= RefineLv2 then
    b = 0.15
  end
  if (Ring1 == 44090 or Ring1 == 144090) and (Ring2 == 44090 or Ring2 == 144090) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7301(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44091 or Ring1 == 144091) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.05
  elseif (Ring1 == 44091 or Ring1 == 144091) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.1
  elseif (Ring1 == 44091 or Ring1 == 144091) and 15 <= RefineLv1 then
    a = 0.15
  end
  if (Ring2 == 44091 or Ring2 == 144091) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.05
  elseif (Ring2 == 44091 or Ring2 == 144091) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.1
  elseif (Ring2 == 44091 or Ring2 == 144091) and 15 <= RefineLv2 then
    b = 0.15
  end
  if (Ring1 == 44091 or Ring1 == 144091) and (Ring2 == 44091 or Ring2 == 144091) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7302(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44092 or Ring1 == 144092) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.05
  elseif (Ring1 == 44092 or Ring1 == 144092) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.1
  elseif (Ring1 == 44092 or Ring1 == 144092) and 15 <= RefineLv1 then
    a = 0.15
  end
  if (Ring2 == 44092 or Ring2 == 144092) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.05
  elseif (Ring2 == 44092 or Ring2 == 144092) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.1
  elseif (Ring2 == 44092 or Ring2 == 144092) and 15 <= RefineLv2 then
    b = 0.15
  end
  if (Ring1 == 44092 or Ring1 == 144092) and (Ring2 == 44092 or Ring2 == 144092) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7310(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44093 or Ring1 == 144093) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.02
  elseif (Ring1 == 44093 or Ring1 == 144093) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.05
  elseif (Ring1 == 44093 or Ring1 == 144093) and 15 <= RefineLv1 then
    a = 0.08
  end
  if (Ring2 == 44093 or Ring2 == 144093) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.02
  elseif (Ring2 == 44093 or Ring2 == 144093) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.05
  elseif (Ring2 == 44093 or Ring2 == 144093) and 15 <= RefineLv2 then
    b = 0.08
  end
  if (Ring1 == 44093 or Ring1 == 144093) and (Ring2 == 44093 or Ring2 == 144093) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7311(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44094 or Ring1 == 144094) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.02
  elseif (Ring1 == 44094 or Ring1 == 144094) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.05
  elseif (Ring1 == 44094 or Ring1 == 144094) and 15 <= RefineLv1 then
    a = 0.08
  end
  if (Ring2 == 44094 or Ring2 == 144094) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.02
  elseif (Ring2 == 44094 or Ring2 == 144094) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.05
  elseif (Ring2 == 44094 or Ring2 == 144094) and 15 <= RefineLv2 then
    b = 0.08
  end
  if (Ring1 == 44094 or Ring1 == 144094) and (Ring2 == 44094 or Ring2 == 144094) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7312(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44095 or Ring1 == 144095) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.02
  elseif (Ring1 == 44095 or Ring1 == 144095) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.05
  elseif (Ring1 == 44095 or Ring1 == 144095) and 15 <= RefineLv1 then
    a = 0.08
  end
  if (Ring2 == 44095 or Ring2 == 144095) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.02
  elseif (Ring2 == 44095 or Ring2 == 144095) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.05
  elseif (Ring2 == 44095 or Ring2 == 144095) and 15 <= RefineLv2 then
    b = 0.08
  end
  if (Ring1 == 44095 or Ring1 == 144095) and (Ring2 == 44095 or Ring2 == 144095) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7320(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44096 or Ring1 == 144096) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 200
  elseif (Ring1 == 44096 or Ring1 == 144096) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 400
  elseif (Ring1 == 44096 or Ring1 == 144096) and 15 <= RefineLv1 then
    a = 600
  end
  if (Ring2 == 44096 or Ring2 == 144096) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 200
  elseif (Ring2 == 44096 or Ring2 == 144096) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 400
  elseif (Ring2 == 44096 or Ring2 == 144096) and 15 <= RefineLv2 then
    b = 600
  end
  if (Ring1 == 44096 or Ring1 == 144096) and (Ring2 == 44096 or Ring2 == 144096) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7321(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44097 or Ring1 == 144097) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 200
  elseif (Ring1 == 44097 or Ring1 == 144097) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 400
  elseif (Ring1 == 44097 or Ring1 == 144097) and 15 <= RefineLv1 then
    a = 600
  end
  if (Ring2 == 44097 or Ring2 == 144097) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 200
  elseif (Ring2 == 44097 or Ring2 == 144097) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 400
  elseif (Ring2 == 44097 or Ring2 == 144097) and 15 <= RefineLv2 then
    b = 600
  end
  if (Ring1 == 44097 or Ring1 == 144097) and (Ring2 == 44097 or Ring2 == 144097) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7322(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44098 or Ring1 == 144098) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 200
  elseif (Ring1 == 44098 or Ring1 == 144098) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 400
  elseif (Ring1 == 44098 or Ring1 == 144098) and 15 <= RefineLv1 then
    a = 600
  end
  if (Ring2 == 44098 or Ring2 == 144098) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 200
  elseif (Ring2 == 44098 or Ring2 == 144098) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 400
  elseif (Ring2 == 44098 or Ring2 == 144098) and 15 <= RefineLv2 then
    b = 600
  end
  if (Ring1 == 44098 or Ring1 == 144098) and (Ring2 == 44098 or Ring2 == 144098) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7330(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44099 or Ring1 == 144099) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44099 or Ring1 == 144099) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 5
  elseif (Ring1 == 44099 or Ring1 == 144099) and 15 <= RefineLv1 then
    a = 10
  end
  if (Ring2 == 44099 or Ring2 == 144099) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44099 or Ring2 == 144099) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 5
  elseif (Ring2 == 44099 or Ring2 == 144099) and 15 <= RefineLv2 then
    b = 10
  end
  if (Ring1 == 44099 or Ring1 == 144099) and (Ring2 == 44099 or Ring2 == 144099) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7331(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44100 or Ring1 == 144100) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44100 or Ring1 == 144100) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 5
  elseif (Ring1 == 44100 or Ring1 == 144100) and 15 <= RefineLv1 then
    a = 10
  end
  if (Ring2 == 44100 or Ring2 == 144100) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44100 or Ring2 == 144100) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 5
  elseif (Ring2 == 44100 or Ring2 == 144100) and 15 <= RefineLv2 then
    b = 10
  end
  if (Ring1 == 44100 or Ring1 == 144100) and (Ring2 == 44100 or Ring2 == 144100) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7332(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44101 or Ring1 == 144101) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44101 or Ring1 == 144101) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 5
  elseif (Ring1 == 44101 or Ring1 == 144101) and 15 <= RefineLv1 then
    a = 10
  end
  if (Ring2 == 44101 or Ring2 == 144101) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44101 or Ring2 == 144101) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 5
  elseif (Ring2 == 44101 or Ring2 == 144101) and 15 <= RefineLv2 then
    b = 10
  end
  if (Ring1 == 44101 or Ring1 == 144101) and (Ring2 == 44101 or Ring2 == 144101) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7333(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44099 or Ring1 == 144099) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 60
  elseif (Ring1 == 44099 or Ring1 == 144099) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 110
  elseif (Ring1 == 44099 or Ring1 == 144099) and 15 <= RefineLv1 then
    a = 160
  end
  if (Ring2 == 44099 or Ring2 == 144099) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 60
  elseif (Ring2 == 44099 or Ring2 == 144099) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 110
  elseif (Ring2 == 44099 or Ring2 == 144099) and 15 <= RefineLv2 then
    b = 160
  end
  if (Ring1 == 44099 or Ring1 == 144099) and (Ring2 == 44099 or Ring2 == 144099) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7334(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44100 or Ring1 == 144100) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 60
  elseif (Ring1 == 44100 or Ring1 == 144100) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 110
  elseif (Ring1 == 44100 or Ring1 == 144100) and 15 <= RefineLv1 then
    a = 160
  end
  if (Ring2 == 44100 or Ring2 == 144100) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 60
  elseif (Ring2 == 44100 or Ring2 == 144100) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 110
  elseif (Ring2 == 44100 or Ring2 == 144100) and 15 <= RefineLv2 then
    b = 160
  end
  if (Ring1 == 44100 or Ring1 == 144100) and (Ring2 == 44100 or Ring2 == 144100) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7335(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44101 or Ring1 == 144101) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 60
  elseif (Ring1 == 44101 or Ring1 == 144101) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 110
  elseif (Ring1 == 44101 or Ring1 == 144101) and 15 <= RefineLv1 then
    a = 160
  end
  if (Ring2 == 44101 or Ring2 == 144101) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 60
  elseif (Ring2 == 44101 or Ring2 == 144101) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 110
  elseif (Ring2 == 44101 or Ring2 == 144101) and 15 <= RefineLv2 then
    b = 160
  end
  if (Ring1 == 44101 or Ring1 == 144101) and (Ring2 == 44101 or Ring2 == 144101) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7340(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44102 or Ring1 == 144102) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = -0.1
  elseif (Ring1 == 44102 or Ring1 == 144102) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = -0.2
  elseif (Ring1 == 44102 or Ring1 == 144102) and 15 <= RefineLv1 then
    a = -0.3
  end
  if (Ring2 == 44102 or Ring2 == 144102) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = -0.1
  elseif (Ring2 == 44102 or Ring2 == 144102) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = -0.2
  elseif (Ring2 == 44102 or Ring2 == 144102) and 15 <= RefineLv2 then
    b = -0.3
  end
  if (Ring1 == 44102 or Ring1 == 144102) and (Ring2 == 44102 or Ring2 == 144102) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7341(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44103 or Ring1 == 144103) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = -0.1
  elseif (Ring1 == 44103 or Ring1 == 144103) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = -0.2
  elseif (Ring1 == 44103 or Ring1 == 144103) and 15 <= RefineLv1 then
    a = -0.3
  end
  if (Ring2 == 44103 or Ring2 == 144103) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = -0.1
  elseif (Ring2 == 44103 or Ring2 == 144103) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = -0.2
  elseif (Ring2 == 44103 or Ring2 == 144103) and 15 <= RefineLv2 then
    b = -0.3
  end
  if (Ring1 == 44103 or Ring1 == 144103) and (Ring2 == 44103 or Ring2 == 144103) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7342(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44104 or Ring1 == 144104) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = -0.1
  elseif (Ring1 == 44104 or Ring1 == 144104) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = -0.2
  elseif (Ring1 == 44104 or Ring1 == 144104) and 15 <= RefineLv1 then
    a = -0.3
  end
  if (Ring2 == 44104 or Ring2 == 144104) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = -0.1
  elseif (Ring2 == 44104 or Ring2 == 144104) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = -0.2
  elseif (Ring2 == 44104 or Ring2 == 144104) and 15 <= RefineLv2 then
    b = -0.3
  end
  if (Ring1 == 44104 or Ring1 == 144104) and (Ring2 == 44104 or Ring2 == 144104) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7343(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44102 or Ring1 == 144102) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 40
  elseif (Ring1 == 44102 or Ring1 == 144102) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 80
  elseif (Ring1 == 44102 or Ring1 == 144102) and 15 <= RefineLv1 then
    a = 120
  end
  if (Ring2 == 44102 or Ring2 == 144102) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 40
  elseif (Ring2 == 44102 or Ring2 == 144102) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 80
  elseif (Ring2 == 44102 or Ring2 == 144102) and 15 <= RefineLv2 then
    b = 120
  end
  if (Ring1 == 44102 or Ring1 == 144102) and (Ring2 == 44102 or Ring2 == 144102) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7344(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44103 or Ring1 == 144103) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 40
  elseif (Ring1 == 44103 or Ring1 == 144103) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 80
  elseif (Ring1 == 44103 or Ring1 == 144103) and 15 <= RefineLv1 then
    a = 120
  end
  if (Ring2 == 44103 or Ring2 == 144103) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 40
  elseif (Ring2 == 44103 or Ring2 == 144103) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 80
  elseif (Ring2 == 44103 or Ring2 == 144103) and 15 <= RefineLv2 then
    b = 120
  end
  if (Ring1 == 44103 or Ring1 == 144103) and (Ring2 == 44103 or Ring2 == 144103) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7345(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44104 or Ring1 == 144104) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 40
  elseif (Ring1 == 44104 or Ring1 == 144104) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 80
  elseif (Ring1 == 44104 or Ring1 == 144104) and 15 <= RefineLv1 then
    a = 120
  end
  if (Ring2 == 44104 or Ring2 == 144104) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 40
  elseif (Ring2 == 44104 or Ring2 == 144104) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 80
  elseif (Ring2 == 44104 or Ring2 == 144104) and 15 <= RefineLv2 then
    b = 120
  end
  if (Ring1 == 44104 or Ring1 == 144104) and (Ring2 == 44104 or Ring2 == 144104) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7350(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44105 or Ring1 == 144105) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.04
  elseif (Ring1 == 44105 or Ring1 == 144105) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.08
  elseif (Ring1 == 44105 or Ring1 == 144105) and 15 <= RefineLv1 then
    a = 0.12
  end
  if (Ring2 == 44105 or Ring2 == 144105) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.04
  elseif (Ring2 == 44105 or Ring2 == 144105) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.08
  elseif (Ring2 == 44105 or Ring2 == 144105) and 15 <= RefineLv2 then
    b = 0.12
  end
  if (Ring1 == 44105 or Ring1 == 144105) and (Ring2 == 44105 or Ring2 == 144105) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7351(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44106 or Ring1 == 144106) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.04
  elseif (Ring1 == 44106 or Ring1 == 144106) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.08
  elseif (Ring1 == 44106 or Ring1 == 144106) and 15 <= RefineLv1 then
    a = 0.12
  end
  if (Ring2 == 44106 or Ring2 == 144106) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.04
  elseif (Ring2 == 44106 or Ring2 == 144106) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.08
  elseif (Ring2 == 44106 or Ring2 == 144106) and 15 <= RefineLv2 then
    b = 0.12
  end
  if (Ring1 == 44106 or Ring1 == 144106) and (Ring2 == 44106 or Ring2 == 144106) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7352(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44107 or Ring1 == 144107) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.04
  elseif (Ring1 == 44107 or Ring1 == 144107) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.08
  elseif (Ring1 == 44107 or Ring1 == 144107) and 15 <= RefineLv1 then
    a = 0.12
  end
  if (Ring2 == 44107 or Ring2 == 144107) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.04
  elseif (Ring2 == 44107 or Ring2 == 144107) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.08
  elseif (Ring2 == 44107 or Ring2 == 144107) and 15 <= RefineLv2 then
    b = 0.12
  end
  if (Ring1 == 44107 or Ring1 == 144107) and (Ring2 == 44107 or Ring2 == 144107) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7360(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44108 or Ring1 == 144108) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.05
  elseif (Ring1 == 44108 or Ring1 == 144108) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.1
  elseif (Ring1 == 44108 or Ring1 == 144108) and 15 <= RefineLv1 then
    a = 0.15
  end
  if (Ring2 == 44108 or Ring2 == 144108) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.05
  elseif (Ring2 == 44108 or Ring2 == 144108) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.1
  elseif (Ring2 == 44108 or Ring2 == 144108) and 15 <= RefineLv2 then
    b = 0.15
  end
  if (Ring1 == 44108 or Ring1 == 144108) and (Ring2 == 44108 or Ring2 == 144108) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7361(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44109 or Ring1 == 144109) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.05
  elseif (Ring1 == 44109 or Ring1 == 144109) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.1
  elseif (Ring1 == 44109 or Ring1 == 144109) and 15 <= RefineLv1 then
    a = 0.15
  end
  if (Ring2 == 44109 or Ring2 == 144109) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.05
  elseif (Ring2 == 44109 or Ring2 == 144109) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.1
  elseif (Ring2 == 44109 or Ring2 == 144109) and 15 <= RefineLv2 then
    b = 0.15
  end
  if (Ring1 == 44109 or Ring1 == 144109) and (Ring2 == 44109 or Ring2 == 144109) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7362(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44110 or Ring1 == 144110) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.05
  elseif (Ring1 == 44110 or Ring1 == 144110) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.1
  elseif (Ring1 == 44110 or Ring1 == 144110) and 15 <= RefineLv1 then
    a = 0.15
  end
  if (Ring2 == 44110 or Ring2 == 144110) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.05
  elseif (Ring2 == 44110 or Ring2 == 144110) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.1
  elseif (Ring2 == 44110 or Ring2 == 144110) and 15 <= RefineLv2 then
    b = 0.15
  end
  if (Ring1 == 44110 or Ring1 == 144110) and (Ring2 == 44110 or Ring2 == 144110) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7370(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44111 or Ring1 == 144111) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.04
  elseif (Ring1 == 44111 or Ring1 == 144111) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.08
  elseif (Ring1 == 44111 or Ring1 == 144111) and 15 <= RefineLv1 then
    a = 0.12
  end
  if (Ring2 == 44111 or Ring2 == 144111) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.04
  elseif (Ring2 == 44111 or Ring2 == 144111) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.08
  elseif (Ring2 == 44111 or Ring2 == 144111) and 15 <= RefineLv2 then
    b = 0.12
  end
  if (Ring1 == 44111 or Ring1 == 144111) and (Ring2 == 44111 or Ring2 == 144111) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7371(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44112 or Ring1 == 144112) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.04
  elseif (Ring1 == 44112 or Ring1 == 144112) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.08
  elseif (Ring1 == 44112 or Ring1 == 144112) and 15 <= RefineLv1 then
    a = 0.12
  end
  if (Ring2 == 44112 or Ring2 == 144112) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.04
  elseif (Ring2 == 44112 or Ring2 == 144112) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.08
  elseif (Ring2 == 44112 or Ring2 == 144112) and 15 <= RefineLv2 then
    b = 0.12
  end
  if (Ring1 == 44112 or Ring1 == 144112) and (Ring2 == 44112 or Ring2 == 144112) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7372(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44113 or Ring1 == 144113) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.04
  elseif (Ring1 == 44113 or Ring1 == 144113) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.08
  elseif (Ring1 == 44113 or Ring1 == 144113) and 15 <= RefineLv1 then
    a = 0.12
  end
  if (Ring2 == 44113 or Ring2 == 144113) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.04
  elseif (Ring2 == 44113 or Ring2 == 144113) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.08
  elseif (Ring2 == 44113 or Ring2 == 144113) and 15 <= RefineLv2 then
    b = 0.12
  end
  if (Ring1 == 44113 or Ring1 == 144113) and (Ring2 == 44113 or Ring2 == 144113) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7380(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44114 or Ring1 == 144114) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.04
  elseif (Ring1 == 44114 or Ring1 == 144114) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.08
  elseif (Ring1 == 44114 or Ring1 == 144114) and 15 <= RefineLv1 then
    a = 0.12
  end
  if (Ring2 == 44114 or Ring2 == 144114) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.04
  elseif (Ring2 == 44114 or Ring2 == 144114) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.08
  elseif (Ring2 == 44114 or Ring2 == 144114) and 15 <= RefineLv2 then
    b = 0.12
  end
  if (Ring1 == 44114 or Ring1 == 144114) and (Ring2 == 44114 or Ring2 == 144114) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7381(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44115 or Ring1 == 144115) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.04
  elseif (Ring1 == 44115 or Ring1 == 144115) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.08
  elseif (Ring1 == 44115 or Ring1 == 144115) and 15 <= RefineLv1 then
    a = 0.12
  end
  if (Ring2 == 44115 or Ring2 == 144115) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.04
  elseif (Ring2 == 44115 or Ring2 == 144115) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.08
  elseif (Ring2 == 44115 or Ring2 == 144115) and 15 <= RefineLv2 then
    b = 0.12
  end
  if (Ring1 == 44115 or Ring1 == 144115) and (Ring2 == 44115 or Ring2 == 144115) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7382(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44116 or Ring1 == 144116) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.04
  elseif (Ring1 == 44116 or Ring1 == 144116) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.08
  elseif (Ring1 == 44116 or Ring1 == 144116) and 15 <= RefineLv1 then
    a = 0.12
  end
  if (Ring2 == 44116 or Ring2 == 144116) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.04
  elseif (Ring2 == 44116 or Ring2 == 144116) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.08
  elseif (Ring2 == 44116 or Ring2 == 144116) and 15 <= RefineLv2 then
    b = 0.12
  end
  if (Ring1 == 44116 or Ring1 == 144116) and (Ring2 == 44116 or Ring2 == 144116) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7390(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44117 or Ring1 == 144117) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.03
  elseif (Ring1 == 44117 or Ring1 == 144117) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.06
  elseif (Ring1 == 44117 or Ring1 == 144117) and 15 <= RefineLv1 then
    a = 0.09
  end
  if (Ring2 == 44117 or Ring2 == 144117) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.03
  elseif (Ring2 == 44117 or Ring2 == 144117) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.06
  elseif (Ring2 == 44117 or Ring2 == 144117) and 15 <= RefineLv2 then
    b = 0.09
  end
  if (Ring1 == 44117 or Ring1 == 144117) and (Ring2 == 44117 or Ring2 == 144117) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7391(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44118 or Ring1 == 144118) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.03
  elseif (Ring1 == 44118 or Ring1 == 144118) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.06
  elseif (Ring1 == 44118 or Ring1 == 144118) and 15 <= RefineLv1 then
    a = 0.09
  end
  if (Ring2 == 44118 or Ring2 == 144118) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.03
  elseif (Ring2 == 44118 or Ring2 == 144118) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.06
  elseif (Ring2 == 44118 or Ring2 == 144118) and 15 <= RefineLv2 then
    b = 0.09
  end
  if (Ring1 == 44118 or Ring1 == 144118) and (Ring2 == 44118 or Ring2 == 144118) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7392(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44119 or Ring1 == 144119) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.03
  elseif (Ring1 == 44119 or Ring1 == 144119) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.06
  elseif (Ring1 == 44119 or Ring1 == 144119) and 15 <= RefineLv1 then
    a = 0.09
  end
  if (Ring2 == 44119 or Ring2 == 144119) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.03
  elseif (Ring2 == 44119 or Ring2 == 144119) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.06
  elseif (Ring2 == 44119 or Ring2 == 144119) and 15 <= RefineLv2 then
    b = 0.09
  end
  if (Ring1 == 44119 or Ring1 == 144119) and (Ring2 == 44119 or Ring2 == 144119) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7400(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44120 or Ring1 == 144120) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44120 or Ring1 == 144120) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.05
  elseif (Ring1 == 44120 or Ring1 == 144120) and 15 <= RefineLv1 then
    a = 0.1
  end
  if (Ring2 == 44120 or Ring2 == 144120) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44120 or Ring2 == 144120) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.05
  elseif (Ring2 == 44120 or Ring2 == 144120) and 15 <= RefineLv2 then
    b = 0.1
  end
  if (Ring1 == 44120 or Ring1 == 144120) and (Ring2 == 44120 or Ring2 == 144120) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7401(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44121 or Ring1 == 144121) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44121 or Ring1 == 144121) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.05
  elseif (Ring1 == 44121 or Ring1 == 144121) and 15 <= RefineLv1 then
    a = 0.1
  end
  if (Ring2 == 44121 or Ring2 == 144121) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44121 or Ring2 == 144121) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.05
  elseif (Ring2 == 44121 or Ring2 == 144121) and 15 <= RefineLv2 then
    b = 0.1
  end
  if (Ring1 == 44121 or Ring1 == 144121) and (Ring2 == 44121 or Ring2 == 144121) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7402(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44122 or Ring1 == 144122) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44122 or Ring1 == 144122) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.05
  elseif (Ring1 == 44122 or Ring1 == 144122) and 15 <= RefineLv1 then
    a = 0.1
  end
  if (Ring2 == 44122 or Ring2 == 144122) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44122 or Ring2 == 144122) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.05
  elseif (Ring2 == 44122 or Ring2 == 144122) and 15 <= RefineLv2 then
    b = 0.1
  end
  if (Ring1 == 44122 or Ring1 == 144122) and (Ring2 == 44122 or Ring2 == 144122) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7410(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44123 or Ring1 == 144123) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.03
  elseif (Ring1 == 44123 or Ring1 == 144123) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.06
  elseif (Ring1 == 44123 or Ring1 == 144123) and 15 <= RefineLv1 then
    a = 0.09
  end
  if (Ring2 == 44123 or Ring2 == 144123) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.03
  elseif (Ring2 == 44123 or Ring2 == 144123) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.06
  elseif (Ring2 == 44123 or Ring2 == 144123) and 15 <= RefineLv2 then
    b = 0.09
  end
  if (Ring1 == 44123 or Ring1 == 144123) and (Ring2 == 44123 or Ring2 == 144123) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7411(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44124 or Ring1 == 144124) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.03
  elseif (Ring1 == 44124 or Ring1 == 144124) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.06
  elseif (Ring1 == 44124 or Ring1 == 144124) and 15 <= RefineLv1 then
    a = 0.09
  end
  if (Ring2 == 44124 or Ring2 == 144124) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.03
  elseif (Ring2 == 44124 or Ring2 == 144124) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.06
  elseif (Ring2 == 44124 or Ring2 == 144124) and 15 <= RefineLv2 then
    b = 0.09
  end
  if (Ring1 == 44124 or Ring1 == 144124) and (Ring2 == 44124 or Ring2 == 144124) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7412(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44125 or Ring1 == 144125) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.03
  elseif (Ring1 == 44125 or Ring1 == 144125) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.06
  elseif (Ring1 == 44125 or Ring1 == 144125) and 15 <= RefineLv1 then
    a = 0.09
  end
  if (Ring2 == 44125 or Ring2 == 144125) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.03
  elseif (Ring2 == 44125 or Ring2 == 144125) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.06
  elseif (Ring2 == 44125 or Ring2 == 144125) and 15 <= RefineLv2 then
    b = 0.09
  end
  if (Ring1 == 44125 or Ring1 == 144125) and (Ring2 == 44125 or Ring2 == 144125) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7420(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44126 or Ring1 == 144126) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 60
  elseif (Ring1 == 44126 or Ring1 == 144126) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 120
  elseif (Ring1 == 44126 or Ring1 == 144126) and 15 <= RefineLv1 then
    a = 180
  end
  if (Ring2 == 44126 or Ring2 == 144126) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 60
  elseif (Ring2 == 44126 or Ring2 == 144126) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 120
  elseif (Ring2 == 44126 or Ring2 == 144126) and 15 <= RefineLv2 then
    b = 180
  end
  if (Ring1 == 44126 or Ring1 == 144126) and (Ring2 == 44126 or Ring2 == 144126) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7421(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44127 or Ring1 == 144127) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 60
  elseif (Ring1 == 44127 or Ring1 == 144127) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 120
  elseif (Ring1 == 44127 or Ring1 == 144127) and 15 <= RefineLv1 then
    a = 180
  end
  if (Ring2 == 44127 or Ring2 == 144127) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 60
  elseif (Ring2 == 44127 or Ring2 == 144127) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 120
  elseif (Ring2 == 44127 or Ring2 == 144127) and 15 <= RefineLv2 then
    b = 180
  end
  if (Ring1 == 44127 or Ring1 == 144127) and (Ring2 == 44127 or Ring2 == 144127) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7422(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44128 or Ring1 == 144128) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 60
  elseif (Ring1 == 44128 or Ring1 == 144128) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 120
  elseif (Ring1 == 44128 or Ring1 == 144128) and 15 <= RefineLv1 then
    a = 180
  end
  if (Ring2 == 44128 or Ring2 == 144128) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 60
  elseif (Ring2 == 44128 or Ring2 == 144128) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 120
  elseif (Ring2 == 44128 or Ring2 == 144128) and 15 <= RefineLv2 then
    b = 180
  end
  if (Ring1 == 44128 or Ring1 == 144128) and (Ring2 == 44128 or Ring2 == 144128) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7430(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44129 or Ring1 == 144129) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44129 or Ring1 == 144129) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.03
  elseif (Ring1 == 44129 or Ring1 == 144129) and 15 <= RefineLv1 then
    a = 0.08
  end
  if (Ring2 == 44129 or Ring2 == 144129) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44129 or Ring2 == 144129) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.03
  elseif (Ring2 == 44129 or Ring2 == 144129) and 15 <= RefineLv2 then
    b = 0.08
  end
  if (Ring1 == 44129 or Ring1 == 144129) and (Ring2 == 44129 or Ring2 == 144129) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7431(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44130 or Ring1 == 144130) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44130 or Ring1 == 144130) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.03
  elseif (Ring1 == 44130 or Ring1 == 144130) and 15 <= RefineLv1 then
    a = 0.08
  end
  if (Ring2 == 44130 or Ring2 == 144130) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44130 or Ring2 == 144130) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.03
  elseif (Ring2 == 44130 or Ring2 == 144130) and 15 <= RefineLv2 then
    b = 0.08
  end
  if (Ring1 == 44130 or Ring1 == 144130) and (Ring2 == 44130 or Ring2 == 144130) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7432(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44131 or Ring1 == 144131) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0
  elseif (Ring1 == 44131 or Ring1 == 144131) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.03
  elseif (Ring1 == 44131 or Ring1 == 144131) and 15 <= RefineLv1 then
    a = 0.08
  end
  if (Ring2 == 44131 or Ring2 == 144131) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0
  elseif (Ring2 == 44131 or Ring2 == 144131) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.03
  elseif (Ring2 == 44131 or Ring2 == 144131) and 15 <= RefineLv2 then
    b = 0.08
  end
  if (Ring1 == 44131 or Ring1 == 144131) and (Ring2 == 44131 or Ring2 == 144131) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7440(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44132 or Ring1 == 144132) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.05
  elseif (Ring1 == 44132 or Ring1 == 144132) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.1
  elseif (Ring1 == 44132 or Ring1 == 144132) and 15 <= RefineLv1 then
    a = 0.15
  end
  if (Ring2 == 44132 or Ring2 == 144132) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.05
  elseif (Ring2 == 44132 or Ring2 == 144132) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.1
  elseif (Ring2 == 44132 or Ring2 == 144132) and 15 <= RefineLv2 then
    b = 0.15
  end
  if (Ring1 == 44132 or Ring1 == 144132) and (Ring2 == 44132 or Ring2 == 144132) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7441(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44133 or Ring1 == 144133) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.05
  elseif (Ring1 == 44133 or Ring1 == 144133) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.1
  elseif (Ring1 == 44133 or Ring1 == 144133) and 15 <= RefineLv1 then
    a = 0.15
  end
  if (Ring2 == 44133 or Ring2 == 144133) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.05
  elseif (Ring2 == 44133 or Ring2 == 144133) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.1
  elseif (Ring2 == 44133 or Ring2 == 144133) and 15 <= RefineLv2 then
    b = 0.15
  end
  if (Ring1 == 44133 or Ring1 == 144133) and (Ring2 == 44133 or Ring2 == 144133) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7442(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44134 or Ring1 == 144134) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.05
  elseif (Ring1 == 44134 or Ring1 == 144134) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.1
  elseif (Ring1 == 44134 or Ring1 == 144134) and 15 <= RefineLv1 then
    a = 0.15
  end
  if (Ring2 == 44134 or Ring2 == 144134) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.05
  elseif (Ring2 == 44134 or Ring2 == 144134) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.1
  elseif (Ring2 == 44134 or Ring2 == 144134) and 15 <= RefineLv2 then
    b = 0.15
  end
  if (Ring1 == 44134 or Ring1 == 144134) and (Ring2 == 44134 or Ring2 == 144134) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7450(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44135 or Ring1 == 144135) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.03
  elseif (Ring1 == 44135 or Ring1 == 144135) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.06
  elseif (Ring1 == 44135 or Ring1 == 144135) and 15 <= RefineLv1 then
    a = 0.09
  end
  if (Ring2 == 44135 or Ring2 == 144135) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.03
  elseif (Ring2 == 44135 or Ring2 == 144135) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.06
  elseif (Ring2 == 44135 or Ring2 == 144135) and 15 <= RefineLv2 then
    b = 0.09
  end
  if (Ring1 == 44135 or Ring1 == 144135) and (Ring2 == 44135 or Ring2 == 144135) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7451(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44136 or Ring1 == 144136) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.03
  elseif (Ring1 == 44136 or Ring1 == 144136) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.06
  elseif (Ring1 == 44136 or Ring1 == 144136) and 15 <= RefineLv1 then
    a = 0.09
  end
  if (Ring2 == 44136 or Ring2 == 144136) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.03
  elseif (Ring2 == 44136 or Ring2 == 144136) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.06
  elseif (Ring2 == 44136 or Ring2 == 144136) and 15 <= RefineLv2 then
    b = 0.09
  end
  if (Ring1 == 44136 or Ring1 == 144136) and (Ring2 == 44136 or Ring2 == 144136) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7452(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local order1 = srcUser:getEquipLv(5)
  local order2 = srcUser:getEquipLv(6)
  local a = 0
  local b = 0
  local c = 1
  if (Ring1 == 44137 or Ring1 == 144137) and 0 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.03
  elseif (Ring1 == 44137 or Ring1 == 144137) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.06
  elseif (Ring1 == 44137 or Ring1 == 144137) and 15 <= RefineLv1 then
    a = 0.09
  end
  if (Ring2 == 44137 or Ring2 == 144137) and 0 <= RefineLv2 and RefineLv2 < 12 then
    b = 0.03
  elseif (Ring2 == 44137 or Ring2 == 144137) and 12 <= RefineLv2 and RefineLv2 < 15 then
    b = 0.06
  elseif (Ring2 == 44137 or Ring2 == 144137) and 15 <= RefineLv2 then
    b = 0.09
  end
  if (Ring1 == 44137 or Ring1 == 144137) and (Ring2 == 44137 or Ring2 == 144137) then
    c = 2
  end
  local A = (a + b) / c
  return A
end

function CommonFun.calcBuff_7460(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = targetUser:GetProperty("Vit")
  local skilllv = srcUser:GetLernedSkillLevel(106526)
  local A = math.floor(Attr / (a * (11 - skilllv))) * b / 100
  return A
end

function CommonFun.calcBuff_7470(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser:HasBuffID(157600) or targetUser:HasBuffID(157601) or targetUser:HasBuffID(157602) or targetUser:HasBuffID(157610) or targetUser:HasBuffID(157611) or targetUser:HasBuffID(157612) or targetUser:HasBuffID(157620) or targetUser:HasBuffID(157621) or targetUser:HasBuffID(157622) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_7480(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxSp = srcUser:GetProperty("MaxSp")
  local A = math.min(math.floor(MaxSp / 1500) * 0.01 - 0.3, 0)
  return A
end

function CommonFun.calcBuff_7490(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(157600) or srcUser:HasBuffID(157610) or srcUser:HasBuffID(157620) then
    A = a
  else
    A = b
  end
  return A
end

function CommonFun.calcBuff_7491(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(157601) or srcUser:HasBuffID(157611) or srcUser:HasBuffID(157621) then
    A = a
  else
    A = b
  end
  return A
end

function CommonFun.calcBuff_7492(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(157602) or srcUser:HasBuffID(157612) or srcUser:HasBuffID(157622) then
    A = a
  else
    A = b
  end
  return A
end

function CommonFun.calcBuff_7500(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1476)
  local A = skilllv_1 * a + b
  if skilllv_1 <= 10 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_7510(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local lvValue = srcUser.BaseLv
  local A = a * (lvValue - 75)
  return A
end

function CommonFun.calcBuff_7520(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hasbuff = 0
  if targetUser:HasBuffID(c) then
    Hasbuff = 1
  end
  local ForceStateDef = targetUser:GetProperty("ForceStateDef")
  local A = (a + b * Hasbuff) * (1 - math.min(ForceStateDef, 0.8))
  return A
end

function CommonFun.calcBuff_7521(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hasbuff = 0
  if srcUser:HasBuffID(c) then
    Hasbuff = 1
  end
  local ForceStateDef = targetUser:GetProperty("ForceStateDef")
  local A = (a + b * Hasbuff) * (1 - math.min(ForceStateDef, 0.8))
  return A
end

function CommonFun.calcBuff_7530(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local ForceStateDef = targetUser:GetProperty("ForceStateDef")
  local A = (lv * a + b) * (1 - math.min(ForceStateDef, 0.8))
  return A
end

function CommonFun.calcBuff_7540(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local ForceStateDef = targetUser:GetProperty("ForceStateDef")
  local A = (lv * a + b) * (1 - math.min(ForceStateDef, 0.8))
  if targetUser:HasBuffID(160000) or targetUser.boss == true or targetUser.mini == true then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_7550(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Value = srcUser:GetGemValue(c)
  local ForceStateDef = targetUser:GetProperty("ForceStateDef")
  local A = (lv * a + b + Value / 1000) * (1 - math.min(ForceStateDef, 0.8))
  return A
end

function CommonFun.calcBuff_7560(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetRunePoint(c)
  local ForceStateDef = targetUser:GetProperty("ForceStateDef")
  local A = (lv * a + b + Num * d) * (1 - math.min(ForceStateDef, 0.8))
  return A
end

function CommonFun.calcBuff_7570(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetBuffLayer(177000)
  local A = math.floor(Num / 10) * 0.02
  return A
end

function CommonFun.calcBuff_7580(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:GetNpcID() == 320000 then
    A = b
  else
    A = a
  end
  return A
end

function CommonFun.calcBuff_7590(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = -2022
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  return A
end

function CommonFun.calcBuff_7600(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  if targetUser:HasBuffID(158602) or targetUser:HasBuffID(158604) then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_7610(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(4)
  if 6 <= RefineLv and RefineLv < 10 then
    A = d + a
  elseif 10 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_7620(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local aa = 0
  local bb = 0
  local cc = 1
  if (Ring1 == a or Ring1 == b) and 0 <= RefineLv1 and RefineLv1 < 6 then
    aa = 0
  elseif (Ring1 == a or Ring1 == b) and 6 <= RefineLv1 and RefineLv1 < 10 then
    aa = c
  elseif (Ring1 == a or Ring1 == b) and 10 <= RefineLv1 then
    aa = c + d
  end
  if (Ring2 == a or Ring2 == b) and 0 <= RefineLv2 and RefineLv2 < 6 then
    bb = 0
  elseif (Ring2 == a or Ring2 == b) and 6 <= RefineLv2 and RefineLv2 < 10 then
    bb = c
  elseif (Ring2 == a or Ring2 == b) and 10 <= RefineLv2 then
    bb = c + d
  end
  if (Ring1 == a or Ring1 == b) and (Ring2 == a or Ring2 == b) then
    cc = 2
  end
  local A = (aa + bb) / cc
  return A
end

function CommonFun.calcBuff_7621(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local aa = 0
  local bb = 0
  local cc = 1
  if (Ring1 == a or Ring1 == b) and 0 <= RefineLv1 and RefineLv1 < 12 then
    aa = 0
  elseif (Ring1 == a or Ring1 == b) and 12 <= RefineLv1 and RefineLv1 < 15 then
    aa = c
  elseif (Ring1 == a or Ring1 == b) and 15 <= RefineLv1 then
    aa = c + d
  end
  if (Ring2 == a or Ring2 == b) and 0 <= RefineLv2 and RefineLv2 < 12 then
    bb = 0
  elseif (Ring2 == a or Ring2 == b) and 12 <= RefineLv2 and RefineLv2 < 15 then
    bb = c
  elseif (Ring2 == a or Ring2 == b) and 15 <= RefineLv2 then
    bb = c + d
  end
  if (Ring1 == a or Ring1 == b) and (Ring2 == a or Ring2 == b) then
    cc = 2
  end
  local A = (aa + bb) / cc
  return A
end

function CommonFun.calcBuff_7622(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local Ring2 = srcUser:GetEquipedID(6)
  local RefineLv2 = srcUser:GetEquipedRefineLv(6)
  local aa = 0
  local bb = 0
  local cc = 1
  if (Ring1 == a or Ring1 == b) and 0 <= RefineLv1 and RefineLv1 < 8 then
    aa = 0
  elseif (Ring1 == a or Ring1 == b) and 8 <= RefineLv1 and RefineLv1 < 12 then
    aa = c
  elseif (Ring1 == a or Ring1 == b) and 12 <= RefineLv1 then
    aa = c + d
  end
  if (Ring2 == a or Ring2 == b) and 0 <= RefineLv2 and RefineLv2 < 8 then
    bb = 0
  elseif (Ring2 == a or Ring2 == b) and 8 <= RefineLv2 and RefineLv2 < 12 then
    bb = c
  elseif (Ring2 == a or Ring2 == b) and 12 <= RefineLv2 then
    bb = c + d
  end
  if (Ring1 == a or Ring1 == b) and (Ring2 == a or Ring2 == b) then
    cc = 2
  end
  local A = (aa + bb) / cc
  return A
end

function CommonFun.calcBuff_7630(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  local Int = srcUser:GetProperty("Int")
  local Dex = srcUser:GetProperty("Dex")
  local Agi = srcUser:GetProperty("Agi")
  local Vit = srcUser:GetProperty("Vit")
  local Luk = srcUser:GetProperty("Luk")
  local A = (math.floor(Str / a) * b + math.floor(Dex / a) * b + math.floor(Int / a) * b + d) / 100
  return A
end

function CommonFun.calcBuff_7631(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  local Int = srcUser:GetProperty("Int")
  local Dex = srcUser:GetProperty("Dex")
  local Agi = srcUser:GetProperty("Agi")
  local Vit = srcUser:GetProperty("Vit")
  local Luk = srcUser:GetProperty("Luk")
  local A = (math.floor(Str / a) * b + math.floor(Dex / a) * b + math.floor(Vit / a) * b + d) / 100
  return A
end

function CommonFun.calcBuff_7640(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp = srcUser:GetProperty("Hp")
  local MaxSp = srcUser:GetProperty("MaxSp")
  local A = MaxSp / 10
  local HpPerRatio = Hp / MaxHp
  if HpPerRatio < 0.5 then
    A = MaxSp / 5
  end
  return A
end

function CommonFun.calcBuff_7650(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(55760) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_7660(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxSp = targetUser:GetProperty("MaxSp")
  local A = -MaxSp / 200
  if srcUser:HasBuffID(90003034) then
    A = -MaxSp / 100 + A
  end
  return A
end

function CommonFun.calcBuff_7670(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local HpM = targetUser:GetProperty("Hp")
  local A = -HpM / 100
  if srcUser:HasBuffID(90003044) then
    A = -HpM / 50 + A
  end
  return A
end

function CommonFun.calcBuff_7680(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 1
  if srcUser:HasBuffID(90003094) then
    A = 2
  end
  return A
end

function CommonFun.calcBuff_7681(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 3
  if srcUser:HasBuffID(90003154) then
    A = 5
  end
  return A
end

function CommonFun.calcBuff_7690(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(90003164) and srcUser:InMoveStatus() == true then
    A = 0.3
  end
  return A
end

function CommonFun.calcBuff_7700(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local IBaseLv = srcUser.BaseLv
  local A = math.max((IBaseLv - 120) * a, 0)
  return A
end

function CommonFun.calcBuff_7701(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = a
  local IBaseLv = srcUser.BaseLv
  if 120 <= IBaseLv and IBaseLv < 130 then
    A = A + b
  elseif 130 <= IBaseLv and IBaseLv < 150 then
    A = A + b + c
  elseif 150 <= IBaseLv then
    A = A + b + c + d
  end
  return A
end

function CommonFun.calcBuff_7702(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = a
  local IBaseLv = srcUser.BaseLv
  if 125 <= IBaseLv and IBaseLv < 140 then
    A = A + b
  elseif 140 <= IBaseLv then
    A = A + b + c
  end
  return A
end

function CommonFun.calcBuff_7703(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = a
  local IBaseLv = srcUser.BaseLv
  if 160 <= IBaseLv then
    A = A + b
  end
  return A
end

function CommonFun.calcBuff_7710(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local Num = srcUser:GetMapTeammateNum()
  local skilllv = srcUser:GetLernedSkillLevel(2405)
  local Value_Atk = srcUser:GetGemValue(193051)
  local Value_MaxHp = srcUser:GetGemValue(193052)
  A = Num * skilllv * a + Value_Atk / 1000 * Num * b + Value_MaxHp / 1000 * Num * c
  return A
end

function CommonFun.calcBuff_7711(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Profession = targetUser:GetProfressionID()
  local A = 100
  if Profession == 193 or Profession == 194 or Profession == 195 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_7720(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Luk = srcUser:GetProperty("Luk")
  local CriDamPer = srcUser:GetProperty("CriDamPer")
  local CriDefPer = targetUser:GetProperty("CriDefPer")
  local DamSpike = srcUser:GetProperty("DamSpike")
  local RefineDamReduc = targetUser:GetProperty("RefineDamReduc")
  local DamIncrease = srcUser:GetProperty("DamIncrease")
  local skilllv = srcUser:GetLernedSkillLevel(2428)
  local Value = srcUser:GetGemValue(193121)
  local A = -(Luk * (1.5 + CriDamPer - CriDefPer)) * skilllv * a * (1 + Value / 100000)
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
    A = -1
  end
  if targetUser:DamageAlways1() then
    A = -1
  end
  if 0 < A then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_7730(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = srcUser:GetProperty("Hp")
  local Hp2 = targetUser:GetProperty("Hp")
  local skilllv = srcUser:GetLernedSkillLevel(2426)
  local Value = srcUser:GetGemValue(193001)
  local A = 0
  if a == 1 and b == 0 then
    A = -Hp * skilllv * c
  end
  if a == 0 and b == 1 then
    A = -Hp2 * skilllv * c * (1 + Value / 100000)
  end
  if targetUser:GetNpcID() ~= 0 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_7740(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local AddNum = 0
  local AddTime = 0
  if srcUser:HasBuffID(21930010) then
    AddNum = 1
  end
  if srcUser:HasBuffID(21930020) then
    AddTime = 1
  end
  local StarNum = srcUser:GetBuffLayer(136190)
  if a == 1 and b == 0 then
    A = 1000 / (StarNum + AddNum)
  end
  if a == 0 and b == 1 then
    A = (StarNum + AddNum) * (StarNum + AddTime)
  end
  return A
end

function CommonFun.calcBuff_7750(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local Pudu = targetUser:GetBuffLayer(20182)
  local Xindu = targetUser:GetBuffLayer(116013)
  local MaxHp = targetUser:GetProperty("MaxHp")
  A = (Pudu * 0.1 + Xindu * 0.25) * MaxHp
  return -A
end

function CommonFun.calcBuff_7760(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local isSun = 0
  local isMoon = 0
  if srcUser:GetSunMark(targetUser) then
    isSun = 1
  end
  if srcUser:GetMoonMark(targetUser) then
    isMoon = 1
  end
  local A = isSun * a + isMoon * b
  return A
end

function CommonFun.calcBuff_7770(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local MaxSp = targetUser:GetProperty("MaxSp")
  local skilllv_hp = srcUser:GetLernedSkillLevel(2407)
  local skilllv_sp = srcUser:GetLernedSkillLevel(2406)
  local Num = srcUser:GetRunePoint(193013)
  local Value_happy = srcUser:GetGemValue(193161)
  local Value_peace = srcUser:GetGemValue(193162)
  local A = MaxHp * skilllv_hp * a * (1 + Value_peace / 100000) + (MaxSp * skilllv_sp * b + MaxSp * skilllv_sp * c * Num) * (1 + Value_happy / 100000)
  return A
end

function CommonFun.calcBuff_7780(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local Value = srcUser:GetGemValue(193032)
  if srcUser:HasBuffID(136070) and srcUser:HasBuffID(136071) and srcUser:HasBuffID(136072) and srcUser:HasBuffID(136073) then
    A = Value / 100000
  end
  return A
end

function CommonFun.calcBuff_7790(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(2)
  if 6 <= RefineLv and RefineLv < 12 then
    A = d + a
  elseif 12 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_7792(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(4)
  if 8 <= RefineLv and RefineLv < 12 then
    A = d + a
  elseif 12 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_7793(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(1)
  if 6 <= RefineLv and RefineLv < 12 then
    A = d + a
  elseif 12 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_7794(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = d
  local RefineLv = srcUser:GetEquipedRefineLv(3)
  if 6 <= RefineLv and RefineLv < 12 then
    A = d + a
  elseif 12 <= RefineLv and RefineLv < 15 then
    A = d + a + b
  elseif 15 <= RefineLv then
    A = d + a + b + c
  end
  return A
end

function CommonFun.calcBuff_7800(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(136100) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_7810(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(2533)
  local Int = srcUser:GetProperty("Int")
  local BeHealEncPer2 = targetUser:GetProperty("BeHealEncPer")
  local HealEncPer = srcUser:GetProperty("HealEncPer")
  local HolyAtk = srcUser:GetProperty("HolyAtk")
  local MAtk = srcUser:GetProperty("MAtk")
  local MAtkPer = srcUser:GetProperty("MAtkPer")
  local A = (Int * (50 + skilllv * 10) + MAtk * (1 + MAtkPer) * (1 + skilllv * 0.1)) * (1 + HealEncPer) * (1 + BeHealEncPer2) * (1 + HolyAtk) * a
  local mapid, maptype = srcUser:GetMapInfo()
  if maptype == 2 or maptype == 4 then
    A = A * 4
  end
  return A
end

function CommonFun.calcBuff_7820(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(2539)
  local MDamSpike = srcUser:GetProperty("MDamSpike")
  local A = MDamSpike * skilllv_1 * 0.02
  return A
end

function CommonFun.calcBuff_7821(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(a)
  local A = skilllv_1 * b + c
  return A
end

function CommonFun.calcBuff_7830(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(a)
  local A = c
  if b <= skilllv then
    A = d
  end
  return A
end

function CommonFun.calcBuff_7840(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local layer = srcUser:GetBuffLayer(187560)
  local Maxhp = targetUser:GetProperty("MaxHp")
  local A = layer * Maxhp * 0.001
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  return -A
end

function CommonFun.calcBuff_7850(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local layer = srcUser:GetBuffLayer(187570)
  local Maxhp = srcUser:GetProperty("MaxHp")
  local A = layer * Maxhp * 0.5
  local AttrFunction = srcUser:GetProperty("AttrFunction")
  local bitfunc = CommonFun.getBits(AttrFunction)
  if (targetUser.boss or targetUser.mini or targetUser.changelinepunish) and (targetUser.zoneType == 1 or targetUser.zoneType == 22) and targetUser.noPunishBoss == false and bitfunc[CommonFun.AttrFunction.JustInViceZone] == 1 and targetUser.isBossFromBranch == false then
    A = 0
  end
  if CommonFun.checkAttrFunctionMiss(targetUser, srcUser) then
    A = 0
  end
  if targetUser.boss and targetUser.zoneType == 22 and CommonFun.CheckStormBossMiss(targetUser, srcUser) then
    A = 0
  end
  return -A
end

function CommonFun.calcBuff_7860(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local layer = srcUser:GetBuffLayer(187580)
  local A = layer * 0.1
  return A
end

function CommonFun.calcBuff_7870(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(2502)
  local A = 10 * a
  return A
end

function CommonFun.calcBuff_7871(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(2502)
  local Value = srcUser:GetGemValue(201151)
  local A = 0
  if skilllv < 7 then
    A = Value / 1000
  else
    A = Value / 1000 * 2
  end
  return A
end

function CommonFun.calcBuff_7880(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local NoStiff = targetUser:GetProperty("NoStiff")
  local Str2 = targetUser:GetProperty("Str")
  local A = 0
  if targetUser:GetNpcID() == 0 and NoStiff == 0 then
    A = (Str2 * 0.01 + 3) * a
  elseif targetUser:GetNpcID() == 0 and NoStiff == 1 then
    A = Str2 * 0.01 * a
  end
  return A
end

function CommonFun.calcBuff_7890(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MoveSpd = srcUser:GetProperty("MoveSpd")
  local skilllv = srcUser:GetLernedSkillLevel(2570)
  local A = (MoveSpd - 1) * skilllv * 50
  if A < 0 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_7900(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetBuffLayer(a)
  local Num2 = b
  local A = Num - Num2
  return A
end

function CommonFun.calcBuff_7901(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetBuffLayer(a)
  local Num2 = b
  local A = Num - Num2
  if srcUser:HasBuffID(90004744) and 1 < Num then
    A = 1
  end
  return A
end

function CommonFun.calcBuff_7910(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(56010) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_7920(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(56080) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_7930(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  local skilllv = srcUser:GetLernedSkillLevel(a)
  local A = Str * skilllv * b + c
  return A
end

function CommonFun.calcBuff_7940(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local A = MaxHp * a
  return A
end

function CommonFun.calcBuff_7950(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = srcUser:GetProperty(CommonFun.GetAttrName(c))
  local A = math.floor(Attr / a) * b * lv + d
  return A
end

function CommonFun.calcBuff_7960(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local Num = targetUser:GetBuffLayer(a)
  if b <= Num then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_7970(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(2569)
  local A = 10 * skilllv * skilllv * 0.5
  return A
end

function CommonFun.calcBuff_7980(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = targetUser:GetProperty("Hp")
  local MaxHp = targetUser:GetProperty("MaxHp")
  local A = MaxHp / 2
  if Hp <= MaxHp / 2 then
    A = Hp - 1
  end
  return -A
end

function CommonFun.calcBuff_7990(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(199)
  local Cri = srcUser:GetProperty("Cri")
  local A = Cri * skilllv * a
  return A
end

function CommonFun.calcBuff_7991(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_fs = srcUser:GetLernedSkillLevel(88)
  local skilllv_xd = srcUser:GetLernedSkillLevel(1919)
  local A = math.max(skilllv_fs, skilllv_xd) * 5
  return A
end

function CommonFun.calcBuff_8000(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 10
  local RefineLv1 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(22810) then
    A = A + RefineLv1
  end
  return A
end

function CommonFun.calcBuff_8010(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 100
  local RefineLv1 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(22810) and 15 <= RefineLv1 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_8011(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local RefineLv1 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(22810) and 15 <= RefineLv1 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_8012(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 1
  local RefineLv1 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(22810) and 15 <= RefineLv1 then
    A = 5
  end
  if srcUser:HasBuffID(90004754) then
    A = A + 1
  end
  return A
end

function CommonFun.calcBuff_8020(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local RefineLv1 = srcUser:GetEquipedRefineLv(7)
  if 10 <= RefineLv1 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_8021(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local RefineLv1 = srcUser:GetEquipedRefineLv(7)
  if 15 <= RefineLv1 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_8022(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 20
  local RefineLv1 = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(22830) then
    A = A + RefineLv1 * 2
  end
  return A
end

function CommonFun.calcBuff_8030(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Dex = srcUser:GetProperty("Dex")
  local A = 0
  if 360 <= Dex then
    A = 0.03
  end
  return A
end

function CommonFun.calcBuff_8031(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 5
  local Str = srcUser:GetProperty("Str")
  if 360 <= Str then
    A = 10
  end
  return A
end

function CommonFun.calcBuff_8032(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local profressionID = srcUser:GetProfressionID()
  local A = 0
  if profressionID == 92 or profressionID == 93 or profressionID == 94 or profressionID == 95 or profressionID == 163 or profressionID == 164 or profressionID == 165 or profressionID == 685 then
    A = 10
  end
  return A
end

function CommonFun.calcBuff_8040(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local MoveSpdS = srcUser:GetProperty("MoveSpd")
  local MoveSpdT = targetUser:GetProperty("MoveSpd")
  if MoveSpdS < MoveSpdT then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_8050(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Odds1 = 0
  local Odds2 = 0
  local Hp = targetUser:GetProperty("Hp")
  local MaxHp = targetUser:GetProperty("MaxHp")
  local Num = math.min(targetUser:GetBuffLayer(137000), 5)
  local Fifth = 0
  if srcUser:HasBuffID(90004814) then
    Fifth = Fifth + 0.05
  end
  if targetUser:GetNpcID() == 0 and Hp <= MaxHp * (0.1 + 0.03 * Num + Fifth) then
    Odds1 = 100
  end
  if targetUser:GetNpcID() == 0 and Hp > MaxHp * (0.1 + 0.03 * Num + Fifth) then
    Odds2 = 100
  end
  local KillHp = -MaxHp * (0.1 + 0.03 * Num + Fifth)
  local A = Odds1 * a + Odds2 * b + KillHp * c
  return A
end

function CommonFun.calcBuff_8060(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Str = srcUser:GetProperty("Str")
  local Int = srcUser:GetProperty("Int")
  local Dex = srcUser:GetProperty("Dex")
  local Agi = srcUser:GetProperty("Agi")
  local Vit = srcUser:GetProperty("Vit")
  local Luk = srcUser:GetProperty("Luk")
  local Fullcapacity = math.max(math.min(Str, Int, Dex, Agi, Vit, Luk), 0)
  local A = (math.floor(Fullcapacity / a) * b + d) / 100
  return A
end

function CommonFun.calcBuff_8070(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Hp = srcUser:GetProperty("Hp")
  local HpRatio = Hp / MaxHp
  local A = 0
  if a >= HpRatio then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_8080(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Sp = targetUser:GetProperty("Sp")
  local A = -a / 100 * Sp
  return A
end

function CommonFun.calcBuff_8090(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local mapid, maptype = srcUser:GetMapInfo()
  local A = MaxHp * a
  return A
end

function CommonFun.calcBuff_8091(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local mapid, maptype = targetUser:GetMapInfo()
  local A = MaxHp * a
  return A
end

function CommonFun.calcBuff_8092(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local mapid, maptype = srcUser:GetMapInfo()
  local Extra = 0
  if srcUser:HasBuffID(c) then
    Extra = b
  end
  local A = MaxHp * (a + Extra)
  return A
end

function CommonFun.calcBuff_8100(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Int = srcUser:GetProperty("Int")
  local mapid, maptype = srcUser:GetMapInfo()
  local A = MaxHp * math.min(math.floor(Int / 20) / 100, 0.3)
  return A
end

function CommonFun.calcBuff_8110(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(90003444) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_8120(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Luk1 = srcUser:GetProperty("Luk")
  local Luk2 = targetUser:GetProperty("Luk")
  local A = math.max((Luk1 - Luk2) * 0.1, 0) + a
  if a == 30 then
    local GemValue = srcUser:GetGemValue(205121)
    A = A + GemValue / 1000
  end
  if targetUser:GetNpcID() ~= 0 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_8130(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv_1 = srcUser:GetEquipedRefineLv(1)
  local RefineLv_2 = srcUser:GetEquipedRefineLv(2)
  local RefineLv_3 = srcUser:GetEquipedRefineLv(3)
  local RefineLv_4 = srcUser:GetEquipedRefineLv(4)
  local RefineLv_5 = srcUser:GetEquipedRefineLv(5)
  local RefineLv_6 = srcUser:GetEquipedRefineLv(6)
  local RefineLv_7 = srcUser:GetEquipedRefineLv(7)
  local skilllv = srcUser:GetLernedSkillLevel(2658)
  local A = 0
  if 0 < a and b == 0 then
    A = (math.max(RefineLv_5 - 15, 0) + math.max(RefineLv_6 - 15, 0) + math.max(RefineLv_7 - 15, 0)) * skilllv * 0.01
  elseif a == 0 and 0 < b then
    A = (math.max(RefineLv_1 - 15, 0) + math.max(RefineLv_2 - 15, 0) + math.max(RefineLv_3 - 15, 0) + math.max(RefineLv_4 - 15, 0)) * skilllv * 0.01
  end
  return A
end

function CommonFun.calcBuff_8140(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv_1 = srcUser:GetEquipedRefineLv(5)
  local RefineLv_2 = srcUser:GetEquipedRefineLv(6)
  local RefineLv_3 = srcUser:GetEquipedRefineLv(7)
  local Refine = srcUser:GetOriginalAttr("Refine")
  local AtkPer = srcUser:GetProperty("AtkPer")
  local A = Refine
  if 17 <= RefineLv_1 and 17 <= RefineLv_2 and 17 <= RefineLv_3 then
    A = Refine * (1 + math.max(AtkPer, 0))
  end
  return A
end

function CommonFun.calcBuff_8150(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(2659)
  local A = a * (1 + skilllv * 0.1)
  return A
end

function CommonFun.calcBuff_8160(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = b
  if srcUser:HasBuffID(a) then
    A = c
  end
  return A
end

function CommonFun.calcBuff_8161(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = b
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  if srcUser:HasBuffID(a) then
    A = A + c * RefineLv
  end
  return A
end

function CommonFun.calcBuff_8162(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = b
  local Num1 = srcUser:GetBuffLayer(a)
  if srcUser:HasBuffID(a) then
    A = A + c * Num1
  end
  return A
end

function CommonFun.calcBuff_8170(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1110)
  local A = 10 * skilllv_1 + 20
  if srcUser:HasBuffID(90004314) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_8180(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local ShadowNum = srcUser:GetPetCount("ShadowNpc")
  if srcUser:HasBuffID(90004345) then
    A = ShadowNum * 0.05
  end
  return A
end

function CommonFun.calcBuff_8190(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 10
  local ShadowNum = srcUser:GetPetCount("ShadowNpc")
  if srcUser:HasBuffID(90004354) then
    A = A + ShadowNum * 5
  end
  return A
end

function CommonFun.calcBuff_8200(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1231)
  local A = 1 * skilllv_1 + 5
  if srcUser:HasBuffID(90004504) then
    A = A + 2
  end
  return A
end

function CommonFun.calcBuff_8210(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(2073)
  local A = 0.2 * skilllv_1 + 1
  if srcUser:HasBuffID(90004624) then
    A = A + 0.5
  end
  return A
end

function CommonFun.calcBuff_8220(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(2678)
  local skilllv_2 = srcUser:GetLernedSkillLevel(2682)
  local A = damage * skilllv_1 * 0.01 * a + damage * skilllv_1 * 0.01 * skilllv_2 * 0.1 * b
  return A
end

function CommonFun.calcBuff_8230(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if (srcUser:HasBuffID(57260) or srcUser:HasBuffID(57270)) and a == 1 then
    A = 100
  elseif (srcUser:HasBuffID(57260) or srcUser:HasBuffID(57270)) and b == 1 then
    A = -0.1
  elseif srcUser:HasBuffID(57270) and c == 1 then
    A = -0.1
  end
  return A
end

function CommonFun.calcBuff_8240(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(3312)
  local A = 1 * skilllv_1 + 5
  if srcUser:HasBuffID(90004584) then
    A = A + 15
  end
  return A
end

function CommonFun.calcBuff_8250(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(2701)
  local Value = srcUser:GetGemValue(207121)
  local A = skilllv * 2 + 1 + Value / 1000
  if 7 <= skilllv and srcUser:HasBuffID(137593) then
    A = A + 10
  end
  return A
end

function CommonFun.calcBuff_8251(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(2701)
  local A = skilllv * a + b
  if 7 <= skilllv and srcUser:HasBuffID(137593) then
    A = A + 10
  end
  return A
end

function CommonFun.calcBuff_8260(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil then
    return 0
  end
  local equip = srcUser:getCurOperEquip()
  if equip.id ~= 44051 and equip.id ~= 144051 then
    return 0
  end
  local result = 0
  if equip.refinelv >= 10 and equip.refinelv < 15 then
    result = equip.refinelv / 100
  elseif equip.refinelv >= 15 then
    result = equip.refinelv / 100 + 0.05
  end
  return result
end

function CommonFun.calcBuff_8261(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local order1 = srcUser:getEquipLv(5)
  local a = 0
  if (Ring1 == 44047 or Ring1 == 144047) and 5 <= RefineLv1 and RefineLv1 < 10 then
    a = 100
  elseif (Ring1 == 44047 or Ring1 == 144047) and 10 <= RefineLv1 and RefineLv1 < 15 then
    a = 200
  elseif (Ring1 == 44047 or Ring1 == 144047) and 15 <= RefineLv1 then
    a = 400
  else
    a = 0
  end
  local A = a
  return A
end

function CommonFun.calcBuff_8262(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local order1 = srcUser:getEquipLv(5)
  local a = 0
  if (Ring1 == 44048 or Ring1 == 144048) and 5 <= RefineLv1 and RefineLv1 < 10 then
    a = -0.05
  elseif (Ring1 == 44048 or Ring1 == 144048) and 10 <= RefineLv1 and RefineLv1 < 15 then
    a = -0.1
  elseif (Ring1 == 44048 or Ring1 == 144048) and 15 <= RefineLv1 then
    a = -0.3
  else
    a = 0
  end
  local A = a
  return A
end

function CommonFun.calcBuff_8263(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local order1 = srcUser:getEquipLv(5)
  local a = 0
  if (Ring1 == 44054 or Ring1 == 144054) and 8 <= RefineLv1 and RefineLv1 < 12 then
    a = 0.03
  elseif (Ring1 == 44054 or Ring1 == 144054) and 12 <= RefineLv1 and RefineLv1 < 15 then
    a = 0.09
  elseif (Ring1 == 44054 or Ring1 == 144054) and 15 <= RefineLv1 then
    a = 0.15
  else
    a = 0
  end
  local A = a
  return A
end

function CommonFun.calcBuff_8270(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local order1 = srcUser:getEquipLv(5)
  local A = 0
  if (Ring1 == a or Ring1 == b) and 12 <= RefineLv1 then
    A = d
  end
  return A
end

function CommonFun.calcBuff_8271(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local order1 = srcUser:getEquipLv(5)
  local A = 0
  if (Ring1 == a or Ring1 == b) and 15 <= RefineLv1 then
    A = d
  end
  return A
end

function CommonFun.calcBuff_8272(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local order1 = srcUser:getEquipLv(5)
  local A = 0
  if (Ring1 == a or Ring1 == b) and 10 <= RefineLv1 then
    A = d
  end
  return A
end

function CommonFun.calcBuff_8273(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local order1 = srcUser:getEquipLv(5)
  local A = 0
  if (Ring1 == a or Ring1 == b) and 8 <= RefineLv1 then
    A = d
  end
  return A
end

function CommonFun.calcBuff_8274(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local order1 = srcUser:getEquipLv(5)
  local A = 0
  if (Ring1 == a or Ring1 == b) and 5 <= RefineLv1 then
    A = d
  end
  return A
end

function CommonFun.calcBuff_8280(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local order1 = srcUser:getEquipLv(5)
  local A = 0
  if (Ring1 == a or Ring1 == b) and 0 <= RefineLv1 and RefineLv1 < 12 then
    A = 0
  elseif (Ring1 == a or Ring1 == b) and 12 <= RefineLv1 and RefineLv1 < 15 then
    A = c
  elseif (Ring1 == a or Ring1 == b) and 15 <= RefineLv1 then
    A = c + d
  end
  return A
end

function CommonFun.calcBuff_8281(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local order1 = srcUser:getEquipLv(5)
  local A = 0
  if (Ring1 == a or Ring1 == b) and 0 <= RefineLv1 and RefineLv1 < 10 then
    A = 0
  elseif (Ring1 == a or Ring1 == b) and 10 <= RefineLv1 and RefineLv1 < 15 then
    A = c
  elseif (Ring1 == a or Ring1 == b) and 15 <= RefineLv1 then
    A = c + d
  end
  return A
end

function CommonFun.calcBuff_8282(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local order1 = srcUser:getEquipLv(5)
  local A = 0
  if (Ring1 == a or Ring1 == b) and 0 <= RefineLv1 and RefineLv1 < 5 then
    A = 0
  elseif (Ring1 == a or Ring1 == b) and 5 <= RefineLv1 and RefineLv1 < 15 then
    A = c
  elseif (Ring1 == a or Ring1 == b) and 15 <= RefineLv1 then
    A = c + d
  end
  return A
end

function CommonFun.calcBuff_8283(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  local order1 = srcUser:getEquipLv(5)
  local A = 0
  if (Ring1 == a or Ring1 == b) and 0 <= RefineLv1 and RefineLv1 < 8 then
    A = 0
  elseif (Ring1 == a or Ring1 == b) and 8 <= RefineLv1 and RefineLv1 < 12 then
    A = c
  elseif (Ring1 == a or Ring1 == b) and 12 <= RefineLv1 then
    A = c + d
  end
  return A
end

function CommonFun.calcBuff_8300(srcUser, targetUser, a, b, c, d, lv, damage, param)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local equip = srcUser:getCurOperEquip()
  if equip.id ~= a and equip.id ~= b then
    return 0
  end
  local A = 0
  if 0 <= equip.refinelv and equip.refinelv < 8 then
    A = c
  elseif equip.refinelv >= 8 and equip.refinelv < 12 then
    A = c + d
  elseif equip.refinelv >= 12 and equip.refinelv < 15 then
    A = c + d + param.e
  elseif equip.refinelv >= 15 then
    A = c + d + param.e + param.f
  end
  return A
end

function CommonFun.calcBuff_8310(srcUser, targetUser, a, b, c, d, lv, damage, param)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local equip = srcUser:getCurOperEquip()
  if equip.id ~= a and equip.id ~= b then
    return 0
  end
  local A = 0
  if 0 <= equip.refinelv and equip.refinelv < 5 then
    A = c
  elseif equip.refinelv >= 5 and equip.refinelv < 10 then
    A = c + d
  elseif equip.refinelv >= 10 and equip.refinelv < 15 then
    A = c + d + param.e
  elseif equip.refinelv >= 15 then
    A = c + d + param.e + param.f
  end
  return A
end

function CommonFun.calcBuff_8320(srcUser, targetUser, a, b, c, d, lv, damage, param)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Ring1 = srcUser:GetEquipedID(5)
  local RefineLv1 = srcUser:GetEquipedRefineLv(5)
  if Ring1 ~= a and Ring1 ~= b then
    return 0
  end
  local A = c
  if d < RefineLv1 then
    A = (RefineLv1 - d) * param.e + A
  end
  return A
end

function CommonFun.calcBuff_8330(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Sp = targetUser:GetProperty("Sp")
  local A = -0.25 * Sp
  return A
end

function CommonFun.calcBuff_8340(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local mapid, maptype = srcUser:GetMapInfo()
  local A = math.min(math.floor(MaxHp / 5000) * 0.1 / 100, 0.15)
  return A
end

function CommonFun.calcBuff_8341(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local mapid, maptype = srcUser:GetMapInfo()
  local A = 0
  if 750000 <= MaxHp then
    A = math.min(math.floor((MaxHp - 750000) / 5000) * 0.1 / 100, 0.15)
  end
  return A
end

function CommonFun.calcBuff_8350(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local RefineLv = srcUser:GetEquipedRefineLv(8)
  if 6 <= RefineLv and RefineLv < 8 then
    A = a
  elseif 8 <= RefineLv and RefineLv < 10 then
    A = a + b
  elseif 10 <= RefineLv and RefineLv < 12 then
    A = a + b + c
  elseif 12 <= RefineLv then
    A = a + b + c + d
  end
  return A
end

function CommonFun.calcBuff_8360(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Numabnormal = targetUser:GetStatusNum()
  local A = Numabnormal * 15
  return A
end

function CommonFun.calcBuff_8370(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(2715)
  local A = 2 * skilllv_1 + 5
  if srcUser:HasBuffID(90004974) then
    A = A + 5
  end
  return A
end

function CommonFun.calcBuff_8380(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local Num1 = srcUser:GetBuffLayer(137710)
  local A = MaxHp * 0.1 * Num1
  return A
end

function CommonFun.calcBuff_8381(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Hp = srcUser:GetProperty("Hp")
  local A = -(Hp - 1)
  return A
end

function CommonFun.calcBuff_8382(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if a ~= 0 then
    A = damage
  elseif b ~= 0 then
    local skilllv_1 = srcUser:GetLernedSkillLevel(2742)
    A = damage / 4 * skilllv_1 * 0.1
  elseif c ~= 0 then
    local skilllv_2 = srcUser:GetLernedSkillLevel(2735)
    A = -damage * skilllv_2 * 0.05
  end
  if c ~= 0 then
    if targetUser:GetNpcID() == 30043 or targetUser:GetNpcID() == 280303 or targetUser:GetNpcID() == 56008 or targetUser:GetNpcID() == 56009 or targetUser:GetNpcID() == 56010 or targetUser:GetNpcID() == 56011 or targetUser:GetNpcID() == 56012 or targetUser:GetNpcID() == 56013 then
      A = -1
    end
    if targetUser:DamageAlways1() then
      A = -1
    end
  end
  return A
end

function CommonFun.calcBuff_8383(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local GemValue = srcUser:GetGemValue(208101)
  local A = -GemValue / 100000 * MaxHp
  local B = -GemValue / 100000
  A = CommonFun.calcBuff_6(srcUser, targetUser, B, 0, c, d, lv)
  return A
end

function CommonFun.calcBuff_8390(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local fushou = srcUser:GetEquipTypeByPos(1)
  local wuqi = srcUser:GetEquipTypeByPos(7)
  local skilllv = srcUser:GetLernedSkillLevel(2744)
  local LongNum = 0
  local ShortNum = 0
  if fushou == 180 and wuqi == 180 then
    LongNum = 2
  elseif fushou == 180 or wuqi == 180 then
    LongNum = 1
  end
  if fushou == 250 and wuqi == 250 then
    ShortNum = 2
  elseif fushou == 250 or wuqi == 250 then
    ShortNum = 1
  end
  local A = LongNum * (a * skilllv + c) + ShortNum * (b * skilllv + d)
  return A
end

function CommonFun.calcBuff_8400(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = srcUser:GetSuperpositionSkillNum()
  return A
end

function CommonFun.calcBuff_8410(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MoveSpd = srcUser:GetProperty("MoveSpd")
  local num = CommonFun.AccurateFloor((math.max(MoveSpd, 1) - 1) / 0.05)
  local A = math.min(num * 0.01, 0.1)
  return A
end

function CommonFun.calcBuff_8420(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = c
  if b < RefineLv then
    A = a + A
  end
  return A
end

function CommonFun.calcBuff_8430(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(2082)
  local CopyNum = srcUser:GetPetCount("CopyNpc")
  local A = CopyNum * skilllv * 0.04
  return A
end

function CommonFun.calcBuff_8440(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local MaxSp = targetUser:GetProperty("MaxSp")
  local skilllv_1 = srcUser:GetLernedSkillLevel(3407)
  local skilllv_2 = srcUser:GetLernedSkillLevel(3507)
  local skilllv = math.max(skilllv_1, skilllv_2)
  local A = MaxHp * skilllv * a + MaxSp * skilllv * b
  return A
end

function CommonFun.calcBuff_8450(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = targetUser:GetProperty("MaxHp")
  local num = targetUser:GetBuffLayer(177800)
  local A = MaxHp * num * 0.1
  return -A
end

function CommonFun.calcBuff_8460(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local A = MaxHp * damage * a
  return A
end

function CommonFun.calcBuff_8470(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv = srcUser:GetLernedSkillLevel(4214)
  local Luk = srcUser:GetProperty("Luk")
  local Dex = srcUser:GetProperty("Dex")
  local Vit2 = targetUser:GetProperty("Vit")
  local Rate2 = Vit2 / 8
  local Rate = math.min(skilllv * 3 + (Luk + Dex) / 16, 90) - math.min(Rate2, 50)
  if CommonFun.IsInRate(Rate, srcUser:GetRandom()) then
    local optionalPos = {
      CommonFun.EquipPos.EEQUIPPOS_SHIELD,
      CommonFun.EquipPos.EEQUIPPOS_ARMOUR,
      CommonFun.EquipPos.EEQUIPPOS_ROBE,
      CommonFun.EquipPos.EEQUIPPOS_SHOES,
      CommonFun.EquipPos.EEQUIPPOS_ACCESSORY1,
      CommonFun.EquipPos.EEQUIPPOS_ACCESSORY2
    }
    local validPos = {}
    for i = 1, #optionalPos do
      local pos = optionalPos[i]
      local equip = targetUser:getEquip(CommonFun.PackType.EPACKTYPE_SHADOWEQUIP, pos)
      if targetUser:IsShadowEquipForceOff(pos) == false and equip.id ~= 0 then
        table.insert(validPos, pos)
      end
    end
    local randomPos = 0
    if 0 < #validPos then
      local randomIndex = math.random(1, #validPos)
      randomPos = validPos[randomIndex]
    end
    return randomPos
  end
  return 0
end

function CommonFun.calcBuff_8480(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local SecretLandGemLv = srcUser:GetSecretLandGemLv(a)
  local A = 0
  A = SecretLandGemLv * b + math.max(SecretLandGemLv - 30, 0) * c + math.max(SecretLandGemLv - 60, 0) * d
  return A
end

function CommonFun.calcBuff_8481(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local SecretLandGemLv = srcUser:GetMasterSecretLandGemLv(a)
  local A = 0
  A = SecretLandGemLv * b + math.max(SecretLandGemLv - 30, 0) * c + math.max(SecretLandGemLv - 60, 0) * d
  return A
end

function CommonFun.calcBuff_8490(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local SecretLandGemLv = srcUser:GetSecretLandGemLv(a)
  local A = 0
  A = SecretLandGemLv * 100 + math.max(SecretLandGemLv - 30, 0) * 100 + math.max(SecretLandGemLv - 50, 0) * 100
  A = A + math.max(SecretLandGemLv - 60, 0) * 100 + math.max(SecretLandGemLv - 70, 0) * 200
  A = A + math.max(SecretLandGemLv - 80, 0) * 200 + math.max(SecretLandGemLv - 90, 0) * 400
  return A
end

function CommonFun.calcBuff_8500(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  if damage <= 1 then
    return 1
  end
  local SecretLandGemLv = srcUser:GetSecretLandGemLv(a)
  local A = damage * (SecretLandGemLv * b + math.max(SecretLandGemLv - 30, 0) * c + math.max(SecretLandGemLv - 60, 0) * d)
  local MaxHpM = srcUser:GetProperty("MaxHp")
  A = math.min(MaxHpM, A)
  return A
end

function CommonFun.calcBuff_8510(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Numabnormal = targetUser:GetStatusNum()
  local A = a
  if c < Numabnormal then
    A = A + b
  end
  return A
end

function CommonFun.calcBuff_8511(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Numabnormal = srcUser:GetStatusNum()
  local A = Numabnormal / 100
  return A
end

function CommonFun.calcBuff_8520(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local MaxSp = srcUser:GetProperty("MaxSp")
  local mapid, maptype = srcUser:GetMapInfo()
  local A = MaxHp * math.min(math.floor(MaxSp / 1000) / 100, 0.15)
  return A
end

function CommonFun.calcBuff_8530(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(a) then
    A = A + c
  end
  if srcUser:HasBuffID(b) then
    A = A + d
  end
  return A
end

function CommonFun.calcBuff_8531(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if srcUser:HasBuffID(a) and srcUser:HasBuffID(b) then
    A = c
  end
  return A
end

function CommonFun.calcBuff_8540(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local MaxHp = srcUser:GetProperty("MaxHp")
  local MaxSp = srcUser:GetProperty("MaxSp")
  local mapid, maptype = srcUser:GetMapInfo()
  local A = MaxHp * math.min(math.floor(MaxSp / 1000) / 100, 0.2)
  return A
end

function CommonFun.calcBuff_100010(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(5002)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1161)
  local A = 20 + skilllv_1 * 6 + skilllv_2 * 10
  return A
end

function CommonFun.calcBuff_100020(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(1163)
  local skilllv_2 = srcUser:GetLernedSkillLevel(5003)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local A = math.min(0.1, skilllv_1 * 0.02)
  if 10 <= RefineLv and 1 <= skilllv_1 then
    A = A + (RefineLv - 10) * 0.01
  end
  if 0 <= skilllv_2 then
    A = A * skilllv_2 * 0.05
  end
  return A
end

function CommonFun.calcBuff_100030(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = srcUser:GetProperty(CommonFun.GetAttrName(c))
  local RefineLv1 = srcUser:GetEquipedRefineLv(7)
  local skilllv_1 = srcUser:GetLernedSkillLevel(5102)
  local A = Attr * (b * lv) / a + d
  return A
end

function CommonFun.calcBuff_100040(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Attr = srcUser:GetProperty(CommonFun.GetAttrName(c))
  local RefineLv1 = srcUser:GetEquipedRefineLv(7)
  local skilllv_1 = srcUser:GetLernedSkillLevel(5102)
  local A = math.floor(Attr / a * 1000) * (b * lv) / 1000 + d
  return A
end

function CommonFun.calcBuff_100050(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(356)
  local skilllv_2 = srcUser:GetLernedSkillLevel(5402)
  local A = skilllv_1 * 4 + skilllv_2 * 2 + 10
  return A
end

function CommonFun.calcBuff_100060(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Luk = srcUser:GetProperty("Luk")
  local skilllv_1 = srcUser:GetLernedSkillLevel(5503)
  local skilllv_2 = srcUser:GetLernedSkillLevel(5553)
  local A = math.floor(Luk / 10) + skilllv_1 + skilllv_2
  return A
end

function CommonFun.calcBuff_100070(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local targetRace = targetUser.race
  local A = 0
  if targetRace == 3 or targetRace == 5 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_100080(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 5
  local wuqi = srcUser:GetEquipTypeByPos(7)
  local skilllv_1 = srcUser:GetLernedSkillLevel(6101)
  local Num2 = 0
  if wuqi == 250 then
    Num2 = skilllv_1
  end
  A = A + Num2
  return A
end

function CommonFun.calcBuff_100090(srcUser, targetUser, a, b, c, d, lv, damage)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local skilllv_1 = srcUser:GetLernedSkillLevel(6103)
  A = -damage * skilllv_1 * 0.025
  return A
end

function CommonFun.calcBuff_100100(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetRunePoint(c)
  local skill_lv = srcUser:GetLernedSkillLevel(5101)
  local A = skill_lv * a + b + Num * d
  return A
end

function CommonFun.calcBuff_100110(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local skill_lv1 = srcUser:GetLernedSkillLevel(a)
  local skill_lv2 = srcUser:GetLernedSkillLevel(b)
  local A = (skill_lv1 + skill_lv2) * c + d
  return A
end

function CommonFun.calcBuff_100120(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local m = 0
  if targetUser:GetNpcID() ~= 0 then
    m = 1
  end
  local skill_lv1 = srcUser:GetLernedSkillLevel(5401)
  local A = skill_lv1 * m * 20
  return A
end

function CommonFun.calcBuff_100130(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local skill_lv1 = srcUser:GetLernedSkillLevel(5902)
  local shengguang = 1
  if srcUser:HasBuffID(1009002) then
    shengguang = 3
  end
  local WeaponType = srcUser:GetEquipedWeaponType()
  if WeaponType == 220 then
    A = skill_lv1 * shengguang * 2
  end
  return A
end

function CommonFun.calcBuff_100140(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local skill_lv1 = srcUser:GetLernedSkillLevel(6101)
  local WeaponType = srcUser:GetEquipedWeaponType()
  if WeaponType == 250 and 1 <= skill_lv1 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_100150(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  if targetUser:HasBuffID(a) then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_100160(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local WeaponType = srcUser:GetEquipedWeaponType()
  if WeaponType == 220 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_100170(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local WeaponType = srcUser:GetEquipedWeaponType()
  if WeaponType == 190 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_100180(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local fromid = targetUser:GetBuffFromID(1007000)
  local guid = srcUser:GetGuid()
  local skilllv_1 = srcUser:GetLernedSkillLevel(5703)
  if fromid == guid and 1 <= skilllv_1 then
    A = 100
  end
  return A
end

function CommonFun.calcBuff_100190(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local skilllv_1 = srcUser:GetLernedSkillLevel(5702)
  A = skilllv_1 * 0.06
  return A
end

function CommonFun.calcBuff_100200(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 2500
  local skilllv_1 = srcUser:GetLernedSkillLevel(5600)
  local skilllv_2 = srcUser:GetLernedSkillLevel(5602)
  A = (2500 - skilllv_1 * 100) * (1 - skilllv_2 * 0.06)
  return A
end

function CommonFun.calcBuff_100210(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local Num = srcUser:GetRunePoint(c)
  local RefineLv = srcUser:GetEquipedRefineLv(7)
  local Ring1 = srcUser:GetEquipedID(7)
  local diary = 0
  local StateEffect = targetUser:GetProperty("StateEffect")
  local bits = CommonFun.getBits(StateEffect)
  if Ring1 == 63440 or Ring1 == 163440 or Ring1 == 63417 or Ring1 == 163417 then
    diary = RefineLv
  end
  local card = 0
  if srcUser:HasBuffID(53340) then
    card = 3
  end
  if (bits[CommonFun.StateEffect.Poison] == 1 or bits[CommonFun.StateEffect.Blood] == 1 or bits[CommonFun.StateEffect.Burn] == 1 or bits[CommonFun.StateEffect.Dizzy] == 1 or bits[CommonFun.StateEffect.Freeze] == 1 or bits[CommonFun.StateEffect.Stone] == 1 or bits[CommonFun.StateEffect.Sleep] == 1 or bits[CommonFun.StateEffect.Fear] == 1 or bits[CommonFun.StateEffect.NoMove] == 1 or bits[CommonFun.StateEffect.Silence] == 1 or bits[CommonFun.StateEffect.Curse] == 1 or bits[CommonFun.StateEffect.Dark] == 1) and (srcUser:HasBuffID(43110) or srcUser:HasBuffLayer(43110, EBUFFERLAYER_SHADOW)) and srcUser:HasBuffID(42240) then
    card = card + 5
  end
  if srcUser:HasBuffID(90004514) and srcUser:HasBuffID(90004515) then
    card = card + 5
  end
  local skilllv_dashi = srcUser:GetLernedSkillLevel(5102)
  local dashi = skilllv_dashi * 2
  local A = lv * a + b + Num * d + diary * 0.3 + card + dashi
  local skilllv_1 = srcUser:GetLernedSkillLevel(5103)
  A = A * skilllv_1 * 0.1
  return A
end

function CommonFun.calcBuff_100220(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local skilllv_1 = srcUser:GetLernedSkillLevel(a)
  A = skilllv_1 * b + c
  local Profession = targetUser:GetProfressionID()
  if Profession == 82 or Profession == 83 or Profession == 84 then
    A = 0
  end
  return A
end

function CommonFun.calcBuff_100230(srcUser, targetUser, a, b, c, d, lv)
  if srcUser == nil or targetUser == nil then
    return 0
  end
  local A = 0
  local skilllv_1 = srcUser:GetLernedSkillLevel(a)
  A = skilllv_1 * b + c
  if srcUser:HasBuffID(1002004) then
    A = A * 5
  end
  return A
end

CommonFun.BaseAttrCalNoPer = {
  "Cri",
  "MaxHp",
  "MaxSp",
  "MoveSpd",
  "Hit",
  "Flee",
  "RestoreSpd",
  "SpRestoreSpd",
  "Vit"
}

function CommonFun.checkIsNoNeedPercent(key)
  for i = 1, #CommonFun.BaseAttrCalNoPer do
    local single = CommonFun.BaseAttrCalNoPer[i]
    if single == key then
      return true
    end
  end
end

CommonFun.CalcBuffFuncs = {
  [6] = CommonFun.calcBuff_6,
  [20] = CommonFun.calcBuff_20,
  [21] = CommonFun.calcBuff_21,
  [22] = CommonFun.calcBuff_22,
  [23] = CommonFun.calcBuff_23,
  [39] = CommonFun.calcBuff_39,
  [40] = CommonFun.calcBuff_40,
  [41] = CommonFun.calcBuff_41,
  [50] = CommonFun.calcBuff_50,
  [51] = CommonFun.calcBuff_51,
  [52] = CommonFun.calcBuff_52,
  [53] = CommonFun.calcBuff_53,
  [54] = CommonFun.calcBuff_54,
  [55] = CommonFun.calcBuff_55,
  [56] = CommonFun.calcBuff_56,
  [57] = CommonFun.calcBuff_57,
  [58] = CommonFun.calcBuff_58,
  [59] = CommonFun.calcBuff_59,
  [60] = CommonFun.calcBuff_60,
  [61] = CommonFun.calcBuff_61,
  [62] = CommonFun.calcBuff_62,
  [100] = CommonFun.calcBuff_100,
  [101] = CommonFun.calcBuff_101,
  [102] = CommonFun.calcBuff_102,
  [103] = CommonFun.calcBuff_103,
  [104] = CommonFun.calcBuff_104,
  [105] = CommonFun.calcBuff_105,
  [106] = CommonFun.calcBuff_106,
  [107] = CommonFun.calcBuff_107,
  [110] = CommonFun.calcBuff_110,
  [111] = CommonFun.calcBuff_111,
  [112] = CommonFun.calcBuff_112,
  [113] = CommonFun.calcBuff_113,
  [114] = CommonFun.calcBuff_114,
  [115] = CommonFun.calcBuff_115,
  [120] = CommonFun.calcBuff_120,
  [130] = CommonFun.calcBuff_130,
  [131] = CommonFun.calcBuff_131,
  [132] = CommonFun.calcBuff_132,
  [133] = CommonFun.calcBuff_133,
  [140] = CommonFun.calcBuff_140,
  [141] = CommonFun.calcBuff_141,
  [142] = CommonFun.calcBuff_142,
  [150] = CommonFun.calcBuff_150,
  [151] = CommonFun.calcBuff_151,
  [152] = CommonFun.calcBuff_152,
  [153] = CommonFun.calcBuff_153,
  [154] = CommonFun.calcBuff_154,
  [160] = CommonFun.calcBuff_160,
  [170] = CommonFun.calcBuff_170,
  [171] = CommonFun.calcBuff_171,
  [180] = CommonFun.calcBuff_180,
  [185] = CommonFun.calcBuff_185,
  [186] = CommonFun.calcBuff_186,
  [187] = CommonFun.calcBuff_187,
  [188] = CommonFun.calcBuff_188,
  [190] = CommonFun.calcBuff_190,
  [200] = CommonFun.calcBuff_200,
  [201] = CommonFun.calcBuff_201,
  [202] = CommonFun.calcBuff_202,
  [203] = CommonFun.calcBuff_203,
  [204] = CommonFun.calcBuff_204,
  [205] = CommonFun.calcBuff_205,
  [300] = CommonFun.calcBuff_300,
  [301] = CommonFun.calcBuff_301,
  [302] = CommonFun.calcBuff_302,
  [310] = CommonFun.calcBuff_310,
  [311] = CommonFun.calcBuff_311,
  [320] = CommonFun.calcBuff_320,
  [321] = CommonFun.calcBuff_321,
  [322] = CommonFun.calcBuff_322,
  [323] = CommonFun.calcBuff_323,
  [330] = CommonFun.calcBuff_330,
  [340] = CommonFun.calcBuff_340,
  [350] = CommonFun.calcBuff_350,
  [360] = CommonFun.calcBuff_360,
  [370] = CommonFun.calcBuff_370,
  [380] = CommonFun.calcBuff_380,
  [390] = CommonFun.calcBuff_390,
  [400] = CommonFun.calcBuff_400,
  [401] = CommonFun.calcBuff_401,
  [410] = CommonFun.calcBuff_410,
  [420] = CommonFun.calcBuff_420,
  [421] = CommonFun.calcBuff_421,
  [422] = CommonFun.calcBuff_422,
  [430] = CommonFun.calcBuff_430,
  [440] = CommonFun.calcBuff_440,
  [441] = CommonFun.calcBuff_441,
  [442] = CommonFun.calcBuff_442,
  [450] = CommonFun.calcBuff_450,
  [460] = CommonFun.calcBuff_460,
  [470] = CommonFun.calcBuff_470,
  [471] = CommonFun.calcBuff_471,
  [480] = CommonFun.calcBuff_480,
  [490] = CommonFun.calcBuff_490,
  [500] = CommonFun.calcBuff_500,
  [510] = CommonFun.calcBuff_510,
  [511] = CommonFun.calcBuff_511,
  [520] = CommonFun.calcBuff_520,
  [530] = CommonFun.calcBuff_530,
  [540] = CommonFun.calcBuff_540,
  [550] = CommonFun.calcBuff_550,
  [551] = CommonFun.calcBuff_551,
  [552] = CommonFun.calcBuff_552,
  [560] = CommonFun.calcBuff_560,
  [570] = CommonFun.calcBuff_570,
  [580] = CommonFun.calcBuff_580,
  [590] = CommonFun.calcBuff_590,
  [600] = CommonFun.calcBuff_600,
  [610] = CommonFun.calcBuff_610,
  [620] = CommonFun.calcBuff_620,
  [630] = CommonFun.calcBuff_630,
  [631] = CommonFun.calcBuff_631,
  [640] = CommonFun.calcBuff_640,
  [650] = CommonFun.calcBuff_650,
  [660] = CommonFun.calcBuff_660,
  [661] = CommonFun.calcBuff_661,
  [670] = CommonFun.calcBuff_670,
  [671] = CommonFun.calcBuff_671,
  [680] = CommonFun.calcBuff_680,
  [690] = CommonFun.calcBuff_690,
  [700] = CommonFun.calcBuff_700,
  [710] = CommonFun.calcBuff_710,
  [720] = CommonFun.calcBuff_720,
  [730] = CommonFun.calcBuff_730,
  [731] = CommonFun.calcBuff_731,
  [732] = CommonFun.calcBuff_732,
  [733] = CommonFun.calcBuff_733,
  [734] = CommonFun.calcBuff_734,
  [740] = CommonFun.calcBuff_740,
  [741] = CommonFun.calcBuff_741,
  [750] = CommonFun.calcBuff_750,
  [760] = CommonFun.calcBuff_760,
  [770] = CommonFun.calcBuff_770,
  [780] = CommonFun.calcBuff_780,
  [790] = CommonFun.calcBuff_790,
  [800] = CommonFun.calcBuff_800,
  [1000] = CommonFun.calcBuff_1000,
  [1100] = CommonFun.calcBuff_1100,
  [1200] = CommonFun.calcBuff_1200,
  [1300] = CommonFun.calcBuff_1300,
  [1301] = CommonFun.calcBuff_1301,
  [1302] = CommonFun.calcBuff_1302,
  [1320] = CommonFun.calcBuff_1320,
  [1400] = CommonFun.calcBuff_1400,
  [1500] = CommonFun.calcBuff_1500,
  [1600] = CommonFun.calcBuff_1600,
  [1601] = CommonFun.calcBuff_1601,
  [1700] = CommonFun.calcBuff_1700,
  [1701] = CommonFun.calcBuff_1701,
  [1800] = CommonFun.calcBuff_1800,
  [1850] = CommonFun.calcBuff_1850,
  [1860] = CommonFun.calcBuff_1860,
  [1870] = CommonFun.calcBuff_1870,
  [1900] = CommonFun.calcBuff_1900,
  [1901] = CommonFun.calcBuff_1901,
  [1902] = CommonFun.calcBuff_1902,
  [1903] = CommonFun.calcBuff_1903,
  [1910] = CommonFun.calcBuff_1910,
  [1920] = CommonFun.calcBuff_1920,
  [1930] = CommonFun.calcBuff_1930,
  [1940] = CommonFun.calcBuff_1940,
  [1950] = CommonFun.calcBuff_1950,
  [1960] = CommonFun.calcBuff_1960,
  [1970] = CommonFun.calcBuff_1970,
  [1980] = CommonFun.calcBuff_1980,
  [2000] = CommonFun.calcBuff_2000,
  [2010] = CommonFun.calcBuff_2010,
  [2020] = CommonFun.calcBuff_2020,
  [2030] = CommonFun.calcBuff_2030,
  [2040] = CommonFun.calcBuff_2040,
  [2041] = CommonFun.calcBuff_2041,
  [2042] = CommonFun.calcBuff_2042,
  [2043] = CommonFun.calcBuff_2043,
  [2050] = CommonFun.calcBuff_2050,
  [2060] = CommonFun.calcBuff_2060,
  [2061] = CommonFun.calcBuff_2061,
  [2070] = CommonFun.calcBuff_2070,
  [2080] = CommonFun.calcBuff_2080,
  [2090] = CommonFun.calcBuff_2090,
  [2091] = CommonFun.calcBuff_2091,
  [2092] = CommonFun.calcBuff_2092,
  [2093] = CommonFun.calcBuff_2093,
  [2100] = CommonFun.calcBuff_2100,
  [2110] = CommonFun.calcBuff_2110,
  [2120] = CommonFun.calcBuff_2120,
  [2121] = CommonFun.calcBuff_2121,
  [2130] = CommonFun.calcBuff_2130,
  [2140] = CommonFun.calcBuff_2140,
  [2150] = CommonFun.calcBuff_2150,
  [2151] = CommonFun.calcBuff_2151,
  [2160] = CommonFun.calcBuff_2160,
  [2170] = CommonFun.calcBuff_2170,
  [2180] = CommonFun.calcBuff_2180,
  [2190] = CommonFun.calcBuff_2190,
  [2200] = CommonFun.calcBuff_2200,
  [2210] = CommonFun.calcBuff_2210,
  [2220] = CommonFun.calcBuff_2220,
  [2230] = CommonFun.calcBuff_2230,
  [2240] = CommonFun.calcBuff_2240,
  [2250] = CommonFun.calcBuff_2250,
  [2260] = CommonFun.calcBuff_2260,
  [2270] = CommonFun.calcBuff_2270,
  [2271] = CommonFun.calcBuff_2271,
  [2272] = CommonFun.calcBuff_2272,
  [2280] = CommonFun.calcBuff_2280,
  [2290] = CommonFun.calcBuff_2290,
  [2300] = CommonFun.calcBuff_2300,
  [2310] = CommonFun.calcBuff_2310,
  [2320] = CommonFun.calcBuff_2320,
  [2330] = CommonFun.calcBuff_2330,
  [2340] = CommonFun.calcBuff_2340,
  [2350] = CommonFun.calcBuff_2350,
  [2360] = CommonFun.calcBuff_2360,
  [2370] = CommonFun.calcBuff_2370,
  [2380] = CommonFun.calcBuff_2380,
  [2390] = CommonFun.calcBuff_2390,
  [2400] = CommonFun.calcBuff_2400,
  [2410] = CommonFun.calcBuff_2410,
  [2420] = CommonFun.calcBuff_2420,
  [2421] = CommonFun.calcBuff_2421,
  [2430] = CommonFun.calcBuff_2430,
  [2440] = CommonFun.calcBuff_2440,
  [2441] = CommonFun.calcBuff_2441,
  [2442] = CommonFun.calcBuff_2442,
  [2443] = CommonFun.calcBuff_2443,
  [2444] = CommonFun.calcBuff_2444,
  [2445] = CommonFun.calcBuff_2445,
  [2450] = CommonFun.calcBuff_2450,
  [2451] = CommonFun.calcBuff_2451,
  [2460] = CommonFun.calcBuff_2460,
  [2461] = CommonFun.calcBuff_2461,
  [2470] = CommonFun.calcBuff_2470,
  [2480] = CommonFun.calcBuff_2480,
  [2481] = CommonFun.calcBuff_2481,
  [2490] = CommonFun.calcBuff_2490,
  [2500] = CommonFun.calcBuff_2500,
  [2510] = CommonFun.calcBuff_2510,
  [2520] = CommonFun.calcBuff_2520,
  [2530] = CommonFun.calcBuff_2530,
  [2540] = CommonFun.calcBuff_2540,
  [2550] = CommonFun.calcBuff_2550,
  [2560] = CommonFun.calcBuff_2560,
  [2570] = CommonFun.calcBuff_2570,
  [2580] = CommonFun.calcBuff_2580,
  [2581] = CommonFun.calcBuff_2581,
  [2590] = CommonFun.calcBuff_2590,
  [2591] = CommonFun.calcBuff_2591,
  [2592] = CommonFun.calcBuff_2592,
  [2600] = CommonFun.calcBuff_2600,
  [2601] = CommonFun.calcBuff_2601,
  [2610] = CommonFun.calcBuff_2610,
  [2620] = CommonFun.calcBuff_2620,
  [2630] = CommonFun.calcBuff_2630,
  [2640] = CommonFun.calcBuff_2640,
  [2650] = CommonFun.calcBuff_2650,
  [2660] = CommonFun.calcBuff_2660,
  [2670] = CommonFun.calcBuff_2670,
  [2680] = CommonFun.calcBuff_2680,
  [2690] = CommonFun.calcBuff_2690,
  [2691] = CommonFun.calcBuff_2691,
  [2700] = CommonFun.calcBuff_2700,
  [2710] = CommonFun.calcBuff_2710,
  [2720] = CommonFun.calcBuff_2720,
  [2730] = CommonFun.calcBuff_2730,
  [2740] = CommonFun.calcBuff_2740,
  [2750] = CommonFun.calcBuff_2750,
  [2760] = CommonFun.calcBuff_2760,
  [2770] = CommonFun.calcBuff_2770,
  [2780] = CommonFun.calcBuff_2780,
  [2790] = CommonFun.calcBuff_2790,
  [2800] = CommonFun.calcBuff_2800,
  [2810] = CommonFun.calcBuff_2810,
  [2820] = CommonFun.calcBuff_2820,
  [2830] = CommonFun.calcBuff_2830,
  [2840] = CommonFun.calcBuff_2840,
  [2850] = CommonFun.calcBuff_2850,
  [2860] = CommonFun.calcBuff_2860,
  [2870] = CommonFun.calcBuff_2870,
  [2880] = CommonFun.calcBuff_2880,
  [2890] = CommonFun.calcBuff_2890,
  [2900] = CommonFun.calcBuff_2900,
  [2910] = CommonFun.calcBuff_2910,
  [2920] = CommonFun.calcBuff_2920,
  [2930] = CommonFun.calcBuff_2930,
  [2940] = CommonFun.calcBuff_2940,
  [2950] = CommonFun.calcBuff_2950,
  [2960] = CommonFun.calcBuff_2960,
  [2970] = CommonFun.calcBuff_2970,
  [3000] = CommonFun.calcBuff_3000,
  [3010] = CommonFun.calcBuff_3010,
  [3020] = CommonFun.calcBuff_3020,
  [3021] = CommonFun.calcBuff_3021,
  [3030] = CommonFun.calcBuff_3030,
  [3040] = CommonFun.calcBuff_3040,
  [3050] = CommonFun.calcBuff_3050,
  [3051] = CommonFun.calcBuff_3051,
  [3060] = CommonFun.calcBuff_3060,
  [3061] = CommonFun.calcBuff_3061,
  [3069] = CommonFun.calcBuff_3069,
  [3070] = CommonFun.calcBuff_3070,
  [3071] = CommonFun.calcBuff_3071,
  [3072] = CommonFun.calcBuff_3072,
  [3073] = CommonFun.calcBuff_3073,
  [3074] = CommonFun.calcBuff_3074,
  [3075] = CommonFun.calcBuff_3075,
  [3076] = CommonFun.calcBuff_3076,
  [3077] = CommonFun.calcBuff_3077,
  [3078] = CommonFun.calcBuff_3078,
  [3079] = CommonFun.calcBuff_3079,
  [3080] = CommonFun.calcBuff_3080,
  [3090] = CommonFun.calcBuff_3090,
  [3100] = CommonFun.calcBuff_3100,
  [3110] = CommonFun.calcBuff_3110,
  [3120] = CommonFun.calcBuff_3120,
  [3121] = CommonFun.calcBuff_3121,
  [3122] = CommonFun.calcBuff_3122,
  [3123] = CommonFun.calcBuff_3123,
  [3124] = CommonFun.calcBuff_3124,
  [3130] = CommonFun.calcBuff_3130,
  [3140] = CommonFun.calcBuff_3140,
  [3150] = CommonFun.calcBuff_3150,
  [3151] = CommonFun.calcBuff_3151,
  [3152] = CommonFun.calcBuff_3152,
  [3153] = CommonFun.calcBuff_3153,
  [3160] = CommonFun.calcBuff_3160,
  [3170] = CommonFun.calcBuff_3170,
  [3180] = CommonFun.calcBuff_3180,
  [3181] = CommonFun.calcBuff_3181,
  [3190] = CommonFun.calcBuff_3190,
  [3200] = CommonFun.calcBuff_3200,
  [3210] = CommonFun.calcBuff_3210,
  [3220] = CommonFun.calcBuff_3220,
  [3221] = CommonFun.calcBuff_3221,
  [3222] = CommonFun.calcBuff_3222,
  [3223] = CommonFun.calcBuff_3223,
  [3250] = CommonFun.calcBuff_3250,
  [3251] = CommonFun.calcBuff_3251,
  [3252] = CommonFun.calcBuff_3252,
  [3253] = CommonFun.calcBuff_3253,
  [3254] = CommonFun.calcBuff_3254,
  [3255] = CommonFun.calcBuff_3255,
  [3300] = CommonFun.calcBuff_3300,
  [3301] = CommonFun.calcBuff_3301,
  [3302] = CommonFun.calcBuff_3302,
  [3303] = CommonFun.calcBuff_3303,
  [3304] = CommonFun.calcBuff_3304,
  [3305] = CommonFun.calcBuff_3305,
  [3306] = CommonFun.calcBuff_3306,
  [3307] = CommonFun.calcBuff_3307,
  [3308] = CommonFun.calcBuff_3308,
  [3310] = CommonFun.calcBuff_3310,
  [3320] = CommonFun.calcBuff_3320,
  [3321] = CommonFun.calcBuff_3321,
  [3322] = CommonFun.calcBuff_3322,
  [3323] = CommonFun.calcBuff_3323,
  [3324] = CommonFun.calcBuff_3324,
  [3325] = CommonFun.calcBuff_3325,
  [3326] = CommonFun.calcBuff_3326,
  [3327] = CommonFun.calcBuff_3327,
  [3328] = CommonFun.calcBuff_3328,
  [3330] = CommonFun.calcBuff_3330,
  [3331] = CommonFun.calcBuff_3331,
  [3340] = CommonFun.calcBuff_3340,
  [3350] = CommonFun.calcBuff_3350,
  [3360] = CommonFun.calcBuff_3360,
  [3370] = CommonFun.calcBuff_3370,
  [3380] = CommonFun.calcBuff_3380,
  [3390] = CommonFun.calcBuff_3390,
  [3400] = CommonFun.calcBuff_3400,
  [3401] = CommonFun.calcBuff_3401,
  [3410] = CommonFun.calcBuff_3410,
  [3420] = CommonFun.calcBuff_3420,
  [3430] = CommonFun.calcBuff_3430,
  [3440] = CommonFun.calcBuff_3440,
  [3441] = CommonFun.calcBuff_3441,
  [3450] = CommonFun.calcBuff_3450,
  [3451] = CommonFun.calcBuff_3451,
  [3452] = CommonFun.calcBuff_3452,
  [3460] = CommonFun.calcBuff_3460,
  [3461] = CommonFun.calcBuff_3461,
  [3462] = CommonFun.calcBuff_3462,
  [3470] = CommonFun.calcBuff_3470,
  [3471] = CommonFun.calcBuff_3471,
  [3480] = CommonFun.calcBuff_3480,
  [3481] = CommonFun.calcBuff_3481,
  [3490] = CommonFun.calcBuff_3490,
  [3491] = CommonFun.calcBuff_3491,
  [3492] = CommonFun.calcBuff_3492,
  [3500] = CommonFun.calcBuff_3500,
  [3510] = CommonFun.calcBuff_3510,
  [3511] = CommonFun.calcBuff_3511,
  [3520] = CommonFun.calcBuff_3520,
  [3530] = CommonFun.calcBuff_3530,
  [3540] = CommonFun.calcBuff_3540,
  [3541] = CommonFun.calcBuff_3541,
  [3550] = CommonFun.calcBuff_3550,
  [3560] = CommonFun.calcBuff_3560,
  [3570] = CommonFun.calcBuff_3570,
  [3580] = CommonFun.calcBuff_3580,
  [3590] = CommonFun.calcBuff_3590,
  [3600] = CommonFun.calcBuff_3600,
  [3610] = CommonFun.calcBuff_3610,
  [3620] = CommonFun.calcBuff_3620,
  [3630] = CommonFun.calcBuff_3630,
  [3640] = CommonFun.calcBuff_3640,
  [3650] = CommonFun.calcBuff_3650,
  [3660] = CommonFun.calcBuff_3660,
  [3670] = CommonFun.calcBuff_3670,
  [3680] = CommonFun.calcBuff_3680,
  [3690] = CommonFun.calcBuff_3690,
  [3691] = CommonFun.calcBuff_3691,
  [3700] = CommonFun.calcBuff_3700,
  [3710] = CommonFun.calcBuff_3710,
  [3711] = CommonFun.calcBuff_3711,
  [3720] = CommonFun.calcBuff_3720,
  [3730] = CommonFun.calcBuff_3730,
  [3731] = CommonFun.calcBuff_3731,
  [3740] = CommonFun.calcBuff_3740,
  [3741] = CommonFun.calcBuff_3741,
  [3742] = CommonFun.calcBuff_3742,
  [3743] = CommonFun.calcBuff_3743,
  [3744] = CommonFun.calcBuff_3744,
  [3745] = CommonFun.calcBuff_3745,
  [3750] = CommonFun.calcBuff_3750,
  [3760] = CommonFun.calcBuff_3760,
  [3770] = CommonFun.calcBuff_3770,
  [3780] = CommonFun.calcBuff_3780,
  [3790] = CommonFun.calcBuff_3790,
  [3800] = CommonFun.calcBuff_3800,
  [3810] = CommonFun.calcBuff_3810,
  [3820] = CommonFun.calcBuff_3820,
  [3830] = CommonFun.calcBuff_3830,
  [3840] = CommonFun.calcBuff_3840,
  [3850] = CommonFun.calcBuff_3850,
  [3860] = CommonFun.calcBuff_3860,
  [3870] = CommonFun.calcBuff_3870,
  [3871] = CommonFun.calcBuff_3871,
  [3880] = CommonFun.calcBuff_3880,
  [3890] = CommonFun.calcBuff_3890,
  [3900] = CommonFun.calcBuff_3900,
  [4000] = CommonFun.calcBuff_4000,
  [4010] = CommonFun.calcBuff_4010,
  [4020] = CommonFun.calcBuff_4020,
  [4030] = CommonFun.calcBuff_4030,
  [4040] = CommonFun.calcBuff_4040,
  [4050] = CommonFun.calcBuff_4050,
  [4060] = CommonFun.calcBuff_4060,
  [4070] = CommonFun.calcBuff_4070,
  [4080] = CommonFun.calcBuff_4080,
  [4081] = CommonFun.calcBuff_4081,
  [4090] = CommonFun.calcBuff_4090,
  [4100] = CommonFun.calcBuff_4100,
  [4110] = CommonFun.calcBuff_4110,
  [4120] = CommonFun.calcBuff_4120,
  [4130] = CommonFun.calcBuff_4130,
  [4140] = CommonFun.calcBuff_4140,
  [4150] = CommonFun.calcBuff_4150,
  [4160] = CommonFun.calcBuff_4160,
  [4161] = CommonFun.calcBuff_4161,
  [4162] = CommonFun.calcBuff_4162,
  [4163] = CommonFun.calcBuff_4163,
  [4164] = CommonFun.calcBuff_4164,
  [4170] = CommonFun.calcBuff_4170,
  [4171] = CommonFun.calcBuff_4171,
  [4180] = CommonFun.calcBuff_4180,
  [4190] = CommonFun.calcBuff_4190,
  [4200] = CommonFun.calcBuff_4200,
  [4210] = CommonFun.calcBuff_4210,
  [4220] = CommonFun.calcBuff_4220,
  [4230] = CommonFun.calcBuff_4230,
  [4240] = CommonFun.calcBuff_4240,
  [4250] = CommonFun.calcBuff_4250,
  [4260] = CommonFun.calcBuff_4260,
  [4270] = CommonFun.calcBuff_4270,
  [4280] = CommonFun.calcBuff_4280,
  [4290] = CommonFun.calcBuff_4290,
  [4300] = CommonFun.calcBuff_4300,
  [4310] = CommonFun.calcBuff_4310,
  [4320] = CommonFun.calcBuff_4320,
  [4330] = CommonFun.calcBuff_4330,
  [4340] = CommonFun.calcBuff_4340,
  [4350] = CommonFun.calcBuff_4350,
  [4351] = CommonFun.calcBuff_4351,
  [4360] = CommonFun.calcBuff_4360,
  [4370] = CommonFun.calcBuff_4370,
  [4371] = CommonFun.calcBuff_4371,
  [4380] = CommonFun.calcBuff_4380,
  [4390] = CommonFun.calcBuff_4390,
  [4400] = CommonFun.calcBuff_4400,
  [4410] = CommonFun.calcBuff_4410,
  [4420] = CommonFun.calcBuff_4420,
  [4430] = CommonFun.calcBuff_4430,
  [4440] = CommonFun.calcBuff_4440,
  [4450] = CommonFun.calcBuff_4450,
  [4460] = CommonFun.calcBuff_4460,
  [4470] = CommonFun.calcBuff_4470,
  [4480] = CommonFun.calcBuff_4480,
  [4490] = CommonFun.calcBuff_4490,
  [4500] = CommonFun.calcBuff_4500,
  [4510] = CommonFun.calcBuff_4510,
  [4520] = CommonFun.calcBuff_4520,
  [4530] = CommonFun.calcBuff_4530,
  [4540] = CommonFun.calcBuff_4540,
  [4550] = CommonFun.calcBuff_4550,
  [4560] = CommonFun.calcBuff_4560,
  [4570] = CommonFun.calcBuff_4570,
  [4580] = CommonFun.calcBuff_4580,
  [4590] = CommonFun.calcBuff_4590,
  [4600] = CommonFun.calcBuff_4600,
  [4610] = CommonFun.calcBuff_4610,
  [4620] = CommonFun.calcBuff_4620,
  [4621] = CommonFun.calcBuff_4621,
  [4622] = CommonFun.calcBuff_4622,
  [4623] = CommonFun.calcBuff_4623,
  [4624] = CommonFun.calcBuff_4624,
  [4625] = CommonFun.calcBuff_4625,
  [4630] = CommonFun.calcBuff_4630,
  [4640] = CommonFun.calcBuff_4640,
  [4641] = CommonFun.calcBuff_4641,
  [4650] = CommonFun.calcBuff_4650,
  [4660] = CommonFun.calcBuff_4660,
  [4661] = CommonFun.calcBuff_4661,
  [4662] = CommonFun.calcBuff_4662,
  [4663] = CommonFun.calcBuff_4663,
  [4670] = CommonFun.calcBuff_4670,
  [4680] = CommonFun.calcBuff_4680,
  [4681] = CommonFun.calcBuff_4681,
  [4690] = CommonFun.calcBuff_4690,
  [4700] = CommonFun.calcBuff_4700,
  [4710] = CommonFun.calcBuff_4710,
  [4720] = CommonFun.calcBuff_4720,
  [4800] = CommonFun.calcBuff_4800,
  [4801] = CommonFun.calcBuff_4801,
  [4810] = CommonFun.calcBuff_4810,
  [4811] = CommonFun.calcBuff_4811,
  [4812] = CommonFun.calcBuff_4812,
  [4813] = CommonFun.calcBuff_4813,
  [4814] = CommonFun.calcBuff_4814,
  [4820] = CommonFun.calcBuff_4820,
  [4830] = CommonFun.calcBuff_4830,
  [4831] = CommonFun.calcBuff_4831,
  [4840] = CommonFun.calcBuff_4840,
  [4841] = CommonFun.calcBuff_4841,
  [4850] = CommonFun.calcBuff_4850,
  [4860] = CommonFun.calcBuff_4860,
  [4870] = CommonFun.calcBuff_4870,
  [4880] = CommonFun.calcBuff_4880,
  [4890] = CommonFun.calcBuff_4890,
  [4900] = CommonFun.calcBuff_4900,
  [4910] = CommonFun.calcBuff_4910,
  [4911] = CommonFun.calcBuff_4911,
  [4912] = CommonFun.calcBuff_4912,
  [4913] = CommonFun.calcBuff_4913,
  [4920] = CommonFun.calcBuff_4920,
  [4921] = CommonFun.calcBuff_4921,
  [4930] = CommonFun.calcBuff_4930,
  [4931] = CommonFun.calcBuff_4931,
  [4932] = CommonFun.calcBuff_4932,
  [4933] = CommonFun.calcBuff_4933,
  [4934] = CommonFun.calcBuff_4934,
  [4940] = CommonFun.calcBuff_4940,
  [4950] = CommonFun.calcBuff_4950,
  [5000] = CommonFun.calcBuff_5000,
  [5010] = CommonFun.calcBuff_5010,
  [5011] = CommonFun.calcBuff_5011,
  [5012] = CommonFun.calcBuff_5012,
  [5013] = CommonFun.calcBuff_5013,
  [5014] = CommonFun.calcBuff_5014,
  [5020] = CommonFun.calcBuff_5020,
  [5021] = CommonFun.calcBuff_5021,
  [5030] = CommonFun.calcBuff_5030,
  [5031] = CommonFun.calcBuff_5031,
  [5032] = CommonFun.calcBuff_5032,
  [5033] = CommonFun.calcBuff_5033,
  [5034] = CommonFun.calcBuff_5034,
  [5038] = CommonFun.calcBuff_5038,
  [5039] = CommonFun.calcBuff_5039,
  [5040] = CommonFun.calcBuff_5040,
  [5041] = CommonFun.calcBuff_5041,
  [5042] = CommonFun.calcBuff_5042,
  [5043] = CommonFun.calcBuff_5043,
  [5044] = CommonFun.calcBuff_5044,
  [5045] = CommonFun.calcBuff_5045,
  [5050] = CommonFun.calcBuff_5050,
  [5060] = CommonFun.calcBuff_5060,
  [5070] = CommonFun.calcBuff_5070,
  [5071] = CommonFun.calcBuff_5071,
  [5072] = CommonFun.calcBuff_5072,
  [5073] = CommonFun.calcBuff_5073,
  [5080] = CommonFun.calcBuff_5080,
  [5090] = CommonFun.calcBuff_5090,
  [5100] = CommonFun.calcBuff_5100,
  [5110] = CommonFun.calcBuff_5110,
  [5120] = CommonFun.calcBuff_5120,
  [5121] = CommonFun.calcBuff_5121,
  [5130] = CommonFun.calcBuff_5130,
  [5140] = CommonFun.calcBuff_5140,
  [5141] = CommonFun.calcBuff_5141,
  [5150] = CommonFun.calcBuff_5150,
  [5160] = CommonFun.calcBuff_5160,
  [5170] = CommonFun.calcBuff_5170,
  [5180] = CommonFun.calcBuff_5180,
  [5190] = CommonFun.calcBuff_5190,
  [5200] = CommonFun.calcBuff_5200,
  [5210] = CommonFun.calcBuff_5210,
  [5220] = CommonFun.calcBuff_5220,
  [5230] = CommonFun.calcBuff_5230,
  [5240] = CommonFun.calcBuff_5240,
  [5241] = CommonFun.calcBuff_5241,
  [5250] = CommonFun.calcBuff_5250,
  [5260] = CommonFun.calcBuff_5260,
  [5261] = CommonFun.calcBuff_5261,
  [5270] = CommonFun.calcBuff_5270,
  [5280] = CommonFun.calcBuff_5280,
  [5290] = CommonFun.calcBuff_5290,
  [5291] = CommonFun.calcBuff_5291,
  [5300] = CommonFun.calcBuff_5300,
  [5310] = CommonFun.calcBuff_5310,
  [5320] = CommonFun.calcBuff_5320,
  [5330] = CommonFun.calcBuff_5330,
  [5400] = CommonFun.calcBuff_5400,
  [5401] = CommonFun.calcBuff_5401,
  [5402] = CommonFun.calcBuff_5402,
  [5403] = CommonFun.calcBuff_5403,
  [5404] = CommonFun.calcBuff_5404,
  [5405] = CommonFun.calcBuff_5405,
  [5410] = CommonFun.calcBuff_5410,
  [5411] = CommonFun.calcBuff_5411,
  [5412] = CommonFun.calcBuff_5412,
  [5413] = CommonFun.calcBuff_5413,
  [5414] = CommonFun.calcBuff_5414,
  [5415] = CommonFun.calcBuff_5415,
  [5420] = CommonFun.calcBuff_5420,
  [5430] = CommonFun.calcBuff_5430,
  [5431] = CommonFun.calcBuff_5431,
  [5440] = CommonFun.calcBuff_5440,
  [5441] = CommonFun.calcBuff_5441,
  [5450] = CommonFun.calcBuff_5450,
  [5451] = CommonFun.calcBuff_5451,
  [5460] = CommonFun.calcBuff_5460,
  [5470] = CommonFun.calcBuff_5470,
  [5480] = CommonFun.calcBuff_5480,
  [5490] = CommonFun.calcBuff_5490,
  [5491] = CommonFun.calcBuff_5491,
  [5500] = CommonFun.calcBuff_5500,
  [5510] = CommonFun.calcBuff_5510,
  [5511] = CommonFun.calcBuff_5511,
  [5520] = CommonFun.calcBuff_5520,
  [5530] = CommonFun.calcBuff_5530,
  [5531] = CommonFun.calcBuff_5531,
  [5532] = CommonFun.calcBuff_5532,
  [5533] = CommonFun.calcBuff_5533,
  [5534] = CommonFun.calcBuff_5534,
  [5540] = CommonFun.calcBuff_5540,
  [5550] = CommonFun.calcBuff_5550,
  [5600] = CommonFun.calcBuff_5600,
  [5610] = CommonFun.calcBuff_5610,
  [5620] = CommonFun.calcBuff_5620,
  [5630] = CommonFun.calcBuff_5630,
  [5640] = CommonFun.calcBuff_5640,
  [5650] = CommonFun.calcBuff_5650,
  [5660] = CommonFun.calcBuff_5660,
  [5670] = CommonFun.calcBuff_5670,
  [5671] = CommonFun.calcBuff_5671,
  [5680] = CommonFun.calcBuff_5680,
  [5690] = CommonFun.calcBuff_5690,
  [5700] = CommonFun.calcBuff_5700,
  [5710] = CommonFun.calcBuff_5710,
  [5720] = CommonFun.calcBuff_5720,
  [5721] = CommonFun.calcBuff_5721,
  [5722] = CommonFun.calcBuff_5722,
  [5730] = CommonFun.calcBuff_5730,
  [5740] = CommonFun.calcBuff_5740,
  [5741] = CommonFun.calcBuff_5741,
  [5742] = CommonFun.calcBuff_5742,
  [5743] = CommonFun.calcBuff_5743,
  [5750] = CommonFun.calcBuff_5750,
  [5751] = CommonFun.calcBuff_5751,
  [5760] = CommonFun.calcBuff_5760,
  [5761] = CommonFun.calcBuff_5761,
  [5762] = CommonFun.calcBuff_5762,
  [5770] = CommonFun.calcBuff_5770,
  [5780] = CommonFun.calcBuff_5780,
  [5781] = CommonFun.calcBuff_5781,
  [5790] = CommonFun.calcBuff_5790,
  [5800] = CommonFun.calcBuff_5800,
  [5810] = CommonFun.calcBuff_5810,
  [5820] = CommonFun.calcBuff_5820,
  [5821] = CommonFun.calcBuff_5821,
  [5830] = CommonFun.calcBuff_5830,
  [5840] = CommonFun.calcBuff_5840,
  [5841] = CommonFun.calcBuff_5841,
  [5850] = CommonFun.calcBuff_5850,
  [5851] = CommonFun.calcBuff_5851,
  [5852] = CommonFun.calcBuff_5852,
  [5860] = CommonFun.calcBuff_5860,
  [5861] = CommonFun.calcBuff_5861,
  [5862] = CommonFun.calcBuff_5862,
  [5870] = CommonFun.calcBuff_5870,
  [5871] = CommonFun.calcBuff_5871,
  [5880] = CommonFun.calcBuff_5880,
  [5881] = CommonFun.calcBuff_5881,
  [5890] = CommonFun.calcBuff_5890,
  [5891] = CommonFun.calcBuff_5891,
  [5900] = CommonFun.calcBuff_5900,
  [5901] = CommonFun.calcBuff_5901,
  [5902] = CommonFun.calcBuff_5902,
  [5910] = CommonFun.calcBuff_5910,
  [5911] = CommonFun.calcBuff_5911,
  [5920] = CommonFun.calcBuff_5920,
  [5921] = CommonFun.calcBuff_5921,
  [5930] = CommonFun.calcBuff_5930,
  [5931] = CommonFun.calcBuff_5931,
  [5940] = CommonFun.calcBuff_5940,
  [5950] = CommonFun.calcBuff_5950,
  [5960] = CommonFun.calcBuff_5960,
  [5970] = CommonFun.calcBuff_5970,
  [5980] = CommonFun.calcBuff_5980,
  [5990] = CommonFun.calcBuff_5990,
  [6000] = CommonFun.calcBuff_6000,
  [6010] = CommonFun.calcBuff_6010,
  [6020] = CommonFun.calcBuff_6020,
  [6030] = CommonFun.calcBuff_6030,
  [6040] = CommonFun.calcBuff_6040,
  [6050] = CommonFun.calcBuff_6050,
  [6060] = CommonFun.calcBuff_6060,
  [6070] = CommonFun.calcBuff_6070,
  [6080] = CommonFun.calcBuff_6080,
  [6090] = CommonFun.calcBuff_6090,
  [6091] = CommonFun.calcBuff_6091,
  [6092] = CommonFun.calcBuff_6092,
  [6093] = CommonFun.calcBuff_6093,
  [6100] = CommonFun.calcBuff_6100,
  [6110] = CommonFun.calcBuff_6110,
  [6120] = CommonFun.calcBuff_6120,
  [6130] = CommonFun.calcBuff_6130,
  [6140] = CommonFun.calcBuff_6140,
  [6150] = CommonFun.calcBuff_6150,
  [6160] = CommonFun.calcBuff_6160,
  [6170] = CommonFun.calcBuff_6170,
  [6180] = CommonFun.calcBuff_6180,
  [6190] = CommonFun.calcBuff_6190,
  [6200] = CommonFun.calcBuff_6200,
  [6210] = CommonFun.calcBuff_6210,
  [6211] = CommonFun.calcBuff_6211,
  [6220] = CommonFun.calcBuff_6220,
  [6230] = CommonFun.calcBuff_6230,
  [6240] = CommonFun.calcBuff_6240,
  [6250] = CommonFun.calcBuff_6250,
  [6260] = CommonFun.calcBuff_6260,
  [6270] = CommonFun.calcBuff_6270,
  [6280] = CommonFun.calcBuff_6280,
  [6290] = CommonFun.calcBuff_6290,
  [6300] = CommonFun.calcBuff_6300,
  [6310] = CommonFun.calcBuff_6310,
  [6320] = CommonFun.calcBuff_6320,
  [6330] = CommonFun.calcBuff_6330,
  [6340] = CommonFun.calcBuff_6340,
  [6350] = CommonFun.calcBuff_6350,
  [6360] = CommonFun.calcBuff_6360,
  [6361] = CommonFun.calcBuff_6361,
  [6370] = CommonFun.calcBuff_6370,
  [6380] = CommonFun.calcBuff_6380,
  [6390] = CommonFun.calcBuff_6390,
  [6397] = CommonFun.calcBuff_6397,
  [6398] = CommonFun.calcBuff_6398,
  [6399] = CommonFun.calcBuff_6399,
  [6400] = CommonFun.calcBuff_6400,
  [6401] = CommonFun.calcBuff_6401,
  [6402] = CommonFun.calcBuff_6402,
  [6410] = CommonFun.calcBuff_6410,
  [6420] = CommonFun.calcBuff_6420,
  [6421] = CommonFun.calcBuff_6421,
  [6430] = CommonFun.calcBuff_6430,
  [6440] = CommonFun.calcBuff_6440,
  [6450] = CommonFun.calcBuff_6450,
  [6451] = CommonFun.calcBuff_6451,
  [6455] = CommonFun.calcBuff_6455,
  [6456] = CommonFun.calcBuff_6456,
  [6460] = CommonFun.calcBuff_6460,
  [6461] = CommonFun.calcBuff_6461,
  [6470] = CommonFun.calcBuff_6470,
  [6480] = CommonFun.calcBuff_6480,
  [6490] = CommonFun.calcBuff_6490,
  [6500] = CommonFun.calcBuff_6500,
  [6501] = CommonFun.calcBuff_6501,
  [6510] = CommonFun.calcBuff_6510,
  [6511] = CommonFun.calcBuff_6511,
  [6520] = CommonFun.calcBuff_6520,
  [6530] = CommonFun.calcBuff_6530,
  [6540] = CommonFun.calcBuff_6540,
  [6550] = CommonFun.calcBuff_6550,
  [6551] = CommonFun.calcBuff_6551,
  [6560] = CommonFun.calcBuff_6560,
  [6570] = CommonFun.calcBuff_6570,
  [6580] = CommonFun.calcBuff_6580,
  [6590] = CommonFun.calcBuff_6590,
  [6600] = CommonFun.calcBuff_6600,
  [6610] = CommonFun.calcBuff_6610,
  [6620] = CommonFun.calcBuff_6620,
  [6630] = CommonFun.calcBuff_6630,
  [6631] = CommonFun.calcBuff_6631,
  [6632] = CommonFun.calcBuff_6632,
  [6633] = CommonFun.calcBuff_6633,
  [6634] = CommonFun.calcBuff_6634,
  [6635] = CommonFun.calcBuff_6635,
  [6636] = CommonFun.calcBuff_6636,
  [6637] = CommonFun.calcBuff_6637,
  [6640] = CommonFun.calcBuff_6640,
  [6650] = CommonFun.calcBuff_6650,
  [6660] = CommonFun.calcBuff_6660,
  [6670] = CommonFun.calcBuff_6670,
  [6671] = CommonFun.calcBuff_6671,
  [6680] = CommonFun.calcBuff_6680,
  [6700] = CommonFun.calcBuff_6700,
  [6710] = CommonFun.calcBuff_6710,
  [6711] = CommonFun.calcBuff_6711,
  [6720] = CommonFun.calcBuff_6720,
  [6730] = CommonFun.calcBuff_6730,
  [6740] = CommonFun.calcBuff_6740,
  [6741] = CommonFun.calcBuff_6741,
  [6742] = CommonFun.calcBuff_6742,
  [6800] = CommonFun.calcBuff_6800,
  [6801] = CommonFun.calcBuff_6801,
  [6802] = CommonFun.calcBuff_6802,
  [6810] = CommonFun.calcBuff_6810,
  [6820] = CommonFun.calcBuff_6820,
  [6830] = CommonFun.calcBuff_6830,
  [6840] = CommonFun.calcBuff_6840,
  [6850] = CommonFun.calcBuff_6850,
  [6851] = CommonFun.calcBuff_6851,
  [6852] = CommonFun.calcBuff_6852,
  [6860] = CommonFun.calcBuff_6860,
  [6870] = CommonFun.calcBuff_6870,
  [6871] = CommonFun.calcBuff_6871,
  [6872] = CommonFun.calcBuff_6872,
  [6873] = CommonFun.calcBuff_6873,
  [6874] = CommonFun.calcBuff_6874,
  [6875] = CommonFun.calcBuff_6875,
  [6876] = CommonFun.calcBuff_6876,
  [6877] = CommonFun.calcBuff_6877,
  [6880] = CommonFun.calcBuff_6880,
  [6890] = CommonFun.calcBuff_6890,
  [6900] = CommonFun.calcBuff_6900,
  [6901] = CommonFun.calcBuff_6901,
  [6902] = CommonFun.calcBuff_6902,
  [6903] = CommonFun.calcBuff_6903,
  [6910] = CommonFun.calcBuff_6910,
  [6920] = CommonFun.calcBuff_6920,
  [6930] = CommonFun.calcBuff_6930,
  [6940] = CommonFun.calcBuff_6940,
  [6950] = CommonFun.calcBuff_6950,
  [6960] = CommonFun.calcBuff_6960,
  [6970] = CommonFun.calcBuff_6970,
  [6971] = CommonFun.calcBuff_6971,
  [6972] = CommonFun.calcBuff_6972,
  [6980] = CommonFun.calcBuff_6980,
  [6981] = CommonFun.calcBuff_6981,
  [6982] = CommonFun.calcBuff_6982,
  [6983] = CommonFun.calcBuff_6983,
  [6984] = CommonFun.calcBuff_6984,
  [6985] = CommonFun.calcBuff_6985,
  [6986] = CommonFun.calcBuff_6986,
  [6990] = CommonFun.calcBuff_6990,
  [7000] = CommonFun.calcBuff_7000,
  [7010] = CommonFun.calcBuff_7010,
  [7020] = CommonFun.calcBuff_7020,
  [7030] = CommonFun.calcBuff_7030,
  [7040] = CommonFun.calcBuff_7040,
  [7041] = CommonFun.calcBuff_7041,
  [7050] = CommonFun.calcBuff_7050,
  [7051] = CommonFun.calcBuff_7051,
  [7060] = CommonFun.calcBuff_7060,
  [7070] = CommonFun.calcBuff_7070,
  [7071] = CommonFun.calcBuff_7071,
  [7080] = CommonFun.calcBuff_7080,
  [7081] = CommonFun.calcBuff_7081,
  [7082] = CommonFun.calcBuff_7082,
  [7083] = CommonFun.calcBuff_7083,
  [7090] = CommonFun.calcBuff_7090,
  [7100] = CommonFun.calcBuff_7100,
  [7110] = CommonFun.calcBuff_7110,
  [7120] = CommonFun.calcBuff_7120,
  [7130] = CommonFun.calcBuff_7130,
  [7140] = CommonFun.calcBuff_7140,
  [7150] = CommonFun.calcBuff_7150,
  [7160] = CommonFun.calcBuff_7160,
  [7170] = CommonFun.calcBuff_7170,
  [7180] = CommonFun.calcBuff_7180,
  [7190] = CommonFun.calcBuff_7190,
  [7191] = CommonFun.calcBuff_7191,
  [7200] = CommonFun.calcBuff_7200,
  [7210] = CommonFun.calcBuff_7210,
  [7220] = CommonFun.calcBuff_7220,
  [7221] = CommonFun.calcBuff_7221,
  [7222] = CommonFun.calcBuff_7222,
  [7223] = CommonFun.calcBuff_7223,
  [7224] = CommonFun.calcBuff_7224,
  [7225] = CommonFun.calcBuff_7225,
  [7230] = CommonFun.calcBuff_7230,
  [7240] = CommonFun.calcBuff_7240,
  [7250] = CommonFun.calcBuff_7250,
  [7260] = CommonFun.calcBuff_7260,
  [7300] = CommonFun.calcBuff_7300,
  [7301] = CommonFun.calcBuff_7301,
  [7302] = CommonFun.calcBuff_7302,
  [7310] = CommonFun.calcBuff_7310,
  [7311] = CommonFun.calcBuff_7311,
  [7312] = CommonFun.calcBuff_7312,
  [7320] = CommonFun.calcBuff_7320,
  [7321] = CommonFun.calcBuff_7321,
  [7322] = CommonFun.calcBuff_7322,
  [7330] = CommonFun.calcBuff_7330,
  [7331] = CommonFun.calcBuff_7331,
  [7332] = CommonFun.calcBuff_7332,
  [7333] = CommonFun.calcBuff_7333,
  [7334] = CommonFun.calcBuff_7334,
  [7335] = CommonFun.calcBuff_7335,
  [7340] = CommonFun.calcBuff_7340,
  [7341] = CommonFun.calcBuff_7341,
  [7342] = CommonFun.calcBuff_7342,
  [7343] = CommonFun.calcBuff_7343,
  [7344] = CommonFun.calcBuff_7344,
  [7345] = CommonFun.calcBuff_7345,
  [7350] = CommonFun.calcBuff_7350,
  [7351] = CommonFun.calcBuff_7351,
  [7352] = CommonFun.calcBuff_7352,
  [7360] = CommonFun.calcBuff_7360,
  [7361] = CommonFun.calcBuff_7361,
  [7362] = CommonFun.calcBuff_7362,
  [7370] = CommonFun.calcBuff_7370,
  [7371] = CommonFun.calcBuff_7371,
  [7372] = CommonFun.calcBuff_7372,
  [7380] = CommonFun.calcBuff_7380,
  [7381] = CommonFun.calcBuff_7381,
  [7382] = CommonFun.calcBuff_7382,
  [7390] = CommonFun.calcBuff_7390,
  [7391] = CommonFun.calcBuff_7391,
  [7392] = CommonFun.calcBuff_7392,
  [7400] = CommonFun.calcBuff_7400,
  [7401] = CommonFun.calcBuff_7401,
  [7402] = CommonFun.calcBuff_7402,
  [7410] = CommonFun.calcBuff_7410,
  [7411] = CommonFun.calcBuff_7411,
  [7412] = CommonFun.calcBuff_7412,
  [7420] = CommonFun.calcBuff_7420,
  [7421] = CommonFun.calcBuff_7421,
  [7422] = CommonFun.calcBuff_7422,
  [7430] = CommonFun.calcBuff_7430,
  [7431] = CommonFun.calcBuff_7431,
  [7432] = CommonFun.calcBuff_7432,
  [7440] = CommonFun.calcBuff_7440,
  [7441] = CommonFun.calcBuff_7441,
  [7442] = CommonFun.calcBuff_7442,
  [7450] = CommonFun.calcBuff_7450,
  [7451] = CommonFun.calcBuff_7451,
  [7452] = CommonFun.calcBuff_7452,
  [7460] = CommonFun.calcBuff_7460,
  [7470] = CommonFun.calcBuff_7470,
  [7480] = CommonFun.calcBuff_7480,
  [7490] = CommonFun.calcBuff_7490,
  [7491] = CommonFun.calcBuff_7491,
  [7492] = CommonFun.calcBuff_7492,
  [7500] = CommonFun.calcBuff_7500,
  [7510] = CommonFun.calcBuff_7510,
  [7520] = CommonFun.calcBuff_7520,
  [7521] = CommonFun.calcBuff_7521,
  [7530] = CommonFun.calcBuff_7530,
  [7540] = CommonFun.calcBuff_7540,
  [7550] = CommonFun.calcBuff_7550,
  [7560] = CommonFun.calcBuff_7560,
  [7570] = CommonFun.calcBuff_7570,
  [7580] = CommonFun.calcBuff_7580,
  [7590] = CommonFun.calcBuff_7590,
  [7600] = CommonFun.calcBuff_7600,
  [7610] = CommonFun.calcBuff_7610,
  [7620] = CommonFun.calcBuff_7620,
  [7621] = CommonFun.calcBuff_7621,
  [7622] = CommonFun.calcBuff_7622,
  [7630] = CommonFun.calcBuff_7630,
  [7631] = CommonFun.calcBuff_7631,
  [7640] = CommonFun.calcBuff_7640,
  [7650] = CommonFun.calcBuff_7650,
  [7660] = CommonFun.calcBuff_7660,
  [7670] = CommonFun.calcBuff_7670,
  [7680] = CommonFun.calcBuff_7680,
  [7681] = CommonFun.calcBuff_7681,
  [7690] = CommonFun.calcBuff_7690,
  [7700] = CommonFun.calcBuff_7700,
  [7701] = CommonFun.calcBuff_7701,
  [7702] = CommonFun.calcBuff_7702,
  [7703] = CommonFun.calcBuff_7703,
  [7710] = CommonFun.calcBuff_7710,
  [7711] = CommonFun.calcBuff_7711,
  [7720] = CommonFun.calcBuff_7720,
  [7730] = CommonFun.calcBuff_7730,
  [7740] = CommonFun.calcBuff_7740,
  [7750] = CommonFun.calcBuff_7750,
  [7760] = CommonFun.calcBuff_7760,
  [7770] = CommonFun.calcBuff_7770,
  [7780] = CommonFun.calcBuff_7780,
  [7790] = CommonFun.calcBuff_7790,
  [7792] = CommonFun.calcBuff_7792,
  [7793] = CommonFun.calcBuff_7793,
  [7794] = CommonFun.calcBuff_7794,
  [7800] = CommonFun.calcBuff_7800,
  [7810] = CommonFun.calcBuff_7810,
  [7820] = CommonFun.calcBuff_7820,
  [7821] = CommonFun.calcBuff_7821,
  [7830] = CommonFun.calcBuff_7830,
  [7840] = CommonFun.calcBuff_7840,
  [7850] = CommonFun.calcBuff_7850,
  [7860] = CommonFun.calcBuff_7860,
  [7870] = CommonFun.calcBuff_7870,
  [7871] = CommonFun.calcBuff_7871,
  [7880] = CommonFun.calcBuff_7880,
  [7890] = CommonFun.calcBuff_7890,
  [7900] = CommonFun.calcBuff_7900,
  [7901] = CommonFun.calcBuff_7901,
  [7910] = CommonFun.calcBuff_7910,
  [7920] = CommonFun.calcBuff_7920,
  [7930] = CommonFun.calcBuff_7930,
  [7940] = CommonFun.calcBuff_7940,
  [7950] = CommonFun.calcBuff_7950,
  [7960] = CommonFun.calcBuff_7960,
  [7970] = CommonFun.calcBuff_7970,
  [7980] = CommonFun.calcBuff_7980,
  [7990] = CommonFun.calcBuff_7990,
  [7991] = CommonFun.calcBuff_7991,
  [8000] = CommonFun.calcBuff_8000,
  [8010] = CommonFun.calcBuff_8010,
  [8011] = CommonFun.calcBuff_8011,
  [8012] = CommonFun.calcBuff_8012,
  [8020] = CommonFun.calcBuff_8020,
  [8021] = CommonFun.calcBuff_8021,
  [8022] = CommonFun.calcBuff_8022,
  [8030] = CommonFun.calcBuff_8030,
  [8031] = CommonFun.calcBuff_8031,
  [8032] = CommonFun.calcBuff_8032,
  [8040] = CommonFun.calcBuff_8040,
  [8050] = CommonFun.calcBuff_8050,
  [8060] = CommonFun.calcBuff_8060,
  [8070] = CommonFun.calcBuff_8070,
  [8080] = CommonFun.calcBuff_8080,
  [8090] = CommonFun.calcBuff_8090,
  [8091] = CommonFun.calcBuff_8091,
  [8092] = CommonFun.calcBuff_8092,
  [8100] = CommonFun.calcBuff_8100,
  [8110] = CommonFun.calcBuff_8110,
  [8120] = CommonFun.calcBuff_8120,
  [8130] = CommonFun.calcBuff_8130,
  [8140] = CommonFun.calcBuff_8140,
  [8150] = CommonFun.calcBuff_8150,
  [8160] = CommonFun.calcBuff_8160,
  [8161] = CommonFun.calcBuff_8161,
  [8162] = CommonFun.calcBuff_8162,
  [8170] = CommonFun.calcBuff_8170,
  [8180] = CommonFun.calcBuff_8180,
  [8190] = CommonFun.calcBuff_8190,
  [8200] = CommonFun.calcBuff_8200,
  [8210] = CommonFun.calcBuff_8210,
  [8220] = CommonFun.calcBuff_8220,
  [8230] = CommonFun.calcBuff_8230,
  [8240] = CommonFun.calcBuff_8240,
  [8250] = CommonFun.calcBuff_8250,
  [8251] = CommonFun.calcBuff_8251,
  [8260] = CommonFun.calcBuff_8260,
  [8261] = CommonFun.calcBuff_8261,
  [8262] = CommonFun.calcBuff_8262,
  [8263] = CommonFun.calcBuff_8263,
  [8270] = CommonFun.calcBuff_8270,
  [8271] = CommonFun.calcBuff_8271,
  [8272] = CommonFun.calcBuff_8272,
  [8273] = CommonFun.calcBuff_8273,
  [8274] = CommonFun.calcBuff_8274,
  [8280] = CommonFun.calcBuff_8280,
  [8281] = CommonFun.calcBuff_8281,
  [8282] = CommonFun.calcBuff_8282,
  [8283] = CommonFun.calcBuff_8283,
  [8300] = CommonFun.calcBuff_8300,
  [8310] = CommonFun.calcBuff_8310,
  [8320] = CommonFun.calcBuff_8320,
  [8330] = CommonFun.calcBuff_8330,
  [8340] = CommonFun.calcBuff_8340,
  [8341] = CommonFun.calcBuff_8341,
  [8350] = CommonFun.calcBuff_8350,
  [8360] = CommonFun.calcBuff_8360,
  [8370] = CommonFun.calcBuff_8370,
  [8380] = CommonFun.calcBuff_8380,
  [8381] = CommonFun.calcBuff_8381,
  [8382] = CommonFun.calcBuff_8382,
  [8383] = CommonFun.calcBuff_8383,
  [8390] = CommonFun.calcBuff_8390,
  [8400] = CommonFun.calcBuff_8400,
  [8410] = CommonFun.calcBuff_8410,
  [8420] = CommonFun.calcBuff_8420,
  [8430] = CommonFun.calcBuff_8430,
  [8440] = CommonFun.calcBuff_8440,
  [8450] = CommonFun.calcBuff_8450,
  [8460] = CommonFun.calcBuff_8460,
  [8470] = CommonFun.calcBuff_8470,
  [8480] = CommonFun.calcBuff_8480,
  [8481] = CommonFun.calcBuff_8481,
  [8490] = CommonFun.calcBuff_8490,
  [8500] = CommonFun.calcBuff_8500,
  [8510] = CommonFun.calcBuff_8510,
  [8511] = CommonFun.calcBuff_8511,
  [8520] = CommonFun.calcBuff_8520,
  [8530] = CommonFun.calcBuff_8530,
  [8531] = CommonFun.calcBuff_8531,
  [8540] = CommonFun.calcBuff_8540,
  [100010] = CommonFun.calcBuff_100010,
  [100020] = CommonFun.calcBuff_100020,
  [100030] = CommonFun.calcBuff_100030,
  [100040] = CommonFun.calcBuff_100040,
  [100050] = CommonFun.calcBuff_100050,
  [100060] = CommonFun.calcBuff_100060,
  [100070] = CommonFun.calcBuff_100070,
  [100080] = CommonFun.calcBuff_100080,
  [100090] = CommonFun.calcBuff_100090,
  [100100] = CommonFun.calcBuff_100100,
  [100110] = CommonFun.calcBuff_100110,
  [100120] = CommonFun.calcBuff_100120,
  [100130] = CommonFun.calcBuff_100130,
  [100140] = CommonFun.calcBuff_100140,
  [100150] = CommonFun.calcBuff_100150,
  [100160] = CommonFun.calcBuff_100160,
  [100170] = CommonFun.calcBuff_100170,
  [100180] = CommonFun.calcBuff_100180,
  [100190] = CommonFun.calcBuff_100190,
  [100200] = CommonFun.calcBuff_100200,
  [100210] = CommonFun.calcBuff_100210,
  [100220] = CommonFun.calcBuff_100220,
  [100230] = CommonFun.calcBuff_100230
}

function CommonFun.calcExtraScore(maxApple, rank)
  if rank == nil or maxApple == nil then
    return 0
  end
  local appleparam = {
    [1] = 0.4,
    [2] = 0.2,
    [3] = 0.1,
    [4] = 0,
    [5] = 0,
    [6] = 0,
    [7] = 0,
    [8] = 0,
    [9] = 0,
    [10] = 0
  }
  local ExtraScore = 0
  if appleparam[rank] == nil then
    return 0
  else
    ExtraScore = maxApple * appleparam[rank]
    return ExtraScore
  end
end

function CommonFun.getExpExtra(npczone, npctype, stype, mapid)
  local extra = 0
  local mextra = 0
  local cur = os.time()
  if npczone == 1 then
    local starttime = os.time({
      year = 2016,
      month = 2,
      day = 24,
      hour = 9,
      min = 10
    })
    local endtime = os.time({
      year = 2016,
      month = 2,
      day = 28,
      hour = 9,
      min = 10
    })
    if cur >= starttime and cur <= endtime then
      extra = 0.5
    end
  elseif npczone == 3 then
    local starttime = os.time({
      year = 2016,
      month = 2,
      day = 25,
      hour = 9,
      min = 10
    })
    local endtime = os.time({
      year = 2016,
      month = 2,
      day = 28,
      hour = 9,
      min = 10
    })
    if cur >= starttime and cur <= endtime then
      extra = 1
    end
  elseif npczone == 4 then
    local starttime = os.time({
      year = 2016,
      month = 2,
      day = 25,
      hour = 9,
      min = 10
    })
    local endtime = os.time({
      year = 2016,
      month = 2,
      day = 26,
      hour = 9,
      min = 10
    })
    if cur >= starttime and cur <= endtime then
      extra = 2
    end
  elseif npczone == 5 then
    local starttime = os.time({
      year = 2016,
      month = 2,
      day = 25,
      hour = 9,
      min = 10
    })
    local endtime = os.time({
      year = 2016,
      month = 2,
      day = 26,
      hour = 9,
      min = 10
    })
    if cur >= starttime and cur <= endtime then
      extra = 3
    end
  end
  local mapgroup = {
    [1] = 0.5,
    [2] = 2
  }
  local starttime = os.time({
    year = 2016,
    month = 2,
    day = 27,
    hour = 11,
    min = 15
  })
  local endtime = os.time({
    year = 2016,
    month = 2,
    day = 28,
    hour = 11,
    min = 20
  })
  if cur >= starttime and cur <= endtime then
    if stype == 1 then
      if #mapgroup == 0 then
        mextra = 0
      else
        for k, v in pairs(mapgroup) do
          if k == mapid then
            mextra = v
            break
          end
        end
      end
    elseif npczone == 1 and (npctype == 3 or npctype == 4 or npctype == 5) then
      if #mapgroup == 0 then
        mextra = 0
      else
        for k, v in pairs(mapgroup) do
          if k == mapid then
            mextra = v
            break
          end
        end
      end
    end
  end
  return extra + mextra
end

function CommonFun.getItemReduceValue(deltalv, star)
  return 1
end

function CommonFun.getExpReduceValue(deltalv, star)
  local extrper = 1
  if 30 < deltalv then
    extrper = 0.975 ^ (deltalv - 30)
  end
  return extrper
end

function CommonFun.getDailyRatio(dailyextra)
  local ratio = 1 + dailyextra
  return ratio
end

function CommonFun.calcNpcDropBaseExp(damage, deltalv, npctype, npczone, maxhp, exp, extrabuff, membercount, layer, mapid, stype, killer, dailyextra, star)
  if maxhp <= damage then
    damage = maxhp
  end
  local extra = CommonFun.getExpExtra(npczone, npctype, stype, mapid)
  local reduce = CommonFun.getExpReduceValue(deltalv, star)
  if membercount == 0 then
    membercount = 1
  end
  if npctype == 5 then
    local e1 = (0.2 * killer + 0.8 * damage / maxhp) * exp * ((membercount - 1) * 0.1 + 1) / membercount * reduce
    if e1 <= 1 then
      e1 = 1
    end
    local e2 = e1 * CommonFun.getDailyRatio(dailyextra)
    local result = e2 * (1 + extra)
    if result <= 0 then
      result = 1
    end
    return result
  end
  local e3 = damage / maxhp * exp * ((membercount - 1) * 0.1 + 1) / membercount * reduce
  if e3 <= 1 then
    e3 = 1
  end
  local e4 = e3 * CommonFun.getDailyRatio(dailyextra)
  local result = e4 * (1 + extra)
  if result <= 1 then
    result = 1
  end
  return result
end

function CommonFun.openSkillDisplay()
  return 0
end

function CommonFun.calcUserDieDropBaseExp(lv)
  local tmp = lv * lv * 2
  if lv <= 10 and 50 <= tmp then
    return 50
  else
    return tmp
  end
end

function CommonFun.calcUserOfflineTime(logintime, offlinetime)
  if logintime < offlinetime + 1800 then
    return 0
  end
  local t = logintime - offlinetime
  if 43200 < t then
    t = 43200
  end
  return math.ceil(t / 60)
end

function CommonFun.calcUserOfflineExp(level, logintime, offlinetime)
  if level <= 30 then
    return 0
  end
  local min = CommonFun.calcUserOfflineTime(logintime, offlinetime)
  local exp = min * (1 * level + 10)
  return exp
end

function CommonFun.calcUserOfflineJobExp(level, logintime, offlinetime)
  if level <= 30 then
    return 0
  end
  local min = CommonFun.calcUserOfflineTime(logintime, offlinetime)
  local exp = min * (0.6 * level + 10)
  return exp
end

function CommonFun.calcDailyExpSub(exp)
  return exp
end

CommonFun.SiteStrengthenAttr = {
  [1] = {
    [CommonFun.RoleData.EATTRTYPE_DEF] = 1.5,
    [CommonFun.RoleData.EATTRTYPE_ATK] = 1.6
  },
  [2] = {
    [CommonFun.RoleData.EATTRTYPE_DEF] = 1.2
  },
  [3] = {
    [CommonFun.RoleData.EATTRTYPE_DEF] = 0.8
  },
  [4] = {
    [CommonFun.RoleData.EATTRTYPE_DEF] = 1
  },
  [5] = {
    [CommonFun.RoleData.EATTRTYPE_ATK] = 0.5,
    [CommonFun.RoleData.EATTRTYPE_MATK] = 0.5,
    [CommonFun.RoleData.EATTRTYPE_MAXHP] = 10
  },
  [6] = {
    [CommonFun.RoleData.EATTRTYPE_ATK] = 0.5,
    [CommonFun.RoleData.EATTRTYPE_MATK] = 0.5,
    [CommonFun.RoleData.EATTRTYPE_MAXHP] = 10
  },
  [7] = {
    [CommonFun.RoleData.EATTRTYPE_ATK] = 1.6,
    [CommonFun.RoleData.EATTRTYPE_MATK] = 1
  },
  [8] = {
    [CommonFun.RoleData.EATTRTYPE_MDEF] = 0.6
  },
  [9] = {
    [CommonFun.RoleData.EATTRTYPE_MDEF] = 0.6
  },
  [10] = {
    [CommonFun.RoleData.EATTRTYPE_MDEF] = 0.4
  },
  [11] = {
    [CommonFun.RoleData.EATTRTYPE_MDEF] = 0.5
  },
  [12] = {
    [CommonFun.RoleData.EATTRTYPE_MDEF] = 0.4
  }
}

function CommonFun.calcSiteStrengthAttr(site, lv)
  local result = {}
  local attrData = CommonFun.SiteStrengthenAttr[site]
  if attrData == nil then
    return 0
  end
  for attr, v in pairs(attrData) do
    local cell = {
      attrName = attr,
      value = v * lv
    }
    result[#result + 1] = cell
  end
  return result
end

function CommonFun.calcEquipStrengthCost(site, lv)
  local qparam = 3.2
  local tparam = GameConfig.StrengthCost.Type[site]
  if qparam == nil or tparam == nil then
    return 0
  end
  local a1 = lv % 10
  local b1 = GameConfig.StrengthCost.Remainder[a1]
  local a2 = math.floor(lv / 10)
  local b2 = GameConfig.StrengthCost.Quotient[a2]
  local result = GameConfig.StrengthCost.BaseCost * b1 * b2 * qparam * tparam
  result = result - result % 10
  return result
end

CommonFun.PackType = {EPACKTYPE_EQUIP = 2, EPACKTYPE_SHADOWEQUIP = 20}
CommonFun.EquipPos = {
  EEQUIPPOS_WEAPON = 7,
  EEQUIPPOS_ARMOUR = 2,
  EEQUIPPOS_SHIELD = 1,
  EEQUIPPOS_ROBE = 3,
  EEQUIPPOS_SHOES = 4,
  EEQUIPPOS_ACCESSORY1 = 5,
  EEQUIPPOS_ACCESSORY2 = 6,
  EEQUIPPOS_HEAD = 8,
  EEQUIPPOS_BACK = 11,
  EEQUIPPOS_FACE = 9,
  EEQUIPPOS_TAIL = 12,
  EEQUIPPOS_MOUNT = 13,
  EEQUIPPOS_MOUTH = 10,
  EEQUIPPOS_BARROW = 14,
  EEQUIPPOS_ARTIFACT = 15,
  EEQUIPPOS_ARTIFACT_HEAD = 16,
  EEQUIPPOS_ARTIFACT_BACK = 17,
  EEQUIPPOS_ARTIFACT_RING1 = 19
}
CommonFun.Equip = {
  id = 0,
  refinelv = 0,
  quench_per = 0
}
CommonFun.BufferLayer = {EBUFFERLAYER_SHADOW = 1}

function CommonFun.Equip:new(obj)
  obj = obj or {}
  setmetatable(obj, self)
  self.__index = self
  self.id = 0
  self.refinelv = 0
  self.quench_per = 0
  return obj
end

function CommonFun.getAddictSec1()
  local sec = 9000.0
  return sec
end

function CommonFun.getAddictSec2()
  local sec = 14400
  return sec
end

function CommonFun.getAddictBase(lv)
  if 160 <= lv then
    return 27000.0
  end
  return 18000
end

function CommonFun.getAddictStage()
  return 9000.0
end

function CommonFun.GetRandom(array, index)
  local MAX_RANDOM_INDEX = 100
  local group = math.ceil(index / 5)
  local key = index - math.floor(index / 5) * 5
  key = key ~= 0 and key or 5
  if array[group] == nil or index > MAX_RANDOM_INDEX then
    return 0, index
  end
  local groupValue = array[group]
  local value = math.floor(groupValue / math.pow(100, 5 - key)) % 100
  local newIndex = index == MAX_RANDOM_INDEX and 1 or index + 1
  return value, newIndex
end

function CommonFun.CalcTeamPwsScore(winteam_ave, loseteam_ave, winmax, losemax, selfscore, iswin, extrascore)
  local user_score = 0
  local winscore = 0
  local losescore = 0
  if selfscore < 500 then
    winscore = 100
    losescore = 50
  elseif selfscore < 1200 then
    winscore = 100
    losescore = 20
  elseif selfscore < 2000 then
    winscore = 100
    losescore = 0
  elseif selfscore < 2600 then
    winscore = 100
    losescore = -30
  elseif selfscore < 3000 then
    winscore = 100
    losescore = -70
  else
    winscore = 100
    losescore = -120
  end
  local selfscore0 = selfscore
  if 3000 <= winteam_ave then
    winteam_ave = winteam_ave + (winteam_ave - 3000) * 9
  end
  if 3000 <= loseteam_ave then
    loseteam_ave = loseteam_ave + (loseteam_ave - 3000) * 9
  end
  if 3000 <= selfscore0 then
    selfscore = selfscore0 + (selfscore0 - 3000) * 9
  end
  if iswin == true then
    local a = loseteam_ave - winteam_ave
    local b = selfscore - winteam_ave + 100
    local c = 1
    local grouppara = 1
    if 50 >= math.abs(a) then
      a = 1
    end
    if b <= -250 then
      b = -250
    end
    local avepara = 0.1 * math.sin(math.min(math.abs(a), 400) * math.pi / 800) * math.abs(a) / a
    if math.abs(b) > 150 then
      grouppara = 1 / math.tan((math.min(math.abs(b), 480) - 0.1) / 1000 * math.pi) * ((math.min(math.abs(b), 480) - 0.1) / 1000 * math.pi)
    end
    if 500 < b then
      c = (1000 - math.min(1000, b)) / 1000
    end
    user_score = math.max((1.1 + avepara) * (0.2 * c + 0.8 * grouppara) * winscore, 1)
  end
  if iswin == false then
    if selfscore < 1200 then
      local a = winteam_ave - loseteam_ave
      local b = selfscore - loseteam_ave + 100
      if 50 >= math.abs(a) then
        a = 1
      end
      if b <= -250 then
        b = -250
      end
      local grouppara = 1
      local avepara = 0.1 * math.sin(math.min(math.abs(a), 400) * math.pi / 800) * math.abs(a) / a
      if math.abs(b) > 150 then
        grouppara = 1 / math.tan((math.min(math.abs(b), 480) - 0.1) / 1000 * math.pi) * ((math.min(math.abs(b), 480) - 0.1) / 1000 * math.pi)
      end
      user_score = math.max((1.1 + avepara) * (0.2 + 0.8 * grouppara) * losescore, 1)
    elseif 1200 <= selfscore then
      local a = winteam_ave - loseteam_ave
      local b = selfscore - loseteam_ave + 100
      if 50 >= math.abs(a) then
        a = 1
      end
      if b <= -250 then
        b = -250
      end
      local grouppara = 0.25
      local avepara = -0.1 * math.sin(math.min(math.abs(a), 400) * math.pi / 800) * math.abs(a) / a
      if 150 < b then
        grouppara = 0.75 * math.sin(math.min(math.abs(b), 480) * math.pi / 1000) * math.abs(b) / b
      end
      if b < -150 then
        grouppara = 0.25 * math.sin(math.min(math.abs(b), 480) * math.pi / 1000) * math.abs(b) / b
      end
      user_score = math.min((0.9 + avepara) * (0.75 + grouppara) * losescore, -1)
    end
  end
  if 3000 <= user_score + selfscore + extrascore then
    user_score = 3000 + (user_score + selfscore + extrascore - 3000) / 10 - selfscore0
  else
    user_score = user_score + selfscore + extrascore - selfscore0
  end
  return user_score
end

function CommonFun.CalcRaidDeadBossSummonLevel(raidtype, param)
  local a = math.random(0, 100)
  local boss_lv = 1
  if raidtype == 5 then
    if param == 1 then
      return 0
    elseif param == 2 then
      boss_lv = 1
    elseif param == 3 then
      if a < 50 then
        boss_lv = 2
      else
        boss_lv = 3
      end
    elseif param == 4 then
      if a < 50 then
        boss_lv = 4
      else
        boss_lv = 5
      end
    end
  end
  return boss_lv
end

function CommonFun.CalcExpRaidBaseExp(lv, maxlv, killNum, monthcard)
  local baseparam = {
    [20] = 598752,
    [21] = 603029,
    [22] = 607306,
    [23] = 630115,
    [24] = 647222,
    [25] = 755568,
    [26] = 760320,
    [27] = 765072,
    [28] = 769824,
    [29] = 784080,
    [30] = 787644,
    [31] = 791208,
    [32] = 798336,
    [33] = 946598,
    [34] = 979387,
    [35] = 1012176,
    [36] = 1077754,
    [37] = 1087020,
    [38] = 1096286,
    [39] = 1114819,
    [40] = 1123373,
    [41] = 1638252,
    [42] = 1683990,
    [43] = 1729728,
    [44] = 1821204,
    [45] = 2378376,
    [46] = 2380307,
    [47] = 2382237,
    [48] = 2384168,
    [49] = 2386098,
    [50] = 2388029,
    [51] = 2389959,
    [52] = 2391890,
    [53] = 2393820,
    [54] = 2395751,
    [55] = 2397681,
    [56] = 2399612,
    [57] = 2401542,
    [58] = 2403473,
    [59] = 2405403,
    [60] = 2432430,
    [61] = 2448112,
    [62] = 2463793,
    [63] = 2476683,
    [64] = 2489573,
    [65] = 2502463,
    [66] = 2515352,
    [67] = 2528242,
    [68] = 2541132,
    [69] = 2554022,
    [70] = 2566912,
    [71] = 2579801,
    [72] = 2695810,
    [73] = 2761090,
    [74] = 2826371,
    [75] = 2891651,
    [76] = 2956932,
    [77] = 3022213,
    [78] = 3087493,
    [79] = 3152774,
    [80] = 3218054,
    [81] = 3740299,
    [82] = 3947724,
    [83] = 4155149,
    [84] = 4362574,
    [85] = 4569998,
    [86] = 4777423,
    [87] = 4984848,
    [88] = 5192273,
    [89] = 5399698,
    [90] = 5607122,
    [91] = 7473946,
    [92] = 7591003,
    [93] = 7708061,
    [94] = 7825118,
    [95] = 7942176,
    [96] = 8059234,
    [97] = 8176291,
    [98] = 8293349,
    [99] = 8410406,
    [100] = 8527464,
    [101] = 9580982,
    [102] = 9660288,
    [103] = 9739594,
    [104] = 9818899,
    [105] = 9898205,
    [106] = 9977510,
    [107] = 10056816,
    [108] = 10136122,
    [109] = 10215427,
    [110] = 10294733,
    [111] = 11008483,
    [112] = 11063567,
    [113] = 11118652,
    [114] = 11173736,
    [115] = 11228820,
    [116] = 11283905,
    [117] = 11338989,
    [118] = 11394073,
    [119] = 11449157,
    [120] = 11504242
  }
  local calclv = lv
  if maxlv < calclv then
    calclv = maxlv
  end
  if calclv < 20 then
    return 0
  end
  local monthpara = 1
  if monthcard == true then
    monthpara = 1.33
  end
  local stagepara = 1
  if killNum < 210 then
    stagepara = 1.2
  end
  if killNum < 240 and 210 <= killNum then
    stagepara = 1.35
  end
  if killNum < 270 and 240 <= killNum then
    stagepara = 1.5
  end
  if killNum < 300 and 270 <= killNum then
    stagepara = 1.65
  end
  if killNum == 300 then
    stagepara = 1.8
  end
  local zhuigan = 1
  if lv < 80 then
    zhuigan = 3
  end
  local baseexp = baseparam[calclv] * monthpara * stagepara * zhuigan
  if baseexp < 0 then
    return 0
  end
  return baseexp
end

function CommonFun.CalcExpRaidJobExp(lv, maxlv, killNum, monthcard)
  local jobparam = {
    [20] = 399168,
    [21] = 332640,
    [22] = 403920,
    [23] = 406296,
    [24] = 413424,
    [25] = 424829,
    [26] = 447638,
    [27] = 477576,
    [28] = 507514,
    [29] = 507989,
    [30] = 508464,
    [31] = 508939,
    [32] = 510365,
    [33] = 524621,
    [34] = 538877,
    [35] = 613008,
    [36] = 641520,
    [37] = 670032,
    [38] = 698544,
    [39] = 727056,
    [40] = 755568,
    [41] = 898128,
    [42] = 912681,
    [43] = 927234,
    [44] = 989604,
    [45] = 1051974,
    [46] = 1078585,
    [47] = 1105196,
    [48] = 1131808,
    [49] = 1158419,
    [50] = 1185030,
    [51] = 1318086,
    [52] = 1318446,
    [53] = 1318806,
    [54] = 1319167,
    [55] = 1319527,
    [56] = 1319887,
    [57] = 1320247,
    [58] = 1320607,
    [59] = 1320967,
    [60] = 1321328,
    [61] = 1324569,
    [62] = 1362636,
    [63] = 1382891,
    [64] = 1403147,
    [65] = 1439054,
    [66] = 1474961,
    [67] = 1546776,
    [68] = 1547390,
    [69] = 1548004,
    [70] = 1548617,
    [71] = 1550459,
    [72] = 1580842,
    [73] = 1611225,
    [74] = 1641608,
    [75] = 1671991,
    [76] = 1793524,
    [77] = 1951884,
    [78] = 2110244,
    [79] = 2161299,
    [80] = 2212353,
    [81] = 2314462,
    [82] = 2439320,
    [83] = 2564179,
    [84] = 2689038,
    [85] = 2813897,
    [86] = 2938756,
    [87] = 3063614,
    [88] = 3188473,
    [89] = 3313332,
    [90] = 3438191,
    [91] = 4561920,
    [92] = 4621742,
    [93] = 4681565,
    [94] = 4741387,
    [95] = 4801210,
    [96] = 4861032,
    [97] = 4920854,
    [98] = 4980677,
    [99] = 5040499,
    [100] = 5100322,
    [101] = 5638723,
    [102] = 5662853,
    [103] = 5686982,
    [104] = 5711112,
    [105] = 5735242,
    [106] = 5759371,
    [107] = 5783501,
    [108] = 5807630,
    [109] = 5831760,
    [110] = 5855890,
    [111] = 6073056,
    [112] = 6096775,
    [113] = 6120494,
    [114] = 6144213,
    [115] = 6167932,
    [116] = 6191652,
    [117] = 6215371,
    [118] = 6239090,
    [119] = 6262809,
    [120] = 6286528
  }
  local calclv = lv
  if maxlv < calclv then
    calclv = maxlv
  end
  if calclv < 20 then
    return 0
  end
  local monthpara = 1
  if monthcard == true then
    monthpara = 1.33
  end
  local stagepara = 1
  if killNum < 210 then
    stagepara = 1.6
  end
  if killNum < 240 and 210 <= killNum then
    stagepara = 1.8
  end
  if killNum < 270 and 240 <= killNum then
    stagepara = 2.0
  end
  if killNum < 300 and 270 <= killNum then
    stagepara = 2.2
  end
  if killNum == 300 then
    stagepara = 2.4
  end
  local jobexp = jobparam[calclv] * monthpara * stagepara
  if jobexp < 0 then
    return 0
  end
  return jobexp
end

function CommonFun.CalcExpRaidMaterial(killNum, monthcard)
  local monthpara = 1
  if monthcard == true then
    monthpara = 1.33
  end
  local stagepara = 1
  if killNum < 210 then
    stagepara = 80
  end
  if killNum < 240 and 210 <= killNum then
    stagepara = 90
  end
  if killNum < 270 and 240 <= killNum then
    stagepara = 100
  end
  if killNum < 300 and 270 <= killNum then
    stagepara = 110
  end
  if killNum == 300 then
    stagepara = 120
  end
  local material = math.floor(monthpara * stagepara)
  if material < 0 then
    return 0
  end
  return material
end

function CommonFun.CalcBattlePassExpByStat(statid, statnum)
  local A = 0
  if statid == 1 then
    if 200 <= statnum then
      A = A + 100
    elseif 150 <= statnum then
      A = A + 50
    else
      if 80 <= statnum then
        A = A + 30
      else
      end
    end
  end
  if statid == 2 then
    if 6 <= statnum then
      A = A + 100
    elseif 4 <= statnum then
      A = A + 50
    else
      if 3 <= statnum then
        A = A + 30
      else
      end
    end
  end
  if statid == 3 then
    if 20 <= statnum then
      A = A + 100
    elseif 12 <= statnum then
      A = A + 50
    else
      if 6 <= statnum then
        A = A + 30
      else
      end
    end
  end
  if statid == 4 then
    if 20 <= statnum then
      A = A + 100
    elseif 12 <= statnum then
      A = A + 50
    else
      if 6 <= statnum then
        A = A + 30
      else
      end
    end
  end
  if statid == 5 then
    if 20 <= statnum then
      A = A + 100
    elseif 12 <= statnum then
      A = A + 50
    else
      if 6 <= statnum then
        A = A + 30
      else
      end
    end
  end
  if statid == 6 then
    if 5 <= statnum then
      A = A + 100
    elseif 3 <= statnum then
      A = A + 50
    else
      if 1 <= statnum then
        A = A + 30
      else
      end
    end
  end
  if statid == 7 then
    if 3 <= statnum then
      A = A + 100
    elseif 2 <= statnum then
      A = A + 50
    else
      if 1 <= statnum then
        A = A + 30
      else
      end
    end
  end
  if statid == 8 then
    if 2 <= statnum then
      A = A + 100
    else
      if 1 <= statnum then
        A = A + 50
      else
      end
    end
  end
  if statid == 10 then
    if 60 <= statnum then
      A = A + 100
    elseif 30 <= statnum then
      A = A + 50
    else
      if 10 <= statnum then
        A = A + 30
      else
      end
    end
  end
  if statid == 11 then
    if 3 <= statnum then
      A = A + 100
    elseif 2 <= statnum then
      A = A + 50
    else
      if 1 <= statnum then
        A = A + 30
      else
      end
    end
  end
  if statid == 12 then
    if 50 <= statnum then
      A = A + 100
    elseif 30 <= statnum then
      A = A + 50
    else
      if 10 <= statnum then
        A = A + 30
      else
      end
    end
  end
  if statid == 16 then
    if 30 <= statnum then
      A = A + 100
    elseif 20 <= statnum then
      A = A + 50
    else
      if 10 <= statnum then
        A = A + 30
      else
      end
    end
  end
  if statid == 17 then
    if 20 <= statnum then
      A = A + 100
    elseif 10 <= statnum then
      A = A + 50
    else
      if 5 <= statnum then
        A = A + 30
      else
      end
    end
  end
  if statid == 18 then
    if 10 <= statnum then
      A = A + 100
    elseif 5 <= statnum then
      A = A + 50
    else
      if 3 <= statnum then
        A = A + 30
      else
      end
    end
  end
  if statid == 19 then
    if 100 <= statnum then
      A = A + 100
    elseif 50 <= statnum then
      A = A + 50
    else
      if 20 <= statnum then
        A = A + 30
      else
      end
    end
  end
  return A
end

function calcDecomposeFloatParam(showtype)
  if showtype == 1 then
    return 0.5
  end
  if showtype == 2 then
    return 1.5
  end
  local r = math.random(0, 1660)
  if r <= 20 then
    return 0.5
  elseif r <= 60 then
    return 0.55
  elseif r <= 120 then
    return 0.6
  elseif r <= 200 then
    return 0.65
  elseif r <= 290 then
    return 0.7
  elseif r <= 380 then
    return 0.75
  elseif r <= 480 then
    return 0.8
  elseif r <= 580 then
    return 0.85
  elseif r <= 680 then
    return 0.9
  elseif r <= 780 then
    return 0.95
  elseif r <= 880 then
    return 1
  elseif r <= 980 then
    return 1.05
  elseif r <= 1080 then
    return 1.1
  elseif r <= 1180 then
    return 1.15
  elseif r <= 1280 then
    return 1.2
  elseif r <= 1370 then
    return 1.25
  elseif r <= 1460 then
    return 1.3
  elseif r <= 1540 then
    return 1.35
  elseif r <= 1600 then
    return 1.4
  elseif r <= 1640 then
    return 1.45
  elseif r <= 1660 then
    return 1.5
  end
  return 0
end

function calcDecomposeResult(param)
  if 500 <= param and param <= 750 then
    return 2
  elseif 800 <= param and param <= 1200 then
    return 3
  elseif 1250 <= param and param <= 1450 then
    return 4
  elseif 1500 <= param then
    return 5
  end
  return 1
end

function getRefineParam(refinelv)
  local refineparam = {
    [1] = 1,
    [2] = 1,
    [3] = 1,
    [4] = 1,
    [5] = 1.2,
    [6] = 1.4,
    [7] = 1.6,
    [8] = 2.2,
    [9] = 3.4,
    [10] = 5,
    [11] = 7.4,
    [12] = 12.4,
    [13] = 19.8,
    [14] = 35.2,
    [15] = 57.4
  }
  if refineparam[refinelv] == nil then
    return 1
  end
  return refineparam[refinelv]
end

function CommonFun.calcDecomposeCount1(srcUser, decomposenum, decomposeorinum, mtotalprice, metalrate, metalprice, refinelv, floatparam, costnum)
  local refineparam = getRefineParam(refinelv)
  if metalprice == 0 or floatparam == 0 then
    return 0
  end
  local basecnt = 0
  if costnum == 0 then
    basecnt = decomposenum * metalrate / metalprice * floatparam * refineparam
  else
    basecnt = decomposeorinum * metalrate / metalprice * floatparam * (refineparam + costnum - 1)
  end
  local metalparam = CommonFun.calcOrideconResearch(srcUser)
  local Num = basecnt * (1 + metalparam)
  if floatparam == 0.5 then
    return math.floor(Num)
  end
  if floatparam == 1.5 then
    return math.ceil(Num)
  end
end

function CommonFun.calcMerchantRaisePercent(entry)
  if entry == nil then
    return 0
  end
  local skilllv1 = entry:GetLernedSkillLevel(267)
  local skilllv2 = entry:GetLernedSkillLevel(1801)
  local jizi = skilllv1 * 20 + skilllv2 * 20
  return jizi
end

function CommonFun.calcMerchantGreedProb(entry)
  if entry == nil then
    return 0
  end
  local skilllv1 = entry:GetLernedSkillLevel(220)
  local skilllv2 = entry:GetLernedSkillLevel(472)
  local skilllv3 = entry:GetLernedSkillLevel(1819)
  local tanlan = skilllv1 * 20 + skilllv2 * 20 + skilllv3 * 20
  return tanlan
end

function CommonFun.GetJobParam(joblv)
  local Jobparam = {
    [170] = 26519612,
    [169] = 26363058,
    [168] = 26210144,
    [167] = 26053589,
    [166] = 25897035,
    [165] = 25740480,
    [164] = 25583926,
    [163] = 25427371,
    [162] = 25270817,
    [161] = 25117903,
    [160] = 26784454,
    [159] = 26616465,
    [158] = 26448476,
    [157] = 26280487,
    [156] = 26112498,
    [155] = 25944509,
    [154] = 25780427,
    [153] = 25612438,
    [152] = 25444450,
    [151] = 25276461,
    [150] = 25108472,
    [149] = 24940483,
    [148] = 24776401,
    [147] = 24608412,
    [146] = 24440423,
    [145] = 24272434,
    [144] = 24104446,
    [143] = 23936457,
    [142] = 23768468,
    [141] = 19670321,
    [140] = 19530331,
    [139] = 19390340,
    [138] = 19250349,
    [137] = 19110359,
    [136] = 18970368,
    [135] = 18833633,
    [134] = 18693642,
    [133] = 18553651,
    [132] = 18413661,
    [131] = 18273670,
    [130] = 18133679,
    [129] = 17808896,
    [128] = 17319604,
    [127] = 16835805,
    [126] = 16357498,
    [125] = 15884683,
    [124] = 15417360,
    [123] = 14955529,
    [122] = 14499191,
    [121] = 14048344,
    [120] = 13602990,
    [119] = 13558771,
    [118] = 13444704,
    [117] = 13330637,
    [116] = 13216570,
    [115] = 13102503,
    [114] = 12988436,
    [113] = 12874369,
    [112] = 12760302,
    [111] = 12646235,
    [110] = 10339038,
    [109] = 10188016,
    [108] = 10038040,
    [107] = 9889110,
    [106] = 9741225,
    [105] = 9652534,
    [104] = 9567070,
    [103] = 9489384,
    [102] = 9409319,
    [101] = 9332929,
    [100] = 9257620,
    [99] = 8633499,
    [98] = 8254374,
    [97] = 7881164,
    [96] = 7513868,
    [95] = 7152486,
    [94] = 6704489,
    [93] = 6172834,
    [92] = 5651035,
    [91] = 5363028,
    [90] = 4858481,
    [89] = 4473293,
    [88] = 4095499,
    [87] = 3725098,
    [86] = 3362090,
    [85] = 2901902,
    [84] = 2451572,
    [83] = 2113208,
    [82] = 1783881,
    [81] = 1577704,
    [80] = 1378921,
    [79] = 1113322,
    [78] = 1052468,
    [77] = 995546,
    [76] = 934933,
    [75] = 878766,
    [74] = 821649,
    [73] = 757617,
    [72] = 702495,
    [71] = 641365,
    [70] = 580755,
    [69] = 540372,
    [68] = 529400,
    [67] = 518428,
    [66] = 507456,
    [65] = 496485,
    [64] = 485513,
    [63] = 474541,
    [62] = 463569,
    [61] = 452598,
    [60] = 441626,
    [59] = 371831,
    [58] = 360859,
    [57] = 349887,
    [56] = 338915,
    [55] = 327944,
    [54] = 316972,
    [53] = 306000,
    [52] = 295028,
    [51] = 284056,
    [50] = 273085,
    [49] = 262113,
    [48] = 251141,
    [47] = 240169,
    [46] = 229198,
    [45] = 218226,
    [44] = 207254,
    [43] = 196282,
    [42] = 185311,
    [41] = 174339,
    [40] = 163367,
    [39] = 122984,
    [38] = 112012,
    [37] = 101040,
    [36] = 90068,
    [35] = 80861,
    [34] = 74693,
    [33] = 67870,
    [32] = 62787,
    [31] = 58855,
    [30] = 55682,
    [29] = 53098,
    [28] = 51101,
    [27] = 49787,
    [26] = 48379,
    [25] = 41088,
    [24] = 39680,
    [23] = 38272,
    [22] = 36864,
    [21] = 35455,
    [20] = 34047
  }
  if Jobparam[joblv] == nil then
    return 0
  end
  return Jobparam[joblv]
end

function CommonFun.CalcRiftJobExp(lv, maxlv, difficulty, speed_per, ratio, raidtype)
  local calclv = lv
  local diffpara = 1
  if raidtype == 65 then
    if maxlv < calclv then
      calclv = maxlv
    end
    if difficulty == 2 then
      diffpara = 1.1
    elseif difficulty == 3 or difficulty == 4 then
      diffpara = 1.2
    end
  end
  local JobExp = math.floor(CommonFun.GetJobParam(calclv) * speed_per * diffpara * ratio)
  if JobExp < 0 then
    return 0
  end
  return JobExp
end

function CommonFun.GetBaseParam(baselv)
  local Baseparam = {
    [170] = 45083341,
    [169] = 44817198,
    [168] = 44557245,
    [167] = 44291102,
    [166] = 44024959,
    [165] = 43758817,
    [164] = 43492674,
    [163] = 43226531,
    [162] = 42960388,
    [161] = 42700435,
    [160] = 45533571,
    [159] = 45247990,
    [158] = 44962409,
    [157] = 44676828,
    [156] = 44391247,
    [155] = 44105666,
    [154] = 43826726,
    [153] = 43541145,
    [152] = 43255564,
    [151] = 42969983,
    [150] = 42684402,
    [149] = 42398821,
    [148] = 42119882,
    [147] = 41834301,
    [146] = 41548719,
    [145] = 41263138,
    [144] = 40977557,
    [143] = 40691976,
    [142] = 40406395,
    [141] = 33439546,
    [140] = 33201562,
    [139] = 32963578,
    [138] = 32725594,
    [137] = 32487610,
    [136] = 32249625,
    [135] = 32017176,
    [134] = 31779192,
    [133] = 31541207,
    [132] = 31303223,
    [131] = 31065239,
    [130] = 30827255,
    [129] = 30275123,
    [128] = 29443327,
    [127] = 28620869,
    [126] = 27807746,
    [125] = 27003961,
    [124] = 26209512,
    [123] = 25424400,
    [122] = 24648624,
    [121] = 23882185,
    [120] = 23125082,
    [119] = 23049911,
    [118] = 22855997,
    [117] = 22662083,
    [116] = 22468169,
    [115] = 22274255,
    [114] = 22080341,
    [113] = 21886427,
    [112] = 21692513,
    [111] = 21498599,
    [110] = 17576365,
    [109] = 17319628,
    [108] = 17064668,
    [107] = 16811487,
    [106] = 16560083,
    [105] = 16409308,
    [104] = 16264019,
    [103] = 16131952,
    [102] = 15995842,
    [101] = 15865980,
    [100] = 15737954,
    [99] = 14676949,
    [98] = 14032436,
    [97] = 13397979,
    [96] = 12773576,
    [95] = 12159227,
    [94] = 11397632,
    [93] = 10493817,
    [92] = 9606760,
    [91] = 9117148,
    [90] = 8259417,
    [89] = 7604598,
    [88] = 6962348,
    [87] = 6332666,
    [86] = 5715553,
    [85] = 4933234,
    [84] = 4167672,
    [83] = 3592454,
    [82] = 3032597,
    [81] = 2682097,
    [80] = 2344165,
    [79] = 1892648,
    [78] = 1789196,
    [77] = 1692429,
    [76] = 1589386,
    [75] = 1493902,
    [74] = 1396803,
    [73] = 1287949,
    [72] = 1194242,
    [71] = 1090320,
    [70] = 987284,
    [69] = 918632,
    [68] = 899980,
    [67] = 881328,
    [66] = 862676,
    [65] = 844024,
    [64] = 825372,
    [63] = 806720,
    [62] = 788068,
    [61] = 769416,
    [60] = 750764,
    [59] = 632112,
    [58] = 613460,
    [57] = 594808,
    [56] = 576156,
    [55] = 557504,
    [54] = 538852,
    [53] = 520200,
    [52] = 501548,
    [51] = 482896,
    [50] = 464244,
    [49] = 445592,
    [48] = 426940,
    [47] = 408288,
    [46] = 389636,
    [45] = 370984,
    [44] = 352332,
    [43] = 333680,
    [42] = 315028,
    [41] = 296376,
    [40] = 277724,
    [39] = 209072,
    [38] = 190420,
    [37] = 171768,
    [36] = 153116,
    [35] = 137464,
    [34] = 126978,
    [33] = 115379,
    [32] = 106738,
    [31] = 100054,
    [30] = 94660,
    [29] = 90266,
    [28] = 86872,
    [27] = 84638,
    [26] = 82244,
    [25] = 69850,
    [24] = 67456,
    [23] = 65062,
    [22] = 62668,
    [21] = 60274,
    [20] = 57880
  }
  if Baseparam[baselv] == nil then
    return 0
  end
  return Baseparam[baselv]
end

function CommonFun.CalcRiftBaseExp(lv, maxlv, difficulty, speed_per, ratio, raidtype)
  local calclv = lv
  local diffpara = 1
  if raidtype == 65 then
    if maxlv < calclv then
      calclv = maxlv
    end
    if difficulty == 2 then
      diffpara = 1.1
    elseif difficulty == 3 or difficulty == 4 then
      diffpara = 1.2
    end
  end
  local BaseExp = math.floor(CommonFun.GetBaseParam(calclv) * speed_per * diffpara * ratio)
  if BaseExp < 0 then
    return 0
  end
  return BaseExp
end

function CommonFun.calcRiftRewardRatio(raidTimes)
  local Rate = 3
  if raidTimes ~= 1 then
    Rate = 1
  end
  return Rate
end

function CommonFun.CalcCrackEquipRefineLv()
  local a = {
    [0] = 500,
    [1] = 500,
    [2] = 1000,
    [3] = 1000,
    [4] = 1000,
    [5] = 2400,
    [6] = 2000,
    [7] = 1000,
    [8] = 450,
    [9] = 100,
    [10] = 50
  }
  local weight = 0
  for k, v in pairs(a) do
    weight = weight + v
    a[k] = weight
  end
  local randnum = math.random(1, weight)
  for k, v in pairs(a) do
    if v >= randnum then
      return k
    end
  end
  return 0
end

function CommonFun.calcRiftRewardExtraRatio(monthcard)
  local A = 0
  if monthcard == true then
    A = 0.33
  end
  return A
end

function CommonFun.CalcBossSceneEquipRefineLv()
  local a = {
    [0] = 10000,
    [5] = 0,
    [6] = 0,
    [7] = 0,
    [8] = 0
  }
  local weight = 0
  for k, v in pairs(a) do
    weight = weight + v
    a[k] = weight
  end
  local randnum = math.random(1, weight)
  for k, v in pairs(a) do
    if v >= randnum then
      return k
    end
  end
  return 0
end

function CommonFun.GetRefineTicketType(isNew, equipType, hasDecomposeID)
  if isNew == true then
    local isNewTypes = {
      [2] = true,
      [3] = true,
      [4] = true,
      [5] = true,
      [6] = true,
      [16] = true,
      [17] = true,
      [18] = true,
      [19] = true
    }
    if isNewTypes[equipType] ~= nil then
      return 10001
    end
    return 0
  end
  local headTypes = {
    [8] = true,
    [9] = true,
    [10] = true,
    [11] = true,
    [13] = true
  }
  if headTypes[equipType] ~= nil then
    return 10002
  end
  local attackTypes = {
    [1] = true,
    [6] = true
  }
  if attackTypes[equipType] ~= nil then
    if hasDecomposeID == true then
      return 10003
    else
      return 10004
    end
  end
  local defenseTypes = {
    [2] = true,
    [3] = true,
    [4] = true,
    [5] = true,
    [16] = true,
    [17] = true,
    [18] = true,
    [19] = true
  }
  if defenseTypes[equipType] ~= nil then
    if hasDecomposeID == true then
      return 10005
    else
      return 10006
    end
  end
  return 0
end

function CommonFun.calcBossSceneRollNum(bossType, count)
  local res = 0
  if bossType == 1 then
    if count < 2 then
      res = 15
    else
      res = 30
    end
  elseif bossType == 2 then
    if count < 4 then
      res = 10
    else
      res = 20
    end
  end
  return res
end

function CommonFun.calcTradeTax(price)
  local tax = 9
  if price <= 1000000 then
    return 9
  elseif price <= 5000000 then
    return 10
  elseif price <= 10000000 then
    return 11
  elseif price <= 25000000 then
    return 12
  elseif price <= 50000000 then
    return 13
  elseif price <= 100000000 then
    return 14
  else
    return 15
  end
end

function CommonFun.calcTradeGiveFee(totalPrice, bg)
  local fee = totalPrice
  if totalPrice <= 1000000 then
    fee = 10000
  elseif totalPrice <= 5000000 then
    fee = 50000
  else
    fee = 100000
  end
  local extra = 0
  if GameConfig.Exchange.SendMoney[bg] == nil then
    extra = 0
  else
    extra = GameConfig.Exchange.SendMoney[bg].price
  end
  return fee + extra
end

function CommonFun.calcExchangePendingCount(srcUser)
  local skilllv_1 = srcUser:GetLernedSkillLevel(262)
  return skilllv_1 ~= nil and skilllv_1
end

function CommonFun.calcProduceRate(srcUser, etype, category, composeid)
  if srcUser == nil then
    return 0
  end
  if etype == 3 and category == 5 then
    local skilllv_1 = srcUser:GetLernedSkillLevel(261)
    local skilllv_2 = srcUser:GetLernedSkillLevel(214)
    local skilllv_3 = srcUser:GetLernedSkillLevel(221)
    local Dex = srcUser:GetProperty("Dex")
    local Luk = srcUser:GetProperty("Luk")
    local A1 = skilllv_1 * 75 + 450 + skilllv_2 * 50 + (Dex / 8 + Luk / 8) * (1 + skilllv_3 * 0.05) * 100
    if 8000 <= A1 then
      A1 = 8000
    end
    if skilllv_1 <= 0 then
      A1 = 0
    end
    return A1
  end
  if etype == 3 and category == 4 then
    local skilllv_3 = srcUser:GetLernedSkillLevel(221)
    local skilllv_6 = srcUser:GetLernedSkillLevel(218)
    local Dex = srcUser:GetProperty("Dex")
    local Luk = srcUser:GetProperty("Luk")
    local A2 = skilllv_6 * 100 + 700 + (Dex / 8 + Luk / 8) * (1 + skilllv_3 * 0.05) * 100
    if 8500 <= A2 then
      A2 = 8500
    end
    if skilllv_6 <= 0 then
      A2 = 0
    end
    return A2
  end
  if etype == 3 and category == 3 then
    local skilllv_3 = srcUser:GetLernedSkillLevel(221)
    local skilllv_4 = srcUser:GetLernedSkillLevel(269)
    local Dex = srcUser:GetProperty("Dex")
    local Luk = srcUser:GetProperty("Luk")
    local A3 = skilllv_4 * 220 + 1810 + (Dex / 8 + Luk / 8) * (1 + skilllv_3 * 0.05) * 100
    if 9000 <= A3 then
      A3 = 9000
    end
    if skilllv_4 <= 0 then
      A3 = 0
    end
    return A3
  end
  if etype == 4 and (category == 8 or category == 9) then
    local BaseRate = {
      [1310] = 5000,
      [1320] = 5000,
      [1330] = 5000,
      [1340] = 3000,
      [1350] = 3000,
      [1360] = 3000,
      [1370] = 3000,
      [1380] = 5000,
      [1390] = 5000,
      [1400] = 0
    }
    local skilllv_5 = srcUser:GetLernedSkillLevel(418)
    local skilllv_6 = srcUser:GetLernedSkillLevel(419)
    local Dex = srcUser:GetProperty("Dex")
    local Luk = srcUser:GetProperty("Luk")
    local AttrRate = (Dex + Luk) * 25
    if 3000 < AttrRate then
      AttrRate = 3000
    end
    if BaseRate[composeid] == nil then
      BaseRate[composeid] = 0
    end
    local A4 = BaseRate[composeid] + skilllv_5 * 200 + skilllv_6 * 200 + AttrRate
    if 10000 < A4 then
      A4 = 10000
    end
    return A4
  end
  if etype == 5 and category == 11 then
    local BaseRate = {
      [1420] = 0,
      [1421] = 1000,
      [1422] = 2000,
      [1423] = 0,
      [1424] = 1000,
      [1425] = 500
    }
    local skilllv_fuwen = srcUser:GetLernedSkillLevel(1268)
    local Str = srcUser:GetProperty("Str")
    local Int = srcUser:GetProperty("Int")
    local Attr = Str * 5 + Int * 10
    if 2000 < Attr then
      Attr = 2000
    end
    if BaseRate[composeid] == nil then
      BaseRate[composeid] = 0
    end
    local A5 = BaseRate[composeid] + skilllv_fuwen * 1000 + Attr
    if 10000 < A5 then
      A5 = 10000
    end
    return A5
  end
  if etype == 6 and category == 12 then
    local BaseRate = {
      [2010] = 1000,
      [2020] = 1000,
      [2030] = 1000,
      [2040] = 1000,
      [2050] = 500,
      [2060] = 500,
      [2070] = 0,
      [2080] = 1500
    }
    local skilllv_hkl = srcUser:GetLernedSkillLevel(2659)
    local Luk = srcUser:GetProperty("Luk")
    local Dex = srcUser:GetProperty("Dex")
    local Attr = Luk * 8 + Dex * 2
    if 6000 < Attr then
      Attr = 6000
    end
    if BaseRate[composeid] == nil then
      BaseRate[composeid] = 0
    end
    local A6 = BaseRate[composeid] + skilllv_hkl * 800 + Attr
    if 10000 < A6 then
      A6 = 10000
    end
    return A6
  end
  return 0
end

function CommonFun.calcTradeMaxPendingCout(srcUser)
  if srcUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(262)
  local basecount = 0
  if GameConfig.Exchange ~= nil then
    basecount = GameConfig.Exchange.MaxPendingCount
  end
  return basecount + skilllv_1
end

function CommonFun.calcBoothMaxPendingCout(srcUser)
  if srcUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(278)
  local skilllv_2 = srcUser:GetLernedSkillLevel(1477)
  local basecount = 0
  if GameConfig.Booth ~= nil then
    basecount = GameConfig.Booth.base_pending_count
  end
  return basecount + skilllv_1 + skilllv_2
end

function CommonFun.calcTradeBackMoneyPer(srcUser)
  if srcUser == nil then
    return 0
  end
  local skilllv_1 = srcUser:GetLernedSkillLevel(273)
  local A = skilllv_1 * 0.2 - 0.1
  if A <= 0 then
    A = 0
  end
  return A
end

function CommonFun.calcOrideconResearch(srcUser)
  local skilllv_1 = srcUser:GetLernedSkillLevel(270)
  local Dex = srcUser:GetProperty("Dex")
  local Luk = srcUser:GetProperty("Luk")
  local DL = Dex / 6000 + Luk / 6000
  if 0.05 <= DL then
    DL = 0.05
  end
  local Value = skilllv_1 * 0.005 + DL
  if skilllv_1 <= 0 then
    Value = 0
  end
  return Value ~= nil and Value
end

function CommonFun.calcCookSuccessRate(cookerlv, cooklv, cookhard, avgmateriallv, book_addrate)
  local base_successrate = GameConfig.Food and GameConfig.Food.base_successrate
  local s_rate = base_successrate and base_successrate[cookhard] or 0
  local reuslt = s_rate + book_addrate + avgmateriallv * 3 + cooklv * 3
  if cookerlv < cookhard then
    for i = 1, cookhard - cookerlv do
      reuslt = reuslt / 2
    end
  end
  reuslt = math.floor(reuslt * 10)
  return math.min(1000, reuslt)
end

function CommonFun.calcAuctionPrice(basePrice, level)
  if level == 1 then
    return 10
  elseif level == 2 then
    return 100
  elseif level == 3 then
    return 1000
  end
  return 10
end

function CommonFun.calcLotteryCost(tp, count)
  if tp == 2 then
    if count == 0 then
      return 10
    elseif count == 1 then
      return 15
    elseif count == 2 then
      return 20
    elseif count == 3 then
      return 35
    else
      return 50
    end
  end
  if tp == 3 then
    if count == 0 then
      return 15
    elseif count == 1 then
      return 15
    elseif count == 2 then
      return 15
    elseif count == 3 then
      return 30
    else
      return 30
    end
  end
  return 0
end

function CommonFun.calcRefineRecovery(itemid, refinelv, damge, type)
  local refineparam = {
    [1] = 0,
    [2] = 0,
    [3] = 0,
    [4] = 0,
    [5] = 1.2,
    [6] = 1.4,
    [7] = 1.6,
    [8] = 2.2,
    [9] = 3.4,
    [10] = 5,
    [11] = 7.4,
    [12] = 12.4,
    [13] = 19.8,
    [14] = 35.2,
    [15] = 57.4
  }
  local ItemCount = 0
  local CountRatio = 0
  if type == 1 then
    CountRatio = 3
  elseif type == 2 then
    CountRatio = 2
  else
    CountRatio = 2
  end
  if refineparam[refinelv] == nil then
    return 0
  else
    ItemCount = CountRatio * refineparam[refinelv]
    return math.floor(ItemCount)
  end
end

function CommonFun.calcAdventureGuideBaseExp(BaseLv)
  return 3024 * BaseLv
end

function CommonFun.calcAdventureGuideJobExp(BaseLv)
  return 1728 * BaseLv
end

local EquipSite_Fushou = 1
local EquipSite_Kuijia = 2
local EquipSite_Pijian = 3
local EquipSite_Xiezi = 4
local EquipSite_Shipin1 = 5
local EquipSite_Shipin2 = 6
local EquipSite_Wuqi = 7
local EquipSite_Toushi = 8
local EquipSite_Lianbu = 9
local EquipSite_Zuibu = 10
local EquipSite_Beibu = 11
local EquipSite_Weibu = 12
local AllEquipSites = {
  EquipSite_Fushou,
  EquipSite_Kuijia,
  EquipSite_Pijian,
  EquipSite_Xiezi,
  EquipSite_Shipin1,
  EquipSite_Shipin2,
  EquipSite_Wuqi,
  EquipSite_Toushi,
  EquipSite_Lianbu,
  EquipSite_Zuibu,
  EquipSite_Beibu,
  EquipSite_Weibu
}
local refineScore = {
  [1] = 20,
  [2] = 30,
  [3] = 40,
  [4] = 50,
  [5] = 100,
  [6] = 120,
  [7] = 140,
  [8] = 200,
  [9] = 220,
  [10] = 240,
  [11] = 300,
  [12] = 320,
  [13] = 340,
  [14] = 360,
  [15] = 400
}
local isMax = false

function CommonFun.calcPetAdventure_RefineEfficiency(srcUser)
  local refinelv, scores
  scores = 0
  for i = 1, #AllEquipSites do
    refinelv = srcUser:GetEquipedRefineLv(AllEquipSites[i])
    if 0 < refinelv then
      scores = scores + refineScore[refinelv]
    end
  end
  isMax = 4000 <= scores
  scores = math.min(scores, 4000)
  return scores / 10000, isMax
end

local enchantScore = {
  Vit = {allscore = 200, maxattr = 10},
  Str = {allscore = 200, maxattr = 10},
  Int = {allscore = 200, maxattr = 10},
  Luk = {allscore = 200, maxattr = 8},
  Dex = {allscore = 200, maxattr = 10},
  Agi = {allscore = 200, maxattr = 10},
  MaxHp = {allscore = 80, maxattr = 400},
  MaxSp = {allscore = 80, maxattr = 80},
  Atk = {allscore = 120, maxattr = 40},
  MAtk = {allscore = 120, maxattr = 40},
  Def = {allscore = 80, maxattr = 20},
  MDef = {allscore = 80, maxattr = 20},
  MaxHpPer = {allscore = 200, maxattr = 0.1},
  MaxSpPer = {allscore = 140, maxattr = 0.05},
  Hit = {allscore = 120, maxattr = 20},
  Flee = {allscore = 120, maxattr = 20},
  EquipASPD = {allscore = 160, maxattr = 0.04},
  Cri = {allscore = 160, maxattr = 10},
  CriRes = {allscore = 120, maxattr = 10},
  CriDamPer = {allscore = 160, maxattr = 0.1},
  CriDefPer = {allscore = 120, maxattr = 0.1},
  HealEncPer = {allscore = 160, maxattr = 0.05},
  BeHealEncPer = {allscore = 160, maxattr = 0.05},
  DamIncrease = {allscore = 200, maxattr = 0.04},
  DamReduc = {allscore = 200, maxattr = 0.04},
  SilenceDef = {allscore = 40, maxattr = 0.25},
  FreezeDef = {allscore = 40, maxattr = 0.25},
  StoneDef = {allscore = 40, maxattr = 0.25},
  StunDef = {allscore = 40, maxattr = 0.25},
  BlindDef = {allscore = 40, maxattr = 0.25},
  PoisonDef = {allscore = 40, maxattr = 0.25},
  SlowDef = {allscore = 40, maxattr = 0.25},
  ChaosDef = {allscore = 40, maxattr = 0.25},
  CurseDef = {allscore = 40, maxattr = 0.25}
}
local enchantgroupScore = {
  [1] = 100,
  [2] = 150,
  [3] = 200,
  [4] = 250
}

function CommonFun.calcPetAdventure_EnchantEfficiency(srcUser)
  local scores = 0
  for i = 1, #AllEquipSites do
    local attrs = srcUser:GetEnchantAttrsBySite(AllEquipSites[i])
    if attrs then
      for j = 1, #attrs do
        local attrType = attrs[j].typekey
        local attrValue = attrs[j].propVO.isPercent and attrs[j].value / 100 or attrs[j].value
        local configValue = enchantScore[attrType]
        if configValue then
          local cellValue = attrValue / configValue.maxattr >= 0.8 and attrValue / configValue.maxattr * configValue.allscore or 0
          scores = scores + cellValue
        end
      end
    end
    local combineEff = srcUser:GetCombineEffectsBySite(AllEquipSites[i])
    if combineEff then
      for j = 1, #combineEff do
        local buffid = combineEff[j].buffid
        if buffid then
          local buffLv = buffid % 10
          if enchantgroupScore[buffLv] then
            scores = scores + enchantgroupScore[buffLv]
          end
        end
      end
    end
  end
  isMax = 3000 <= scores
  scores = math.min(scores, 3000)
  return scores / 10000, isMax
end

local title = {
  [1001] = 0,
  [1002] = 100,
  [1003] = 200,
  [1004] = 300,
  [1005] = 400,
  [1006] = 500,
  [1007] = 600,
  [1008] = 700,
  [1009] = 800,
  [1010] = 900
}

function CommonFun.calcPetAdventure_AdventureTitleEfficiency(srcUser)
  local adventureTitle = srcUser:GetAdventureTitle()
  if adventureTitle and 0 < adventureTitle then
    local value = title[adventureTitle]
    value = value and value / 10000 or 0
    isMax = 0.1 <= value
    value = math.min(value, 0.1)
    return value, isMax
  end
  return 0, false
end

function CommonFun.calcPetAdventure_XingpanEfficiency(srcUser)
  local points = srcUser:GetActiveAstrolabePoints()
  if 0 < points then
    isMax = 3000 <= points
    return math.min(points / 10000, 0.3), isMax
  end
  return 0, false
end

local headwear = {
  [1] = 4,
  [2] = 6,
  [3] = 10,
  [4] = 30
}
local card = {
  [1] = 5,
  [2] = 10,
  [3] = 20,
  [4] = 100
}

function CommonFun.calcPetAdventure_AdventureSavedHeadWearEfficiency(srcUser)
  local scores = 0
  for quality, score in pairs(headwear) do
    scores = scores + srcUser:GetAdventureSavedHeadWear(quality) * score
  end
  isMax = 4000 <= scores
  return math.min(scores / 10000, 0.4), isMax
end

function CommonFun.calcPetAdventure_AdventureSavedCardEfficiency(srcUser)
  local scores = 0
  for quality, score in pairs(card) do
    scores = scores + srcUser:GetAdventureSavedCard(quality) * score
  end
  isMax = 4000 <= scores
  return math.min(scores / 10000, 0.4), isMax
end

function CommonFun.calcGuildBuildingMaterialItemCount(itemcount, submitcount)
  if submitcount == 0 then
    return itemcount
  elseif submitcount == 1 then
    return itemcount
  elseif submitcount == 2 then
    return itemcount
  elseif submitcount == 3 then
    return itemcount * 2
  elseif submitcount == 4 then
    return itemcount * 2
  elseif submitcount == 5 then
    return itemcount * 3
  elseif submitcount == 6 then
    return itemcount * 4
  end
  return itemcount * 4
end

function CommonFun.calcArtifactMaterialItemCount(type, num, count)
  if type == 1 then
    return num
  elseif type == 2 then
    if count == 0 then
      return num
    elseif count == 1 then
      return num
    elseif count == 2 then
      return math.ceil(num * 1.5)
    else
      return num * 2
    end
  elseif count == 0 then
    return num
  elseif count == 1 then
    return num
  elseif count == 2 then
    return math.ceil(num * 1.5)
  else
    return num * 2
  end
end

function CommonFun.calcValidDFSPNum(maxjoblv, limitnum, packageown)
  if 160 < maxjoblv then
    return 0
  elseif maxjoblv <= 133 then
    return limitnum - packageown
  else
    return limitnum - (maxjoblv - 133) * 3 - packageown
  end
end
